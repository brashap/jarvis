
c:/Users/IoTPa/Documents/jarvis/PlantWater/target/1.5.0/argon/PlantWater.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000080b0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000dc0d0  000dc0d0  0000c0d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000dc0d8  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000cc  2003e0a4  000dc0dc  0001e0a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000680  2003e170  2003e170  0002e170  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000dc1a8  000dc1a8  0002c1a8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000dc1d0  000dc1d0  0002c1d0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00115d42  00000000  00000000  0002c1d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00015f46  00000000  00000000  00141f16  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00027420  00000000  00000000  00157e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002fd8  00000000  00000000  0017f27c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000059c8  00000000  00000000  00182254  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003d2d7  00000000  00000000  00187c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000362d6  00000000  00000000  001c4ef3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    001106aa  00000000  00000000  001fb1c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000f4b0  00000000  00000000  0030b874  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f006 fd61 	bl	daaf8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f006 fd81 	bl	dab44 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e0a4 	.word	0x2003e0a4
   d404c:	000dc0dc 	.word	0x000dc0dc
   d4050:	2003e170 	.word	0x2003e170
   d4054:	2003e170 	.word	0x2003e170
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f002 fee7 	bl	d6e30 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000dc0c8 	.word	0x000dc0c8
   d4084:	000dc080 	.word	0x000dc080

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b838 	b.w	d40fc <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 fa8f 	bl	d45b0 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f002 be8d 	b.w	d6db4 <_post_loop>

000d409a <_Znwj>:
   d409a:	f002 b8c1 	b.w	d6220 <malloc>

000d409e <_ZdlPv>:
   d409e:	f002 b8c7 	b.w	d6230 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f002 b8c5 	b.w	d6230 <free>
	...

000d40a8 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40aa:	4a03      	ldr	r2, [pc, #12]	; (d40b8 <__cxa_pure_virtual+0x10>)
   d40ac:	2100      	movs	r1, #0
   d40ae:	200c      	movs	r0, #12
   d40b0:	f001 ffda 	bl	d6068 <panic_>
   d40b4:	e7fe      	b.n	d40b4 <__cxa_pure_virtual+0xc>
   d40b6:	bf00      	nop
   d40b8:	000d5da9 	.word	0x000d5da9

000d40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40bc:	7800      	ldrb	r0, [r0, #0]
   d40be:	fab0 f080 	clz	r0, r0
   d40c2:	0940      	lsrs	r0, r0, #5
   d40c4:	4770      	bx	lr

000d40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c6:	2301      	movs	r3, #1
   d40c8:	7003      	strb	r3, [r0, #0]
   d40ca:	4770      	bx	lr

000d40cc <_ZN19Adafruit_MQTT_SPARKD1Ev>:


// MQTT client implementation for a generic Arduino Client interface.  Can work
// with almost all Arduino network hardware like ethernet shield, wifi shield,
// and even other platforms like ESP8266.
class Adafruit_MQTT_SPARK : public Adafruit_MQTT {
   d40cc:	4770      	bx	lr
	...

000d40d0 <_ZN16JsonWriterStaticILj256EED1Ev>:
 * variable.
 *
 * @param BUFFER_SIZE The size of the buffer to reserve.
 */
template <size_t BUFFER_SIZE>
class JsonWriterStatic : public JsonWriter {
   d40d0:	b510      	push	{r4, lr}
   d40d2:	4b03      	ldr	r3, [pc, #12]	; (d40e0 <_ZN16JsonWriterStaticILj256EED1Ev+0x10>)
   d40d4:	6003      	str	r3, [r0, #0]
   d40d6:	4604      	mov	r4, r0
   d40d8:	f000 fc46 	bl	d4968 <_ZN10JsonWriterD1Ev>
   d40dc:	4620      	mov	r0, r4
   d40de:	bd10      	pop	{r4, pc}
   d40e0:	000db518 	.word	0x000db518

000d40e4 <_ZN16JsonWriterStaticILj256EED0Ev>:
   d40e4:	b510      	push	{r4, lr}
   d40e6:	4604      	mov	r4, r0
   d40e8:	f7ff fff2 	bl	d40d0 <_ZN16JsonWriterStaticILj256EED1Ev>
   d40ec:	4620      	mov	r0, r4
   d40ee:	f44f 7198 	mov.w	r1, #304	; 0x130
   d40f2:	f004 f903 	bl	d82fc <_ZdlPvj>
   d40f6:	4620      	mov	r0, r4
   d40f8:	bd10      	pop	{r4, pc}
	...

000d40fc <setup>:
int button;
int i;

int delayStart;

void setup() {
   d40fc:	b510      	push	{r4, lr}
  Serial.begin(9600);
   d40fe:	f003 fa71 	bl	d75e4 <_Z16_fetch_usbserialv>
   d4102:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4106:	f003 fa61 	bl	d75cc <_ZN9USBSerial5beginEl>
  pinMode(soilPin,INPUT);
   d410a:	4b36      	ldr	r3, [pc, #216]	; (d41e4 <setup+0xe8>)
  pinMode(pumpPin,OUTPUT);
   d410c:	4c36      	ldr	r4, [pc, #216]	; (d41e8 <setup+0xec>)

int delayStart;

void setup() {
  Serial.begin(9600);
  pinMode(soilPin,INPUT);
   d410e:	8818      	ldrh	r0, [r3, #0]
   d4110:	2100      	movs	r1, #0
   d4112:	f004 f831 	bl	d8178 <pinMode>
  pinMode(pumpPin,OUTPUT);
   d4116:	2101      	movs	r1, #1
   d4118:	8820      	ldrh	r0, [r4, #0]
   d411a:	f004 f82d 	bl	d8178 <pinMode>
  pinMode(D7,OUTPUT);
   d411e:	2101      	movs	r1, #1
   d4120:	2007      	movs	r0, #7
   d4122:	f004 f829 	bl	d8178 <pinMode>
  digitalWrite(pumpPin,LOW);
   d4126:	2100      	movs	r1, #0
   d4128:	8820      	ldrh	r0, [r4, #0]
   d412a:	f004 f836 	bl	d819a <digitalWrite>
  Time.zone(-6); // set timezone to MDT
   d412e:	eeb9 0a08 	vmov.f32	s0, #152	; 0xc0c00000 -6.0
   d4132:	f002 fd81 	bl	d6c38 <_ZN9TimeClass4zoneEf>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4136:	f002 f84b 	bl	d61d0 <spark_cloud_flag_connected>
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
    {
        if (!connected()) {
   d413a:	b110      	cbz	r0, d4142 <setup+0x46>
            return false;
        }
        return spark_sync_time(NULL);
   d413c:	2000      	movs	r0, #0
   d413e:	f002 f857 	bl	d61f0 <spark_sync_time>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d4142:	2300      	movs	r3, #0
   d4144:	2202      	movs	r2, #2
   d4146:	4929      	ldr	r1, [pc, #164]	; (d41ec <setup+0xf0>)
   d4148:	4829      	ldr	r0, [pc, #164]	; (d41f0 <setup+0xf4>)
   d414a:	f002 f831 	bl	d61b0 <spark_variable>
   d414e:	2300      	movs	r3, #0
   d4150:	2209      	movs	r2, #9
   d4152:	4928      	ldr	r1, [pc, #160]	; (d41f4 <setup+0xf8>)
   d4154:	4828      	ldr	r0, [pc, #160]	; (d41f8 <setup+0xfc>)
   d4156:	f002 f82b 	bl	d61b0 <spark_variable>
   d415a:	2300      	movs	r3, #0
   d415c:	2201      	movs	r2, #1
   d415e:	4927      	ldr	r1, [pc, #156]	; (d41fc <setup+0x100>)
   d4160:	4827      	ldr	r0, [pc, #156]	; (d4200 <setup+0x104>)
   d4162:	f002 f825 	bl	d61b0 <spark_variable>
  Particle.variable("Moisture", moist);
  Particle.variable("Temperature", temp);
  Particle.variable("Plant Watered", watered);

    // Setup MQTT subscription for onoff feed.
  mqtt.subscribe(&onoffbutton);
   d4166:	4927      	ldr	r1, [pc, #156]	; (d4204 <setup+0x108>)
   d4168:	4827      	ldr	r0, [pc, #156]	; (d4208 <setup+0x10c>)
   d416a:	f001 fb4f 	bl	d580c <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe>

// Initialize BME280
    Serial.println(F("BME280 test"));
   d416e:	f003 fa39 	bl	d75e4 <_Z16_fetch_usbserialv>
   d4172:	4926      	ldr	r1, [pc, #152]	; (d420c <setup+0x110>)
   d4174:	f002 fc1f 	bl	d69b6 <_ZN5Print7printlnEPK19__FlashStringHelper>
    
    status = bme.begin(0x76);
   d4178:	2176      	movs	r1, #118	; 0x76
   d417a:	4825      	ldr	r0, [pc, #148]	; (d4210 <setup+0x114>)
   d417c:	f001 f85a 	bl	d5234 <_ZN15Adafruit_BME2805beginEh>
   d4180:	4b24      	ldr	r3, [pc, #144]	; (d4214 <setup+0x118>)
   d4182:	6018      	str	r0, [r3, #0]
    if (!status)
   d4184:	bb60      	cbnz	r0, d41e0 <setup+0xe4>
    {
        Serial.println("Could not find a valid BME280 sensor, check wiring, address, sensor ID!");
   d4186:	f003 fa2d 	bl	d75e4 <_Z16_fetch_usbserialv>
   d418a:	4923      	ldr	r1, [pc, #140]	; (d4218 <setup+0x11c>)
   d418c:	f002 fc09 	bl	d69a2 <_ZN5Print7printlnEPKc>
        Serial.print("SensorID was: 0x");
   d4190:	f003 fa28 	bl	d75e4 <_Z16_fetch_usbserialv>
   d4194:	4921      	ldr	r1, [pc, #132]	; (d421c <setup+0x120>)
   d4196:	f002 fbf1 	bl	d697c <_ZN5Print5printEPKc>
        Serial.println(bme.sensorID(), 16);
   d419a:	f003 fa23 	bl	d75e4 <_Z16_fetch_usbserialv>
   d419e:	4604      	mov	r4, r0
   d41a0:	481b      	ldr	r0, [pc, #108]	; (d4210 <setup+0x114>)
   d41a2:	f001 f9e1 	bl	d5568 <_ZN15Adafruit_BME2808sensorIDEv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d41a6:	2210      	movs	r2, #16
   d41a8:	4601      	mov	r1, r0
   d41aa:	4620      	mov	r0, r4
   d41ac:	f002 fc05 	bl	d69ba <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d41b0:	4620      	mov	r0, r4
   d41b2:	f002 fbea 	bl	d698a <_ZN5Print7printlnEv>
        Serial.print("        ID of 0xFF probably means a bad address, a BMP 180 or BMP 085\n");
   d41b6:	f003 fa15 	bl	d75e4 <_Z16_fetch_usbserialv>
   d41ba:	4919      	ldr	r1, [pc, #100]	; (d4220 <setup+0x124>)
   d41bc:	f002 fbde 	bl	d697c <_ZN5Print5printEPKc>
        Serial.print("   ID of 0x56-0x58 represents a BMP 280,\n");
   d41c0:	f003 fa10 	bl	d75e4 <_Z16_fetch_usbserialv>
   d41c4:	4917      	ldr	r1, [pc, #92]	; (d4224 <setup+0x128>)
   d41c6:	f002 fbd9 	bl	d697c <_ZN5Print5printEPKc>
        Serial.print("        ID of 0x60 represents a BME 280.\n");
   d41ca:	f003 fa0b 	bl	d75e4 <_Z16_fetch_usbserialv>
   d41ce:	4916      	ldr	r1, [pc, #88]	; (d4228 <setup+0x12c>)
   d41d0:	f002 fbd4 	bl	d697c <_ZN5Print5printEPKc>
        Serial.print("        ID of 0x61 represents a BME 680.\n");
   d41d4:	f003 fa06 	bl	d75e4 <_Z16_fetch_usbserialv>
   d41d8:	4914      	ldr	r1, [pc, #80]	; (d422c <setup+0x130>)
   d41da:	f002 fbcf 	bl	d697c <_ZN5Print5printEPKc>
   d41de:	e7fe      	b.n	d41de <setup+0xe2>
   d41e0:	bd10      	pop	{r4, pc}
   d41e2:	bf00      	nop
   d41e4:	2003e0a8 	.word	0x2003e0a8
   d41e8:	2003e0ac 	.word	0x2003e0ac
   d41ec:	2003e370 	.word	0x2003e370
   d41f0:	000db795 	.word	0x000db795
   d41f4:	2003e1b8 	.word	0x2003e1b8
   d41f8:	000db777 	.word	0x000db777
   d41fc:	2003e328 	.word	0x2003e328
   d4200:	000db520 	.word	0x000db520
   d4204:	2003e2b8 	.word	0x2003e2b8
   d4208:	2003e1d0 	.word	0x2003e1d0
   d420c:	000db52e 	.word	0x000db52e
   d4210:	2003e32c 	.word	0x2003e32c
   d4214:	2003e2f4 	.word	0x2003e2f4
   d4218:	000db53a 	.word	0x000db53a
   d421c:	000db582 	.word	0x000db582
   d4220:	000db593 	.word	0x000db593
   d4224:	000db5da 	.word	0x000db5da
   d4228:	000db604 	.word	0x000db604
   d422c:	000db62e 	.word	0x000db62e

000d4230 <_Z10waterPlanti>:
          }
        }
    }    
}

bool waterPlant(int moistVal) {
   d4230:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(moistVal > threshold) {
   d4232:	4c16      	ldr	r4, [pc, #88]	; (d428c <_Z10waterPlanti+0x5c>)
   d4234:	4d16      	ldr	r5, [pc, #88]	; (d4290 <_Z10waterPlanti+0x60>)
   d4236:	6823      	ldr	r3, [r4, #0]
   d4238:	4283      	cmp	r3, r0
   d423a:	da1b      	bge.n	d4274 <_Z10waterPlanti+0x44>
    Serial.printlnf("The %i > %i, turning on pump", moist, threshold);
   d423c:	f003 f9d2 	bl	d75e4 <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d4240:	6823      	ldr	r3, [r4, #0]
   d4242:	4a14      	ldr	r2, [pc, #80]	; (d4294 <_Z10waterPlanti+0x64>)
   d4244:	9300      	str	r3, [sp, #0]
   d4246:	2101      	movs	r1, #1
   d4248:	682b      	ldr	r3, [r5, #0]
    delay(1000);
    digitalWrite(pumpPin,HIGH);
   d424a:	4c13      	ldr	r4, [pc, #76]	; (d4298 <_Z10waterPlanti+0x68>)
   d424c:	f002 fca3 	bl	d6b96 <_ZN5Print11printf_implEbPKcz>
}

bool waterPlant(int moistVal) {
  if(moistVal > threshold) {
    Serial.printlnf("The %i > %i, turning on pump", moist, threshold);
    delay(1000);
   d4250:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4254:	f002 fd60 	bl	d6d18 <delay>
    digitalWrite(pumpPin,HIGH);
   d4258:	2101      	movs	r1, #1
   d425a:	8820      	ldrh	r0, [r4, #0]
   d425c:	f003 ff9d 	bl	d819a <digitalWrite>
    delay(waterTime);
   d4260:	4b0e      	ldr	r3, [pc, #56]	; (d429c <_Z10waterPlanti+0x6c>)
   d4262:	6818      	ldr	r0, [r3, #0]
   d4264:	f002 fd58 	bl	d6d18 <delay>
    digitalWrite(pumpPin,LOW);
   d4268:	8820      	ldrh	r0, [r4, #0]
   d426a:	2100      	movs	r1, #0
   d426c:	f003 ff95 	bl	d819a <digitalWrite>
   d4270:	2001      	movs	r0, #1
   d4272:	e009      	b.n	d4288 <_Z10waterPlanti+0x58>
    return true;
  }
  else
  {
    Serial.printlnf("The %i < %i no water needed", moist, threshold);
   d4274:	f003 f9b6 	bl	d75e4 <_Z16_fetch_usbserialv>
   d4278:	6823      	ldr	r3, [r4, #0]
   d427a:	9300      	str	r3, [sp, #0]
   d427c:	4a08      	ldr	r2, [pc, #32]	; (d42a0 <_Z10waterPlanti+0x70>)
   d427e:	682b      	ldr	r3, [r5, #0]
   d4280:	2101      	movs	r1, #1
   d4282:	f002 fc88 	bl	d6b96 <_ZN5Print11printf_implEbPKcz>
    return false;
   d4286:	2000      	movs	r0, #0
  }
    
}
   d4288:	b003      	add	sp, #12
   d428a:	bd30      	pop	{r4, r5, pc}
   d428c:	2003e0a4 	.word	0x2003e0a4
   d4290:	2003e370 	.word	0x2003e370
   d4294:	000db658 	.word	0x000db658
   d4298:	2003e0ac 	.word	0x2003e0ac
   d429c:	2003e0b0 	.word	0x2003e0b0
   d42a0:	000db675 	.word	0x000db675

000d42a4 <_Z10printMoisti>:


void printMoist(int moistVal) {
   d42a4:	b570      	push	{r4, r5, r6, lr}
   d42a6:	b086      	sub	sp, #24
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   d42a8:	f002 fd25 	bl	d6cf6 <_ZN9TimeClass3nowEv>
  t = Time.timeStr(); 
   d42ac:	4c1f      	ldr	r4, [pc, #124]	; (d432c <_Z10printMoisti+0x88>)
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d42ae:	4e20      	ldr	r6, [pc, #128]	; (d4330 <_Z10printMoisti+0x8c>)
   d42b0:	4d20      	ldr	r5, [pc, #128]	; (d4334 <_Z10printMoisti+0x90>)
   d42b2:	4601      	mov	r1, r0
   d42b4:	a802      	add	r0, sp, #8
   d42b6:	f002 fcdb 	bl	d6c70 <_ZN9TimeClass7timeStrEl>
   d42ba:	a902      	add	r1, sp, #8
   d42bc:	4620      	mov	r0, r4
   d42be:	f002 fa9c 	bl	d67fa <_ZN6StringaSEOS_>
   d42c2:	a802      	add	r0, sp, #8
   d42c4:	f002 fa22 	bl	d670c <_ZN6StringD1Ev>
   d42c8:	4631      	mov	r1, r6
   d42ca:	4620      	mov	r0, r4
   d42cc:	2300      	movs	r3, #0
   d42ce:	2219      	movs	r2, #25
   d42d0:	f002 fad2 	bl	d6878 <_ZNK6String8getBytesEPhjj>
  t.toCharArray(currentTime,25);
  t2 = t.substring(11,19);
   d42d4:	4621      	mov	r1, r4
   d42d6:	4c18      	ldr	r4, [pc, #96]	; (d4338 <_Z10printMoisti+0x94>)
   d42d8:	2313      	movs	r3, #19
   d42da:	220b      	movs	r2, #11
   d42dc:	a802      	add	r0, sp, #8
   d42de:	f002 fae3 	bl	d68a8 <_ZNK6String9substringEjj>
   d42e2:	a902      	add	r1, sp, #8
   d42e4:	4620      	mov	r0, r4
   d42e6:	f002 fa88 	bl	d67fa <_ZN6StringaSEOS_>
   d42ea:	a802      	add	r0, sp, #8
   d42ec:	f002 fa0e 	bl	d670c <_ZN6StringD1Ev>
   d42f0:	2300      	movs	r3, #0
   d42f2:	2209      	movs	r2, #9
   d42f4:	4629      	mov	r1, r5
   d42f6:	4620      	mov	r0, r4
   d42f8:	f002 fabe 	bl	d6878 <_ZNK6String8getBytesEPhjj>
  t2.toCharArray(current,9);
  Serial.println(t2);
   d42fc:	f003 f972 	bl	d75e4 <_Z16_fetch_usbserialv>
   d4300:	6821      	ldr	r1, [r4, #0]
   d4302:	f002 fb4e 	bl	d69a2 <_ZN5Print7printlnEPKc>
  Serial.printf("At %s the moisture reading is %i \n",currentTime,moist);
   d4306:	f003 f96d 	bl	d75e4 <_Z16_fetch_usbserialv>
   d430a:	4b0c      	ldr	r3, [pc, #48]	; (d433c <_Z10printMoisti+0x98>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d430c:	4a0c      	ldr	r2, [pc, #48]	; (d4340 <_Z10printMoisti+0x9c>)
   d430e:	681b      	ldr	r3, [r3, #0]
   d4310:	9300      	str	r3, [sp, #0]
   d4312:	2100      	movs	r1, #0
   d4314:	4633      	mov	r3, r6
   d4316:	f002 fc3e 	bl	d6b96 <_ZN5Print11printf_implEbPKcz>
  //Serial.printf("At %s the moisture reading is %i \n",Time.timeStr().c_str(),moist);
  Serial.printf("The time is %s \n",current);
   d431a:	f003 f963 	bl	d75e4 <_Z16_fetch_usbserialv>
   d431e:	462b      	mov	r3, r5
   d4320:	4a08      	ldr	r2, [pc, #32]	; (d4344 <_Z10printMoisti+0xa0>)
   d4322:	2100      	movs	r1, #0
   d4324:	f002 fc37 	bl	d6b96 <_ZN5Print11printf_implEbPKcz>
}
   d4328:	b006      	add	sp, #24
   d432a:	bd70      	pop	{r4, r5, r6, pc}
   d432c:	2003e318 	.word	0x2003e318
   d4330:	2003e380 	.word	0x2003e380
   d4334:	2003e174 	.word	0x2003e174
   d4338:	2003e1c0 	.word	0x2003e1c0
   d433c:	2003e370 	.word	0x2003e370
   d4340:	000db691 	.word	0x000db691
   d4344:	000db6b4 	.word	0x000db6b4

000d4348 <_Z11printValuesv>:
  }
  Particle.publish("env-vals",jw.getBuffer(), PRIVATE);
}

void printValues()
{
   d4348:	b538      	push	{r3, r4, r5, lr}
    Serial.print("Temperature = ");
   d434a:	f003 f94b 	bl	d75e4 <_Z16_fetch_usbserialv>
   d434e:	492d      	ldr	r1, [pc, #180]	; (d4404 <_Z11printValuesv+0xbc>)
    Serial.print(bme.readTemperature());
   d4350:	4c2d      	ldr	r4, [pc, #180]	; (d4408 <_Z11printValuesv+0xc0>)
  Particle.publish("env-vals",jw.getBuffer(), PRIVATE);
}

void printValues()
{
    Serial.print("Temperature = ");
   d4352:	f002 fb13 	bl	d697c <_ZN5Print5printEPKc>
    Serial.print(bme.readTemperature());
   d4356:	f003 f945 	bl	d75e4 <_Z16_fetch_usbserialv>
   d435a:	4605      	mov	r5, r0
   d435c:	4620      	mov	r0, r4
   d435e:	f000 ff75 	bl	d524c <_ZN15Adafruit_BME28015readTemperatureEv>
   d4362:	2102      	movs	r1, #2
   d4364:	4628      	mov	r0, r5
   d4366:	f002 fc07 	bl	d6b78 <_ZN5Print5printEfi>
    Serial.println(" *C");
   d436a:	f003 f93b 	bl	d75e4 <_Z16_fetch_usbserialv>
   d436e:	4927      	ldr	r1, [pc, #156]	; (d440c <_Z11printValuesv+0xc4>)
   d4370:	f002 fb17 	bl	d69a2 <_ZN5Print7printlnEPKc>

    Serial.print("Pressure = ");
   d4374:	f003 f936 	bl	d75e4 <_Z16_fetch_usbserialv>
   d4378:	4925      	ldr	r1, [pc, #148]	; (d4410 <_Z11printValuesv+0xc8>)
   d437a:	f002 faff 	bl	d697c <_ZN5Print5printEPKc>

    Serial.print(bme.readPressure() / 100.0F);
   d437e:	f003 f931 	bl	d75e4 <_Z16_fetch_usbserialv>
   d4382:	4605      	mov	r5, r0
   d4384:	4620      	mov	r0, r4
   d4386:	f000 ff8f 	bl	d52a8 <_ZN15Adafruit_BME28012readPressureEv>
   d438a:	eddf 7a22 	vldr	s15, [pc, #136]	; d4414 <_Z11printValuesv+0xcc>
   d438e:	2102      	movs	r1, #2
   d4390:	ee80 0a27 	vdiv.f32	s0, s0, s15
   d4394:	4628      	mov	r0, r5
   d4396:	f002 fbef 	bl	d6b78 <_ZN5Print5printEfi>
    Serial.println(" hPa");
   d439a:	f003 f923 	bl	d75e4 <_Z16_fetch_usbserialv>
   d439e:	491e      	ldr	r1, [pc, #120]	; (d4418 <_Z11printValuesv+0xd0>)
   d43a0:	f002 faff 	bl	d69a2 <_ZN5Print7printlnEPKc>

    Serial.print("Approx. Altitude = ");
   d43a4:	f003 f91e 	bl	d75e4 <_Z16_fetch_usbserialv>
   d43a8:	491c      	ldr	r1, [pc, #112]	; (d441c <_Z11printValuesv+0xd4>)
   d43aa:	f002 fae7 	bl	d697c <_ZN5Print5printEPKc>
    Serial.print(bme.readAltitude(SEALEVELPRESSURE_HPA));
   d43ae:	f003 f919 	bl	d75e4 <_Z16_fetch_usbserialv>
   d43b2:	ed9f 0a1b 	vldr	s0, [pc, #108]	; d4420 <_Z11printValuesv+0xd8>
   d43b6:	4605      	mov	r5, r0
   d43b8:	4620      	mov	r0, r4
   d43ba:	f001 f89d 	bl	d54f8 <_ZN15Adafruit_BME28012readAltitudeEf>
   d43be:	2102      	movs	r1, #2
   d43c0:	4628      	mov	r0, r5
   d43c2:	f002 fbd9 	bl	d6b78 <_ZN5Print5printEfi>
    Serial.println(" m");
   d43c6:	f003 f90d 	bl	d75e4 <_Z16_fetch_usbserialv>
   d43ca:	4916      	ldr	r1, [pc, #88]	; (d4424 <_Z11printValuesv+0xdc>)
   d43cc:	f002 fae9 	bl	d69a2 <_ZN5Print7printlnEPKc>

    Serial.print("Humidity = ");
   d43d0:	f003 f908 	bl	d75e4 <_Z16_fetch_usbserialv>
   d43d4:	4914      	ldr	r1, [pc, #80]	; (d4428 <_Z11printValuesv+0xe0>)
   d43d6:	f002 fad1 	bl	d697c <_ZN5Print5printEPKc>
    Serial.print(bme.readHumidity());
   d43da:	f003 f903 	bl	d75e4 <_Z16_fetch_usbserialv>
   d43de:	4605      	mov	r5, r0
   d43e0:	4620      	mov	r0, r4
   d43e2:	f001 f83f 	bl	d5464 <_ZN15Adafruit_BME28012readHumidityEv>
   d43e6:	2102      	movs	r1, #2
   d43e8:	4628      	mov	r0, r5
   d43ea:	f002 fbc5 	bl	d6b78 <_ZN5Print5printEfi>
    Serial.println(" %");
   d43ee:	f003 f8f9 	bl	d75e4 <_Z16_fetch_usbserialv>
   d43f2:	490e      	ldr	r1, [pc, #56]	; (d442c <_Z11printValuesv+0xe4>)
   d43f4:	f002 fad5 	bl	d69a2 <_ZN5Print7printlnEPKc>

    Serial.println();
   d43f8:	f003 f8f4 	bl	d75e4 <_Z16_fetch_usbserialv>
   d43fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

    Serial.print("Humidity = ");
    Serial.print(bme.readHumidity());
    Serial.println(" %");

    Serial.println();
   d4400:	f002 bac3 	b.w	d698a <_ZN5Print7printlnEv>
   d4404:	000db6c5 	.word	0x000db6c5
   d4408:	2003e32c 	.word	0x2003e32c
   d440c:	000db6d4 	.word	0x000db6d4
   d4410:	000db6d8 	.word	0x000db6d8
   d4414:	42c80000 	.word	0x42c80000
   d4418:	000db6e4 	.word	0x000db6e4
   d441c:	000db6e9 	.word	0x000db6e9
   d4420:	447d5000 	.word	0x447d5000
   d4424:	000db6fd 	.word	0x000db6fd
   d4428:	000db700 	.word	0x000db700
   d442c:	000db70c 	.word	0x000db70c

000d4430 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4430:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4432:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4434:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d4436:	b17c      	cbz	r4, d4458 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4438:	6863      	ldr	r3, [r4, #4]
   d443a:	3b01      	subs	r3, #1
   d443c:	6063      	str	r3, [r4, #4]
   d443e:	b95b      	cbnz	r3, d4458 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d4440:	6823      	ldr	r3, [r4, #0]
   d4442:	4620      	mov	r0, r4
   d4444:	689b      	ldr	r3, [r3, #8]
   d4446:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4448:	68a3      	ldr	r3, [r4, #8]
   d444a:	3b01      	subs	r3, #1
   d444c:	60a3      	str	r3, [r4, #8]
   d444e:	b91b      	cbnz	r3, d4458 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4450:	6823      	ldr	r3, [r4, #0]
   d4452:	4620      	mov	r0, r4
   d4454:	68db      	ldr	r3, [r3, #12]
   d4456:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4458:	4628      	mov	r0, r5
   d445a:	bd38      	pop	{r3, r4, r5, pc}

000d445c <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d445c:	b510      	push	{r4, lr}
   d445e:	4b04      	ldr	r3, [pc, #16]	; (d4470 <_ZN9TCPClientD1Ev+0x14>)
   d4460:	4604      	mov	r4, r0
   d4462:	f840 3b18 	str.w	r3, [r0], #24
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4466:	f7ff ffe3 	bl	d4430 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d446a:	4620      	mov	r0, r4
   d446c:	bd10      	pop	{r4, pc}
   d446e:	bf00      	nop
   d4470:	000dbd44 	.word	0x000dbd44

000d4474 <_ZN9TCPClientD0Ev>:
   d4474:	b510      	push	{r4, lr}
   d4476:	4604      	mov	r4, r0
   d4478:	f7ff fff0 	bl	d445c <_ZN9TCPClientD1Ev>
   d447c:	4620      	mov	r0, r4
   d447e:	211c      	movs	r1, #28
   d4480:	f003 ff3c 	bl	d82fc <_ZdlPvj>
   d4484:	4620      	mov	r0, r4
   d4486:	bd10      	pop	{r4, pc}

000d4488 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>:
	 *
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
   d4488:	b538      	push	{r3, r4, r5, lr}
   d448a:	4604      	mov	r4, r0
   d448c:	ed2d 8b02 	vpush	{d8}
   d4490:	460d      	mov	r5, r1
   d4492:	eeb0 8a40 	vmov.f32	s16, s0
		insertCheckSeparator();
   d4496:	f000 fb6f 	bl	d4b78 <_ZN10JsonWriter20insertCheckSeparatorEv>
	 * @brief Inserts a quoted string value. This escapes special characters and encodes utf-8.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const char *value) { insertString(value, true); }
   d449a:	4629      	mov	r1, r5
   d449c:	4620      	mov	r0, r4
   d449e:	2201      	movs	r2, #1
   d44a0:	f000 fade 	bl	d4a60 <_ZN10JsonWriter12insertStringEPKcb>
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
   d44a4:	4620      	mov	r0, r4
   d44a6:	213a      	movs	r1, #58	; 0x3a
   d44a8:	f000 fa8e 	bl	d49c8 <_ZN10JsonWriter10insertCharEc>
		insertValue(value);
   d44ac:	eeb0 0a48 	vmov.f32	s0, s16
	}
   d44b0:	ecbd 8b02 	vpop	{d8}
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
		insertValue(value);
   d44b4:	4620      	mov	r0, r4
	}
   d44b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
		insertValue(value);
   d44ba:	f000 bb8d 	b.w	d4bd8 <_ZN10JsonWriter11insertValueEf>
	...

000d44c0 <_Z18createEventPayLoadifffb>:
  Serial.printf("At %s the moisture reading is %i \n",currentTime,moist);
  //Serial.printf("At %s the moisture reading is %i \n",Time.timeStr().c_str(),moist);
  Serial.printf("The time is %s \n",current);
}

void createEventPayLoad(int moistValue, float tempValue, float presValue, float humValue, bool waterED) {
   d44c0:	b530      	push	{r4, r5, lr}
   d44c2:	ed2d 8b04 	vpush	{d8-d9}
   d44c6:	b0d3      	sub	sp, #332	; 0x14c
   d44c8:	4605      	mov	r5, r0
   d44ca:	460c      	mov	r4, r1
 * @param BUFFER_SIZE The size of the buffer to reserve.
 */
template <size_t BUFFER_SIZE>
class JsonWriterStatic : public JsonWriter {
public:
	explicit JsonWriterStatic() : JsonWriter(staticBuffer, BUFFER_SIZE) {};
   d44cc:	f44f 7280 	mov.w	r2, #256	; 0x100
   d44d0:	a912      	add	r1, sp, #72	; 0x48
   d44d2:	a806      	add	r0, sp, #24
   d44d4:	eef0 8a60 	vmov.f32	s17, s1
   d44d8:	eeb0 8a41 	vmov.f32	s16, s2
   d44dc:	eeb0 9a40 	vmov.f32	s18, s0
   d44e0:	f000 fa60 	bl	d49a4 <_ZN10JsonWriterC1EPcj>
   d44e4:	4b29      	ldr	r3, [pc, #164]	; (d458c <_Z18createEventPayLoadifffb+0xcc>)
   d44e6:	9306      	str	r3, [sp, #24]
	void init();

	/**
	 * @brief Start a new JSON object. Make sure you finish it with finishObjectOrArray()
	 */
	bool startObject() { return startObjectOrArray('{', '}'); };
   d44e8:	227d      	movs	r2, #125	; 0x7d
   d44ea:	217b      	movs	r1, #123	; 0x7b
   d44ec:	a806      	add	r0, sp, #24
   d44ee:	f000 fb4e 	bl	d4b8e <_ZN10JsonWriter18startObjectOrArrayEcc>
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
   d44f2:	a806      	add	r0, sp, #24
   d44f4:	f000 fb40 	bl	d4b78 <_ZN10JsonWriter20insertCheckSeparatorEv>
	 * @brief Inserts a quoted string value. This escapes special characters and encodes utf-8.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const char *value) { insertString(value, true); }
   d44f8:	2201      	movs	r2, #1
   d44fa:	a806      	add	r0, sp, #24
   d44fc:	4924      	ldr	r1, [pc, #144]	; (d4590 <_Z18createEventPayLoadifffb+0xd0>)
   d44fe:	f000 faaf 	bl	d4a60 <_ZN10JsonWriter12insertStringEPKcb>
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
   d4502:	a806      	add	r0, sp, #24
   d4504:	213a      	movs	r1, #58	; 0x3a
   d4506:	f000 fa5f 	bl	d49c8 <_ZN10JsonWriter10insertCharEc>
	 * @brief Inserts an integer value.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separators between items.
	 */
	void insertValue(int value) { insertsprintf("%d", value); }
   d450a:	462a      	mov	r2, r5
   d450c:	a806      	add	r0, sp, #24
   d450e:	4921      	ldr	r1, [pc, #132]	; (d4594 <_Z18createEventPayLoadifffb+0xd4>)
   d4510:	f000 fa99 	bl	d4a46 <_ZN10JsonWriter13insertsprintfEPKcz>
  JsonWriterStatic<256> jw;
  {
    JsonWriterAutoObject obj(&jw);

    jw.insertKeyValue("Moisture", moistValue);
    jw.insertKeyValue("Temperature", tempValue);
   d4514:	eeb0 0a49 	vmov.f32	s0, s18
   d4518:	a806      	add	r0, sp, #24
   d451a:	491f      	ldr	r1, [pc, #124]	; (d4598 <_Z18createEventPayLoadifffb+0xd8>)
   d451c:	f7ff ffb4 	bl	d4488 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
    jw.insertKeyValue("Pressure", presValue);
   d4520:	eeb0 0a68 	vmov.f32	s0, s17
   d4524:	a806      	add	r0, sp, #24
   d4526:	491d      	ldr	r1, [pc, #116]	; (d459c <_Z18createEventPayLoadifffb+0xdc>)
   d4528:	f7ff ffae 	bl	d4488 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
    jw.insertKeyValue("Humidity", humValue);
   d452c:	eeb0 0a48 	vmov.f32	s0, s16
   d4530:	491b      	ldr	r1, [pc, #108]	; (d45a0 <_Z18createEventPayLoadifffb+0xe0>)
   d4532:	a806      	add	r0, sp, #24
   d4534:	f7ff ffa8 	bl	d4488 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
   d4538:	a806      	add	r0, sp, #24
   d453a:	f000 fb1d 	bl	d4b78 <_ZN10JsonWriter20insertCheckSeparatorEv>
	 * @brief Inserts a quoted string value. This escapes special characters and encodes utf-8.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const char *value) { insertString(value, true); }
   d453e:	2201      	movs	r2, #1
   d4540:	a806      	add	r0, sp, #24
   d4542:	4918      	ldr	r1, [pc, #96]	; (d45a4 <_Z18createEventPayLoadifffb+0xe4>)
   d4544:	f000 fa8c 	bl	d4a60 <_ZN10JsonWriter12insertStringEPKcb>
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
   d4548:	a806      	add	r0, sp, #24
   d454a:	213a      	movs	r1, #58	; 0x3a
   d454c:	f000 fa3c 	bl	d49c8 <_ZN10JsonWriter10insertCharEc>
		insertValue(value);
   d4550:	4621      	mov	r1, r4
   d4552:	a806      	add	r0, sp, #24
   d4554:	f000 fb34 	bl	d4bc0 <_ZN10JsonWriter11insertValueEb>

	/**
	 * @brief End the object
	 */
	~JsonWriterAutoObject() {
		jw->finishObjectOrArray();
   d4558:	a806      	add	r0, sp, #24
   d455a:	f000 fa43 	bl	d49e4 <_ZN10JsonWriter19finishObjectOrArrayEv>
   d455e:	9b07      	ldr	r3, [sp, #28]
   d4560:	9303      	str	r3, [sp, #12]
   d4562:	4b11      	ldr	r3, [pc, #68]	; (d45a8 <_Z18createEventPayLoadifffb+0xe8>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4564:	9a03      	ldr	r2, [sp, #12]
   d4566:	781b      	ldrb	r3, [r3, #0]
   d4568:	4910      	ldr	r1, [pc, #64]	; (d45ac <_Z18createEventPayLoadifffb+0xec>)
   d456a:	f88d 3000 	strb.w	r3, [sp]
   d456e:	a804      	add	r0, sp, #16
   d4570:	233c      	movs	r3, #60	; 0x3c
   d4572:	f002 fdcb 	bl	d710c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4576:	a805      	add	r0, sp, #20
   d4578:	f7ff ff5a 	bl	d4430 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  //Serial.printf("At %s the moisture reading is %i \n",Time.timeStr().c_str(),moist);
  Serial.printf("The time is %s \n",current);
}

void createEventPayLoad(int moistValue, float tempValue, float presValue, float humValue, bool waterED) {
  JsonWriterStatic<256> jw;
   d457c:	a806      	add	r0, sp, #24
   d457e:	f7ff fda7 	bl	d40d0 <_ZN16JsonWriterStaticILj256EED1Ev>
    jw.insertKeyValue("Pressure", presValue);
    jw.insertKeyValue("Humidity", humValue);
    jw.insertKeyValue("Plant Watered", waterED);
  }
  Particle.publish("env-vals",jw.getBuffer(), PRIVATE);
}
   d4582:	b053      	add	sp, #332	; 0x14c
   d4584:	ecbd 8b04 	vpop	{d8-d9}
   d4588:	bd30      	pop	{r4, r5, pc}
   d458a:	bf00      	nop
   d458c:	000db518 	.word	0x000db518
   d4590:	000db795 	.word	0x000db795
   d4594:	000dbd9c 	.word	0x000dbd9c
   d4598:	000db777 	.word	0x000db777
   d459c:	000db7c8 	.word	0x000db7c8
   d45a0:	000db7e3 	.word	0x000db7e3
   d45a4:	000db520 	.word	0x000db520
   d45a8:	2003e2f0 	.word	0x2003e2f0
   d45ac:	000db70f 	.word	0x000db70f

000d45b0 <loop>:
            ;
    }

}

void loop() {
   d45b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  moist = analogRead(soilPin);
   d45b4:	4b7a      	ldr	r3, [pc, #488]	; (d47a0 <loop+0x1f0>)
   d45b6:	4c7b      	ldr	r4, [pc, #492]	; (d47a4 <loop+0x1f4>)
   d45b8:	8818      	ldrh	r0, [r3, #0]
  watered = waterPlant(moist);
   d45ba:	4d7b      	ldr	r5, [pc, #492]	; (d47a8 <loop+0x1f8>)

  temp = (bme.readTemperature()*(9.0/5.0))+32;
   d45bc:	4e7b      	ldr	r6, [pc, #492]	; (d47ac <loop+0x1fc>)
  pres = bme.readPressure() / 100.0F;
   d45be:	4f7c      	ldr	r7, [pc, #496]	; (d47b0 <loop+0x200>)
            ;
    }

}

void loop() {
   d45c0:	b08b      	sub	sp, #44	; 0x2c
  moist = analogRead(soilPin);
   d45c2:	f003 fe16 	bl	d81f2 <analogRead>
   d45c6:	6020      	str	r0, [r4, #0]
  watered = waterPlant(moist);
   d45c8:	f7ff fe32 	bl	d4230 <_Z10waterPlanti>
   d45cc:	7028      	strb	r0, [r5, #0]

  temp = (bme.readTemperature()*(9.0/5.0))+32;
   d45ce:	4879      	ldr	r0, [pc, #484]	; (d47b4 <loop+0x204>)
   d45d0:	f000 fe3c 	bl	d524c <_ZN15Adafruit_BME28015readTemperatureEv>
   d45d4:	ee10 0a10 	vmov	r0, s0
   d45d8:	f005 fa8a 	bl	d9af0 <__aeabi_f2d>
   d45dc:	a36e      	add	r3, pc, #440	; (adr r3, d4798 <loop+0x1e8>)
   d45de:	e9d3 2300 	ldrd	r2, r3, [r3]
   d45e2:	f005 fad9 	bl	d9b98 <__aeabi_dmul>
   d45e6:	2200      	movs	r2, #0
   d45e8:	4b73      	ldr	r3, [pc, #460]	; (d47b8 <loop+0x208>)
   d45ea:	f005 f923 	bl	d9834 <__adddf3>
   d45ee:	e9c6 0100 	strd	r0, r1, [r6]
  pres = bme.readPressure() / 100.0F;
   d45f2:	4870      	ldr	r0, [pc, #448]	; (d47b4 <loop+0x204>)
   d45f4:	f000 fe58 	bl	d52a8 <_ZN15Adafruit_BME28012readPressureEv>
   d45f8:	eddf 7a70 	vldr	s15, [pc, #448]	; d47bc <loop+0x20c>
   d45fc:	ee80 7a27 	vdiv.f32	s14, s0, s15
   d4600:	46b8      	mov	r8, r7
   d4602:	ee17 0a10 	vmov	r0, s14
   d4606:	f005 fa73 	bl	d9af0 <__aeabi_f2d>
   d460a:	e9c7 0100 	strd	r0, r1, [r7]
  hum = bme.readHumidity();
   d460e:	4869      	ldr	r0, [pc, #420]	; (d47b4 <loop+0x204>)
   d4610:	f000 ff28 	bl	d5464 <_ZN15Adafruit_BME28012readHumidityEv>
   d4614:	ee10 0a10 	vmov	r0, s0
   d4618:	f005 fa6a 	bl	d9af0 <__aeabi_f2d>
   d461c:	4b68      	ldr	r3, [pc, #416]	; (d47c0 <loop+0x210>)
   d461e:	e9c3 0100 	strd	r0, r1, [r3]
  printMoist(moist);
   d4622:	6820      	ldr	r0, [r4, #0]
   d4624:	f7ff fe3e 	bl	d42a4 <_Z10printMoisti>
  printValues();
   d4628:	f7ff fe8e 	bl	d4348 <_Z11printValuesv>

    if(mqtt.Update()) {
   d462c:	4865      	ldr	r0, [pc, #404]	; (d47c4 <loop+0x214>)
   d462e:	f001 f81d 	bl	d566c <_ZN19Adafruit_MQTT_SPARK6UpdateEv>
   d4632:	b168      	cbz	r0, d4650 <loop+0xa0>
       Htemp.publish(temp); 
   d4634:	2102      	movs	r1, #2
   d4636:	ed96 0b00 	vldr	d0, [r6]
   d463a:	4863      	ldr	r0, [pc, #396]	; (d47c8 <loop+0x218>)
   d463c:	f001 faee 	bl	d5c1c <_ZN21Adafruit_MQTT_Publish7publishEdh>
       Hmoist.publish(moist);
   d4640:	6821      	ldr	r1, [r4, #0]
   d4642:	4862      	ldr	r0, [pc, #392]	; (d47cc <loop+0x21c>)
   d4644:	f001 fae8 	bl	d5c18 <_ZN21Adafruit_MQTT_Publish7publishEi>
       Hwater.publish(watered);
   d4648:	7829      	ldrb	r1, [r5, #0]
   d464a:	4861      	ldr	r0, [pc, #388]	; (d47d0 <loop+0x220>)
   d464c:	f001 fae4 	bl	d5c18 <_ZN21Adafruit_MQTT_Publish7publishEi>
   d4650:	4f60      	ldr	r7, [pc, #384]	; (d47d4 <loop+0x224>)
    } 

  Particle.publish("Moisture", String(moist),PRIVATE);
   d4652:	6821      	ldr	r1, [r4, #0]
  createEventPayLoad(moist,temp,pres,hum,watered);

    for(i=0;i<10;i++) {
      Adafruit_MQTT_Subscribe *subscription;
        while ((subscription = mqtt.readSubscription(10000))) {  // do this loop for 10 seconds
          if (subscription == &onoffbutton) {
   d4654:	f8df 9194 	ldr.w	r9, [pc, #404]	; d47ec <loop+0x23c>
       Htemp.publish(temp); 
       Hmoist.publish(moist);
       Hwater.publish(watered);
    } 

  Particle.publish("Moisture", String(moist),PRIVATE);
   d4658:	220a      	movs	r2, #10
   d465a:	a806      	add	r0, sp, #24
   d465c:	f002 f8e6 	bl	d682c <_ZN6StringC1Eih>
   d4660:	783b      	ldrb	r3, [r7, #0]
   d4662:	9a06      	ldr	r2, [sp, #24]
   d4664:	495c      	ldr	r1, [pc, #368]	; (d47d8 <loop+0x228>)
   d4666:	f88d 3000 	strb.w	r3, [sp]
   d466a:	a804      	add	r0, sp, #16
   d466c:	233c      	movs	r3, #60	; 0x3c
   d466e:	f002 fd4d 	bl	d710c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4672:	a805      	add	r0, sp, #20
   d4674:	f7ff fedc 	bl	d4430 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4678:	a806      	add	r0, sp, #24
   d467a:	f002 f847 	bl	d670c <_ZN6StringD1Ev>
  Particle.publish("Temperature", String(temp),PRIVATE);
   d467e:	ed96 0b00 	vldr	d0, [r6]
   d4682:	2106      	movs	r1, #6
   d4684:	a806      	add	r0, sp, #24
   d4686:	f002 f8e4 	bl	d6852 <_ZN6StringC1Edi>
   d468a:	783b      	ldrb	r3, [r7, #0]
   d468c:	9a06      	ldr	r2, [sp, #24]
   d468e:	4953      	ldr	r1, [pc, #332]	; (d47dc <loop+0x22c>)
   d4690:	f88d 3000 	strb.w	r3, [sp]
   d4694:	a804      	add	r0, sp, #16
   d4696:	233c      	movs	r3, #60	; 0x3c
   d4698:	f002 fd38 	bl	d710c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d469c:	a805      	add	r0, sp, #20
   d469e:	f7ff fec7 	bl	d4430 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d46a2:	a806      	add	r0, sp, #24
   d46a4:	f002 f832 	bl	d670c <_ZN6StringD1Ev>
  Particle.publish("Plant Watered", String(watered),PRIVATE);
   d46a8:	220a      	movs	r2, #10
   d46aa:	7829      	ldrb	r1, [r5, #0]
   d46ac:	a806      	add	r0, sp, #24
   d46ae:	f002 f8bd 	bl	d682c <_ZN6StringC1Eih>
   d46b2:	783b      	ldrb	r3, [r7, #0]
   d46b4:	9a06      	ldr	r2, [sp, #24]
   d46b6:	494a      	ldr	r1, [pc, #296]	; (d47e0 <loop+0x230>)
   d46b8:	f88d 3000 	strb.w	r3, [sp]
   d46bc:	a804      	add	r0, sp, #16
   d46be:	233c      	movs	r3, #60	; 0x3c
   d46c0:	f002 fd24 	bl	d710c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d46c4:	a805      	add	r0, sp, #20
   d46c6:	f7ff feb3 	bl	d4430 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d46ca:	a806      	add	r0, sp, #24
   d46cc:	f002 f81e 	bl	d670c <_ZN6StringD1Ev>
  
  createEventPayLoad(moist,temp,pres,hum,watered);
   d46d0:	4b3b      	ldr	r3, [pc, #236]	; (d47c0 <loop+0x210>)
   d46d2:	782f      	ldrb	r7, [r5, #0]
   d46d4:	e9d3 0100 	ldrd	r0, r1, [r3]
   d46d8:	f005 fd56 	bl	da188 <__aeabi_d2f>
   d46dc:	9003      	str	r0, [sp, #12]
   d46de:	e9d8 0100 	ldrd	r0, r1, [r8]
   d46e2:	f005 fd51 	bl	da188 <__aeabi_d2f>
   d46e6:	9002      	str	r0, [sp, #8]
   d46e8:	e9d6 0100 	ldrd	r0, r1, [r6]
   d46ec:	f005 fd4c 	bl	da188 <__aeabi_d2f>
   d46f0:	4639      	mov	r1, r7
   d46f2:	ee00 0a10 	vmov	s0, r0
   d46f6:	ed9d 1a03 	vldr	s2, [sp, #12]
   d46fa:	eddd 0a02 	vldr	s1, [sp, #8]
   d46fe:	6820      	ldr	r0, [r4, #0]

    for(i=0;i<10;i++) {
   d4700:	4f38      	ldr	r7, [pc, #224]	; (d47e4 <loop+0x234>)

  Particle.publish("Moisture", String(moist),PRIVATE);
  Particle.publish("Temperature", String(temp),PRIVATE);
  Particle.publish("Plant Watered", String(watered),PRIVATE);
  
  createEventPayLoad(moist,temp,pres,hum,watered);
   d4702:	f7ff fedd 	bl	d44c0 <_Z18createEventPayLoadifffb>

    for(i=0;i<10;i++) {
   d4706:	2300      	movs	r3, #0
   d4708:	603b      	str	r3, [r7, #0]
   d470a:	683b      	ldr	r3, [r7, #0]
   d470c:	2b09      	cmp	r3, #9
   d470e:	dc3f      	bgt.n	d4790 <loop+0x1e0>
      Adafruit_MQTT_Subscribe *subscription;
        while ((subscription = mqtt.readSubscription(10000))) {  // do this loop for 10 seconds
   d4710:	f242 7110 	movw	r1, #10000	; 0x2710
   d4714:	482b      	ldr	r0, [pc, #172]	; (d47c4 <loop+0x214>)
   d4716:	f001 f895 	bl	d5844 <_ZN13Adafruit_MQTT16readSubscriptionEs>
   d471a:	b3a8      	cbz	r0, d4788 <loop+0x1d8>
          if (subscription == &onoffbutton) {
   d471c:	4548      	cmp	r0, r9
   d471e:	d1f7      	bne.n	d4710 <loop+0x160>
            button = atoi((char *)onoffbutton.lastread);   //convert adafruit string to int
   d4720:	f109 0005 	add.w	r0, r9, #5
   d4724:	f006 f8ca 	bl	da8bc <atoi>
   d4728:	f8df 80c4 	ldr.w	r8, [pc, #196]	; d47f0 <loop+0x240>
   d472c:	f8c8 0000 	str.w	r0, [r8]
            Serial.printf("Button State is %i \n",button);
   d4730:	f002 ff58 	bl	d75e4 <_Z16_fetch_usbserialv>
   d4734:	2100      	movs	r1, #0
   d4736:	f8d8 3000 	ldr.w	r3, [r8]
   d473a:	4a2b      	ldr	r2, [pc, #172]	; (d47e8 <loop+0x238>)
   d473c:	f002 fa2b 	bl	d6b96 <_ZN5Print11printf_implEbPKcz>
            if(button==1) {
   d4740:	f8d8 1000 	ldr.w	r1, [r8]
   d4744:	2901      	cmp	r1, #1
   d4746:	d1e3      	bne.n	d4710 <loop+0x160>
              digitalWrite(D7,1);
   d4748:	2007      	movs	r0, #7
   d474a:	f003 fd26 	bl	d819a <digitalWrite>
              watered = waterPlant(3000);
   d474e:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d4752:	f7ff fd6d 	bl	d4230 <_Z10waterPlanti>
   d4756:	7028      	strb	r0, [r5, #0]
                  if(mqtt.Update()) {
   d4758:	481a      	ldr	r0, [pc, #104]	; (d47c4 <loop+0x214>)
   d475a:	f000 ff87 	bl	d566c <_ZN19Adafruit_MQTT_SPARK6UpdateEv>
   d475e:	b170      	cbz	r0, d477e <loop+0x1ce>
                    Htemp.publish(temp); 
   d4760:	2102      	movs	r1, #2
   d4762:	ed96 0b00 	vldr	d0, [r6]
   d4766:	4818      	ldr	r0, [pc, #96]	; (d47c8 <loop+0x218>)
   d4768:	f001 fa58 	bl	d5c1c <_ZN21Adafruit_MQTT_Publish7publishEdh>
                    Hmoist.publish(moist);
   d476c:	6821      	ldr	r1, [r4, #0]
   d476e:	4817      	ldr	r0, [pc, #92]	; (d47cc <loop+0x21c>)
   d4770:	f001 fa52 	bl	d5c18 <_ZN21Adafruit_MQTT_Publish7publishEi>
                    Hwater.publish(watered);
   d4774:	4b0c      	ldr	r3, [pc, #48]	; (d47a8 <loop+0x1f8>)
   d4776:	4816      	ldr	r0, [pc, #88]	; (d47d0 <loop+0x220>)
   d4778:	7819      	ldrb	r1, [r3, #0]
   d477a:	f001 fa4d 	bl	d5c18 <_ZN21Adafruit_MQTT_Publish7publishEi>
                  } 
              digitalWrite(D7,0);
   d477e:	2100      	movs	r1, #0
   d4780:	2007      	movs	r0, #7
   d4782:	f003 fd0a 	bl	d819a <digitalWrite>
   d4786:	e7c3      	b.n	d4710 <loop+0x160>
  Particle.publish("Temperature", String(temp),PRIVATE);
  Particle.publish("Plant Watered", String(watered),PRIVATE);
  
  createEventPayLoad(moist,temp,pres,hum,watered);

    for(i=0;i<10;i++) {
   d4788:	683b      	ldr	r3, [r7, #0]
   d478a:	3301      	adds	r3, #1
   d478c:	603b      	str	r3, [r7, #0]
   d478e:	e7bc      	b.n	d470a <loop+0x15a>
              digitalWrite(D7,0);
            }
          }
        }
    }    
}
   d4790:	b00b      	add	sp, #44	; 0x2c
   d4792:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4796:	bf00      	nop
   d4798:	cccccccd 	.word	0xcccccccd
   d479c:	3ffccccc 	.word	0x3ffccccc
   d47a0:	2003e0a8 	.word	0x2003e0a8
   d47a4:	2003e370 	.word	0x2003e370
   d47a8:	2003e328 	.word	0x2003e328
   d47ac:	2003e1b8 	.word	0x2003e1b8
   d47b0:	2003e378 	.word	0x2003e378
   d47b4:	2003e32c 	.word	0x2003e32c
   d47b8:	40400000 	.word	0x40400000
   d47bc:	42c80000 	.word	0x42c80000
   d47c0:	2003e2b0 	.word	0x2003e2b0
   d47c4:	2003e1d0 	.word	0x2003e1d0
   d47c8:	2003e308 	.word	0x2003e308
   d47cc:	2003e1a8 	.word	0x2003e1a8
   d47d0:	2003e180 	.word	0x2003e180
   d47d4:	2003e2f0 	.word	0x2003e2f0
   d47d8:	000db795 	.word	0x000db795
   d47dc:	000db777 	.word	0x000db777
   d47e0:	000db520 	.word	0x000db520
   d47e4:	2003e2f8 	.word	0x2003e2f8
   d47e8:	000db718 	.word	0x000db718
   d47ec:	2003e2b8 	.word	0x2003e2b8
   d47f0:	2003e314 	.word	0x2003e314

000d47f4 <_ZN19Adafruit_MQTT_SPARKD0Ev>:
   d47f4:	b510      	push	{r4, lr}
   d47f6:	21d4      	movs	r1, #212	; 0xd4
   d47f8:	4604      	mov	r4, r0
   d47fa:	f003 fd7f 	bl	d82fc <_ZdlPvj>
   d47fe:	4620      	mov	r0, r4
   d4800:	bd10      	pop	{r4, pc}
	...

000d4804 <_GLOBAL__sub_I_TheClient>:
    Serial.print("Humidity = ");
    Serial.print(bme.readHumidity());
    Serial.println(" %");

    Serial.println();
   d4804:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4806:	4b31      	ldr	r3, [pc, #196]	; (d48cc <_GLOBAL__sub_I_TheClient+0xc8>)
#define AIO_USERNAME  "rashap"
#define AIO_KEY       "598169fa3ba94636941a330976e42e2c"


/************ Global State (you don't need to change this!) ***   ***************/ 
TCPClient TheClient; 
   d4808:	4e31      	ldr	r6, [pc, #196]	; (d48d0 <_GLOBAL__sub_I_TheClient+0xcc>)
   d480a:	4d32      	ldr	r5, [pc, #200]	; (d48d4 <_GLOBAL__sub_I_TheClient+0xd0>)
  {}

  Adafruit_MQTT_SPARK(TCPClient *client, const char *server, uint16_t port,
                       const char *user="", const char *pass=""):
    Adafruit_MQTT(server, port, user, pass),
    client(client)
   d480c:	4c32      	ldr	r4, [pc, #200]	; (d48d8 <_GLOBAL__sub_I_TheClient+0xd4>)

unsigned status;

char currentTime[25];
char current[9];
String t;
   d480e:	4f33      	ldr	r7, [pc, #204]	; (d48dc <_GLOBAL__sub_I_TheClient+0xd8>)
   d4810:	2201      	movs	r2, #1
   d4812:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4814:	f001 fa40 	bl	d5c98 <HAL_Pin_Map>
#define AIO_USERNAME  "rashap"
#define AIO_KEY       "598169fa3ba94636941a330976e42e2c"


/************ Global State (you don't need to change this!) ***   ***************/ 
TCPClient TheClient; 
   d4818:	4630      	mov	r0, r6
   d481a:	f003 fb8b 	bl	d7f34 <_ZN9TCPClientC1Ev>
   d481e:	462a      	mov	r2, r5
   d4820:	492f      	ldr	r1, [pc, #188]	; (d48e0 <_GLOBAL__sub_I_TheClient+0xdc>)
   d4822:	4630      	mov	r0, r6
   d4824:	f003 fd5c 	bl	d82e0 <__aeabi_atexit>
   d4828:	4b2e      	ldr	r3, [pc, #184]	; (d48e4 <_GLOBAL__sub_I_TheClient+0xe0>)
   d482a:	9300      	str	r3, [sp, #0]
   d482c:	f240 725b 	movw	r2, #1883	; 0x75b
   d4830:	4b2d      	ldr	r3, [pc, #180]	; (d48e8 <_GLOBAL__sub_I_TheClient+0xe4>)
   d4832:	492e      	ldr	r1, [pc, #184]	; (d48ec <_GLOBAL__sub_I_TheClient+0xe8>)
   d4834:	4620      	mov	r0, r4
   d4836:	f000 ff4f 	bl	d56d8 <_ZN13Adafruit_MQTTC1EPKctS1_S1_>
   d483a:	4b2d      	ldr	r3, [pc, #180]	; (d48f0 <_GLOBAL__sub_I_TheClient+0xec>)

// Setup the MQTT client class by passing in the WiFi client and MQTT server and login details. 
Adafruit_MQTT_SPARK mqtt(&TheClient,AIO_SERVER,AIO_SERVERPORT,AIO_USERNAME,AIO_KEY); 
   d483c:	492d      	ldr	r1, [pc, #180]	; (d48f4 <_GLOBAL__sub_I_TheClient+0xf0>)
   d483e:	6023      	str	r3, [r4, #0]
   d4840:	462a      	mov	r2, r5
   d4842:	4620      	mov	r0, r4
   d4844:	f8c4 60d0 	str.w	r6, [r4, #208]	; 0xd0
   d4848:	f003 fd4a 	bl	d82e0 <__aeabi_atexit>

/****************************** Feeds ***************************************/ 
// Setup a feed called 'voltage' for publishing. 
// Notice MQTT paths for AIO follow the form: <username>/feeds/<feedname> 

Adafruit_MQTT_Publish Htemp = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Home_Temperature");
   d484c:	4621      	mov	r1, r4
   d484e:	2300      	movs	r3, #0
   d4850:	4a29      	ldr	r2, [pc, #164]	; (d48f8 <_GLOBAL__sub_I_TheClient+0xf4>)
   d4852:	482a      	ldr	r0, [pc, #168]	; (d48fc <_GLOBAL__sub_I_TheClient+0xf8>)

unsigned status;

char currentTime[25];
char current[9];
String t;
   d4854:	4e2a      	ldr	r6, [pc, #168]	; (d4900 <_GLOBAL__sub_I_TheClient+0xfc>)

/****************************** Feeds ***************************************/ 
// Setup a feed called 'voltage' for publishing. 
// Notice MQTT paths for AIO follow the form: <username>/feeds/<feedname> 

Adafruit_MQTT_Publish Htemp = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Home_Temperature");
   d4856:	f001 f9cb 	bl	d5bf0 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish Hmoist = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Home_Moisture");
   d485a:	4621      	mov	r1, r4
   d485c:	2300      	movs	r3, #0
   d485e:	4a29      	ldr	r2, [pc, #164]	; (d4904 <_GLOBAL__sub_I_TheClient+0x100>)
   d4860:	4829      	ldr	r0, [pc, #164]	; (d4908 <_GLOBAL__sub_I_TheClient+0x104>)
   d4862:	f001 f9c5 	bl	d5bf0 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish Hwater = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Home_Water"); 
   d4866:	4621      	mov	r1, r4
   d4868:	2300      	movs	r3, #0
   d486a:	4a28      	ldr	r2, [pc, #160]	; (d490c <_GLOBAL__sub_I_TheClient+0x108>)
   d486c:	4828      	ldr	r0, [pc, #160]	; (d4910 <_GLOBAL__sub_I_TheClient+0x10c>)
   d486e:	f001 f9bf 	bl	d5bf0 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish Hpres = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Home_Pressure"); 
   d4872:	4621      	mov	r1, r4
   d4874:	2300      	movs	r3, #0
   d4876:	4a27      	ldr	r2, [pc, #156]	; (d4914 <_GLOBAL__sub_I_TheClient+0x110>)
   d4878:	4827      	ldr	r0, [pc, #156]	; (d4918 <_GLOBAL__sub_I_TheClient+0x114>)
   d487a:	f001 f9b9 	bl	d5bf0 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish Hhum = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Home_Humidity"); 
   d487e:	4621      	mov	r1, r4
   d4880:	2300      	movs	r3, #0
   d4882:	4a26      	ldr	r2, [pc, #152]	; (d491c <_GLOBAL__sub_I_TheClient+0x118>)
   d4884:	4826      	ldr	r0, [pc, #152]	; (d4920 <_GLOBAL__sub_I_TheClient+0x11c>)
   d4886:	f001 f9b3 	bl	d5bf0 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>

Adafruit_MQTT_Subscribe onoffbutton = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/LED_On"); 
   d488a:	2300      	movs	r3, #0
   d488c:	4a25      	ldr	r2, [pc, #148]	; (d4924 <_GLOBAL__sub_I_TheClient+0x120>)
   d488e:	4826      	ldr	r0, [pc, #152]	; (d4928 <_GLOBAL__sub_I_TheClient+0x124>)
   d4890:	4621      	mov	r1, r4

unsigned status;

char currentTime[25];
char current[9];
String t;
   d4892:	4c26      	ldr	r4, [pc, #152]	; (d492c <_GLOBAL__sub_I_TheClient+0x128>)
Adafruit_MQTT_Publish Hmoist = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Home_Moisture");
Adafruit_MQTT_Publish Hwater = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Home_Water"); 
Adafruit_MQTT_Publish Hpres = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Home_Pressure"); 
Adafruit_MQTT_Publish Hhum = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Home_Humidity"); 

Adafruit_MQTT_Subscribe onoffbutton = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/LED_On"); 
   d4894:	f001 f9e0 	bl	d5c58 <_ZN23Adafruit_MQTT_SubscribeC1EP13Adafruit_MQTTPKch>
#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BME280.h>

#define SEALEVELPRESSURE_HPA (1013.25)
Adafruit_BME280 bme; // I2C
   d4898:	4825      	ldr	r0, [pc, #148]	; (d4930 <_GLOBAL__sub_I_TheClient+0x12c>)
   d489a:	f000 f9ed 	bl	d4c78 <_ZN15Adafruit_BME280C1Ev>

unsigned status;

char currentTime[25];
char current[9];
String t;
   d489e:	4639      	mov	r1, r7
   d48a0:	4620      	mov	r0, r4
   d48a2:	f001 ff7a 	bl	d679a <_ZN6StringC1EPK19__FlashStringHelper>
   d48a6:	4620      	mov	r0, r4
String t2;
   d48a8:	4c22      	ldr	r4, [pc, #136]	; (d4934 <_GLOBAL__sub_I_TheClient+0x130>)

unsigned status;

char currentTime[25];
char current[9];
String t;
   d48aa:	462a      	mov	r2, r5
   d48ac:	4631      	mov	r1, r6
   d48ae:	f003 fd17 	bl	d82e0 <__aeabi_atexit>
String t2;
   d48b2:	4639      	mov	r1, r7
   d48b4:	4620      	mov	r0, r4
   d48b6:	f001 ff70 	bl	d679a <_ZN6StringC1EPK19__FlashStringHelper>
   d48ba:	462a      	mov	r2, r5
   d48bc:	4631      	mov	r1, r6
   d48be:	4620      	mov	r0, r4
    Serial.print("Humidity = ");
    Serial.print(bme.readHumidity());
    Serial.println(" %");

    Serial.println();
   d48c0:	b003      	add	sp, #12
   d48c2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
unsigned status;

char currentTime[25];
char current[9];
String t;
String t2;
   d48c6:	f003 bd0b 	b.w	d82e0 <__aeabi_atexit>
   d48ca:	bf00      	nop
   d48cc:	2003e2f0 	.word	0x2003e2f0
   d48d0:	2003e18c 	.word	0x2003e18c
   d48d4:	2003e170 	.word	0x2003e170
   d48d8:	2003e1d0 	.word	0x2003e1d0
   d48dc:	000db8f9 	.word	0x000db8f9
   d48e0:	000d445d 	.word	0x000d445d
   d48e4:	000db744 	.word	0x000db744
   d48e8:	000db72d 	.word	0x000db72d
   d48ec:	000db734 	.word	0x000db734
   d48f0:	000db8ac 	.word	0x000db8ac
   d48f4:	000d40cd 	.word	0x000d40cd
   d48f8:	000db765 	.word	0x000db765
   d48fc:	2003e308 	.word	0x2003e308
   d4900:	000d670d 	.word	0x000d670d
   d4904:	000db783 	.word	0x000db783
   d4908:	2003e1a8 	.word	0x2003e1a8
   d490c:	000db79e 	.word	0x000db79e
   d4910:	2003e180 	.word	0x2003e180
   d4914:	000db7b6 	.word	0x000db7b6
   d4918:	2003e2a4 	.word	0x2003e2a4
   d491c:	000db7d1 	.word	0x000db7d1
   d4920:	2003e2fc 	.word	0x2003e2fc
   d4924:	000db7ec 	.word	0x000db7ec
   d4928:	2003e2b8 	.word	0x2003e2b8
   d492c:	2003e318 	.word	0x2003e318
   d4930:	2003e32c 	.word	0x2003e32c
   d4934:	2003e1c0 	.word	0x2003e1c0

000d4938 <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d4938:	b510      	push	{r4, lr}
   d493a:	4b05      	ldr	r3, [pc, #20]	; (d4950 <_ZN10JsonBufferD1Ev+0x18>)
   d493c:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   d493e:	7c03      	ldrb	r3, [r0, #16]


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d4940:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   d4942:	b91b      	cbnz	r3, d494c <_ZN10JsonBufferD1Ev+0x14>
   d4944:	6840      	ldr	r0, [r0, #4]
   d4946:	b108      	cbz	r0, d494c <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   d4948:	f001 fc72 	bl	d6230 <free>
	}
}
   d494c:	4620      	mov	r0, r4
   d494e:	bd10      	pop	{r4, pc}
   d4950:	000db808 	.word	0x000db808

000d4954 <_ZN10JsonBufferD0Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d4954:	b510      	push	{r4, lr}
   d4956:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}
   d4958:	f7ff ffee 	bl	d4938 <_ZN10JsonBufferD1Ev>
   d495c:	4620      	mov	r0, r4
   d495e:	2114      	movs	r1, #20
   d4960:	f003 fccc 	bl	d82fc <_ZdlPvj>
   d4964:	4620      	mov	r0, r4
   d4966:	bd10      	pop	{r4, pc}

000d4968 <_ZN10JsonWriterD1Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
   d4968:	b510      	push	{r4, lr}
   d496a:	4b03      	ldr	r3, [pc, #12]	; (d4978 <_ZN10JsonWriterD1Ev+0x10>)
   d496c:	6003      	str	r3, [r0, #0]
   d496e:	4604      	mov	r4, r0
   d4970:	f7ff ffe2 	bl	d4938 <_ZN10JsonBufferD1Ev>

}
   d4974:	4620      	mov	r0, r4
   d4976:	bd10      	pop	{r4, pc}
   d4978:	000db818 	.word	0x000db818

000d497c <_ZN10JsonWriterD0Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
   d497c:	b510      	push	{r4, lr}
   d497e:	4604      	mov	r4, r0

}
   d4980:	f7ff fff2 	bl	d4968 <_ZN10JsonWriterD1Ev>
   d4984:	4620      	mov	r0, r4
   d4986:	2130      	movs	r1, #48	; 0x30
   d4988:	f003 fcb8 	bl	d82fc <_ZdlPvj>
   d498c:	4620      	mov	r0, r4
   d498e:	bd10      	pop	{r4, pc}

000d4990 <_ZN10JsonWriter4initEv>:
	init();
}

void JsonWriter::init() {
	// Save start of insertion point for later
	offset = 0;
   d4990:	2300      	movs	r3, #0

	contextIndex = 0;
	context[contextIndex].isFirst = true;
   d4992:	2201      	movs	r2, #1
	init();
}

void JsonWriter::init() {
	// Save start of insertion point for later
	offset = 0;
   d4994:	60c3      	str	r3, [r0, #12]

	contextIndex = 0;
   d4996:	6143      	str	r3, [r0, #20]
	context[contextIndex].isFirst = true;
   d4998:	7602      	strb	r2, [r0, #24]
	context[contextIndex].terminator = 0;
   d499a:	7643      	strb	r3, [r0, #25]

	truncated = false;
   d499c:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
   d49a0:	4770      	bx	lr
	...

000d49a4 <_ZN10JsonWriterC1EPcj>:
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d49a4:	2300      	movs	r3, #0

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d49a6:	b510      	push	{r4, lr}
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d49a8:	60c3      	str	r3, [r0, #12]
   d49aa:	2301      	movs	r3, #1
   d49ac:	7403      	strb	r3, [r0, #16]

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d49ae:	4b05      	ldr	r3, [pc, #20]	; (d49c4 <_ZN10JsonWriterC1EPcj+0x20>)
   d49b0:	6003      	str	r3, [r0, #0]
   d49b2:	f04f 33ff 	mov.w	r3, #4294967295
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d49b6:	6041      	str	r1, [r0, #4]
   d49b8:	6082      	str	r2, [r0, #8]

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d49ba:	62c3      	str	r3, [r0, #44]	; 0x2c
	init();
   d49bc:	f7ff ffe8 	bl	d4990 <_ZN10JsonWriter4initEv>
}
   d49c0:	bd10      	pop	{r4, pc}
   d49c2:	bf00      	nop
   d49c4:	000db818 	.word	0x000db818

000d49c8 <_ZN10JsonWriter10insertCharEc>:
	}
}


void JsonWriter::insertChar(char ch) {
	if (offset < bufferLen) {
   d49c8:	68c3      	ldr	r3, [r0, #12]
   d49ca:	6882      	ldr	r2, [r0, #8]
		buffer[bufferLen - 1] = 0;
	}
}


void JsonWriter::insertChar(char ch) {
   d49cc:	b510      	push	{r4, lr}
	if (offset < bufferLen) {
   d49ce:	4293      	cmp	r3, r2
		buffer[offset++] = ch;
   d49d0:	bf3f      	itttt	cc
   d49d2:	6842      	ldrcc	r2, [r0, #4]
   d49d4:	1c5c      	addcc	r4, r3, #1
   d49d6:	60c4      	strcc	r4, [r0, #12]
   d49d8:	54d1      	strbcc	r1, [r2, r3]
	}
	else {
		truncated = true;
   d49da:	bf24      	itt	cs
   d49dc:	2301      	movcs	r3, #1
   d49de:	f880 302a 	strbcs.w	r3, [r0, #42]	; 0x2a
   d49e2:	bd10      	pop	{r4, pc}

000d49e4 <_ZN10JsonWriter19finishObjectOrArrayEv>:
	insertChar(startChar);
	return true;
}


void JsonWriter::finishObjectOrArray() {
   d49e4:	b510      	push	{r4, lr}
	if (contextIndex > 0) {
   d49e6:	6943      	ldr	r3, [r0, #20]
	insertChar(startChar);
	return true;
}


void JsonWriter::finishObjectOrArray() {
   d49e8:	4604      	mov	r4, r0
	if (contextIndex > 0) {
   d49ea:	b143      	cbz	r3, d49fe <_ZN10JsonWriter19finishObjectOrArrayEv+0x1a>
		if (context[contextIndex].terminator != 0) {
   d49ec:	eb00 0343 	add.w	r3, r0, r3, lsl #1
   d49f0:	7e59      	ldrb	r1, [r3, #25]
   d49f2:	b109      	cbz	r1, d49f8 <_ZN10JsonWriter19finishObjectOrArrayEv+0x14>
			insertChar(context[contextIndex].terminator);
   d49f4:	f7ff ffe8 	bl	d49c8 <_ZN10JsonWriter10insertCharEc>
		}
		contextIndex--;
   d49f8:	6963      	ldr	r3, [r4, #20]
   d49fa:	3b01      	subs	r3, #1
   d49fc:	6163      	str	r3, [r4, #20]
	}
	// Make sure buffer is null terminated
	if (offset < bufferLen) {
   d49fe:	68a3      	ldr	r3, [r4, #8]
   d4a00:	68e0      	ldr	r0, [r4, #12]
   d4a02:	6861      	ldr	r1, [r4, #4]
   d4a04:	4298      	cmp	r0, r3
   d4a06:	f04f 0200 	mov.w	r2, #0
		buffer[offset] = 0;
	}
	else {
		buffer[bufferLen - 1] = 0;
   d4a0a:	bf2a      	itet	cs
   d4a0c:	185b      	addcs	r3, r3, r1
		}
		contextIndex--;
	}
	// Make sure buffer is null terminated
	if (offset < bufferLen) {
		buffer[offset] = 0;
   d4a0e:	540a      	strbcc	r2, [r1, r0]
	}
	else {
		buffer[bufferLen - 1] = 0;
   d4a10:	f803 2c01 	strbcs.w	r2, [r3, #-1]
   d4a14:	bd10      	pop	{r4, pc}

000d4a16 <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>:
	va_start(ap, fmt);
	insertvsprintf(fmt, ap);
	va_end(ap);
}

void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
   d4a16:	b570      	push	{r4, r5, r6, lr}
   d4a18:	4604      	mov	r4, r0
	size_t spaceAvailable = bufferLen - offset;
   d4a1a:	68c0      	ldr	r0, [r0, #12]
   d4a1c:	68a5      	ldr	r5, [r4, #8]

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   d4a1e:	6866      	ldr	r6, [r4, #4]
	insertvsprintf(fmt, ap);
	va_end(ap);
}

void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;
   d4a20:	1a2d      	subs	r5, r5, r0

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   d4a22:	4613      	mov	r3, r2
   d4a24:	4430      	add	r0, r6
   d4a26:	460a      	mov	r2, r1
   d4a28:	4629      	mov	r1, r5
   d4a2a:	f001 fc29 	bl	d6280 <vsnprintf>
	if (count <= spaceAvailable) {
   d4a2e:	4285      	cmp	r5, r0
		offset += count;
   d4a30:	bf2d      	iteet	cs
   d4a32:	68e3      	ldrcs	r3, [r4, #12]
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
   d4a34:	68a3      	ldrcc	r3, [r4, #8]
   d4a36:	60e3      	strcc	r3, [r4, #12]
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
	if (count <= spaceAvailable) {
		offset += count;
   d4a38:	18c0      	addcs	r0, r0, r3
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
		truncated = true;
   d4a3a:	bf36      	itet	cc
   d4a3c:	2301      	movcc	r3, #1
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
	if (count <= spaceAvailable) {
		offset += count;
   d4a3e:	60e0      	strcs	r0, [r4, #12]
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
		truncated = true;
   d4a40:	f884 302a 	strbcc.w	r3, [r4, #42]	; 0x2a
   d4a44:	bd70      	pop	{r4, r5, r6, pc}

000d4a46 <_ZN10JsonWriter13insertsprintfEPKcz>:

}



void JsonWriter::insertsprintf(const char *fmt, ...) {
   d4a46:	b40e      	push	{r1, r2, r3}
   d4a48:	b503      	push	{r0, r1, lr}
   d4a4a:	aa03      	add	r2, sp, #12
   d4a4c:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list ap;
	va_start(ap, fmt);
   d4a50:	9201      	str	r2, [sp, #4]
	insertvsprintf(fmt, ap);
   d4a52:	f7ff ffe0 	bl	d4a16 <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>
	va_end(ap);
}
   d4a56:	b002      	add	sp, #8
   d4a58:	f85d eb04 	ldr.w	lr, [sp], #4
   d4a5c:	b003      	add	sp, #12
   d4a5e:	4770      	bx	lr

000d4a60 <_ZN10JsonWriter12insertStringEPKcb>:
	else {
		truncated = true;
	}
}

void JsonWriter::insertString(const char *s, bool quoted) {
   d4a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4a64:	4604      	mov	r4, r0
   d4a66:	460e      	mov	r6, r1
	// 110xxxxx 10xxxxxx

	// 0x00000800 - 0x0000FFFF:
	// 1110xxxx 10xxxxxx 10xxxxxx

	if (quoted) {
   d4a68:	4617      	mov	r7, r2
   d4a6a:	b112      	cbz	r2, d4a72 <_ZN10JsonWriter12insertStringEPKcb+0x12>
		insertChar('"');
   d4a6c:	2122      	movs	r1, #34	; 0x22
   d4a6e:	f7ff ffab 	bl	d49c8 <_ZN10JsonWriter10insertCharEc>
	else {
		truncated = true;
	}
}

void JsonWriter::insertString(const char *s, bool quoted) {
   d4a72:	2500      	movs	r5, #0

	if (quoted) {
		insertChar('"');
	}

	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   d4a74:	5d71      	ldrb	r1, [r6, r5]
   d4a76:	eb06 0805 	add.w	r8, r6, r5
   d4a7a:	2900      	cmp	r1, #0
   d4a7c:	d071      	beq.n	d4b62 <_ZN10JsonWriter12insertStringEPKcb+0x102>
   d4a7e:	68e2      	ldr	r2, [r4, #12]
   d4a80:	68a3      	ldr	r3, [r4, #8]
   d4a82:	429a      	cmp	r2, r3
   d4a84:	d26d      	bcs.n	d4b62 <_ZN10JsonWriter12insertStringEPKcb+0x102>
		if (s[ii] & 0x80) {
   d4a86:	060b      	lsls	r3, r1, #24
   d4a88:	d533      	bpl.n	d4af2 <_ZN10JsonWriter12insertStringEPKcb+0x92>
			// High bit set: convert UTF-8 to JSON Unicode escape
			if (((s[ii] & 0b11110000) == 0b11100000) && ((s[ii+1] & 0b11000000) == 0b10000000) && ((s[ii+2] & 0b11000000) == 0b10000000)) {
   d4a8a:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
   d4a8e:	2be0      	cmp	r3, #224	; 0xe0
   d4a90:	d117      	bne.n	d4ac2 <_ZN10JsonWriter12insertStringEPKcb+0x62>
   d4a92:	f898 3001 	ldrb.w	r3, [r8, #1]
   d4a96:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   d4a9a:	2a80      	cmp	r2, #128	; 0x80
   d4a9c:	d111      	bne.n	d4ac2 <_ZN10JsonWriter12insertStringEPKcb+0x62>
   d4a9e:	f105 0802 	add.w	r8, r5, #2
   d4aa2:	f816 2008 	ldrb.w	r2, [r6, r8]
   d4aa6:	f002 00c0 	and.w	r0, r2, #192	; 0xc0
   d4aaa:	2880      	cmp	r0, #128	; 0x80
   d4aac:	d109      	bne.n	d4ac2 <_ZN10JsonWriter12insertStringEPKcb+0x62>
				// 3-byte
				uint16_t utf16 = ((s[ii] & 0b1111) << 12) | ((s[ii+1] & 0b111111) << 6) | (s[ii+2] & 0b111111);
				insertsprintf("\\u%04X", utf16);
   d4aae:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   d4ab2:	019b      	lsls	r3, r3, #6
   d4ab4:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
   d4ab8:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
   d4abc:	431a      	orrs	r2, r3
   d4abe:	b292      	uxth	r2, r2
   d4ac0:	e011      	b.n	d4ae6 <_ZN10JsonWriter12insertStringEPKcb+0x86>
				ii += 2; // plus one more in loop increment
			}
			else
			if (((s[ii] & 0b11100000) == 0b11000000) && ((s[ii+1] & 0b11000000) == 0b10000000)) {
   d4ac2:	f001 03e0 	and.w	r3, r1, #224	; 0xe0
   d4ac6:	2bc0      	cmp	r3, #192	; 0xc0
   d4ac8:	d146      	bne.n	d4b58 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
   d4aca:	f105 0801 	add.w	r8, r5, #1
   d4ace:	f816 3008 	ldrb.w	r3, [r6, r8]
   d4ad2:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   d4ad6:	2a80      	cmp	r2, #128	; 0x80
   d4ad8:	d13e      	bne.n	d4b58 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				// 2-byte
				uint16_t utf16 = ((s[ii] & 0b11111) << 6) | (s[ii+1] & 0b111111);
				insertsprintf("\\u%04X", utf16);
   d4ada:	0189      	lsls	r1, r1, #6
   d4adc:	f401 62f8 	and.w	r2, r1, #1984	; 0x7c0
   d4ae0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   d4ae4:	431a      	orrs	r2, r3
   d4ae6:	4923      	ldr	r1, [pc, #140]	; (d4b74 <_ZN10JsonWriter12insertStringEPKcb+0x114>)
   d4ae8:	4620      	mov	r0, r4
   d4aea:	f7ff ffac 	bl	d4a46 <_ZN10JsonWriter13insertsprintfEPKcz>
				ii++; // plus one more in loop increment
   d4aee:	4645      	mov	r5, r8
   d4af0:	e035      	b.n	d4b5e <_ZN10JsonWriter12insertStringEPKcb+0xfe>
				// Not valid unicode, just pass characters through
				insertChar(s[ii]);
			}
		}
		else {
			switch(s[ii]) {
   d4af2:	290c      	cmp	r1, #12
   d4af4:	d018      	beq.n	d4b28 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
   d4af6:	d80b      	bhi.n	d4b10 <_ZN10JsonWriter12insertStringEPKcb+0xb0>
   d4af8:	2909      	cmp	r1, #9
   d4afa:	d021      	beq.n	d4b40 <_ZN10JsonWriter12insertStringEPKcb+0xe0>
   d4afc:	290a      	cmp	r1, #10
   d4afe:	d019      	beq.n	d4b34 <_ZN10JsonWriter12insertStringEPKcb+0xd4>
   d4b00:	2908      	cmp	r1, #8
   d4b02:	d129      	bne.n	d4b58 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
			case '\b':
				insertChar('\\');
   d4b04:	215c      	movs	r1, #92	; 0x5c
   d4b06:	4620      	mov	r0, r4
   d4b08:	f7ff ff5e 	bl	d49c8 <_ZN10JsonWriter10insertCharEc>
				insertChar('b');
   d4b0c:	2162      	movs	r1, #98	; 0x62
   d4b0e:	e023      	b.n	d4b58 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				// Not valid unicode, just pass characters through
				insertChar(s[ii]);
			}
		}
		else {
			switch(s[ii]) {
   d4b10:	2922      	cmp	r1, #34	; 0x22
   d4b12:	d01b      	beq.n	d4b4c <_ZN10JsonWriter12insertStringEPKcb+0xec>
   d4b14:	295c      	cmp	r1, #92	; 0x5c
   d4b16:	d019      	beq.n	d4b4c <_ZN10JsonWriter12insertStringEPKcb+0xec>
   d4b18:	290d      	cmp	r1, #13
   d4b1a:	d11d      	bne.n	d4b58 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('n');
				break;

			case '\r':
				insertChar('\\');
   d4b1c:	215c      	movs	r1, #92	; 0x5c
   d4b1e:	4620      	mov	r0, r4
   d4b20:	f7ff ff52 	bl	d49c8 <_ZN10JsonWriter10insertCharEc>
				insertChar('r');
   d4b24:	2172      	movs	r1, #114	; 0x72
   d4b26:	e017      	b.n	d4b58 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('b');
				break;

			case '\f':
				insertChar('\\');
   d4b28:	215c      	movs	r1, #92	; 0x5c
   d4b2a:	4620      	mov	r0, r4
   d4b2c:	f7ff ff4c 	bl	d49c8 <_ZN10JsonWriter10insertCharEc>
				insertChar('f');
   d4b30:	2166      	movs	r1, #102	; 0x66
   d4b32:	e011      	b.n	d4b58 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				break;

			case '\n':
				insertChar('\\');
   d4b34:	215c      	movs	r1, #92	; 0x5c
   d4b36:	4620      	mov	r0, r4
   d4b38:	f7ff ff46 	bl	d49c8 <_ZN10JsonWriter10insertCharEc>
				insertChar('n');
   d4b3c:	216e      	movs	r1, #110	; 0x6e
   d4b3e:	e00b      	b.n	d4b58 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('r');
				break;

			case '\t':
				insertChar('\\');
   d4b40:	215c      	movs	r1, #92	; 0x5c
   d4b42:	4620      	mov	r0, r4
   d4b44:	f7ff ff40 	bl	d49c8 <_ZN10JsonWriter10insertCharEc>
				insertChar('t');
   d4b48:	2174      	movs	r1, #116	; 0x74
   d4b4a:	e005      	b.n	d4b58 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				break;

			case '"':
			case '\\':
				insertChar('\\');
   d4b4c:	215c      	movs	r1, #92	; 0x5c
   d4b4e:	4620      	mov	r0, r4
   d4b50:	f7ff ff3a 	bl	d49c8 <_ZN10JsonWriter10insertCharEc>
				insertChar(s[ii]);
   d4b54:	f898 1000 	ldrb.w	r1, [r8]
				break;

			default:
				insertChar(s[ii]);
   d4b58:	4620      	mov	r0, r4
   d4b5a:	f7ff ff35 	bl	d49c8 <_ZN10JsonWriter10insertCharEc>

	if (quoted) {
		insertChar('"');
	}

	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   d4b5e:	3501      	adds	r5, #1
   d4b60:	e788      	b.n	d4a74 <_ZN10JsonWriter12insertStringEPKcb+0x14>
				insertChar(s[ii]);
				break;
			}
		}
	}
	if (quoted) {
   d4b62:	b12f      	cbz	r7, d4b70 <_ZN10JsonWriter12insertStringEPKcb+0x110>
		insertChar('"');
   d4b64:	4620      	mov	r0, r4
   d4b66:	2122      	movs	r1, #34	; 0x22
	}

}
   d4b68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				break;
			}
		}
	}
	if (quoted) {
		insertChar('"');
   d4b6c:	f7ff bf2c 	b.w	d49c8 <_ZN10JsonWriter10insertCharEc>
   d4b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4b74:	000db829 	.word	0x000db829

000d4b78 <_ZN10JsonWriter20insertCheckSeparatorEv>:
		offset = bufferLen;
		truncated = true;
	}
}

void JsonWriter::insertCheckSeparator() {
   d4b78:	6942      	ldr	r2, [r0, #20]
   d4b7a:	eb00 0342 	add.w	r3, r0, r2, lsl #1
	if (context[contextIndex].isFirst) {
   d4b7e:	7e1a      	ldrb	r2, [r3, #24]
   d4b80:	b112      	cbz	r2, d4b88 <_ZN10JsonWriter20insertCheckSeparatorEv+0x10>
		context[contextIndex].isFirst = false;
   d4b82:	2200      	movs	r2, #0
   d4b84:	761a      	strb	r2, [r3, #24]
   d4b86:	4770      	bx	lr
	}
	else {
		insertChar(',');
   d4b88:	212c      	movs	r1, #44	; 0x2c
   d4b8a:	f7ff bf1d 	b.w	d49c8 <_ZN10JsonWriter10insertCharEc>

000d4b8e <_ZN10JsonWriter18startObjectOrArrayEcc>:

	truncated = false;

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   d4b8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   d4b90:	6943      	ldr	r3, [r0, #20]
   d4b92:	3301      	adds	r3, #1
   d4b94:	2b08      	cmp	r3, #8

	truncated = false;

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   d4b96:	460e      	mov	r6, r1
   d4b98:	4617      	mov	r7, r2
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   d4b9a:	d80e      	bhi.n	d4bba <_ZN10JsonWriter18startObjectOrArrayEcc+0x2c>
		return false;
	}
	insertCheckSeparator();
   d4b9c:	f7ff ffec 	bl	d4b78 <_ZN10JsonWriter20insertCheckSeparatorEv>

	contextIndex++;
   d4ba0:	6943      	ldr	r3, [r0, #20]
   d4ba2:	1c5a      	adds	r2, r3, #1
   d4ba4:	eb00 0343 	add.w	r3, r0, r3, lsl #1

	context[contextIndex].isFirst = true;
   d4ba8:	2401      	movs	r4, #1
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
		return false;
	}
	insertCheckSeparator();

	contextIndex++;
   d4baa:	6142      	str	r2, [r0, #20]

	context[contextIndex].isFirst = true;
	context[contextIndex].terminator = endChar;

	insertChar(startChar);
   d4bac:	4631      	mov	r1, r6
	}
	insertCheckSeparator();

	contextIndex++;

	context[contextIndex].isFirst = true;
   d4bae:	769c      	strb	r4, [r3, #26]
	context[contextIndex].terminator = endChar;
   d4bb0:	76df      	strb	r7, [r3, #27]

	insertChar(startChar);
   d4bb2:	f7ff ff09 	bl	d49c8 <_ZN10JsonWriter10insertCharEc>
   d4bb6:	4620      	mov	r0, r4
   d4bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
		return false;
   d4bba:	2000      	movs	r0, #0
	context[contextIndex].isFirst = true;
	context[contextIndex].terminator = endChar;

	insertChar(startChar);
	return true;
}
   d4bbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d4bc0 <_ZN10JsonWriter11insertValueEb>:
		insertChar(',');
	}
}

void JsonWriter::insertValue(bool value) {
	if (value) {
   d4bc0:	460a      	mov	r2, r1
   d4bc2:	b111      	cbz	r1, d4bca <_ZN10JsonWriter11insertValueEb+0xa>
		insertString("true");
   d4bc4:	2200      	movs	r2, #0
   d4bc6:	4902      	ldr	r1, [pc, #8]	; (d4bd0 <_ZN10JsonWriter11insertValueEb+0x10>)
   d4bc8:	e000      	b.n	d4bcc <_ZN10JsonWriter11insertValueEb+0xc>
	}
	else {
		insertString("false");
   d4bca:	4902      	ldr	r1, [pc, #8]	; (d4bd4 <_ZN10JsonWriter11insertValueEb+0x14>)
   d4bcc:	f7ff bf48 	b.w	d4a60 <_ZN10JsonWriter12insertStringEPKcb>
   d4bd0:	000db830 	.word	0x000db830
   d4bd4:	000db835 	.word	0x000db835

000d4bd8 <_ZN10JsonWriter11insertValueEf>:
	}
}

void JsonWriter::insertValue(float value) {
   d4bd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4bda:	4604      	mov	r4, r0
   d4bdc:	ee10 0a10 	vmov	r0, s0
	if (floatPlaces >= 0) {
   d4be0:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
   d4be2:	2d00      	cmp	r5, #0
   d4be4:	db0a      	blt.n	d4bfc <_ZN10JsonWriter11insertValueEf+0x24>
		insertsprintf("%.*f", floatPlaces, value);
   d4be6:	f004 ff83 	bl	d9af0 <__aeabi_f2d>
   d4bea:	462a      	mov	r2, r5
   d4bec:	e9cd 0100 	strd	r0, r1, [sp]
   d4bf0:	4908      	ldr	r1, [pc, #32]	; (d4c14 <_ZN10JsonWriter11insertValueEf+0x3c>)
   d4bf2:	4620      	mov	r0, r4
   d4bf4:	f7ff ff27 	bl	d4a46 <_ZN10JsonWriter13insertsprintfEPKcz>
	}
	else {
		insertsprintf("%f", value);
	}
}
   d4bf8:	b003      	add	sp, #12
   d4bfa:	bd30      	pop	{r4, r5, pc}
void JsonWriter::insertValue(float value) {
	if (floatPlaces >= 0) {
		insertsprintf("%.*f", floatPlaces, value);
	}
	else {
		insertsprintf("%f", value);
   d4bfc:	f004 ff78 	bl	d9af0 <__aeabi_f2d>
   d4c00:	460b      	mov	r3, r1
   d4c02:	4905      	ldr	r1, [pc, #20]	; (d4c18 <_ZN10JsonWriter11insertValueEf+0x40>)
   d4c04:	4602      	mov	r2, r0
   d4c06:	4620      	mov	r0, r4
	}
}
   d4c08:	b003      	add	sp, #12
   d4c0a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
void JsonWriter::insertValue(float value) {
	if (floatPlaces >= 0) {
		insertsprintf("%.*f", floatPlaces, value);
	}
	else {
		insertsprintf("%f", value);
   d4c0e:	f7ff bf1a 	b.w	d4a46 <_ZN10JsonWriter13insertsprintfEPKcz>
   d4c12:	bf00      	nop
   d4c14:	000db83b 	.word	0x000db83b
   d4c18:	000db840 	.word	0x000db840

000d4c1c <_GLOBAL__sub_I__ZN10JsonBufferC2Ev>:
   d4c1c:	f001 b83c 	b.w	d5c98 <HAL_Pin_Map>

000d4c20 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d4c20:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d4c22:	4602      	mov	r2, r0
   d4c24:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d4c26:	7913      	ldrb	r3, [r2, #4]
   d4c28:	6895      	ldr	r5, [r2, #8]
   d4c2a:	b133      	cbz	r3, d4c3a <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d4c2c:	b93d      	cbnz	r5, d4c3e <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d4c2e:	490c      	ldr	r1, [pc, #48]	; (d4c60 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d4c30:	b004      	add	sp, #16
   d4c32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d4c36:	f001 bea1 	b.w	d697c <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d4c3a:	4b0a      	ldr	r3, [pc, #40]	; (d4c64 <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d4c3c:	e000      	b.n	d4c40 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d4c3e:	4b0a      	ldr	r3, [pc, #40]	; (d4c68 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d4c40:	7b16      	ldrb	r6, [r2, #12]
   d4c42:	4c0a      	ldr	r4, [pc, #40]	; (d4c6c <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d4c44:	490a      	ldr	r1, [pc, #40]	; (d4c70 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
   d4c46:	7b52      	ldrb	r2, [r2, #13]
   d4c48:	9202      	str	r2, [sp, #8]
   d4c4a:	2e01      	cmp	r6, #1
   d4c4c:	bf08      	it	eq
   d4c4e:	4621      	moveq	r1, r4
   d4c50:	9101      	str	r1, [sp, #4]
   d4c52:	9500      	str	r5, [sp, #0]
   d4c54:	4a07      	ldr	r2, [pc, #28]	; (d4c74 <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d4c56:	2100      	movs	r1, #0
   d4c58:	f001 ff9d 	bl	d6b96 <_ZN5Print11printf_implEbPKcz>
  }
   d4c5c:	b004      	add	sp, #16
   d4c5e:	bd70      	pop	{r4, r5, r6, pc}
   d4c60:	000db86d 	.word	0x000db86d
   d4c64:	000db8f9 	.word	0x000db8f9
   d4c68:	000db85c 	.word	0x000db85c
   d4c6c:	000db865 	.word	0x000db865
   d4c70:	000db869 	.word	0x000db869
   d4c74:	000db883 	.word	0x000db883

000d4c78 <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   d4c78:	22ff      	movs	r2, #255	; 0xff
   d4c7a:	7402      	strb	r2, [r0, #16]
   d4c7c:	7442      	strb	r2, [r0, #17]
   d4c7e:	7482      	strb	r2, [r0, #18]
   d4c80:	74c2      	strb	r2, [r0, #19]
{ }
   d4c82:	4770      	bx	lr

000d4c84 <_ZN15Adafruit_BME2807spixferEh>:
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d4c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
   d4c88:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4c8c:	3301      	adds	r3, #1
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d4c8e:	4605      	mov	r5, r0
   d4c90:	460f      	mov	r7, r1
    // hardware SPI
    if (_sck == -1)
   d4c92:	d106      	bne.n	d4ca2 <_ZN15Adafruit_BME2807spixferEh+0x1e>
        return SPI.transfer(x);
   d4c94:	f003 fac4 	bl	d8220 <_ZN8particle7globals11instanceSpiEv>
   d4c98:	4639      	mov	r1, r7
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   d4c9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
    // hardware SPI
    if (_sck == -1)
        return SPI.transfer(x);
   d4c9e:	f001 bc03 	b.w	d64a8 <_ZN8SPIClass8transferEh>
   d4ca2:	2607      	movs	r6, #7
   d4ca4:	2400      	movs	r4, #0
    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
   d4ca6:	f04f 0801 	mov.w	r8, #1

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
        digitalWrite(_sck, LOW);
   d4caa:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d4cae:	2100      	movs	r1, #0
   d4cb0:	b280      	uxth	r0, r0
   d4cb2:	f003 fa72 	bl	d819a <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   d4cb6:	f995 0011 	ldrsb.w	r0, [r5, #17]
   d4cba:	fa08 f106 	lsl.w	r1, r8, r6
   d4cbe:	4039      	ands	r1, r7
   d4cc0:	b280      	uxth	r0, r0
   d4cc2:	f003 fa6a 	bl	d819a <digitalWrite>
        digitalWrite(_sck, HIGH);
   d4cc6:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d4cca:	2101      	movs	r1, #1
   d4ccc:	b280      	uxth	r0, r0
   d4cce:	f003 fa64 	bl	d819a <digitalWrite>
        if (digitalRead(_miso))
   d4cd2:	f995 0012 	ldrsb.w	r0, [r5, #18]
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
   d4cd6:	0064      	lsls	r4, r4, #1
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
   d4cd8:	b280      	uxth	r0, r0
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
   d4cda:	b2e4      	uxtb	r4, r4
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
   d4cdc:	f003 fa76 	bl	d81cc <digitalRead>
   d4ce0:	b108      	cbz	r0, d4ce6 <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   d4ce2:	f044 0401 	orr.w	r4, r4, #1
    if (_sck == -1)
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
   d4ce6:	f116 36ff 	adds.w	r6, r6, #4294967295
   d4cea:	d2de      	bcs.n	d4caa <_ZN15Adafruit_BME2807spixferEh+0x26>
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   d4cec:	4620      	mov	r0, r4
   d4cee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d4cf4 <_ZN15Adafruit_BME2806write8Ehh>:
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   d4cf4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   d4cf6:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d4cfa:	3301      	adds	r3, #1
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   d4cfc:	4604      	mov	r4, r0
   d4cfe:	460e      	mov	r6, r1
   d4d00:	4615      	mov	r5, r2
    if (_cs == -1) {
   d4d02:	d111      	bne.n	d4d28 <_ZN15Adafruit_BME2806write8Ehh+0x34>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d4d04:	7901      	ldrb	r1, [r0, #4]
   d4d06:	6800      	ldr	r0, [r0, #0]
   d4d08:	f002 fd9d 	bl	d7846 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4d0c:	6820      	ldr	r0, [r4, #0]
   d4d0e:	6803      	ldr	r3, [r0, #0]
   d4d10:	4631      	mov	r1, r6
   d4d12:	689b      	ldr	r3, [r3, #8]
   d4d14:	4798      	blx	r3
        _wire -> write((uint8_t)value);
   d4d16:	6820      	ldr	r0, [r4, #0]
   d4d18:	6803      	ldr	r3, [r0, #0]
   d4d1a:	4629      	mov	r1, r5
   d4d1c:	689b      	ldr	r3, [r3, #8]
   d4d1e:	4798      	blx	r3
        _wire -> endTransmission();
   d4d20:	6820      	ldr	r0, [r4, #0]
   d4d22:	f002 fd98 	bl	d7856 <_ZN7TwoWire15endTransmissionEv>
   d4d26:	e031      	b.n	d4d8c <_ZN15Adafruit_BME2806write8Ehh+0x98>
    } else {
        if (_sck == -1)
   d4d28:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4d2c:	3301      	adds	r3, #1
   d4d2e:	d110      	bne.n	d4d52 <_ZN15Adafruit_BME2806write8Ehh+0x5e>
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4d30:	f003 fa76 	bl	d8220 <_ZN8particle7globals11instanceSpiEv>
public:
  __SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
    : default_{false},
      clock_{clock},
      bitOrder_{bitOrder},
      dataMode_{dataMode}
   d4d34:	4b16      	ldr	r3, [pc, #88]	; (d4d90 <_ZN15Adafruit_BME2806write8Ehh+0x9c>)
   d4d36:	4a17      	ldr	r2, [pc, #92]	; (d4d94 <_ZN15Adafruit_BME2806write8Ehh+0xa0>)
   d4d38:	9300      	str	r3, [sp, #0]
   d4d3a:	9202      	str	r2, [sp, #8]
   d4d3c:	2300      	movs	r3, #0
   d4d3e:	2201      	movs	r2, #1
   d4d40:	4669      	mov	r1, sp
   d4d42:	f88d 3004 	strb.w	r3, [sp, #4]
   d4d46:	f88d 200c 	strb.w	r2, [sp, #12]
   d4d4a:	f88d 300d 	strb.w	r3, [sp, #13]
   d4d4e:	f001 fb3b 	bl	d63c8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
        digitalWrite(_cs, LOW);
   d4d52:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4d56:	2100      	movs	r1, #0
   d4d58:	b280      	uxth	r0, r0
   d4d5a:	f003 fa1e 	bl	d819a <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   d4d5e:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   d4d62:	4620      	mov	r0, r4
   d4d64:	f7ff ff8e 	bl	d4c84 <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   d4d68:	4629      	mov	r1, r5
   d4d6a:	4620      	mov	r0, r4
   d4d6c:	f7ff ff8a 	bl	d4c84 <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   d4d70:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4d74:	2101      	movs	r1, #1
   d4d76:	b280      	uxth	r0, r0
   d4d78:	f003 fa0f 	bl	d819a <digitalWrite>
    if (_sck == -1)
   d4d7c:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d4d80:	3301      	adds	r3, #1
   d4d82:	d103      	bne.n	d4d8c <_ZN15Adafruit_BME2806write8Ehh+0x98>
        SPI.endTransaction(); // release the SPI bus
   d4d84:	f003 fa4c 	bl	d8220 <_ZN8particle7globals11instanceSpiEv>
   d4d88:	f001 fb05 	bl	d6396 <_ZN8SPIClass14endTransactionEv>
    }
}
   d4d8c:	b004      	add	sp, #16
   d4d8e:	bd70      	pop	{r4, r5, r6, pc}
   d4d90:	000db858 	.word	0x000db858
   d4d94:	0007a120 	.word	0x0007a120

000d4d98 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d4d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.mode     = mode;
   d4d9a:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d4d9e:	f89d 6018 	ldrb.w	r6, [sp, #24]
   d4da2:	f89d e01c 	ldrb.w	lr, [sp, #28]
   d4da6:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _measReg.mode     = mode;
   d4daa:	f361 1587 	bfi	r5, r1, #6, #2
    _measReg.osrs_t   = tempSampling;
   d4dae:	f362 0502 	bfi	r5, r2, #0, #3
    _measReg.osrs_p   = pressSampling;
   d4db2:	f363 05c5 	bfi	r5, r3, #3, #3
        
    
    _humReg.osrs_h    = humSampling;
   d4db6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
    _measReg.mode     = mode;
    _measReg.osrs_t   = tempSampling;
    _measReg.osrs_p   = pressSampling;
   d4dba:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
        
    
    _humReg.osrs_h    = humSampling;
   d4dbe:	f366 1347 	bfi	r3, r6, #5, #3
   d4dc2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.filter = filter;
   d4dc6:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   d4dca:	f36e 03c5 	bfi	r3, lr, #3, #3
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d4dce:	4604      	mov	r4, r0
    _measReg.osrs_p   = pressSampling;
        
    
    _humReg.osrs_h    = humSampling;
    _configReg.filter = filter;
    _configReg.t_sb   = duration;
   d4dd0:	f367 0302 	bfi	r3, r7, #0, #3
   d4dd4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    
    // you must make sure to also set REGISTER_CONTROL after setting the
    // CONTROLHUMID register, otherwise the values won't be applied (see DS 5.4.3)
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   d4dd8:	f006 0207 	and.w	r2, r6, #7
   d4ddc:	21f2      	movs	r1, #242	; 0xf2
   d4dde:	f7ff ff89 	bl	d4cf4 <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
   d4de2:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   d4de6:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d4dea:	f002 0107 	and.w	r1, r2, #7
   d4dee:	009b      	lsls	r3, r3, #2
   d4df0:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   d4df4:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   d4df8:	4620      	mov	r0, r4
   d4dfa:	21f5      	movs	r1, #245	; 0xf5
   d4dfc:	f7ff ff7a 	bl	d4cf4 <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
   d4e00:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d4e04:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d4e08:	f002 0107 	and.w	r1, r2, #7
   d4e0c:	009b      	lsls	r3, r3, #2
   d4e0e:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   d4e12:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   d4e16:	4620      	mov	r0, r4
   d4e18:	21f4      	movs	r1, #244	; 0xf4
}
   d4e1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    
    // you must make sure to also set REGISTER_CONTROL after setting the
    // CONTROLHUMID register, otherwise the values won't be applied (see DS 5.4.3)
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
    write8(BME280_REGISTER_CONFIG, _configReg.get());
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d4e1e:	f7ff bf69 	b.w	d4cf4 <_ZN15Adafruit_BME2806write8Ehh>
	...

000d4e24 <_ZN15Adafruit_BME2805read8Eh>:
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   d4e24:	b530      	push	{r4, r5, lr}
    uint8_t value;
    
    if (_cs == -1) {
   d4e26:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d4e2a:	3301      	adds	r3, #1
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   d4e2c:	b085      	sub	sp, #20
   d4e2e:	4604      	mov	r4, r0
   d4e30:	460d      	mov	r5, r1
    uint8_t value;
    
    if (_cs == -1) {
   d4e32:	d116      	bne.n	d4e62 <_ZN15Adafruit_BME2805read8Eh+0x3e>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d4e34:	7901      	ldrb	r1, [r0, #4]
   d4e36:	6800      	ldr	r0, [r0, #0]
   d4e38:	f002 fd05 	bl	d7846 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4e3c:	6820      	ldr	r0, [r4, #0]
   d4e3e:	6803      	ldr	r3, [r0, #0]
   d4e40:	4629      	mov	r1, r5
   d4e42:	689b      	ldr	r3, [r3, #8]
   d4e44:	4798      	blx	r3
        _wire -> endTransmission();
   d4e46:	6820      	ldr	r0, [r4, #0]
   d4e48:	f002 fd05 	bl	d7856 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
   d4e4c:	2201      	movs	r2, #1
   d4e4e:	7921      	ldrb	r1, [r4, #4]
   d4e50:	6820      	ldr	r0, [r4, #0]
   d4e52:	f002 fcf5 	bl	d7840 <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   d4e56:	6820      	ldr	r0, [r4, #0]
   d4e58:	6803      	ldr	r3, [r0, #0]
   d4e5a:	695b      	ldr	r3, [r3, #20]
   d4e5c:	4798      	blx	r3
   d4e5e:	b2c5      	uxtb	r5, r0
   d4e60:	e032      	b.n	d4ec8 <_ZN15Adafruit_BME2805read8Eh+0xa4>
    } else {
        if (_sck == -1)
   d4e62:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4e66:	3301      	adds	r3, #1
   d4e68:	d110      	bne.n	d4e8c <_ZN15Adafruit_BME2805read8Eh+0x68>
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4e6a:	f003 f9d9 	bl	d8220 <_ZN8particle7globals11instanceSpiEv>
   d4e6e:	4b18      	ldr	r3, [pc, #96]	; (d4ed0 <_ZN15Adafruit_BME2805read8Eh+0xac>)
   d4e70:	4a18      	ldr	r2, [pc, #96]	; (d4ed4 <_ZN15Adafruit_BME2805read8Eh+0xb0>)
   d4e72:	9300      	str	r3, [sp, #0]
   d4e74:	9202      	str	r2, [sp, #8]
   d4e76:	2300      	movs	r3, #0
   d4e78:	2201      	movs	r2, #1
   d4e7a:	4669      	mov	r1, sp
   d4e7c:	f88d 3004 	strb.w	r3, [sp, #4]
   d4e80:	f88d 200c 	strb.w	r2, [sp, #12]
   d4e84:	f88d 300d 	strb.w	r3, [sp, #13]
   d4e88:	f001 fa9e 	bl	d63c8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
        digitalWrite(_cs, LOW);
   d4e8c:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4e90:	2100      	movs	r1, #0
   d4e92:	b280      	uxth	r0, r0
   d4e94:	f003 f981 	bl	d819a <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d4e98:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d4e9c:	4620      	mov	r0, r4
   d4e9e:	f7ff fef1 	bl	d4c84 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   d4ea2:	2100      	movs	r1, #0
   d4ea4:	4620      	mov	r0, r4
   d4ea6:	f7ff feed 	bl	d4c84 <_ZN15Adafruit_BME2807spixferEh>
   d4eaa:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   d4eac:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4eb0:	2101      	movs	r1, #1
   d4eb2:	b280      	uxth	r0, r0
   d4eb4:	f003 f971 	bl	d819a <digitalWrite>
        if (_sck == -1)
   d4eb8:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d4ebc:	3301      	adds	r3, #1
   d4ebe:	d103      	bne.n	d4ec8 <_ZN15Adafruit_BME2805read8Eh+0xa4>
            SPI.endTransaction(); // release the SPI bus
   d4ec0:	f003 f9ae 	bl	d8220 <_ZN8particle7globals11instanceSpiEv>
   d4ec4:	f001 fa67 	bl	d6396 <_ZN8SPIClass14endTransactionEv>
    }
    return value;
}
   d4ec8:	4628      	mov	r0, r5
   d4eca:	b005      	add	sp, #20
   d4ecc:	bd30      	pop	{r4, r5, pc}
   d4ece:	bf00      	nop
   d4ed0:	000db858 	.word	0x000db858
   d4ed4:	0007a120 	.word	0x0007a120

000d4ed8 <_ZN15Adafruit_BME2806read16Eh>:
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
   d4ed8:	b530      	push	{r4, r5, lr}
    uint16_t value;

    if (_cs == -1) {
   d4eda:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d4ede:	3301      	adds	r3, #1
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
   d4ee0:	b085      	sub	sp, #20
   d4ee2:	4604      	mov	r4, r0
   d4ee4:	460d      	mov	r5, r1
    uint16_t value;

    if (_cs == -1) {
   d4ee6:	d11d      	bne.n	d4f24 <_ZN15Adafruit_BME2806read16Eh+0x4c>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d4ee8:	7901      	ldrb	r1, [r0, #4]
   d4eea:	6800      	ldr	r0, [r0, #0]
   d4eec:	f002 fcab 	bl	d7846 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4ef0:	6820      	ldr	r0, [r4, #0]
   d4ef2:	6803      	ldr	r3, [r0, #0]
   d4ef4:	4629      	mov	r1, r5
   d4ef6:	689b      	ldr	r3, [r3, #8]
   d4ef8:	4798      	blx	r3
        _wire -> endTransmission();
   d4efa:	6820      	ldr	r0, [r4, #0]
   d4efc:	f002 fcab 	bl	d7856 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
   d4f00:	2202      	movs	r2, #2
   d4f02:	7921      	ldrb	r1, [r4, #4]
   d4f04:	6820      	ldr	r0, [r4, #0]
   d4f06:	f002 fc9b 	bl	d7840 <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
   d4f0a:	6820      	ldr	r0, [r4, #0]
   d4f0c:	6803      	ldr	r3, [r0, #0]
   d4f0e:	695b      	ldr	r3, [r3, #20]
   d4f10:	4798      	blx	r3
   d4f12:	4605      	mov	r5, r0
   d4f14:	6820      	ldr	r0, [r4, #0]
   d4f16:	6803      	ldr	r3, [r0, #0]
   d4f18:	695b      	ldr	r3, [r3, #20]
   d4f1a:	4798      	blx	r3
   d4f1c:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d4f20:	b285      	uxth	r5, r0
   d4f22:	e039      	b.n	d4f98 <_ZN15Adafruit_BME2806read16Eh+0xc0>
    } else {
        if (_sck == -1)
   d4f24:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4f28:	3301      	adds	r3, #1
   d4f2a:	d110      	bne.n	d4f4e <_ZN15Adafruit_BME2806read16Eh+0x76>
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4f2c:	f003 f978 	bl	d8220 <_ZN8particle7globals11instanceSpiEv>
   d4f30:	4b1b      	ldr	r3, [pc, #108]	; (d4fa0 <_ZN15Adafruit_BME2806read16Eh+0xc8>)
   d4f32:	4a1c      	ldr	r2, [pc, #112]	; (d4fa4 <_ZN15Adafruit_BME2806read16Eh+0xcc>)
   d4f34:	9300      	str	r3, [sp, #0]
   d4f36:	9202      	str	r2, [sp, #8]
   d4f38:	2300      	movs	r3, #0
   d4f3a:	2201      	movs	r2, #1
   d4f3c:	4669      	mov	r1, sp
   d4f3e:	f88d 3004 	strb.w	r3, [sp, #4]
   d4f42:	f88d 200c 	strb.w	r2, [sp, #12]
   d4f46:	f88d 300d 	strb.w	r3, [sp, #13]
   d4f4a:	f001 fa3d 	bl	d63c8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
        digitalWrite(_cs, LOW);
   d4f4e:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4f52:	2100      	movs	r1, #0
   d4f54:	b280      	uxth	r0, r0
   d4f56:	f003 f920 	bl	d819a <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d4f5a:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d4f5e:	4620      	mov	r0, r4
   d4f60:	f7ff fe90 	bl	d4c84 <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   d4f64:	2100      	movs	r1, #0
   d4f66:	4620      	mov	r0, r4
   d4f68:	f7ff fe8c 	bl	d4c84 <_ZN15Adafruit_BME2807spixferEh>
   d4f6c:	2100      	movs	r1, #0
   d4f6e:	4605      	mov	r5, r0
   d4f70:	4620      	mov	r0, r4
   d4f72:	f7ff fe87 	bl	d4c84 <_ZN15Adafruit_BME2807spixferEh>
   d4f76:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d4f7a:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   d4f7c:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4f80:	2101      	movs	r1, #1
   d4f82:	b280      	uxth	r0, r0
   d4f84:	f003 f909 	bl	d819a <digitalWrite>
        if (_sck == -1)
   d4f88:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d4f8c:	3301      	adds	r3, #1
   d4f8e:	d103      	bne.n	d4f98 <_ZN15Adafruit_BME2806read16Eh+0xc0>
            SPI.endTransaction(); // release the SPI bus
   d4f90:	f003 f946 	bl	d8220 <_ZN8particle7globals11instanceSpiEv>
   d4f94:	f001 f9ff 	bl	d6396 <_ZN8SPIClass14endTransactionEv>
    }

    return value;
}
   d4f98:	4628      	mov	r0, r5
   d4f9a:	b005      	add	sp, #20
   d4f9c:	bd30      	pop	{r4, r5, pc}
   d4f9e:	bf00      	nop
   d4fa0:	000db858 	.word	0x000db858
   d4fa4:	0007a120 	.word	0x0007a120

000d4fa8 <_ZN15Adafruit_BME2809read16_LEEh>:
    @brief  Reads a signed 16 bit little endian value over I2C or SPI
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   d4fa8:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   d4faa:	f7ff ff95 	bl	d4ed8 <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   d4fae:	ba40      	rev16	r0, r0
}
   d4fb0:	b280      	uxth	r0, r0
   d4fb2:	bd08      	pop	{r3, pc}

000d4fb4 <_ZN15Adafruit_BME2806read24Eh>:
    @param reg the register address to read from
    @returns the 24 bit data value read from the device
*/
/**************************************************************************/
uint32_t Adafruit_BME280::read24(byte reg)
{
   d4fb4:	b530      	push	{r4, r5, lr}
    uint32_t value;

    if (_cs == -1) {
   d4fb6:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d4fba:	3301      	adds	r3, #1
    @param reg the register address to read from
    @returns the 24 bit data value read from the device
*/
/**************************************************************************/
uint32_t Adafruit_BME280::read24(byte reg)
{
   d4fbc:	b085      	sub	sp, #20
   d4fbe:	4604      	mov	r4, r0
   d4fc0:	460d      	mov	r5, r1
    uint32_t value;

    if (_cs == -1) {
   d4fc2:	d121      	bne.n	d5008 <_ZN15Adafruit_BME2806read24Eh+0x54>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d4fc4:	7901      	ldrb	r1, [r0, #4]
   d4fc6:	6800      	ldr	r0, [r0, #0]
   d4fc8:	f002 fc3d 	bl	d7846 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4fcc:	6820      	ldr	r0, [r4, #0]
   d4fce:	6803      	ldr	r3, [r0, #0]
   d4fd0:	4629      	mov	r1, r5
   d4fd2:	689b      	ldr	r3, [r3, #8]
   d4fd4:	4798      	blx	r3
        _wire -> endTransmission();
   d4fd6:	6820      	ldr	r0, [r4, #0]
   d4fd8:	f002 fc3d 	bl	d7856 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)3);
   d4fdc:	2203      	movs	r2, #3
   d4fde:	7921      	ldrb	r1, [r4, #4]
   d4fe0:	6820      	ldr	r0, [r4, #0]
   d4fe2:	f002 fc2d 	bl	d7840 <_ZN7TwoWire11requestFromEhj>

        value = _wire -> read();
   d4fe6:	6820      	ldr	r0, [r4, #0]
   d4fe8:	6803      	ldr	r3, [r0, #0]
   d4fea:	695b      	ldr	r3, [r3, #20]
   d4fec:	4798      	blx	r3
        value <<= 8;
   d4fee:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d4ff0:	6820      	ldr	r0, [r4, #0]
   d4ff2:	6803      	ldr	r3, [r0, #0]
   d4ff4:	695b      	ldr	r3, [r3, #20]
   d4ff6:	4798      	blx	r3
   d4ff8:	4328      	orrs	r0, r5
        value <<= 8;
   d4ffa:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d4ffc:	6820      	ldr	r0, [r4, #0]
   d4ffe:	6803      	ldr	r3, [r0, #0]
   d5000:	695b      	ldr	r3, [r3, #20]
   d5002:	4798      	blx	r3
   d5004:	4305      	orrs	r5, r0
   d5006:	e03d      	b.n	d5084 <_ZN15Adafruit_BME2806read24Eh+0xd0>
    } else {
        if (_sck == -1)
   d5008:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d500c:	3301      	adds	r3, #1
   d500e:	d110      	bne.n	d5032 <_ZN15Adafruit_BME2806read24Eh+0x7e>
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d5010:	f003 f906 	bl	d8220 <_ZN8particle7globals11instanceSpiEv>
   d5014:	4b1d      	ldr	r3, [pc, #116]	; (d508c <_ZN15Adafruit_BME2806read24Eh+0xd8>)
   d5016:	4a1e      	ldr	r2, [pc, #120]	; (d5090 <_ZN15Adafruit_BME2806read24Eh+0xdc>)
   d5018:	9300      	str	r3, [sp, #0]
   d501a:	9202      	str	r2, [sp, #8]
   d501c:	2300      	movs	r3, #0
   d501e:	2201      	movs	r2, #1
   d5020:	4669      	mov	r1, sp
   d5022:	f88d 3004 	strb.w	r3, [sp, #4]
   d5026:	f88d 200c 	strb.w	r2, [sp, #12]
   d502a:	f88d 300d 	strb.w	r3, [sp, #13]
   d502e:	f001 f9cb 	bl	d63c8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
        digitalWrite(_cs, LOW);
   d5032:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5036:	2100      	movs	r1, #0
   d5038:	b280      	uxth	r0, r0
   d503a:	f003 f8ae 	bl	d819a <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d503e:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d5042:	4620      	mov	r0, r4
   d5044:	f7ff fe1e 	bl	d4c84 <_ZN15Adafruit_BME2807spixferEh>

        value = spixfer(0);
   d5048:	2100      	movs	r1, #0
   d504a:	4620      	mov	r0, r4
   d504c:	f7ff fe1a 	bl	d4c84 <_ZN15Adafruit_BME2807spixferEh>
        value <<= 8;
        value |= spixfer(0);
   d5050:	2100      	movs	r1, #0
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
        digitalWrite(_cs, LOW);
        spixfer(reg | 0x80); // read, bit 7 high

        value = spixfer(0);
        value <<= 8;
   d5052:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d5054:	4620      	mov	r0, r4
   d5056:	f7ff fe15 	bl	d4c84 <_ZN15Adafruit_BME2807spixferEh>
   d505a:	4328      	orrs	r0, r5
        value <<= 8;
   d505c:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d505e:	2100      	movs	r1, #0
   d5060:	4620      	mov	r0, r4
   d5062:	f7ff fe0f 	bl	d4c84 <_ZN15Adafruit_BME2807spixferEh>
   d5066:	4305      	orrs	r5, r0

        digitalWrite(_cs, HIGH);
   d5068:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d506c:	2101      	movs	r1, #1
   d506e:	b280      	uxth	r0, r0
   d5070:	f003 f893 	bl	d819a <digitalWrite>
        if (_sck == -1)
   d5074:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d5078:	3301      	adds	r3, #1
   d507a:	d103      	bne.n	d5084 <_ZN15Adafruit_BME2806read24Eh+0xd0>
            SPI.endTransaction(); // release the SPI bus
   d507c:	f003 f8d0 	bl	d8220 <_ZN8particle7globals11instanceSpiEv>
   d5080:	f001 f989 	bl	d6396 <_ZN8SPIClass14endTransactionEv>
    }

    return value;
}
   d5084:	4628      	mov	r0, r5
   d5086:	b005      	add	sp, #20
   d5088:	bd30      	pop	{r4, r5, pc}
   d508a:	bf00      	nop
   d508c:	000db858 	.word	0x000db858
   d5090:	0007a120 	.word	0x0007a120

000d5094 <_ZN15Adafruit_BME28016readCoefficientsEv>:
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
   d5094:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d5096:	2188      	movs	r1, #136	; 0x88
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
   d5098:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d509a:	f7ff ff85 	bl	d4fa8 <_ZN15Adafruit_BME2809read16_LEEh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d509e:	218a      	movs	r1, #138	; 0x8a
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d50a0:	82a0      	strh	r0, [r4, #20]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d50a2:	4620      	mov	r0, r4
   d50a4:	f7ff ff80 	bl	d4fa8 <_ZN15Adafruit_BME2809read16_LEEh>
   d50a8:	218c      	movs	r1, #140	; 0x8c
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   d50aa:	82e0      	strh	r0, [r4, #22]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d50ac:	4620      	mov	r0, r4
   d50ae:	f7ff ff7b 	bl	d4fa8 <_ZN15Adafruit_BME2809read16_LEEh>
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d50b2:	218e      	movs	r1, #142	; 0x8e
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   d50b4:	8320      	strh	r0, [r4, #24]

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d50b6:	4620      	mov	r0, r4
   d50b8:	f7ff ff76 	bl	d4fa8 <_ZN15Adafruit_BME2809read16_LEEh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d50bc:	2190      	movs	r1, #144	; 0x90
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d50be:	8360      	strh	r0, [r4, #26]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d50c0:	4620      	mov	r0, r4
   d50c2:	f7ff ff71 	bl	d4fa8 <_ZN15Adafruit_BME2809read16_LEEh>
   d50c6:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   d50c8:	83a0      	strh	r0, [r4, #28]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d50ca:	4620      	mov	r0, r4
   d50cc:	f7ff ff6c 	bl	d4fa8 <_ZN15Adafruit_BME2809read16_LEEh>
   d50d0:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   d50d2:	83e0      	strh	r0, [r4, #30]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d50d4:	4620      	mov	r0, r4
   d50d6:	f7ff ff67 	bl	d4fa8 <_ZN15Adafruit_BME2809read16_LEEh>
   d50da:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   d50dc:	8420      	strh	r0, [r4, #32]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d50de:	4620      	mov	r0, r4
   d50e0:	f7ff ff62 	bl	d4fa8 <_ZN15Adafruit_BME2809read16_LEEh>
   d50e4:	2198      	movs	r1, #152	; 0x98

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   d50e6:	8460      	strh	r0, [r4, #34]	; 0x22
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d50e8:	4620      	mov	r0, r4
   d50ea:	f7ff ff5d 	bl	d4fa8 <_ZN15Adafruit_BME2809read16_LEEh>
   d50ee:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   d50f0:	84a0      	strh	r0, [r4, #36]	; 0x24
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d50f2:	4620      	mov	r0, r4
   d50f4:	f7ff ff58 	bl	d4fa8 <_ZN15Adafruit_BME2809read16_LEEh>
   d50f8:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   d50fa:	84e0      	strh	r0, [r4, #38]	; 0x26
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d50fc:	4620      	mov	r0, r4
   d50fe:	f7ff ff53 	bl	d4fa8 <_ZN15Adafruit_BME2809read16_LEEh>
   d5102:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   d5104:	8520      	strh	r0, [r4, #40]	; 0x28
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d5106:	4620      	mov	r0, r4
   d5108:	f7ff ff4e 	bl	d4fa8 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d510c:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   d510e:	8560      	strh	r0, [r4, #42]	; 0x2a

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d5110:	4620      	mov	r0, r4
   d5112:	f7ff fe87 	bl	d4e24 <_ZN15Adafruit_BME2805read8Eh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d5116:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d5118:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d511c:	4620      	mov	r0, r4
   d511e:	f7ff ff43 	bl	d4fa8 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d5122:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   d5124:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d5126:	4620      	mov	r0, r4
   d5128:	f7ff fe7c 	bl	d4e24 <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d512c:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d512e:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d5132:	4620      	mov	r0, r4
   d5134:	f7ff fe76 	bl	d4e24 <_ZN15Adafruit_BME2805read8Eh>
   d5138:	21e5      	movs	r1, #229	; 0xe5
   d513a:	4605      	mov	r5, r0
   d513c:	4620      	mov	r0, r4
   d513e:	f7ff fe71 	bl	d4e24 <_ZN15Adafruit_BME2805read8Eh>
   d5142:	f000 000f 	and.w	r0, r0, #15
   d5146:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
   d514a:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   d514c:	21e6      	movs	r1, #230	; 0xe6
   d514e:	4620      	mov	r0, r4
   d5150:	f7ff fe68 	bl	d4e24 <_ZN15Adafruit_BME2805read8Eh>
   d5154:	21e5      	movs	r1, #229	; 0xe5
   d5156:	4605      	mov	r5, r0
   d5158:	4620      	mov	r0, r4
   d515a:	f7ff fe63 	bl	d4e24 <_ZN15Adafruit_BME2805read8Eh>
   d515e:	1100      	asrs	r0, r0, #4
   d5160:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
   d5164:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   d5166:	21e7      	movs	r1, #231	; 0xe7
   d5168:	4620      	mov	r0, r4
   d516a:	f7ff fe5b 	bl	d4e24 <_ZN15Adafruit_BME2805read8Eh>
   d516e:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
   d5172:	bd38      	pop	{r3, r4, r5, pc}

000d5174 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
    @brief return true if chip is busy reading cal data
    @returns true if reading calibration, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::isReadingCalibration(void)
{
   d5174:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   d5176:	21f3      	movs	r1, #243	; 0xf3
   d5178:	f7ff fe54 	bl	d4e24 <_ZN15Adafruit_BME2805read8Eh>

  return (rStatus & (1 << 0)) != 0;
}
   d517c:	f000 0001 	and.w	r0, r0, #1
   d5180:	bd08      	pop	{r3, pc}

000d5182 <_ZN15Adafruit_BME2804initEv>:
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::init()
{
   d5182:	b530      	push	{r4, r5, lr}
   d5184:	4604      	mov	r4, r0
    // init I2C or SPI sensor interface
    if (_cs == -1) {
   d5186:	f990 0010 	ldrsb.w	r0, [r0, #16]
   d518a:	1c42      	adds	r2, r0, #1
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::init()
{
   d518c:	b085      	sub	sp, #20
    // init I2C or SPI sensor interface
    if (_cs == -1) {
   d518e:	d103      	bne.n	d5198 <_ZN15Adafruit_BME2804initEv+0x16>
        // I2C
        _wire -> begin();
   d5190:	6820      	ldr	r0, [r4, #0]
   d5192:	f002 fb21 	bl	d77d8 <_ZN7TwoWire5beginEv>
   d5196:	e022      	b.n	d51de <_ZN15Adafruit_BME2804initEv+0x5c>
    } else {
        digitalWrite(_cs, HIGH);
   d5198:	2101      	movs	r1, #1
   d519a:	b280      	uxth	r0, r0
   d519c:	f002 fffd 	bl	d819a <digitalWrite>
        pinMode(_cs, OUTPUT);
   d51a0:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d51a4:	2101      	movs	r1, #1
   d51a6:	b280      	uxth	r0, r0
   d51a8:	f002 ffe6 	bl	d8178 <pinMode>
        if (_sck == -1) {
   d51ac:	f994 0013 	ldrsb.w	r0, [r4, #19]
   d51b0:	1c43      	adds	r3, r0, #1
   d51b2:	d104      	bne.n	d51be <_ZN15Adafruit_BME2804initEv+0x3c>
            // hardware SPI
            SPI.begin();
   d51b4:	f003 f834 	bl	d8220 <_ZN8particle7globals11instanceSpiEv>
   d51b8:	f001 f8dc 	bl	d6374 <_ZN8SPIClass5beginEv>
   d51bc:	e00f      	b.n	d51de <_ZN15Adafruit_BME2804initEv+0x5c>
        } else {
            // software SPI
            pinMode(_sck, OUTPUT);
   d51be:	2101      	movs	r1, #1
   d51c0:	b280      	uxth	r0, r0
   d51c2:	f002 ffd9 	bl	d8178 <pinMode>
            pinMode(_mosi, OUTPUT);
   d51c6:	f994 0011 	ldrsb.w	r0, [r4, #17]
   d51ca:	2101      	movs	r1, #1
   d51cc:	b280      	uxth	r0, r0
   d51ce:	f002 ffd3 	bl	d8178 <pinMode>
            pinMode(_miso, INPUT);
   d51d2:	f994 0012 	ldrsb.w	r0, [r4, #18]
   d51d6:	2100      	movs	r1, #0
   d51d8:	b280      	uxth	r0, r0
   d51da:	f002 ffcd 	bl	d8178 <pinMode>
        }
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d51de:	21d0      	movs	r1, #208	; 0xd0
   d51e0:	4620      	mov	r0, r4
   d51e2:	f7ff fe1f 	bl	d4e24 <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
   d51e6:	2860      	cmp	r0, #96	; 0x60
            pinMode(_miso, INPUT);
        }
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d51e8:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
   d51ea:	d120      	bne.n	d522e <_ZN15Adafruit_BME2804initEv+0xac>
        return false;

    // reset the device using soft-reset
    // this makes sure the IIR is off, etc.
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   d51ec:	4620      	mov	r0, r4
   d51ee:	22b6      	movs	r2, #182	; 0xb6
   d51f0:	21e0      	movs	r1, #224	; 0xe0
   d51f2:	f7ff fd7f 	bl	d4cf4 <_ZN15Adafruit_BME2806write8Ehh>

    // wait for chip to wake up.
    delay(300);
   d51f6:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d51fa:	f001 fd8d 	bl	d6d18 <delay>

    // if chip is still reading calibration, delay
    while (isReadingCalibration())
   d51fe:	4620      	mov	r0, r4
   d5200:	f7ff ffb8 	bl	d5174 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   d5204:	4605      	mov	r5, r0
   d5206:	b108      	cbz	r0, d520c <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
   d5208:	2064      	movs	r0, #100	; 0x64
   d520a:	e7f6      	b.n	d51fa <_ZN15Adafruit_BME2804initEv+0x78>

    readCoefficients(); // read trimming parameters, see DS 4.2.2
   d520c:	4620      	mov	r0, r4
   d520e:	f7ff ff41 	bl	d5094 <_ZN15Adafruit_BME28016readCoefficientsEv>

    setSampling(); // use defaults
   d5212:	2305      	movs	r3, #5
   d5214:	9300      	str	r3, [sp, #0]
   d5216:	461a      	mov	r2, r3
   d5218:	2103      	movs	r1, #3
   d521a:	4620      	mov	r0, r4
   d521c:	9502      	str	r5, [sp, #8]
   d521e:	9501      	str	r5, [sp, #4]
   d5220:	f7ff fdba 	bl	d4d98 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>

    delay(100);
   d5224:	2064      	movs	r0, #100	; 0x64
   d5226:	f001 fd77 	bl	d6d18 <delay>

    return true;
   d522a:	2001      	movs	r0, #1
   d522c:	e000      	b.n	d5230 <_ZN15Adafruit_BME2804initEv+0xae>
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
    if (_sensorID != 0x60)
        return false;
   d522e:	2000      	movs	r0, #0
    setSampling(); // use defaults

    delay(100);

    return true;
}
   d5230:	b005      	add	sp, #20
   d5232:	bd30      	pop	{r4, r5, pc}

000d5234 <_ZN15Adafruit_BME2805beginEh>:
    @param addr the I2C address the device can be found on
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::begin(uint8_t addr)
{
   d5234:	b510      	push	{r4, lr}
	_i2caddr = addr;
   d5236:	7101      	strb	r1, [r0, #4]
    @param addr the I2C address the device can be found on
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::begin(uint8_t addr)
{
   d5238:	4604      	mov	r4, r0
	_i2caddr = addr;
	_wire = &Wire;
   d523a:	f003 f82b 	bl	d8294 <_Z19__fetch_global_Wirev>
   d523e:	6020      	str	r0, [r4, #0]
	return init();
   d5240:	4620      	mov	r0, r4
}
   d5242:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
/**************************************************************************/
bool Adafruit_BME280::begin(uint8_t addr)
{
	_i2caddr = addr;
	_wire = &Wire;
	return init();
   d5246:	f7ff bf9c 	b.w	d5182 <_ZN15Adafruit_BME2804initEv>
	...

000d524c <_ZN15Adafruit_BME28015readTemperatureEv>:
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   d524c:	b510      	push	{r4, lr}
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d524e:	21fa      	movs	r1, #250	; 0xfa
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   d5250:	4604      	mov	r4, r0
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d5252:	f7ff feaf 	bl	d4fb4 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
   d5256:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   d525a:	d01e      	beq.n	d529a <_ZN15Adafruit_BME28015readTemperatureEv+0x4e>
        return NAN;
    adc_T >>= 4;

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d525c:	8aa2      	ldrh	r2, [r4, #20]
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   d525e:	ed9f 7a10 	vldr	s14, [pc, #64]	; d52a0 <_ZN15Adafruit_BME28015readTemperatureEv+0x54>

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
             
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
   d5262:	ebc2 2320 	rsb	r3, r2, r0, asr #8
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;
   d5266:	0052      	lsls	r2, r2, #1
   d5268:	ebc2 10e0 	rsb	r0, r2, r0, asr #7
   d526c:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
   d5270:	435b      	muls	r3, r3
   d5272:	4350      	muls	r0, r2
   d5274:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
   d5278:	131b      	asrs	r3, r3, #12
   d527a:	4353      	muls	r3, r2
   d527c:	139b      	asrs	r3, r3, #14
   d527e:	eb03 20e0 	add.w	r0, r3, r0, asr #11
   d5282:	60e0      	str	r0, [r4, #12]

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   d5284:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   d5288:	3080      	adds	r0, #128	; 0x80
   d528a:	1200      	asrs	r0, r0, #8
   d528c:	ee07 0a90 	vmov	s15, r0
   d5290:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5294:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d5298:	bd10      	pop	{r4, pc}
{
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
    if (adc_T == 0x800000) // value in case temp measurement was disabled
        return NAN;
   d529a:	ed9f 0a02 	vldr	s0, [pc, #8]	; d52a4 <_ZN15Adafruit_BME28015readTemperatureEv+0x58>

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
}
   d529e:	bd10      	pop	{r4, pc}
   d52a0:	42c80000 	.word	0x42c80000
   d52a4:	7fc00000 	.word	0x7fc00000

000d52a8 <_ZN15Adafruit_BME28012readPressureEv>:
/*!
    @brief  Returns the pressure from the sensor
    @returns the pressure value (in Pascal) read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readPressure(void) {
   d52a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d52ac:	4606      	mov	r6, r0
    int64_t var1, var2, p;

    readTemperature(); // must be done first to get t_fine
   d52ae:	f7ff ffcd 	bl	d524c <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   d52b2:	21f7      	movs	r1, #247	; 0xf7
   d52b4:	4630      	mov	r0, r6
   d52b6:	f7ff fe7d 	bl	d4fb4 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   d52ba:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
float Adafruit_BME280::readPressure(void) {
    int64_t var1, var2, p;

    readTemperature(); // must be done first to get t_fine

    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   d52be:	4607      	mov	r7, r0
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   d52c0:	f000 80c1 	beq.w	d5446 <_ZN15Adafruit_BME28012readPressureEv+0x19e>
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
   d52c4:	68f4      	ldr	r4, [r6, #12]
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   d52c6:	f9b6 201c 	ldrsh.w	r2, [r6, #28]
    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
   d52ca:	17e5      	asrs	r5, r4, #31
   d52cc:	f5b4 34fa 	subs.w	r4, r4, #128000	; 0x1f400
   d52d0:	f145 35ff 	adc.w	r5, r5, #4294967295
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d52d4:	fba4 8904 	umull	r8, r9, r4, r4
   d52d8:	fb04 f305 	mul.w	r3, r4, r5
   d52dc:	eb09 0943 	add.w	r9, r9, r3, lsl #1
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   d52e0:	fb02 f105 	mul.w	r1, r2, r5
   d52e4:	17d3      	asrs	r3, r2, #31
   d52e6:	fb04 1103 	mla	r1, r4, r3, r1
   d52ea:	fba2 2304 	umull	r2, r3, r2, r4
   d52ee:	440b      	add	r3, r1
   d52f0:	0319      	lsls	r1, r3, #12
   d52f2:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
   d52f6:	0310      	lsls	r0, r2, #12
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   d52f8:	f9b6 201e 	ldrsh.w	r2, [r6, #30]
   d52fc:	17d3      	asrs	r3, r2, #31
   d52fe:	fb02 fe09 	mul.w	lr, r2, r9
   d5302:	fb08 ee03 	mla	lr, r8, r3, lr
   d5306:	fba2 2308 	umull	r2, r3, r2, r8
   d530a:	4473      	add	r3, lr
   d530c:	ea4f 2a12 	mov.w	sl, r2, lsr #8
   d5310:	ea4a 6a03 	orr.w	sl, sl, r3, lsl #24
   d5314:	eb1a 0a00 	adds.w	sl, sl, r0
   d5318:	8b72      	ldrh	r2, [r6, #26]
   d531a:	ea4f 2b23 	mov.w	fp, r3, asr #8
   d531e:	eb4b 0b01 	adc.w	fp, fp, r1
   d5322:	f11a 0000 	adds.w	r0, sl, #0
   d5326:	f54b 4100 	adc.w	r1, fp, #32768	; 0x8000
   d532a:	fba0 ab02 	umull	sl, fp, r0, r2
   d532e:	fb02 bb01 	mla	fp, r2, r1, fp
   d5332:	ea4f 026b 	mov.w	r2, fp, asr #1
   d5336:	ea4f 73eb 	mov.w	r3, fp, asr #31

    if (var1 == 0) {
   d533a:	ea52 0103 	orrs.w	r1, r2, r3
   d533e:	f000 8086 	beq.w	d544e <_ZN15Adafruit_BME28012readPressureEv+0x1a6>
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d5342:	f9b6 a024 	ldrsh.w	sl, [r6, #36]	; 0x24
   d5346:	ea4f 7bea 	mov.w	fp, sl, asr #31
   d534a:	fb0a f109 	mul.w	r1, sl, r9
   d534e:	fb08 110b 	mla	r1, r8, fp, r1
   d5352:	fbaa 8908 	umull	r8, r9, sl, r8
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d5356:	f9b6 a022 	ldrsh.w	sl, [r6, #34]	; 0x22
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d535a:	4489      	add	r9, r1
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d535c:	ea4f 7bea 	mov.w	fp, sl, asr #31
   d5360:	fb0a f105 	mul.w	r1, sl, r5
   d5364:	fb04 110b 	mla	r1, r4, fp, r1
   d5368:	fbaa 4504 	umull	r4, r5, sl, r4
   d536c:	440d      	add	r5, r1
   d536e:	ea4f 4b45 	mov.w	fp, r5, lsl #17
   d5372:	ea4f 4a44 	mov.w	sl, r4, lsl #17

    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
   d5376:	1138      	asrs	r0, r7, #4
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d5378:	eb1a 0a08 	adds.w	sl, sl, r8

    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
   d537c:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d5380:	ea4b 3bd4 	orr.w	fp, fp, r4, lsr #15
   d5384:	eb4b 0b09 	adc.w	fp, fp, r9

    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
   d5388:	ea4f 79e0 	mov.w	r9, r0, asr #31
   d538c:	ea4f 75c9 	mov.w	r5, r9, lsl #31
   d5390:	ea45 0550 	orr.w	r5, r5, r0, lsr #1
   d5394:	07c4      	lsls	r4, r0, #31
   d5396:	f9b6 0020 	ldrsh.w	r0, [r6, #32]
   d539a:	f04f 0800 	mov.w	r8, #0
   d539e:	eb18 080a 	adds.w	r8, r8, sl
   d53a2:	ea4f 09c0 	mov.w	r9, r0, lsl #3
   d53a6:	eb49 090b 	adc.w	r9, r9, fp
   d53aa:	f640 4735 	movw	r7, #3125	; 0xc35
   d53ae:	ebb4 0408 	subs.w	r4, r4, r8
   d53b2:	eb65 0509 	sbc.w	r5, r5, r9
   d53b6:	fba4 0107 	umull	r0, r1, r4, r7
   d53ba:	fb07 1105 	mla	r1, r7, r5, r1
   d53be:	f005 f841 	bl	da444 <__aeabi_ldivmod>
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d53c2:	f9b6 202a 	ldrsh.w	r2, [r6, #42]	; 0x2a
    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   d53c6:	134c      	asrs	r4, r1, #13
   d53c8:	0b45      	lsrs	r5, r0, #13
   d53ca:	ea45 45c1 	orr.w	r5, r5, r1, lsl #19
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d53ce:	fb02 f704 	mul.w	r7, r2, r4
   d53d2:	17d3      	asrs	r3, r2, #31
   d53d4:	fb05 7703 	mla	r7, r5, r3, r7
   d53d8:	fba2 2305 	umull	r2, r3, r2, r5
   d53dc:	443b      	add	r3, r7
   d53de:	4354      	muls	r4, r2
   d53e0:	fb05 4403 	mla	r4, r5, r3, r4
   d53e4:	fba2 2305 	umull	r2, r3, r2, r5
   d53e8:	4423      	add	r3, r4
   d53ea:	0e54      	lsrs	r4, r2, #25
   d53ec:	ea44 14c3 	orr.w	r4, r4, r3, lsl #7
   d53f0:	f9b6 2028 	ldrsh.w	r2, [r6, #40]	; 0x28
   d53f4:	1824      	adds	r4, r4, r0
   d53f6:	ea4f 6563 	mov.w	r5, r3, asr #25
   d53fa:	414d      	adcs	r5, r1
   d53fc:	17d3      	asrs	r3, r2, #31
   d53fe:	4351      	muls	r1, r2
   d5400:	fb00 1303 	mla	r3, r0, r3, r1
   d5404:	fba2 0100 	umull	r0, r1, r2, r0
   d5408:	4419      	add	r1, r3
   d540a:	0cc2      	lsrs	r2, r0, #19
   d540c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
   d5410:	1912      	adds	r2, r2, r4
    return (float)p/256;
   d5412:	f9b6 4026 	ldrsh.w	r4, [r6, #38]	; 0x26
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d5416:	ea4f 43e1 	mov.w	r3, r1, asr #19
   d541a:	416b      	adcs	r3, r5
   d541c:	0a10      	lsrs	r0, r2, #8
    return (float)p/256;
   d541e:	17e5      	asrs	r5, r4, #31
   d5420:	0122      	lsls	r2, r4, #4
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d5422:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
   d5426:	1219      	asrs	r1, r3, #8
    return (float)p/256;
   d5428:	012b      	lsls	r3, r5, #4
   d542a:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
   d542e:	1880      	adds	r0, r0, r2
   d5430:	4159      	adcs	r1, r3
   d5432:	f004 ffc9 	bl	da3c8 <__aeabi_l2f>
   d5436:	ed9f 0a08 	vldr	s0, [pc, #32]	; d5458 <_ZN15Adafruit_BME28012readPressureEv+0x1b0>
   d543a:	ee07 0a90 	vmov	s15, r0
   d543e:	ee27 0a80 	vmul.f32	s0, s15, s0
   d5442:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

    readTemperature(); // must be done first to get t_fine

    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
   d5446:	ed9f 0a05 	vldr	s0, [pc, #20]	; d545c <_ZN15Adafruit_BME28012readPressureEv+0x1b4>
   d544a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;

    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
   d544e:	ed9f 0a04 	vldr	s0, [pc, #16]	; d5460 <_ZN15Adafruit_BME28012readPressureEv+0x1b8>
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
    return (float)p/256;
}
   d5452:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5456:	bf00      	nop
   d5458:	3b800000 	.word	0x3b800000
   d545c:	7fc00000 	.word	0x7fc00000
   d5460:	00000000 	.word	0x00000000

000d5464 <_ZN15Adafruit_BME28012readHumidityEv>:
/*!
    @brief  Returns the humidity from the sensor
    @returns the humidity value read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readHumidity(void) {
   d5464:	b510      	push	{r4, lr}
   d5466:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
   d5468:	f7ff fef0 	bl	d524c <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
   d546c:	21fd      	movs	r1, #253	; 0xfd
   d546e:	4620      	mov	r0, r4
   d5470:	f7ff fd32 	bl	d4ed8 <_ZN15Adafruit_BME2806read16Eh>
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
   d5474:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   d5478:	d038      	beq.n	d54ec <_ZN15Adafruit_BME28012readHumidityEv+0x88>
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d547a:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
        return NAN;
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));
   d547e:	68e2      	ldr	r2, [r4, #12]

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d5480:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
   d5484:	051b      	lsls	r3, r3, #20
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
        return NAN;
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));
   d5486:	f5a2 3296 	sub.w	r2, r2, #76800	; 0x12c00

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d548a:	ebc3 3380 	rsb	r3, r3, r0, lsl #14
   d548e:	fb02 3311 	mls	r3, r2, r1, r3
   d5492:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   d5496:	13d9      	asrs	r1, r3, #15
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   d5498:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   d549c:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d54a0:	4353      	muls	r3, r2
   d54a2:	12db      	asrs	r3, r3, #11
   d54a4:	4342      	muls	r2, r0
   d54a6:	1292      	asrs	r2, r2, #10
   d54a8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   d54ac:	4353      	muls	r3, r2
   d54ae:	129b      	asrs	r3, r3, #10
   d54b0:	f9b4 202e 	ldrsh.w	r2, [r4, #46]	; 0x2e
   d54b4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   d54b8:	4353      	muls	r3, r2
   d54ba:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   d54be:	139b      	asrs	r3, r3, #14
   d54c0:	434b      	muls	r3, r1

    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   d54c2:	13da      	asrs	r2, r3, #15
                               ((int32_t)_bme280_calib.dig_H1)) >> 4));
   d54c4:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
   d54c8:	4352      	muls	r2, r2
   d54ca:	11d2      	asrs	r2, r2, #7
   d54cc:	434a      	muls	r2, r1
   d54ce:	eba3 1322 	sub.w	r3, r3, r2, asr #4

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
   d54d2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
    float h = (v_x1_u32r>>12);
    return  h / 1024.0;
   d54d6:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
   d54da:	bfa8      	it	ge
   d54dc:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
   d54e0:	131b      	asrs	r3, r3, #12
   d54e2:	ee00 3a10 	vmov	s0, r3
   d54e6:	eeba 0acb 	vcvt.f32.s32	s0, s0, #10
   d54ea:	bd10      	pop	{r4, pc}
float Adafruit_BME280::readHumidity(void) {
    readTemperature(); // must be done first to get t_fine

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
        return NAN;
   d54ec:	ed9f 0a01 	vldr	s0, [pc, #4]	; d54f4 <_ZN15Adafruit_BME28012readHumidityEv+0x90>

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
    float h = (v_x1_u32r>>12);
    return  h / 1024.0;
}
   d54f0:	bd10      	pop	{r4, pc}
   d54f2:	bf00      	nop
   d54f4:	7fc00000 	.word	0x7fc00000

000d54f8 <_ZN15Adafruit_BME28012readAltitudeEf>:
    @param  seaLevel      Sea-level pressure in hPa
    @returns the altitude value read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readAltitude(float seaLevel)
{
   d54f8:	b508      	push	{r3, lr}
   d54fa:	ed2d 8b02 	vpush	{d8}
   d54fe:	eeb0 8a40 	vmov.f32	s16, s0

    // Note that using the equation from wikipedia can give bad results
    // at high altitude. See this thread for more information:
    //  http://forums.adafruit.com/viewtopic.php?f=22&t=58064

    float atmospheric = readPressure() / 100.0F;
   d5502:	f7ff fed1 	bl	d52a8 <_ZN15Adafruit_BME28012readPressureEv>
    return 44330.0 * (1.0 - pow(atmospheric / seaLevel, 0.1903));
   d5506:	eddf 7a16 	vldr	s15, [pc, #88]	; d5560 <_ZN15Adafruit_BME28012readAltitudeEf+0x68>
   d550a:	ee80 0a27 	vdiv.f32	s0, s0, s15
   d550e:	eec0 7a08 	vdiv.f32	s15, s0, s16
   d5512:	ee17 0a90 	vmov	r0, s15
   d5516:	f004 faeb 	bl	d9af0 <__aeabi_f2d>
   d551a:	ed9f 1b0d 	vldr	d1, [pc, #52]	; d5550 <_ZN15Adafruit_BME28012readAltitudeEf+0x58>
   d551e:	ec41 0b10 	vmov	d0, r0, r1
   d5522:	f003 f849 	bl	d85b8 <pow>
   d5526:	2000      	movs	r0, #0
   d5528:	ec53 2b10 	vmov	r2, r3, d0
   d552c:	490d      	ldr	r1, [pc, #52]	; (d5564 <_ZN15Adafruit_BME28012readAltitudeEf+0x6c>)
   d552e:	f004 f97f 	bl	d9830 <__aeabi_dsub>
   d5532:	a309      	add	r3, pc, #36	; (adr r3, d5558 <_ZN15Adafruit_BME28012readAltitudeEf+0x60>)
   d5534:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5538:	f004 fb2e 	bl	d9b98 <__aeabi_dmul>
   d553c:	f004 fe24 	bl	da188 <__aeabi_d2f>
}
   d5540:	ecbd 8b02 	vpop	{d8}
   d5544:	ee00 0a10 	vmov	s0, r0
   d5548:	bd08      	pop	{r3, pc}
   d554a:	bf00      	nop
   d554c:	f3af 8000 	nop.w
   d5550:	1a36e2eb 	.word	0x1a36e2eb
   d5554:	3fc85bc0 	.word	0x3fc85bc0
   d5558:	00000000 	.word	0x00000000
   d555c:	40e5a540 	.word	0x40e5a540
   d5560:	42c80000 	.word	0x42c80000
   d5564:	3ff00000 	.word	0x3ff00000

000d5568 <_ZN15Adafruit_BME2808sensorIDEv>:
*/
/**************************************************************************/
uint32_t Adafruit_BME280::sensorID(void)
{
	return _sensorID;
   d5568:	6880      	ldr	r0, [r0, #8]
   d556a:	4770      	bx	lr

000d556c <_GLOBAL__sub_I__ZN15Adafruit_BME280C2Ev>:
   d556c:	f000 bb94 	b.w	d5c98 <HAL_Pin_Map>

000d5570 <_ZN19Adafruit_MQTT_SPARK9connectedEv>:
    client->stop();
  }
  return true;
}

bool Adafruit_MQTT_SPARK::connected() {
   d5570:	b508      	push	{r3, lr}
  // Return true if connected, false if not connected.
  return client->connected();
   d5572:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   d5576:	6803      	ldr	r3, [r0, #0]
   d5578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d557a:	4798      	blx	r3
}
   d557c:	3000      	adds	r0, #0
   d557e:	bf18      	it	ne
   d5580:	2001      	movne	r0, #1
   d5582:	bd08      	pop	{r3, pc}

000d5584 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht>:
    delay(MQTT_CLIENT_READINTERVAL_MS);
  }
  return len;
}

bool Adafruit_MQTT_SPARK::sendPacket(uint8_t *buffer, uint16_t len) {
   d5584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5586:	4606      	mov	r6, r0
   d5588:	460f      	mov	r7, r1
   d558a:	4614      	mov	r4, r2
  uint16_t ret = 0;

  while (len > 0) {
   d558c:	b1c4      	cbz	r4, d55c0 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x3c>
    if (client->connected()) {
   d558e:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d5592:	6803      	ldr	r3, [r0, #0]
   d5594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5596:	4798      	blx	r3
   d5598:	b908      	cbnz	r0, d559e <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x1a>
	DEBUG_PRINTLN("Failed to send packet.");
	return false;
      }
    } else {
      DEBUG_PRINTLN(F("Connection failed!"));
      return false;
   d559a:	2000      	movs	r0, #0
   d559c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (client->connected()) {
      // send 250 bytes at most at a time, can adjust this later based on Client

      uint16_t sendlen = min(len, 250);
      //Serial.print("Sending: "); Serial.println(sendlen);
      ret = client->write(buffer, sendlen);
   d559e:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
max (T a, U b) { return ((a)>(b)?(a):(b)); }

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d55a2:	2cfa      	cmp	r4, #250	; 0xfa
   d55a4:	6803      	ldr	r3, [r0, #0]
   d55a6:	4625      	mov	r5, r4
   d55a8:	bfa8      	it	ge
   d55aa:	25fa      	movge	r5, #250	; 0xfa
   d55ac:	68db      	ldr	r3, [r3, #12]
   d55ae:	462a      	mov	r2, r5
   d55b0:	4639      	mov	r1, r7
   d55b2:	4798      	blx	r3
   d55b4:	b280      	uxth	r0, r0
      DEBUG_PRINT(F("Client sendPacket returned: ")); DEBUG_PRINTLN(ret);
      len -= ret;
   d55b6:	1a24      	subs	r4, r4, r0

      if (ret != sendlen) {
   d55b8:	4285      	cmp	r5, r0

      uint16_t sendlen = min(len, 250);
      //Serial.print("Sending: "); Serial.println(sendlen);
      ret = client->write(buffer, sendlen);
      DEBUG_PRINT(F("Client sendPacket returned: ")); DEBUG_PRINTLN(ret);
      len -= ret;
   d55ba:	b2a4      	uxth	r4, r4

      if (ret != sendlen) {
   d55bc:	d0e6      	beq.n	d558c <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x8>
   d55be:	e7ec      	b.n	d559a <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x16>
    } else {
      DEBUG_PRINTLN(F("Connection failed!"));
      return false;
    }
  }
  return true;
   d55c0:	2001      	movs	r0, #1
}
   d55c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d55c4 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts>:
  // Return true if connected, false if not connected.
  return client->connected();
}

uint16_t Adafruit_MQTT_SPARK::readPacket(uint8_t *buffer, uint16_t maxlen,
                                          int16_t timeout) {
   d55c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d55c8:	4606      	mov	r6, r0
   d55ca:	4688      	mov	r8, r1
   d55cc:	4691      	mov	r9, r2
   d55ce:	461f      	mov	r7, r3
   d55d0:	461d      	mov	r5, r3
  /* Read data until either the connection is closed, or the idle timeout is reached. */
  uint16_t len = 0;
   d55d2:	2400      	movs	r4, #0
  int16_t t = timeout;

  while (client->connected() && (timeout >= 0)) {
   d55d4:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d55d8:	6803      	ldr	r3, [r0, #0]
   d55da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d55dc:	4798      	blx	r3
   d55de:	b1d0      	cbz	r0, d5616 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
   d55e0:	2d00      	cmp	r5, #0
   d55e2:	db18      	blt.n	d5616 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
    //DEBUG_PRINT('.');
    while (client->available()) {
   d55e4:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d55e8:	6803      	ldr	r3, [r0, #0]
   d55ea:	691b      	ldr	r3, [r3, #16]
   d55ec:	4798      	blx	r3
   d55ee:	b160      	cbz	r0, d560a <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x46>
      //DEBUG_PRINT('!');
      char c = client->read();
   d55f0:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d55f4:	6803      	ldr	r3, [r0, #0]
   d55f6:	695b      	ldr	r3, [r3, #20]
   d55f8:	4798      	blx	r3
      timeout = t;  // reset the timeout
      buffer[len] = c;
   d55fa:	f808 0004 	strb.w	r0, [r8, r4]
      //DEBUG_PRINTLN((uint8_t)c, HEX);
      len++;
   d55fe:	3401      	adds	r4, #1
   d5600:	b2a4      	uxth	r4, r4
      if (len == maxlen) {  // we read all we want, bail
   d5602:	454c      	cmp	r4, r9
   d5604:	d007      	beq.n	d5616 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
  while (client->connected() && (timeout >= 0)) {
    //DEBUG_PRINT('.');
    while (client->available()) {
      //DEBUG_PRINT('!');
      char c = client->read();
      timeout = t;  // reset the timeout
   d5606:	463d      	mov	r5, r7
   d5608:	e7ec      	b.n	d55e4 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x20>
        DEBUG_PRINT(F("Read data:\t"));
        DEBUG_PRINTBUFFER(buffer, len);
        return len;
      }
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   d560a:	3d0a      	subs	r5, #10
    delay(MQTT_CLIENT_READINTERVAL_MS);
   d560c:	200a      	movs	r0, #10
        DEBUG_PRINT(F("Read data:\t"));
        DEBUG_PRINTBUFFER(buffer, len);
        return len;
      }
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   d560e:	b22d      	sxth	r5, r5
    delay(MQTT_CLIENT_READINTERVAL_MS);
   d5610:	f001 fb82 	bl	d6d18 <delay>
                                          int16_t timeout) {
  /* Read data until either the connection is closed, or the idle timeout is reached. */
  uint16_t len = 0;
  int16_t t = timeout;

  while (client->connected() && (timeout >= 0)) {
   d5614:	e7de      	b.n	d55d4 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x10>
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
    delay(MQTT_CLIENT_READINTERVAL_MS);
  }
  return len;
}
   d5616:	4620      	mov	r0, r4
   d5618:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d561c <_ZN19Adafruit_MQTT_SPARK13connectServerEv>:
        }
    }
    return true;
}

bool Adafruit_MQTT_SPARK::connectServer(){
   d561c:	b570      	push	{r4, r5, r6, lr}
   d561e:	4604      	mov	r4, r0
  // Grab server name from flash and copy to buffer for name resolution.
  memset(buffer, 0, sizeof(buffer));
   d5620:	f100 0522 	add.w	r5, r0, #34	; 0x22
   d5624:	2296      	movs	r2, #150	; 0x96
   d5626:	2100      	movs	r1, #0
   d5628:	4628      	mov	r0, r5
   d562a:	f005 fa8b 	bl	dab44 <memset>
  strcpy((char *)buffer, servername);
   d562e:	6861      	ldr	r1, [r4, #4]
   d5630:	4628      	mov	r0, r5
   d5632:	f005 fac1 	bl	dabb8 <strcpy>
  DEBUG_PRINT(F("Connecting to: ")); DEBUG_PRINTLN((char *)buffer);
  // Connect and check for success (0 result).
  int r = client->connect((char *)buffer, portnum);
   d5636:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   d563a:	8922      	ldrh	r2, [r4, #8]
   d563c:	6803      	ldr	r3, [r0, #0]
   d563e:	4629      	mov	r1, r5
   d5640:	6a5e      	ldr	r6, [r3, #36]	; 0x24
   d5642:	2300      	movs	r3, #0
   d5644:	47b0      	blx	r6
  DEBUG_PRINT(F("Connect result: ")); DEBUG_PRINTLN(r);
  return r != 0;
}
   d5646:	3000      	adds	r0, #0
   d5648:	bf18      	it	ne
   d564a:	2001      	movne	r0, #1
   d564c:	bd70      	pop	{r4, r5, r6, pc}

000d564e <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv>:

bool Adafruit_MQTT_SPARK::disconnectServer() {
   d564e:	b510      	push	{r4, lr}
   d5650:	4604      	mov	r4, r0
  // Stop connection if connected and return success (stop has no indication of
  // failure).
  if (client->connected()) {
   d5652:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   d5656:	6803      	ldr	r3, [r0, #0]
   d5658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d565a:	4798      	blx	r3
   d565c:	b120      	cbz	r0, d5668 <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv+0x1a>
    client->stop();
   d565e:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   d5662:	6803      	ldr	r3, [r0, #0]
   d5664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5666:	4798      	blx	r3
  }
  return true;
}
   d5668:	2001      	movs	r0, #1
   d566a:	bd10      	pop	{r4, pc}

000d566c <_ZN19Adafruit_MQTT_SPARK6UpdateEv>:
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#include "Adafruit_MQTT_SPARK.h"

bool Adafruit_MQTT_SPARK::Update()
{
   d566c:	b570      	push	{r4, r5, r6, lr}
    // Stop if already connected.
    if (!connected())
   d566e:	6803      	ldr	r3, [r0, #0]
   d5670:	689b      	ldr	r3, [r3, #8]
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#include "Adafruit_MQTT_SPARK.h"

bool Adafruit_MQTT_SPARK::Update()
{
   d5672:	4604      	mov	r4, r0
    // Stop if already connected.
    if (!connected())
   d5674:	4798      	blx	r3
   d5676:	b9c8      	cbnz	r0, d56ac <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x40>
    {
        DEBUG_PRINT(F("Connecting to MQTT... "));
        
        uint8_t retries = 0;
        for(int8_t ret = connect() ; ret != 0 && retries < 3 ; ret = connect() , retries++)
   d5678:	4620      	mov	r0, r4
   d567a:	f000 fa60 	bl	d5b3e <_ZN13Adafruit_MQTT7connectEv>
   d567e:	2504      	movs	r5, #4
   d5680:	b170      	cbz	r0, d56a0 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x34>
   d5682:	3d01      	subs	r5, #1
   d5684:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d5688:	d00a      	beq.n	d56a0 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x34>
        { // connect will return 0 for connected
            DEBUG_PRINT(connectErrorString(ret));
            DEBUG_PRINT(F("Retrying MQTT connection in 5 seconds..."));
            disconnect();
   d568a:	4620      	mov	r0, r4
   d568c:	f000 f8aa 	bl	d57e4 <_ZN13Adafruit_MQTT10disconnectEv>
            delay(5000);  // wait 5 seconds
   d5690:	f241 3088 	movw	r0, #5000	; 0x1388
   d5694:	f001 fb40 	bl	d6d18 <delay>
    if (!connected())
    {
        DEBUG_PRINT(F("Connecting to MQTT... "));
        
        uint8_t retries = 0;
        for(int8_t ret = connect() ; ret != 0 && retries < 3 ; ret = connect() , retries++)
   d5698:	4620      	mov	r0, r4
   d569a:	f000 fa50 	bl	d5b3e <_ZN13Adafruit_MQTT7connectEv>
   d569e:	e7ef      	b.n	d5680 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x14>
            DEBUG_PRINT(F("Retrying MQTT connection in 5 seconds..."));
            disconnect();
            delay(5000);  // wait 5 seconds
        }
      
        if( connected() )
   d56a0:	6823      	ldr	r3, [r4, #0]
   d56a2:	4620      	mov	r0, r4
   d56a4:	689b      	ldr	r3, [r3, #8]
            DEBUG_PRINT(F("Failed to connect"));
            return false;
        }
    }
    return true;
}
   d56a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            DEBUG_PRINT(F("Retrying MQTT connection in 5 seconds..."));
            disconnect();
            delay(5000);  // wait 5 seconds
        }
      
        if( connected() )
   d56aa:	4718      	bx	r3
            DEBUG_PRINT(F("Failed to connect"));
            return false;
        }
    }
    return true;
}
   d56ac:	bd70      	pop	{r4, r5, r6, pc}

000d56ae <_GLOBAL__sub_I__ZN19Adafruit_MQTT_SPARK6UpdateEv>:
   d56ae:	f000 baf3 	b.w	d5c98 <HAL_Pin_Map>

000d56b2 <_ZL11stringprintPhPKct.constprop.3>:
  memmove(p, s, len);
  return p+len;
}
*/

static uint8_t *stringprint(uint8_t *p, const char *s, uint16_t maxlen=0) {
   d56b2:	b570      	push	{r4, r5, r6, lr}
   d56b4:	4604      	mov	r4, r0
  // If maxlen is specified (has a non-zero value) then use it as the maximum
  // length of the source string to write to the buffer.  Otherwise write
  // the entire source string.
  uint16_t len = strlen(s);
   d56b6:	4608      	mov	r0, r1
  memmove(p, s, len);
  return p+len;
}
*/

static uint8_t *stringprint(uint8_t *p, const char *s, uint16_t maxlen=0) {
   d56b8:	460e      	mov	r6, r1
  // If maxlen is specified (has a non-zero value) then use it as the maximum
  // length of the source string to write to the buffer.  Otherwise write
  // the entire source string.
  uint16_t len = strlen(s);
   d56ba:	f005 faa0 	bl	dabfe <strlen>
  /*
  for (uint8_t i=0; i<len; i++) {
    Serial.write(pgm_read_byte(s+i));
  }
  */
  p[0] = len >> 8; p++;
   d56be:	1203      	asrs	r3, r0, #8
   d56c0:	7023      	strb	r3, [r4, #0]
  p[0] = len & 0xFF; p++;
   d56c2:	7060      	strb	r0, [r4, #1]
   d56c4:	b285      	uxth	r5, r0
   d56c6:	3402      	adds	r4, #2
  strncpy((char *)p, s, len);
   d56c8:	462a      	mov	r2, r5
   d56ca:	4631      	mov	r1, r6
   d56cc:	4620      	mov	r0, r4
   d56ce:	f005 fad8 	bl	dac82 <strncpy>
  return p+len;
}
   d56d2:	1960      	adds	r0, r4, r5
   d56d4:	bd70      	pop	{r4, r5, r6, pc}
	...

000d56d8 <_ZN13Adafruit_MQTTC1EPKctS1_S1_>:
  packet_id_counter = 0;

}


Adafruit_MQTT::Adafruit_MQTT(const char *server,
   d56d8:	b530      	push	{r4, r5, lr}
                             const char *user,
                             const char *pass) {
  servername = server;
  portnum = port;
  clientid = "";
  username = user;
   d56da:	6103      	str	r3, [r0, #16]
  password = pass;
   d56dc:	9b03      	ldr	r3, [sp, #12]


Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
   d56de:	4d0d      	ldr	r5, [pc, #52]	; (d5714 <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x3c>)
  servername = server;
  portnum = port;
   d56e0:	8102      	strh	r2, [r0, #8]
  clientid = "";
  username = user;
  password = pass;
   d56e2:	6143      	str	r3, [r0, #20]
                             uint16_t port,
                             const char *user,
                             const char *pass) {
  servername = server;
  portnum = port;
  clientid = "";
   d56e4:	4a0c      	ldr	r2, [pc, #48]	; (d5718 <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x40>)


Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
   d56e6:	6005      	str	r5, [r0, #0]
  username = user;
  password = pass;

  // reset subscriptions
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    subscriptions[i] = 0;
   d56e8:	2300      	movs	r3, #0

Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
  servername = server;
   d56ea:	6041      	str	r1, [r0, #4]
  portnum = port;
  clientid = "";
   d56ec:	60c2      	str	r2, [r0, #12]
  username = user;
  password = pass;

  // reset subscriptions
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    subscriptions[i] = 0;
   d56ee:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
   d56f2:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
   d56f6:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
   d56fa:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
   d56fe:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
  }

  will_topic = 0;
   d5702:	6183      	str	r3, [r0, #24]
  will_payload = 0;
   d5704:	61c3      	str	r3, [r0, #28]
  will_qos = 0;
   d5706:	f880 3020 	strb.w	r3, [r0, #32]
  will_retain = 0;
   d570a:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

  packet_id_counter = 0;
   d570e:	f8a0 30b8 	strh.w	r3, [r0, #184]	; 0xb8

}
   d5712:	bd30      	pop	{r4, r5, pc}
   d5714:	000db8d0 	.word	0x000db8d0
   d5718:	000db8f9 	.word	0x000db8f9

000d571c <_ZN13Adafruit_MQTT14readFullPacketEPhtt>:
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   d571c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   d5720:	fa0f fa83 	sxth.w	sl, r3
   d5724:	6803      	ldr	r3, [r0, #0]
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   d5726:	9201      	str	r2, [sp, #4]
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   d5728:	699d      	ldr	r5, [r3, #24]
   d572a:	2201      	movs	r2, #1
   d572c:	4653      	mov	r3, sl
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   d572e:	4606      	mov	r6, r0
   d5730:	460c      	mov	r4, r1
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   d5732:	47a8      	blx	r5
  if (rlen != 1) return 0;
   d5734:	b2c0      	uxtb	r0, r0
   d5736:	2801      	cmp	r0, #1
   d5738:	d001      	beq.n	d573e <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x22>
   d573a:	2000      	movs	r0, #0
   d573c:	e034      	b.n	d57a8 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x8c>

  DEBUG_PRINT(F("Packet Type:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);
  pbuff++;
   d573e:	1c65      	adds	r5, r4, #1
   d5740:	f104 0b05 	add.w	fp, r4, #5

  uint32_t value = 0;
  uint32_t multiplier = 1;
   d5744:	4680      	mov	r8, r0
  if (rlen != 1) return 0;

  DEBUG_PRINT(F("Packet Type:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);
  pbuff++;

  uint32_t value = 0;
   d5746:	f04f 0900 	mov.w	r9, #0
  uint32_t multiplier = 1;
  uint8_t encodedByte;

  do {
    rlen = readPacket(pbuff, 1, timeout);
   d574a:	6833      	ldr	r3, [r6, #0]
   d574c:	699b      	ldr	r3, [r3, #24]
   d574e:	2201      	movs	r2, #1
   d5750:	461f      	mov	r7, r3
   d5752:	4629      	mov	r1, r5
   d5754:	4653      	mov	r3, sl
   d5756:	4630      	mov	r0, r6
   d5758:	47b8      	blx	r7
    if (rlen != 1) return 0;
   d575a:	b2c0      	uxtb	r0, r0
   d575c:	2801      	cmp	r0, #1
   d575e:	d1ec      	bne.n	d573a <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x1e>
    encodedByte = pbuff[0]; // save the last read val
   d5760:	f815 3b01 	ldrb.w	r3, [r5], #1
    pbuff++; // get ready for reading the next byte
    uint32_t intermediate = encodedByte & 0x7F;
   d5764:	f003 027f 	and.w	r2, r3, #127	; 0x7f
    intermediate *= multiplier;
    value += intermediate;
    multiplier *= 128;
    if (multiplier > (128UL*128UL*128UL)) {
   d5768:	455d      	cmp	r5, fp
    if (rlen != 1) return 0;
    encodedByte = pbuff[0]; // save the last read val
    pbuff++; // get ready for reading the next byte
    uint32_t intermediate = encodedByte & 0x7F;
    intermediate *= multiplier;
    value += intermediate;
   d576a:	fb02 9908 	mla	r9, r2, r8, r9
    multiplier *= 128;
   d576e:	ea4f 18c8 	mov.w	r8, r8, lsl #7
    if (multiplier > (128UL*128UL*128UL)) {
   d5772:	d0e2      	beq.n	d573a <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x1e>

  uint32_t value = 0;
  uint32_t multiplier = 1;
  uint8_t encodedByte;

  do {
   d5774:	061b      	lsls	r3, r3, #24
   d5776:	d4e8      	bmi.n	d574a <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x2e>
    }
  } while (encodedByte & 0x80);

  DEBUG_PRINT(F("Packet Length:\t")); DEBUG_PRINTLN(value);
  
  if (value > (unsigned)(maxsize - (pbuff-buffer) - 1)) {
   d5778:	9b01      	ldr	r3, [sp, #4]
   d577a:	1b2c      	subs	r4, r5, r4
   d577c:	1b1b      	subs	r3, r3, r4
   d577e:	3b01      	subs	r3, #1
   d5780:	4599      	cmp	r9, r3
   d5782:	6833      	ldr	r3, [r6, #0]
   d5784:	d906      	bls.n	d5794 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x78>
      DEBUG_PRINTLN(F("Packet too big for buffer"));
      rlen = readPacket(pbuff, (maxsize - (pbuff-buffer) - 1), timeout);
   d5786:	9a01      	ldr	r2, [sp, #4]
   d5788:	699f      	ldr	r7, [r3, #24]
   d578a:	3a01      	subs	r2, #1
   d578c:	1b12      	subs	r2, r2, r4
   d578e:	4653      	mov	r3, sl
   d5790:	b292      	uxth	r2, r2
   d5792:	e003      	b.n	d579c <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x80>
  } else {
    rlen = readPacket(pbuff, value, timeout);
   d5794:	699f      	ldr	r7, [r3, #24]
   d5796:	fa1f f289 	uxth.w	r2, r9
   d579a:	4653      	mov	r3, sl
   d579c:	4629      	mov	r1, r5
   d579e:	4630      	mov	r0, r6
   d57a0:	47b8      	blx	r7
   d57a2:	b2c0      	uxtb	r0, r0
  }
  //DEBUG_PRINT(F("Remaining packet:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);

  return ((pbuff - buffer)+rlen);
   d57a4:	4420      	add	r0, r4
   d57a6:	b280      	uxth	r0, r0
}
   d57a8:	b003      	add	sp, #12
   d57aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000d57b0 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>:
  username = user;
  password = pass;
  return connect();
}

uint16_t Adafruit_MQTT::processPacketsUntil(uint8_t *buffer, uint8_t waitforpackettype, uint16_t timeout) {
   d57b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d57b2:	4605      	mov	r5, r0
   d57b4:	460c      	mov	r4, r1
   d57b6:	4616      	mov	r6, r2
   d57b8:	461f      	mov	r7, r3
  uint16_t len;
  while ( (len = readFullPacket(buffer, MAXBUFFERSIZE, timeout)) > 0) {
   d57ba:	463b      	mov	r3, r7
   d57bc:	2296      	movs	r2, #150	; 0x96
   d57be:	4621      	mov	r1, r4
   d57c0:	4628      	mov	r0, r5
   d57c2:	f7ff ffab 	bl	d571c <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
   d57c6:	b148      	cbz	r0, d57dc <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x2c>

    //DEBUG_PRINT("Packet read size: "); DEBUG_PRINTLN(len);
    // TODO: add subscription reading & call back processing here

    if ((buffer[0] >> 4) == waitforpackettype) {
   d57c8:	7823      	ldrb	r3, [r4, #0]
   d57ca:	ebb6 1f13 	cmp.w	r6, r3, lsr #4
   d57ce:	d005      	beq.n	d57dc <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x2c>
      //DEBUG_PRINTLN(F("Found right packet")); 
      return len;
    } else {
      ERROR_PRINTLN(F("Dropped a packet"));
   d57d0:	f001 ff08 	bl	d75e4 <_Z16_fetch_usbserialv>
   d57d4:	4902      	ldr	r1, [pc, #8]	; (d57e0 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x30>)
   d57d6:	f001 f8e4 	bl	d69a2 <_ZN5Print7printlnEPKc>
  return connect();
}

uint16_t Adafruit_MQTT::processPacketsUntil(uint8_t *buffer, uint8_t waitforpackettype, uint16_t timeout) {
  uint16_t len;
  while ( (len = readFullPacket(buffer, MAXBUFFERSIZE, timeout)) > 0) {
   d57da:	e7ee      	b.n	d57ba <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0xa>
    } else {
      ERROR_PRINTLN(F("Dropped a packet"));
    }
  }
  return 0;
}
   d57dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d57de:	bf00      	nop
   d57e0:	000db8fa 	.word	0x000db8fa

000d57e4 <_ZN13Adafruit_MQTT10disconnectEv>:
      case -2: return F("Failed to subscribe");
   }
    return F("Unknown error");
}

bool Adafruit_MQTT::disconnect() {
   d57e4:	b510      	push	{r4, lr}
  DEBUG_PRINTBUFFER(buffer, 4);
  return 4;
}

uint8_t Adafruit_MQTT::disconnectPacket(uint8_t *packet) {
  packet[0] = MQTT_CTRL_DISCONNECT << 4;
   d57e6:	23e0      	movs	r3, #224	; 0xe0
   d57e8:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
  packet[1] = 0;
   d57ec:	2300      	movs	r3, #0
   d57ee:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23

bool Adafruit_MQTT::disconnect() {

  // Construct and send disconnect packet.
  uint8_t len = disconnectPacket(buffer);
  if (! sendPacket(buffer, len))
   d57f2:	6803      	ldr	r3, [r0, #0]
      case -2: return F("Failed to subscribe");
   }
    return F("Unknown error");
}

bool Adafruit_MQTT::disconnect() {
   d57f4:	4604      	mov	r4, r0

  // Construct and send disconnect packet.
  uint8_t len = disconnectPacket(buffer);
  if (! sendPacket(buffer, len))
   d57f6:	695b      	ldr	r3, [r3, #20]
   d57f8:	2202      	movs	r2, #2
   d57fa:	f100 0122 	add.w	r1, r0, #34	; 0x22
   d57fe:	4798      	blx	r3
    DEBUG_PRINTLN(F("Unable to send disconnect packet"));

  return disconnectServer();
   d5800:	6823      	ldr	r3, [r4, #0]
   d5802:	4620      	mov	r0, r4
   d5804:	691b      	ldr	r3, [r3, #16]

}
   d5806:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  // Construct and send disconnect packet.
  uint8_t len = disconnectPacket(buffer);
  if (! sendPacket(buffer, len))
    DEBUG_PRINTLN(F("Unable to send disconnect packet"));

  return disconnectServer();
   d580a:	4718      	bx	r3

000d580c <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe>:

  return true;

}

bool Adafruit_MQTT::subscribe(Adafruit_MQTT_Subscribe *sub) {
   d580c:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
   d5810:	b530      	push	{r4, r5, lr}
   d5812:	4613      	mov	r3, r2
   d5814:	f100 04cc 	add.w	r4, r0, #204	; 0xcc
  uint8_t i;
  // see if we are already subscribed
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
    if (subscriptions[i] == sub) {
   d5818:	f853 5f04 	ldr.w	r5, [r3, #4]!
   d581c:	428d      	cmp	r5, r1
   d581e:	d00f      	beq.n	d5840 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x34>
}

bool Adafruit_MQTT::subscribe(Adafruit_MQTT_Subscribe *sub) {
  uint8_t i;
  // see if we are already subscribed
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   d5820:	42a3      	cmp	r3, r4
   d5822:	d1f9      	bne.n	d5818 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0xc>
   d5824:	2300      	movs	r3, #0
      return true;
    }
  }
  if (i==MAXSUBSCRIPTIONS) { // add to subscriptionlist
    for (i=0; i<MAXSUBSCRIPTIONS; i++) {
      if (subscriptions[i] == 0) {
   d5826:	f852 4f04 	ldr.w	r4, [r2, #4]!
   d582a:	b924      	cbnz	r4, d5836 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x2a>
        DEBUG_PRINT(F("Added sub ")); DEBUG_PRINTLN(i);
        subscriptions[i] = sub;
   d582c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   d5830:	f8c0 10bc 	str.w	r1, [r0, #188]	; 0xbc
   d5834:	e004      	b.n	d5840 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x34>
   d5836:	3301      	adds	r3, #1
      DEBUG_PRINTLN(F("Already subscribed"));
      return true;
    }
  }
  if (i==MAXSUBSCRIPTIONS) { // add to subscriptionlist
    for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   d5838:	2b05      	cmp	r3, #5
   d583a:	d1f4      	bne.n	d5826 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x1a>
      }
    }
  }

  DEBUG_PRINTLN(F("no more subscription space :("));
  return false;
   d583c:	2000      	movs	r0, #0
   d583e:	bd30      	pop	{r4, r5, pc}
  uint8_t i;
  // see if we are already subscribed
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
    if (subscriptions[i] == sub) {
      DEBUG_PRINTLN(F("Already subscribed"));
      return true;
   d5840:	2001      	movs	r0, #1
    }
  }

  DEBUG_PRINTLN(F("no more subscription space :("));
  return false;
}
   d5842:	bd30      	pop	{r4, r5, pc}

000d5844 <_ZN13Adafruit_MQTT16readSubscriptionEs>:
    }
    elapsed += (endtime - starttime);
  }
}

Adafruit_MQTT_Subscribe *Adafruit_MQTT::readSubscription(int16_t timeout) {
   d5844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t i, topiclen, datalen;

  // Check if data is available to read.
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
   d5848:	f100 0922 	add.w	r9, r0, #34	; 0x22
   d584c:	b28b      	uxth	r3, r1
    }
    elapsed += (endtime - starttime);
  }
}

Adafruit_MQTT_Subscribe *Adafruit_MQTT::readSubscription(int16_t timeout) {
   d584e:	b087      	sub	sp, #28
  uint16_t i, topiclen, datalen;

  // Check if data is available to read.
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
   d5850:	2296      	movs	r2, #150	; 0x96
   d5852:	4649      	mov	r1, r9
    }
    elapsed += (endtime - starttime);
  }
}

Adafruit_MQTT_Subscribe *Adafruit_MQTT::readSubscription(int16_t timeout) {
   d5854:	4604      	mov	r4, r0
  uint16_t i, topiclen, datalen;

  // Check if data is available to read.
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
   d5856:	f7ff ff61 	bl	d571c <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
  if (!len)
   d585a:	4606      	mov	r6, r0
   d585c:	b310      	cbz	r0, d58a4 <_ZN13Adafruit_MQTT16readSubscriptionEs+0x60>
    return NULL;  // No data available, just quit.
  DEBUG_PRINT("Packet len: "); DEBUG_PRINTLN(len); 
  DEBUG_PRINTBUFFER(buffer, len);

  // Parse out length of packet.
  topiclen = buffer[3];
   d585e:	f894 7025 	ldrb.w	r7, [r4, #37]	; 0x25
   d5862:	b2bb      	uxth	r3, r7
   d5864:	9301      	str	r3, [sp, #4]
      // received topic name.
      if (strlen(subscriptions[i]->topic) != topiclen)
        continue;
      // Stop if the subscription topic matches the received topic. Be careful
      // to make comparison case insensitive.
      if (strncasecmp((char*)buffer+4, subscriptions[i]->topic, topiclen) == 0) {
   d5866:	f104 0326 	add.w	r3, r4, #38	; 0x26
   d586a:	f104 0ab8 	add.w	sl, r4, #184	; 0xb8
    return NULL;  // No data available, just quit.
  DEBUG_PRINT("Packet len: "); DEBUG_PRINTLN(len); 
  DEBUG_PRINTBUFFER(buffer, len);

  // Parse out length of packet.
  topiclen = buffer[3];
   d586e:	2500      	movs	r5, #0
      // received topic name.
      if (strlen(subscriptions[i]->topic) != topiclen)
        continue;
      // Stop if the subscription topic matches the received topic. Be careful
      // to make comparison case insensitive.
      if (strncasecmp((char*)buffer+4, subscriptions[i]->topic, topiclen) == 0) {
   d5870:	9302      	str	r3, [sp, #8]
  topiclen = buffer[3];
  DEBUG_PRINT(F("Looking for subscription len ")); DEBUG_PRINTLN(topiclen);

  // Find subscription associated with this packet.
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
    if (subscriptions[i]) {
   d5872:	f85a bf04 	ldr.w	fp, [sl, #4]!
   d5876:	f1bb 0f00 	cmp.w	fp, #0
   d587a:	d00e      	beq.n	d589a <_ZN13Adafruit_MQTT16readSubscriptionEs+0x56>
      // Skip this subscription if its name length isn't the same as the
      // received topic name.
      if (strlen(subscriptions[i]->topic) != topiclen)
   d587c:	f8db 1000 	ldr.w	r1, [fp]
   d5880:	9103      	str	r1, [sp, #12]
   d5882:	4608      	mov	r0, r1
   d5884:	f005 f9bb 	bl	dabfe <strlen>
   d5888:	42b8      	cmp	r0, r7
   d588a:	4680      	mov	r8, r0
   d588c:	9903      	ldr	r1, [sp, #12]
   d588e:	d104      	bne.n	d589a <_ZN13Adafruit_MQTT16readSubscriptionEs+0x56>
        continue;
      // Stop if the subscription topic matches the received topic. Be careful
      // to make comparison case insensitive.
      if (strncasecmp((char*)buffer+4, subscriptions[i]->topic, topiclen) == 0) {
   d5890:	463a      	mov	r2, r7
   d5892:	9802      	ldr	r0, [sp, #8]
   d5894:	f005 f9bc 	bl	dac10 <strncasecmp>
   d5898:	b128      	cbz	r0, d58a6 <_ZN13Adafruit_MQTT16readSubscriptionEs+0x62>
   d589a:	3501      	adds	r5, #1
  // Parse out length of packet.
  topiclen = buffer[3];
  DEBUG_PRINT(F("Looking for subscription len ")); DEBUG_PRINTLN(topiclen);

  // Find subscription associated with this packet.
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   d589c:	2d05      	cmp	r5, #5
   d589e:	d1e8      	bne.n	d5872 <_ZN13Adafruit_MQTT16readSubscriptionEs+0x2e>
  uint16_t i, topiclen, datalen;

  // Check if data is available to read.
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
  if (!len)
    return NULL;  // No data available, just quit.
   d58a0:	2000      	movs	r0, #0
   d58a2:	e04a      	b.n	d593a <_ZN13Adafruit_MQTT16readSubscriptionEs+0xf6>
   d58a4:	e049      	b.n	d593a <_ZN13Adafruit_MQTT16readSubscriptionEs+0xf6>
  if (i==MAXSUBSCRIPTIONS) return NULL; // matching sub not found ???

  uint8_t packet_id_len = 0;
  uint16_t packetid=0;
  // Check if it is QoS 1, TODO: we dont support QoS 2
  if ((buffer[0] & 0x6) == 0x2) {
   d58a6:	f894 a022 	ldrb.w	sl, [r4, #34]	; 0x22
   d58aa:	f00a 0a06 	and.w	sl, sl, #6
   d58ae:	f1ba 0f02 	cmp.w	sl, #2
   d58b2:	d13f      	bne.n	d5934 <_ZN13Adafruit_MQTT16readSubscriptionEs+0xf0>
    packet_id_len = 2;
    packetid = buffer[topiclen+4];
   d58b4:	19e2      	adds	r2, r4, r7
   d58b6:	f892 7026 	ldrb.w	r7, [r2, #38]	; 0x26
    packetid <<= 8;
    packetid |= buffer[topiclen+5];
   d58ba:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
   d58be:	ea42 2707 	orr.w	r7, r2, r7, lsl #8
  }

  // zero out the old data
  memset(subscriptions[i]->lastread, 0, SUBSCRIPTIONDATALEN);
   d58c2:	2214      	movs	r2, #20
   d58c4:	2100      	movs	r1, #0
   d58c6:	f10b 0005 	add.w	r0, fp, #5
   d58ca:	f005 f93b 	bl	dab44 <memset>

  datalen = len - topiclen - packet_id_len - 4;
   d58ce:	9b01      	ldr	r3, [sp, #4]
   d58d0:	f5c3 407f 	rsb	r0, r3, #65280	; 0xff00
   d58d4:	30fc      	adds	r0, #252	; 0xfc
   d58d6:	4406      	add	r6, r0
   d58d8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
   d58dc:	ebca 0606 	rsb	r6, sl, r6
   d58e0:	b2b6      	uxth	r6, r6
  if (datalen > SUBSCRIPTIONDATALEN) {
    datalen = SUBSCRIPTIONDATALEN-1; // cut it off
   d58e2:	2e15      	cmp	r6, #21
  }
  // extract out just the data, into the subscription object itself
  memmove(subscriptions[i]->lastread, buffer+4+topiclen+packet_id_len, datalen);
   d58e4:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
   d58e8:	f108 0104 	add.w	r1, r8, #4
  // zero out the old data
  memset(subscriptions[i]->lastread, 0, SUBSCRIPTIONDATALEN);

  datalen = len - topiclen - packet_id_len - 4;
  if (datalen > SUBSCRIPTIONDATALEN) {
    datalen = SUBSCRIPTIONDATALEN-1; // cut it off
   d58ec:	bf28      	it	cs
   d58ee:	2613      	movcs	r6, #19
  }
  // extract out just the data, into the subscription object itself
  memmove(subscriptions[i]->lastread, buffer+4+topiclen+packet_id_len, datalen);
   d58f0:	4451      	add	r1, sl
   d58f2:	4632      	mov	r2, r6
   d58f4:	4449      	add	r1, r9
   d58f6:	3005      	adds	r0, #5
   d58f8:	f005 f909 	bl	dab0e <memmove>
  subscriptions[i]->datalen = datalen;
   d58fc:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   d5900:	835e      	strh	r6, [r3, #26]
  DEBUG_PRINT(F("Data len: ")); DEBUG_PRINTLN(datalen);
  DEBUG_PRINT(F("Data: ")); DEBUG_PRINTLN((char *)subscriptions[i]->lastread);

  if ((MQTT_PROTOCOL_LEVEL > 3) &&(buffer[0] & 0x6) == 0x2) {
   d5902:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d5906:	f003 0306 	and.w	r3, r3, #6
   d590a:	2b02      	cmp	r3, #2
   d590c:	d10f      	bne.n	d592e <_ZN13Adafruit_MQTT16readSubscriptionEs+0xea>
  return 2;
}

uint8_t Adafruit_MQTT::pubackPacket(uint8_t *packet, uint16_t packetid) {
  packet[0] = MQTT_CTRL_PUBACK << 4;
  packet[1] = 2;
   d590e:	f88d 3015 	strb.w	r3, [sp, #21]
  packet[2] = packetid >> 8;
   d5912:	123b      	asrs	r3, r7, #8
   d5914:	f88d 3016 	strb.w	r3, [sp, #22]
  if ((MQTT_PROTOCOL_LEVEL > 3) &&(buffer[0] & 0x6) == 0x2) {
    uint8_t ackpacket[4];
    
    // Construct and send puback packet.
    uint8_t len = pubackPacket(ackpacket, packetid);
    if (!sendPacket(ackpacket, len))
   d5918:	6823      	ldr	r3, [r4, #0]

uint8_t Adafruit_MQTT::pubackPacket(uint8_t *packet, uint16_t packetid) {
  packet[0] = MQTT_CTRL_PUBACK << 4;
  packet[1] = 2;
  packet[2] = packetid >> 8;
  packet[3] = packetid;
   d591a:	f88d 7017 	strb.w	r7, [sp, #23]
  DEBUG_PRINTBUFFER(buffer, 2);
  return 2;
}

uint8_t Adafruit_MQTT::pubackPacket(uint8_t *packet, uint16_t packetid) {
  packet[0] = MQTT_CTRL_PUBACK << 4;
   d591e:	2240      	movs	r2, #64	; 0x40
   d5920:	f88d 2014 	strb.w	r2, [sp, #20]
  if ((MQTT_PROTOCOL_LEVEL > 3) &&(buffer[0] & 0x6) == 0x2) {
    uint8_t ackpacket[4];
    
    // Construct and send puback packet.
    uint8_t len = pubackPacket(ackpacket, packetid);
    if (!sendPacket(ackpacket, len))
   d5924:	695b      	ldr	r3, [r3, #20]
   d5926:	2204      	movs	r2, #4
   d5928:	a905      	add	r1, sp, #20
   d592a:	4620      	mov	r0, r4
   d592c:	4798      	blx	r3
      DEBUG_PRINT(F("Failed"));
  }

  // return the valid matching subscription
  return subscriptions[i];
   d592e:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
   d5932:	e002      	b.n	d593a <_ZN13Adafruit_MQTT16readSubscriptionEs+0xf6>
    }
  }
  if (i==MAXSUBSCRIPTIONS) return NULL; // matching sub not found ???

  uint8_t packet_id_len = 0;
  uint16_t packetid=0;
   d5934:	4607      	mov	r7, r0
      }
    }
  }
  if (i==MAXSUBSCRIPTIONS) return NULL; // matching sub not found ???

  uint8_t packet_id_len = 0;
   d5936:	4682      	mov	sl, r0
   d5938:	e7c3      	b.n	d58c2 <_ZN13Adafruit_MQTT16readSubscriptionEs+0x7e>
      DEBUG_PRINT(F("Failed"));
  }

  // return the valid matching subscription
  return subscriptions[i];
}
   d593a:	b007      	add	sp, #28
   d593c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5940 <_ZN13Adafruit_MQTT13connectPacketEPh>:
// The current MQTT spec is 3.1.1 and available here:
//   http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718028
// However this connect packet and code follows the MQTT 3.1 spec here (some
// small differences in the protocol):
//   http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html#connect
uint8_t Adafruit_MQTT::connectPacket(uint8_t *packet) {
   d5940:	b538      	push	{r3, r4, r5, lr}
   d5942:	4604      	mov	r4, r0
  uint8_t *p = packet;
  uint16_t len;

  // fixed header, connection messsage no flags
  p[0] = (MQTT_CTRL_CONNECT << 4) | 0x0;
   d5944:	4608      	mov	r0, r1
   d5946:	2310      	movs	r3, #16
   d5948:	f800 3b02 	strb.w	r3, [r0], #2
// The current MQTT spec is 3.1.1 and available here:
//   http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718028
// However this connect packet and code follows the MQTT 3.1 spec here (some
// small differences in the protocol):
//   http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html#connect
uint8_t Adafruit_MQTT::connectPacket(uint8_t *packet) {
   d594c:	460d      	mov	r5, r1
  // fill in packet[1] last

#if MQTT_PROTOCOL_LEVEL == 3
    p = stringprint(p, "MQIsdp");
#elif MQTT_PROTOCOL_LEVEL == 4
    p = stringprint(p, "MQTT");
   d594e:	4929      	ldr	r1, [pc, #164]	; (d59f4 <_ZN13Adafruit_MQTT13connectPacketEPh+0xb4>)
   d5950:	f7ff feaf 	bl	d56b2 <_ZL11stringprintPhPKct.constprop.3>
#else
    #error "MQTT level not supported"
#endif

  p[0] = MQTT_PROTOCOL_LEVEL;
   d5954:	2304      	movs	r3, #4
   d5956:	7003      	strb	r3, [r0, #0]
  p++;

  // always clean the session
  p[0] = MQTT_CONN_CLEANSESSION;
   d5958:	2302      	movs	r3, #2
   d595a:	7043      	strb	r3, [r0, #1]

  // set the will flags if needed
  if (will_topic && pgm_read_byte(will_topic) != 0) {
   d595c:	69a3      	ldr	r3, [r4, #24]
   d595e:	b1ab      	cbz	r3, d598c <_ZN13Adafruit_MQTT13connectPacketEPh+0x4c>
   d5960:	781b      	ldrb	r3, [r3, #0]
   d5962:	b19b      	cbz	r3, d598c <_ZN13Adafruit_MQTT13connectPacketEPh+0x4c>

    p[0] |= MQTT_CONN_WILLFLAG;
   d5964:	2306      	movs	r3, #6
   d5966:	7043      	strb	r3, [r0, #1]

    if(will_qos == 1)
   d5968:	f894 3020 	ldrb.w	r3, [r4, #32]
   d596c:	2b01      	cmp	r3, #1
   d596e:	d101      	bne.n	d5974 <_ZN13Adafruit_MQTT13connectPacketEPh+0x34>
      p[0] |= MQTT_CONN_WILLQOS_1;
   d5970:	230e      	movs	r3, #14
   d5972:	e002      	b.n	d597a <_ZN13Adafruit_MQTT13connectPacketEPh+0x3a>
    else if(will_qos == 2)
   d5974:	2b02      	cmp	r3, #2
   d5976:	d101      	bne.n	d597c <_ZN13Adafruit_MQTT13connectPacketEPh+0x3c>
      p[0] |= MQTT_CONN_WILLQOS_2;
   d5978:	231e      	movs	r3, #30
   d597a:	7043      	strb	r3, [r0, #1]

    if(will_retain == 1)
   d597c:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   d5980:	2b01      	cmp	r3, #1
      p[0] |= MQTT_CONN_WILLRETAIN;
   d5982:	bf02      	ittt	eq
   d5984:	7843      	ldrbeq	r3, [r0, #1]
   d5986:	f043 0320 	orreq.w	r3, r3, #32
   d598a:	7043      	strbeq	r3, [r0, #1]

  }

  if (pgm_read_byte(username) != 0)
   d598c:	6923      	ldr	r3, [r4, #16]
   d598e:	781b      	ldrb	r3, [r3, #0]
   d5990:	b11b      	cbz	r3, d599a <_ZN13Adafruit_MQTT13connectPacketEPh+0x5a>
    p[0] |= MQTT_CONN_USERNAMEFLAG;
   d5992:	7843      	ldrb	r3, [r0, #1]
   d5994:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d5998:	7043      	strb	r3, [r0, #1]
  if (pgm_read_byte(password) != 0)
   d599a:	6963      	ldr	r3, [r4, #20]
   d599c:	781b      	ldrb	r3, [r3, #0]
   d599e:	b11b      	cbz	r3, d59a8 <_ZN13Adafruit_MQTT13connectPacketEPh+0x68>
    p[0] |= MQTT_CONN_PASSWORDFLAG;
   d59a0:	7843      	ldrb	r3, [r0, #1]
   d59a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   d59a6:	7043      	strb	r3, [r0, #1]
  p++;

  p[0] = MQTT_CONN_KEEPALIVE >> 8;
   d59a8:	2301      	movs	r3, #1
   d59aa:	7083      	strb	r3, [r0, #2]
  p++;
  p[0] = MQTT_CONN_KEEPALIVE & 0xFF;
   d59ac:	232c      	movs	r3, #44	; 0x2c
   d59ae:	70c3      	strb	r3, [r0, #3]
  p++;

  if(MQTT_PROTOCOL_LEVEL == 3) {
    p = stringprint(p, clientid, 23);  // Limit client ID to first 23 characters.
  } else {
    if (pgm_read_byte(clientid) != 0) {
   d59b0:	68e1      	ldr	r1, [r4, #12]
   d59b2:	780b      	ldrb	r3, [r1, #0]
   d59b4:	b11b      	cbz	r3, d59be <_ZN13Adafruit_MQTT13connectPacketEPh+0x7e>
      p = stringprint(p, clientid);
   d59b6:	3004      	adds	r0, #4
   d59b8:	f7ff fe7b 	bl	d56b2 <_ZL11stringprintPhPKct.constprop.3>
   d59bc:	e002      	b.n	d59c4 <_ZN13Adafruit_MQTT13connectPacketEPh+0x84>
    } else {
      p[0] = 0x0;
   d59be:	7103      	strb	r3, [r0, #4]
      p++;
      p[0] = 0x0;
   d59c0:	7143      	strb	r3, [r0, #5]
      p++;
   d59c2:	3006      	adds	r0, #6
      DEBUG_PRINTLN(F("SERVER GENERATING CLIENT ID"));
    }
  }

  if (will_topic && pgm_read_byte(will_topic) != 0) {
   d59c4:	69a1      	ldr	r1, [r4, #24]
   d59c6:	b131      	cbz	r1, d59d6 <_ZN13Adafruit_MQTT13connectPacketEPh+0x96>
   d59c8:	780b      	ldrb	r3, [r1, #0]
   d59ca:	b123      	cbz	r3, d59d6 <_ZN13Adafruit_MQTT13connectPacketEPh+0x96>
    p = stringprint(p, will_topic);
   d59cc:	f7ff fe71 	bl	d56b2 <_ZL11stringprintPhPKct.constprop.3>
    p = stringprint(p, will_payload);
   d59d0:	69e1      	ldr	r1, [r4, #28]
   d59d2:	f7ff fe6e 	bl	d56b2 <_ZL11stringprintPhPKct.constprop.3>
  }

  if (pgm_read_byte(username) != 0) {
   d59d6:	6921      	ldr	r1, [r4, #16]
   d59d8:	780b      	ldrb	r3, [r1, #0]
   d59da:	b10b      	cbz	r3, d59e0 <_ZN13Adafruit_MQTT13connectPacketEPh+0xa0>
    p = stringprint(p, username);
   d59dc:	f7ff fe69 	bl	d56b2 <_ZL11stringprintPhPKct.constprop.3>
  }
  if (pgm_read_byte(password) != 0) {
   d59e0:	6961      	ldr	r1, [r4, #20]
   d59e2:	780b      	ldrb	r3, [r1, #0]
   d59e4:	b10b      	cbz	r3, d59ea <_ZN13Adafruit_MQTT13connectPacketEPh+0xaa>
    p = stringprint(p, password);
   d59e6:	f7ff fe64 	bl	d56b2 <_ZL11stringprintPhPKct.constprop.3>
  }

  len = p - packet;

  packet[1] = len-2;  // don't include the 2 bytes of fixed header data
   d59ea:	1b40      	subs	r0, r0, r5
   d59ec:	b2c0      	uxtb	r0, r0
   d59ee:	1e83      	subs	r3, r0, #2
   d59f0:	706b      	strb	r3, [r5, #1]
  DEBUG_PRINTLN(F("MQTT connect packet:"));
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}
   d59f2:	bd38      	pop	{r3, r4, r5, pc}
   d59f4:	000db919 	.word	0x000db919

000d59f8 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th>:


// as per http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718040
uint16_t Adafruit_MQTT::publishPacket(uint8_t *packet, const char *topic,
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   d59f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d59fc:	4605      	mov	r5, r0
  uint8_t *p = packet;
  uint16_t len=0;

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
   d59fe:	4610      	mov	r0, r2
}


// as per http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718040
uint16_t Adafruit_MQTT::publishPacket(uint8_t *packet, const char *topic,
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   d5a00:	460e      	mov	r6, r1
   d5a02:	4691      	mov	r9, r2
   d5a04:	461f      	mov	r7, r3
  uint8_t *p = packet;
  uint16_t len=0;

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
   d5a06:	f005 f8fa 	bl	dabfe <strlen>
}


// as per http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718040
uint16_t Adafruit_MQTT::publishPacket(uint8_t *packet, const char *topic,
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   d5a0a:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
   d5a0e:	f8bd 4020 	ldrh.w	r4, [sp, #32]
  uint8_t *p = packet;
  uint16_t len=0;

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
   d5a12:	b280      	uxth	r0, r0
  if(qos > 0) { 
   d5a14:	f1b8 0f00 	cmp.w	r8, #0
   d5a18:	d101      	bne.n	d5a1e <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x26>
  uint8_t *p = packet;
  uint16_t len=0;

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
   d5a1a:	1c83      	adds	r3, r0, #2
   d5a1c:	e000      	b.n	d5a20 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x28>
  if(qos > 0) { 
    len += 2; // qos packet id
   d5a1e:	1d03      	adds	r3, r0, #4
  }
  len += bLen; // payload length

  // Now you can start generating the packet!
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   d5a20:	ea4f 0248 	mov.w	r2, r8, lsl #1
   d5a24:	4630      	mov	r0, r6

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
  if(qos > 0) { 
    len += 2; // qos packet id
   d5a26:	b29b      	uxth	r3, r3
  }
  len += bLen; // payload length

  // Now you can start generating the packet!
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   d5a28:	f042 0230 	orr.w	r2, r2, #48	; 0x30
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
  if(qos > 0) { 
    len += 2; // qos packet id
  }
  len += bLen; // payload length
   d5a2c:	4423      	add	r3, r4

  // Now you can start generating the packet!
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   d5a2e:	f800 2b01 	strb.w	r2, [r0], #1
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
  if(qos > 0) { 
    len += 2; // qos packet id
  }
  len += bLen; // payload length
   d5a32:	b29b      	uxth	r3, r3
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
  p++;

  // fill in packet[1] last
  do {
    uint8_t encodedByte = len % 128;
   d5a34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
    len /= 128;
    // if there are more data to encode, set the top bit of this byte
    if ( len > 0 ) {
   d5a38:	09db      	lsrs	r3, r3, #7
      encodedByte |= 0x80;
   d5a3a:	bf18      	it	ne
   d5a3c:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
    }
    p[0] = encodedByte;
   d5a40:	f800 2b01 	strb.w	r2, [r0], #1
    p++;
  } while ( len > 0 );
   d5a44:	2b00      	cmp	r3, #0
   d5a46:	d1f5      	bne.n	d5a34 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x3c>

  // topic comes before packet identifier
  p = stringprint(p, topic);
   d5a48:	4649      	mov	r1, r9
   d5a4a:	f7ff fe32 	bl	d56b2 <_ZL11stringprintPhPKct.constprop.3>
   d5a4e:	4603      	mov	r3, r0

  // add packet identifier. used for checking PUBACK in QOS > 0
  if(qos > 0) {
   d5a50:	f1b8 0f00 	cmp.w	r8, #0
   d5a54:	d00c      	beq.n	d5a70 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x78>
    p[0] = (packet_id_counter >> 8) & 0xFF;
   d5a56:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   d5a5a:	0a12      	lsrs	r2, r2, #8
   d5a5c:	7002      	strb	r2, [r0, #0]
    p[1] = packet_id_counter & 0xFF;
   d5a5e:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   d5a62:	7042      	strb	r2, [r0, #1]
    p+=2;

    // increment the packet id
    packet_id_counter++;
   d5a64:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   d5a68:	3201      	adds	r2, #1

  // add packet identifier. used for checking PUBACK in QOS > 0
  if(qos > 0) {
    p[0] = (packet_id_counter >> 8) & 0xFF;
    p[1] = packet_id_counter & 0xFF;
    p+=2;
   d5a6a:	3302      	adds	r3, #2

    // increment the packet id
    packet_id_counter++;
   d5a6c:	f8a5 20b8 	strh.w	r2, [r5, #184]	; 0xb8
  }

  memmove(p, data, bLen);
   d5a70:	4622      	mov	r2, r4
   d5a72:	4639      	mov	r1, r7
   d5a74:	4618      	mov	r0, r3
   d5a76:	f005 f84a 	bl	dab0e <memmove>
  p+= bLen;
  len = p - packet;
  DEBUG_PRINTLN(F("MQTT publish packet:"));
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
   d5a7a:	4420      	add	r0, r4
   d5a7c:	1b80      	subs	r0, r0, r6
}
   d5a7e:	b280      	uxth	r0, r0
   d5a80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d5a84 <_ZN13Adafruit_MQTT7publishEPKcPhth>:

bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
}

bool Adafruit_MQTT::publish(const char *topic, uint8_t *data, uint16_t bLen, uint8_t qos) {
   d5a84:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5a86:	f89d 6018 	ldrb.w	r6, [sp, #24]
  // Construct and send publish packet.
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   d5a8a:	f100 0522 	add.w	r5, r0, #34	; 0x22

bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
}

bool Adafruit_MQTT::publish(const char *topic, uint8_t *data, uint16_t bLen, uint8_t qos) {
   d5a8e:	4604      	mov	r4, r0
  // Construct and send publish packet.
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   d5a90:	e88d 0048 	stmia.w	sp, {r3, r6}
   d5a94:	4613      	mov	r3, r2
   d5a96:	460a      	mov	r2, r1
   d5a98:	4629      	mov	r1, r5
   d5a9a:	f7ff ffad 	bl	d59f8 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th>
  if (!sendPacket(buffer, len))
   d5a9e:	6823      	ldr	r3, [r4, #0]
   d5aa0:	4602      	mov	r2, r0
   d5aa2:	695b      	ldr	r3, [r3, #20]
   d5aa4:	4629      	mov	r1, r5
   d5aa6:	4620      	mov	r0, r4
   d5aa8:	4798      	blx	r3
   d5aaa:	b908      	cbnz	r0, d5ab0 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x2c>
    return false;
   d5aac:	2000      	movs	r0, #0
   d5aae:	e017      	b.n	d5ae0 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x5c>

  // If QOS level is high enough verify the response packet.
  if (qos > 0) {
   d5ab0:	b1b6      	cbz	r6, d5ae0 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x5c>
    len = readFullPacket(buffer, MAXBUFFERSIZE, PUBLISH_TIMEOUT_MS);
   d5ab2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   d5ab6:	2296      	movs	r2, #150	; 0x96
   d5ab8:	4629      	mov	r1, r5
   d5aba:	4620      	mov	r0, r4
   d5abc:	f7ff fe2e 	bl	d571c <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
    DEBUG_PRINT(F("Publish QOS1+ reply:\t"));
    DEBUG_PRINTBUFFER(buffer, len);
    if (len != 4)
   d5ac0:	2804      	cmp	r0, #4
   d5ac2:	d1f3      	bne.n	d5aac <_ZN13Adafruit_MQTT7publishEPKcPhth+0x28>
      return false;
    if ((buffer[0] >> 4) != MQTT_CTRL_PUBACK)
   d5ac4:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d5ac8:	111b      	asrs	r3, r3, #4
   d5aca:	2b04      	cmp	r3, #4
   d5acc:	d1ee      	bne.n	d5aac <_ZN13Adafruit_MQTT7publishEPKcPhth+0x28>
   d5ace:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    packnum <<= 8;
    packnum |= buffer[3];

    // we increment the packet_id_counter right after publishing so inc here too to match
    packnum++;
    if (packnum != packet_id_counter)
   d5ad0:	f8b4 00b8 	ldrh.w	r0, [r4, #184]	; 0xb8
   d5ad4:	ba5b      	rev16	r3, r3
   d5ad6:	3301      	adds	r3, #1
   d5ad8:	b29b      	uxth	r3, r3
   d5ada:	1ac3      	subs	r3, r0, r3
   d5adc:	4258      	negs	r0, r3
   d5ade:	4158      	adcs	r0, r3
      return false;
  }

  return true;
}
   d5ae0:	b002      	add	sp, #8
   d5ae2:	bd70      	pop	{r4, r5, r6, pc}

000d5ae4 <_ZN13Adafruit_MQTT7publishEPKcS1_h>:
  return disconnectServer();

}


bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
   d5ae4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d5ae6:	4605      	mov	r5, r0
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
   d5ae8:	4610      	mov	r0, r2
  return disconnectServer();

}


bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
   d5aea:	461f      	mov	r7, r3
   d5aec:	460e      	mov	r6, r1
   d5aee:	4614      	mov	r4, r2
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
   d5af0:	f005 f885 	bl	dabfe <strlen>
   d5af4:	9700      	str	r7, [sp, #0]
   d5af6:	b283      	uxth	r3, r0
   d5af8:	4622      	mov	r2, r4
   d5afa:	4631      	mov	r1, r6
   d5afc:	4628      	mov	r0, r5
   d5afe:	f7ff ffc1 	bl	d5a84 <_ZN13Adafruit_MQTT7publishEPKcPhth>
}
   d5b02:	b003      	add	sp, #12
   d5b04:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5b06 <_ZN13Adafruit_MQTT15subscribePacketEPhPKch>:
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}

uint8_t Adafruit_MQTT::subscribePacket(uint8_t *packet, const char *topic,
                                       uint8_t qos) {
   d5b06:	b538      	push	{r3, r4, r5, lr}
   d5b08:	461d      	mov	r5, r3
  uint8_t *p = packet;
  uint16_t len;

  p[0] = MQTT_CTRL_SUBSCRIBE << 4 | MQTT_QOS_1 << 1;
   d5b0a:	2382      	movs	r3, #130	; 0x82
   d5b0c:	700b      	strb	r3, [r1, #0]
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}

uint8_t Adafruit_MQTT::subscribePacket(uint8_t *packet, const char *topic,
                                       uint8_t qos) {
   d5b0e:	460c      	mov	r4, r1
  p[0] = MQTT_CTRL_SUBSCRIBE << 4 | MQTT_QOS_1 << 1;
  // fill in packet[1] last
  p+=2;

  // packet identifier. used for checking SUBACK
  p[0] = (packet_id_counter >> 8) & 0xFF;
   d5b10:	f8b0 10b8 	ldrh.w	r1, [r0, #184]	; 0xb8
   d5b14:	0a09      	lsrs	r1, r1, #8
   d5b16:	70a1      	strb	r1, [r4, #2]
  p[1] = packet_id_counter & 0xFF;
   d5b18:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
   d5b1c:	70e3      	strb	r3, [r4, #3]
  p+=2;

  // increment the packet id
  packet_id_counter++;
   d5b1e:	f8b0 10b8 	ldrh.w	r1, [r0, #184]	; 0xb8
   d5b22:	3101      	adds	r1, #1
   d5b24:	f8a0 10b8 	strh.w	r1, [r0, #184]	; 0xb8

  p = stringprint(p, topic);
   d5b28:	4611      	mov	r1, r2
   d5b2a:	1d20      	adds	r0, r4, #4
   d5b2c:	f7ff fdc1 	bl	d56b2 <_ZL11stringprintPhPKct.constprop.3>

  p[0] = qos;
   d5b30:	f800 5b01 	strb.w	r5, [r0], #1
  p++;

  len = p - packet;
  packet[1] = len-2; // don't include the 2 bytes of fixed header data
   d5b34:	1b00      	subs	r0, r0, r4
   d5b36:	b2c0      	uxtb	r0, r0
   d5b38:	1e83      	subs	r3, r0, #2
   d5b3a:	7063      	strb	r3, [r4, #1]
  DEBUG_PRINTLN(F("MQTT subscription packet:"));
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}
   d5b3c:	bd38      	pop	{r3, r4, r5, pc}

000d5b3e <_ZN13Adafruit_MQTT7connectEv>:

  packet_id_counter = 0;

}

int8_t Adafruit_MQTT::connect() {
   d5b3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // Connect to the server.
  if (!connectServer())
   d5b42:	6803      	ldr	r3, [r0, #0]
   d5b44:	68db      	ldr	r3, [r3, #12]

  packet_id_counter = 0;

}

int8_t Adafruit_MQTT::connect() {
   d5b46:	4604      	mov	r4, r0
  // Connect to the server.
  if (!connectServer())
   d5b48:	4798      	blx	r3
   d5b4a:	b918      	cbnz	r0, d5b54 <_ZN13Adafruit_MQTT7connectEv+0x16>
    return -1;
   d5b4c:	f04f 30ff 	mov.w	r0, #4294967295
   d5b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  // Construct and send connect packet.
  uint8_t len = connectPacket(buffer);
   d5b54:	f104 0522 	add.w	r5, r4, #34	; 0x22
   d5b58:	4629      	mov	r1, r5
   d5b5a:	4620      	mov	r0, r4
   d5b5c:	f7ff fef0 	bl	d5940 <_ZN13Adafruit_MQTT13connectPacketEPh>
  if (!sendPacket(buffer, len))
   d5b60:	6823      	ldr	r3, [r4, #0]
   d5b62:	b282      	uxth	r2, r0
   d5b64:	695b      	ldr	r3, [r3, #20]
   d5b66:	4629      	mov	r1, r5
   d5b68:	4620      	mov	r0, r4
   d5b6a:	4798      	blx	r3
   d5b6c:	2800      	cmp	r0, #0
   d5b6e:	d0ed      	beq.n	d5b4c <_ZN13Adafruit_MQTT7connectEv+0xe>
    return -1;

  // Read connect response packet and verify it
  len = readFullPacket(buffer, MAXBUFFERSIZE, CONNECT_TIMEOUT_MS);
   d5b70:	f241 7370 	movw	r3, #6000	; 0x1770
   d5b74:	2296      	movs	r2, #150	; 0x96
   d5b76:	4629      	mov	r1, r5
   d5b78:	4620      	mov	r0, r4
   d5b7a:	f7ff fdcf 	bl	d571c <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
  if (len != 4)
   d5b7e:	b2c0      	uxtb	r0, r0
   d5b80:	2804      	cmp	r0, #4
   d5b82:	d1e3      	bne.n	d5b4c <_ZN13Adafruit_MQTT7connectEv+0xe>
    return -1;
  if ((buffer[0] != (MQTT_CTRL_CONNECTACK << 4)) || (buffer[1] != 2))
   d5b84:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d5b86:	f5b3 7f08 	cmp.w	r3, #544	; 0x220
   d5b8a:	d1df      	bne.n	d5b4c <_ZN13Adafruit_MQTT7connectEv+0xe>
    return -1;
  if (buffer[3] != 0)
   d5b8c:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
   d5b90:	b110      	cbz	r0, d5b98 <_ZN13Adafruit_MQTT7connectEv+0x5a>
    return buffer[3];
   d5b92:	b240      	sxtb	r0, r0
   d5b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5b98:	f104 07b8 	add.w	r7, r4, #184	; 0xb8
   d5b9c:	f104 08cc 	add.w	r8, r4, #204	; 0xcc

  // Setup subscriptions once connected.
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    // Ignore subscriptions that aren't defined.
    if (subscriptions[i] == 0) continue;
   d5ba0:	f857 3f04 	ldr.w	r3, [r7, #4]!
   d5ba4:	b1fb      	cbz	r3, d5be6 <_ZN13Adafruit_MQTT7connectEv+0xa8>
   d5ba6:	2603      	movs	r6, #3

    boolean success = false;
    for (uint8_t retry=0; (retry<3) && !success; retry++) { // retry until we get a suback    
      // Construct and send subscription packet.
      uint8_t len = subscribePacket(buffer, subscriptions[i]->topic, subscriptions[i]->qos);
   d5ba8:	683a      	ldr	r2, [r7, #0]
   d5baa:	4629      	mov	r1, r5
   d5bac:	7913      	ldrb	r3, [r2, #4]
   d5bae:	6812      	ldr	r2, [r2, #0]
   d5bb0:	4620      	mov	r0, r4
   d5bb2:	f7ff ffa8 	bl	d5b06 <_ZN13Adafruit_MQTT15subscribePacketEPhPKch>
      if (!sendPacket(buffer, len))
   d5bb6:	6823      	ldr	r3, [r4, #0]
   d5bb8:	b282      	uxth	r2, r0
   d5bba:	695b      	ldr	r3, [r3, #20]
   d5bbc:	4629      	mov	r1, r5
   d5bbe:	4620      	mov	r0, r4
   d5bc0:	4798      	blx	r3
   d5bc2:	2800      	cmp	r0, #0
   d5bc4:	d0c2      	beq.n	d5b4c <_ZN13Adafruit_MQTT7connectEv+0xe>
      // Check for SUBACK if using MQTT 3.1.1 or higher
      // TODO: The Server is permitted to start sending PUBLISH packets matching the
      // Subscription before the Server sends the SUBACK Packet. (will really need to use callbacks - ada)

      //Serial.println("\t**looking for suback");
      if (processPacketsUntil(buffer, MQTT_CTRL_SUBACK, SUBACK_TIMEOUT_MS)) {
   d5bc6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   d5bca:	2209      	movs	r2, #9
   d5bcc:	4629      	mov	r1, r5
   d5bce:	4620      	mov	r0, r4
   d5bd0:	f7ff fdee 	bl	d57b0 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>
   d5bd4:	b938      	cbnz	r0, d5be6 <_ZN13Adafruit_MQTT7connectEv+0xa8>
   d5bd6:	3e01      	subs	r6, #1
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    // Ignore subscriptions that aren't defined.
    if (subscriptions[i] == 0) continue;

    boolean success = false;
    for (uint8_t retry=0; (retry<3) && !success; retry++) { // retry until we get a suback    
   d5bd8:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   d5bdc:	d1e4      	bne.n	d5ba8 <_ZN13Adafruit_MQTT7connectEv+0x6a>
	success = true;
	break;
      }
      //Serial.println("\t**failed, retrying!");
    }
    if (! success) return -2; // failed to sub for some reason
   d5bde:	f06f 0001 	mvn.w	r0, #1
  }

  return 0;
}
   d5be2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return -1;
  if (buffer[3] != 0)
    return buffer[3];

  // Setup subscriptions once connected.
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
   d5be6:	4547      	cmp	r7, r8
   d5be8:	d1da      	bne.n	d5ba0 <_ZN13Adafruit_MQTT7connectEv+0x62>
      //Serial.println("\t**failed, retrying!");
    }
    if (! success) return -2; // failed to sub for some reason
  }

  return 0;
   d5bea:	2000      	movs	r0, #0
   d5bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5bf0 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>:
  return 2;
}

// Adafruit_MQTT_Publish Definition ////////////////////////////////////////////

Adafruit_MQTT_Publish::Adafruit_MQTT_Publish(Adafruit_MQTT *mqttserver,
   d5bf0:	b510      	push	{r4, lr}
                                             const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
   d5bf2:	e880 0006 	stmia.w	r0, {r1, r2}
  qos = q;
   d5bf6:	7203      	strb	r3, [r0, #8]
}
   d5bf8:	bd10      	pop	{r4, pc}

000d5bfa <_ZN21Adafruit_MQTT_Publish7publishEl>:
  char payload[12];
  ltoa(i, payload, 10);
  return mqtt->publish(topic, payload, qos);
}

bool Adafruit_MQTT_Publish::publish(int32_t i) {
   d5bfa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d5bfc:	4604      	mov	r4, r0
  char payload[12];
  ltoa(i, payload, 10);
   d5bfe:	220a      	movs	r2, #10
  char payload[12];
  ltoa(i, payload, 10);
  return mqtt->publish(topic, payload, qos);
}

bool Adafruit_MQTT_Publish::publish(int32_t i) {
   d5c00:	4608      	mov	r0, r1
  char payload[12];
  ltoa(i, payload, 10);
   d5c02:	a901      	add	r1, sp, #4
   d5c04:	f000 fca1 	bl	d654a <ltoa>
  return mqtt->publish(topic, payload, qos);
   d5c08:	7a23      	ldrb	r3, [r4, #8]
   d5c0a:	aa01      	add	r2, sp, #4
   d5c0c:	e894 0003 	ldmia.w	r4, {r0, r1}
   d5c10:	f7ff ff68 	bl	d5ae4 <_ZN13Adafruit_MQTT7publishEPKcS1_h>
}
   d5c14:	b004      	add	sp, #16
   d5c16:	bd10      	pop	{r4, pc}

000d5c18 <_ZN21Adafruit_MQTT_Publish7publishEi>:
   d5c18:	f7ff bfef 	b.w	d5bfa <_ZN21Adafruit_MQTT_Publish7publishEl>

000d5c1c <_ZN21Adafruit_MQTT_Publish7publishEdh>:
  char payload[11];
  ultoa(i, payload, 10);
  return mqtt->publish(topic, payload, qos);
}

bool Adafruit_MQTT_Publish::publish(double f, uint8_t precision) {
   d5c1c:	b510      	push	{r4, lr}
   d5c1e:	b092      	sub	sp, #72	; 0x48
   d5c20:	4604      	mov	r4, r0
#include "Adafruit_MQTT.h"

#if defined(ARDUINO_SAMD_ZERO) || defined(ARDUINO_SAMD_MKR1000) || defined(SPARK)
static char *dtostrf (double val, signed char width, unsigned char prec, char *sout) {
  char fmt[20];
  sprintf(fmt, "%%%d.%df", width, prec);
   d5c22:	460b      	mov	r3, r1
   d5c24:	2200      	movs	r2, #0
   d5c26:	490b      	ldr	r1, [pc, #44]	; (d5c54 <_ZN21Adafruit_MQTT_Publish7publishEdh+0x38>)
   d5c28:	a802      	add	r0, sp, #8
  char payload[11];
  ultoa(i, payload, 10);
  return mqtt->publish(topic, payload, qos);
}

bool Adafruit_MQTT_Publish::publish(double f, uint8_t precision) {
   d5c2a:	ed8d 0b00 	vstr	d0, [sp]
#include "Adafruit_MQTT.h"

#if defined(ARDUINO_SAMD_ZERO) || defined(ARDUINO_SAMD_MKR1000) || defined(SPARK)
static char *dtostrf (double val, signed char width, unsigned char prec, char *sout) {
  char fmt[20];
  sprintf(fmt, "%%%d.%df", width, prec);
   d5c2e:	f000 fb0f 	bl	d6250 <sprintf>
  sprintf(sout, fmt, val);
   d5c32:	ed9d 0b00 	vldr	d0, [sp]
   d5c36:	a902      	add	r1, sp, #8
   d5c38:	ec53 2b10 	vmov	r2, r3, d0
   d5c3c:	a807      	add	r0, sp, #28
   d5c3e:	f000 fb07 	bl	d6250 <sprintf>
}

bool Adafruit_MQTT_Publish::publish(double f, uint8_t precision) {
  char payload[41];  // Need to technically hold float max, 39 digits and minus sign.
  dtostrf(f, 0, precision, payload);
  return mqtt->publish(topic, payload, qos);
   d5c42:	7a23      	ldrb	r3, [r4, #8]
   d5c44:	aa07      	add	r2, sp, #28
   d5c46:	e894 0003 	ldmia.w	r4, {r0, r1}
   d5c4a:	f7ff ff4b 	bl	d5ae4 <_ZN13Adafruit_MQTT7publishEPKcS1_h>
}
   d5c4e:	b012      	add	sp, #72	; 0x48
   d5c50:	bd10      	pop	{r4, pc}
   d5c52:	bf00      	nop
   d5c54:	000db91e 	.word	0x000db91e

000d5c58 <_ZN23Adafruit_MQTT_SubscribeC1EP13Adafruit_MQTTPKch>:
}


// Adafruit_MQTT_Subscribe Definition //////////////////////////////////////////

Adafruit_MQTT_Subscribe::Adafruit_MQTT_Subscribe(Adafruit_MQTT *mqttserver,
   d5c58:	b510      	push	{r4, lr}
                                                 const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
  qos = q;
   d5c5a:	7103      	strb	r3, [r0, #4]
  datalen = 0;
   d5c5c:	2300      	movs	r3, #0

// Adafruit_MQTT_Subscribe Definition //////////////////////////////////////////

Adafruit_MQTT_Subscribe::Adafruit_MQTT_Subscribe(Adafruit_MQTT *mqttserver,
                                                 const char *feed, uint8_t q) {
  mqtt = mqttserver;
   d5c5e:	6341      	str	r1, [r0, #52]	; 0x34
  topic = feed;
   d5c60:	6002      	str	r2, [r0, #0]
  qos = q;
  datalen = 0;
   d5c62:	8343      	strh	r3, [r0, #26]
  callback_uint32t = 0;
   d5c64:	61c3      	str	r3, [r0, #28]
  callback_buffer = 0;
   d5c66:	6243      	str	r3, [r0, #36]	; 0x24
  callback_double = 0;
   d5c68:	6203      	str	r3, [r0, #32]
  callback_io = 0;
   d5c6a:	6283      	str	r3, [r0, #40]	; 0x28
   d5c6c:	62c3      	str	r3, [r0, #44]	; 0x2c
  io_feed = 0;
   d5c6e:	6303      	str	r3, [r0, #48]	; 0x30
}
   d5c70:	bd10      	pop	{r4, pc}

000d5c72 <_GLOBAL__sub_I__Z11printBufferPht>:
   d5c72:	f000 b811 	b.w	d5c98 <HAL_Pin_Map>
	...

000d5c78 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5c78:	b508      	push	{r3, lr}
   d5c7a:	4b02      	ldr	r3, [pc, #8]	; (d5c84 <netdb_freeaddrinfo+0xc>)
   d5c7c:	681b      	ldr	r3, [r3, #0]
   d5c7e:	689b      	ldr	r3, [r3, #8]
   d5c80:	9301      	str	r3, [sp, #4]
   d5c82:	bd08      	pop	{r3, pc}
   d5c84:	00030268 	.word	0x00030268

000d5c88 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5c88:	b508      	push	{r3, lr}
   d5c8a:	4b02      	ldr	r3, [pc, #8]	; (d5c94 <netdb_getaddrinfo+0xc>)
   d5c8c:	681b      	ldr	r3, [r3, #0]
   d5c8e:	68db      	ldr	r3, [r3, #12]
   d5c90:	9301      	str	r3, [sp, #4]
   d5c92:	bd08      	pop	{r3, pc}
   d5c94:	00030268 	.word	0x00030268

000d5c98 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d5c98:	b508      	push	{r3, lr}
   d5c9a:	4b02      	ldr	r3, [pc, #8]	; (d5ca4 <HAL_Pin_Map+0xc>)
   d5c9c:	681b      	ldr	r3, [r3, #0]
   d5c9e:	681b      	ldr	r3, [r3, #0]
   d5ca0:	9301      	str	r3, [sp, #4]
   d5ca2:	bd08      	pop	{r3, pc}
   d5ca4:	0003022c 	.word	0x0003022c

000d5ca8 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d5ca8:	b508      	push	{r3, lr}
   d5caa:	4b02      	ldr	r3, [pc, #8]	; (d5cb4 <HAL_Validate_Pin_Function+0xc>)
   d5cac:	681b      	ldr	r3, [r3, #0]
   d5cae:	685b      	ldr	r3, [r3, #4]
   d5cb0:	9301      	str	r3, [sp, #4]
   d5cb2:	bd08      	pop	{r3, pc}
   d5cb4:	0003022c 	.word	0x0003022c

000d5cb8 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5cb8:	b508      	push	{r3, lr}
   d5cba:	4b02      	ldr	r3, [pc, #8]	; (d5cc4 <HAL_Pin_Mode+0xc>)
   d5cbc:	681b      	ldr	r3, [r3, #0]
   d5cbe:	689b      	ldr	r3, [r3, #8]
   d5cc0:	9301      	str	r3, [sp, #4]
   d5cc2:	bd08      	pop	{r3, pc}
   d5cc4:	0003022c 	.word	0x0003022c

000d5cc8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5cc8:	b508      	push	{r3, lr}
   d5cca:	4b02      	ldr	r3, [pc, #8]	; (d5cd4 <HAL_Get_Pin_Mode+0xc>)
   d5ccc:	681b      	ldr	r3, [r3, #0]
   d5cce:	68db      	ldr	r3, [r3, #12]
   d5cd0:	9301      	str	r3, [sp, #4]
   d5cd2:	bd08      	pop	{r3, pc}
   d5cd4:	0003022c 	.word	0x0003022c

000d5cd8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5cd8:	b508      	push	{r3, lr}
   d5cda:	4b02      	ldr	r3, [pc, #8]	; (d5ce4 <HAL_GPIO_Write+0xc>)
   d5cdc:	681b      	ldr	r3, [r3, #0]
   d5cde:	691b      	ldr	r3, [r3, #16]
   d5ce0:	9301      	str	r3, [sp, #4]
   d5ce2:	bd08      	pop	{r3, pc}
   d5ce4:	0003022c 	.word	0x0003022c

000d5ce8 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d5ce8:	b508      	push	{r3, lr}
   d5cea:	4b02      	ldr	r3, [pc, #8]	; (d5cf4 <HAL_GPIO_Read+0xc>)
   d5cec:	681b      	ldr	r3, [r3, #0]
   d5cee:	695b      	ldr	r3, [r3, #20]
   d5cf0:	9301      	str	r3, [sp, #4]
   d5cf2:	bd08      	pop	{r3, pc}
   d5cf4:	0003022c 	.word	0x0003022c

000d5cf8 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d5cf8:	b508      	push	{r3, lr}
   d5cfa:	4b02      	ldr	r3, [pc, #8]	; (d5d04 <HAL_ADC_Read+0xc>)
   d5cfc:	681b      	ldr	r3, [r3, #0]
   d5cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5d00:	9301      	str	r3, [sp, #4]
   d5d02:	bd08      	pop	{r3, pc}
   d5d04:	0003022c 	.word	0x0003022c

000d5d08 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d5d08:	b508      	push	{r3, lr}
   d5d0a:	4b02      	ldr	r3, [pc, #8]	; (d5d14 <HAL_SPI_Begin+0xc>)
   d5d0c:	681b      	ldr	r3, [r3, #0]
   d5d0e:	681b      	ldr	r3, [r3, #0]
   d5d10:	9301      	str	r3, [sp, #4]
   d5d12:	bd08      	pop	{r3, pc}
   d5d14:	00030230 	.word	0x00030230

000d5d18 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d5d18:	b508      	push	{r3, lr}
   d5d1a:	4b02      	ldr	r3, [pc, #8]	; (d5d24 <HAL_SPI_Send_Receive_Data+0xc>)
   d5d1c:	681b      	ldr	r3, [r3, #0]
   d5d1e:	695b      	ldr	r3, [r3, #20]
   d5d20:	9301      	str	r3, [sp, #4]
   d5d22:	bd08      	pop	{r3, pc}
   d5d24:	00030230 	.word	0x00030230

000d5d28 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d5d28:	b508      	push	{r3, lr}
   d5d2a:	4b02      	ldr	r3, [pc, #8]	; (d5d34 <HAL_SPI_Init+0xc>)
   d5d2c:	681b      	ldr	r3, [r3, #0]
   d5d2e:	69db      	ldr	r3, [r3, #28]
   d5d30:	9301      	str	r3, [sp, #4]
   d5d32:	bd08      	pop	{r3, pc}
   d5d34:	00030230 	.word	0x00030230

000d5d38 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d5d38:	b508      	push	{r3, lr}
   d5d3a:	4b02      	ldr	r3, [pc, #8]	; (d5d44 <HAL_SPI_Is_Enabled+0xc>)
   d5d3c:	681b      	ldr	r3, [r3, #0]
   d5d3e:	6a1b      	ldr	r3, [r3, #32]
   d5d40:	9301      	str	r3, [sp, #4]
   d5d42:	bd08      	pop	{r3, pc}
   d5d44:	00030230 	.word	0x00030230

000d5d48 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d5d48:	b508      	push	{r3, lr}
   d5d4a:	4b02      	ldr	r3, [pc, #8]	; (d5d54 <HAL_SPI_Info+0xc>)
   d5d4c:	681b      	ldr	r3, [r3, #0]
   d5d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5d50:	9301      	str	r3, [sp, #4]
   d5d52:	bd08      	pop	{r3, pc}
   d5d54:	00030230 	.word	0x00030230

000d5d58 <HAL_SPI_Set_Settings>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d5d58:	b508      	push	{r3, lr}
   d5d5a:	4b02      	ldr	r3, [pc, #8]	; (d5d64 <HAL_SPI_Set_Settings+0xc>)
   d5d5c:	681b      	ldr	r3, [r3, #0]
   d5d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5d60:	9301      	str	r3, [sp, #4]
   d5d62:	bd08      	pop	{r3, pc}
   d5d64:	00030230 	.word	0x00030230

000d5d68 <HAL_SPI_Acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d5d68:	b508      	push	{r3, lr}
   d5d6a:	4b02      	ldr	r3, [pc, #8]	; (d5d74 <HAL_SPI_Acquire+0xc>)
   d5d6c:	681b      	ldr	r3, [r3, #0]
   d5d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5d70:	9301      	str	r3, [sp, #4]
   d5d72:	bd08      	pop	{r3, pc}
   d5d74:	00030230 	.word	0x00030230

000d5d78 <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d5d78:	b508      	push	{r3, lr}
   d5d7a:	4b02      	ldr	r3, [pc, #8]	; (d5d84 <HAL_SPI_Release+0xc>)
   d5d7c:	681b      	ldr	r3, [r3, #0]
   d5d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5d80:	9301      	str	r3, [sp, #4]
   d5d82:	bd08      	pop	{r3, pc}
   d5d84:	00030230 	.word	0x00030230

000d5d88 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d5d88:	b508      	push	{r3, lr}
   d5d8a:	4b02      	ldr	r3, [pc, #8]	; (d5d94 <if_index_to_name+0xc>)
   d5d8c:	681b      	ldr	r3, [r3, #0]
   d5d8e:	695b      	ldr	r3, [r3, #20]
   d5d90:	9301      	str	r3, [sp, #4]
   d5d92:	bd08      	pop	{r3, pc}
   d5d94:	0003026c 	.word	0x0003026c

000d5d98 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5d98:	b508      	push	{r3, lr}
   d5d9a:	4b02      	ldr	r3, [pc, #8]	; (d5da4 <HAL_RNG_GetRandomNumber+0xc>)
   d5d9c:	681b      	ldr	r3, [r3, #0]
   d5d9e:	685b      	ldr	r3, [r3, #4]
   d5da0:	9301      	str	r3, [sp, #4]
   d5da2:	bd08      	pop	{r3, pc}
   d5da4:	00030218 	.word	0x00030218

000d5da8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d5da8:	b508      	push	{r3, lr}
   d5daa:	4b02      	ldr	r3, [pc, #8]	; (d5db4 <HAL_Delay_Microseconds+0xc>)
   d5dac:	681b      	ldr	r3, [r3, #0]
   d5dae:	68db      	ldr	r3, [r3, #12]
   d5db0:	9301      	str	r3, [sp, #4]
   d5db2:	bd08      	pop	{r3, pc}
   d5db4:	00030218 	.word	0x00030218

000d5db8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5db8:	b508      	push	{r3, lr}
   d5dba:	4b02      	ldr	r3, [pc, #8]	; (d5dc4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5dbc:	681b      	ldr	r3, [r3, #0]
   d5dbe:	695b      	ldr	r3, [r3, #20]
   d5dc0:	9301      	str	r3, [sp, #4]
   d5dc2:	bd08      	pop	{r3, pc}
   d5dc4:	00030218 	.word	0x00030218

000d5dc8 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d5dc8:	b508      	push	{r3, lr}
   d5dca:	4b02      	ldr	r3, [pc, #8]	; (d5dd4 <HAL_RTC_Get_UnixTime+0xc>)
   d5dcc:	681b      	ldr	r3, [r3, #0]
   d5dce:	69db      	ldr	r3, [r3, #28]
   d5dd0:	9301      	str	r3, [sp, #4]
   d5dd2:	bd08      	pop	{r3, pc}
   d5dd4:	00030218 	.word	0x00030218

000d5dd8 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d5dd8:	b508      	push	{r3, lr}
   d5dda:	4b02      	ldr	r3, [pc, #8]	; (d5de4 <HAL_RTC_Time_Is_Valid+0xc>)
   d5ddc:	681b      	ldr	r3, [r3, #0]
   d5dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5de0:	9301      	str	r3, [sp, #4]
   d5de2:	bd08      	pop	{r3, pc}
   d5de4:	00030218 	.word	0x00030218

000d5de8 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d5de8:	b508      	push	{r3, lr}
   d5dea:	4b02      	ldr	r3, [pc, #8]	; (d5df4 <os_thread_is_current+0xc>)
   d5dec:	681b      	ldr	r3, [r3, #0]
   d5dee:	689b      	ldr	r3, [r3, #8]
   d5df0:	9301      	str	r3, [sp, #4]
   d5df2:	bd08      	pop	{r3, pc}
   d5df4:	00030248 	.word	0x00030248

000d5df8 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d5df8:	b508      	push	{r3, lr}
   d5dfa:	4b02      	ldr	r3, [pc, #8]	; (d5e04 <os_thread_join+0xc>)
   d5dfc:	681b      	ldr	r3, [r3, #0]
   d5dfe:	691b      	ldr	r3, [r3, #16]
   d5e00:	9301      	str	r3, [sp, #4]
   d5e02:	bd08      	pop	{r3, pc}
   d5e04:	00030248 	.word	0x00030248

000d5e08 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d5e08:	b508      	push	{r3, lr}
   d5e0a:	4b02      	ldr	r3, [pc, #8]	; (d5e14 <os_thread_cleanup+0xc>)
   d5e0c:	681b      	ldr	r3, [r3, #0]
   d5e0e:	695b      	ldr	r3, [r3, #20]
   d5e10:	9301      	str	r3, [sp, #4]
   d5e12:	bd08      	pop	{r3, pc}
   d5e14:	00030248 	.word	0x00030248

000d5e18 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5e18:	b508      	push	{r3, lr}
   d5e1a:	4b02      	ldr	r3, [pc, #8]	; (d5e24 <os_mutex_recursive_create+0xc>)
   d5e1c:	681b      	ldr	r3, [r3, #0]
   d5e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5e20:	9301      	str	r3, [sp, #4]
   d5e22:	bd08      	pop	{r3, pc}
   d5e24:	00030248 	.word	0x00030248

000d5e28 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5e28:	b508      	push	{r3, lr}
   d5e2a:	4b02      	ldr	r3, [pc, #8]	; (d5e34 <os_mutex_recursive_destroy+0xc>)
   d5e2c:	681b      	ldr	r3, [r3, #0]
   d5e2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5e30:	9301      	str	r3, [sp, #4]
   d5e32:	bd08      	pop	{r3, pc}
   d5e34:	00030248 	.word	0x00030248

000d5e38 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5e38:	b508      	push	{r3, lr}
   d5e3a:	4b02      	ldr	r3, [pc, #8]	; (d5e44 <inet_inet_ntop+0xc>)
   d5e3c:	681b      	ldr	r3, [r3, #0]
   d5e3e:	695b      	ldr	r3, [r3, #20]
   d5e40:	9301      	str	r3, [sp, #4]
   d5e42:	bd08      	pop	{r3, pc}
   d5e44:	00030264 	.word	0x00030264

000d5e48 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d5e48:	b508      	push	{r3, lr}
   d5e4a:	4b02      	ldr	r3, [pc, #8]	; (d5e54 <inet_htonl+0xc>)
   d5e4c:	681b      	ldr	r3, [r3, #0]
   d5e4e:	6a1b      	ldr	r3, [r3, #32]
   d5e50:	9301      	str	r3, [sp, #4]
   d5e52:	bd08      	pop	{r3, pc}
   d5e54:	00030264 	.word	0x00030264

000d5e58 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d5e58:	b508      	push	{r3, lr}
   d5e5a:	4b02      	ldr	r3, [pc, #8]	; (d5e64 <inet_htons+0xc>)
   d5e5c:	681b      	ldr	r3, [r3, #0]
   d5e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5e60:	9301      	str	r3, [sp, #4]
   d5e62:	bd08      	pop	{r3, pc}
   d5e64:	00030264 	.word	0x00030264

000d5e68 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d5e68:	b508      	push	{r3, lr}
   d5e6a:	4b02      	ldr	r3, [pc, #8]	; (d5e74 <HAL_USART_Init+0xc>)
   d5e6c:	681b      	ldr	r3, [r3, #0]
   d5e6e:	681b      	ldr	r3, [r3, #0]
   d5e70:	9301      	str	r3, [sp, #4]
   d5e72:	bd08      	pop	{r3, pc}
   d5e74:	0003023c 	.word	0x0003023c

000d5e78 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d5e78:	b508      	push	{r3, lr}
   d5e7a:	4b02      	ldr	r3, [pc, #8]	; (d5e84 <HAL_USART_Write_Data+0xc>)
   d5e7c:	681b      	ldr	r3, [r3, #0]
   d5e7e:	68db      	ldr	r3, [r3, #12]
   d5e80:	9301      	str	r3, [sp, #4]
   d5e82:	bd08      	pop	{r3, pc}
   d5e84:	0003023c 	.word	0x0003023c

000d5e88 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d5e88:	b508      	push	{r3, lr}
   d5e8a:	4b02      	ldr	r3, [pc, #8]	; (d5e94 <HAL_USART_Available_Data+0xc>)
   d5e8c:	681b      	ldr	r3, [r3, #0]
   d5e8e:	691b      	ldr	r3, [r3, #16]
   d5e90:	9301      	str	r3, [sp, #4]
   d5e92:	bd08      	pop	{r3, pc}
   d5e94:	0003023c 	.word	0x0003023c

000d5e98 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d5e98:	b508      	push	{r3, lr}
   d5e9a:	4b02      	ldr	r3, [pc, #8]	; (d5ea4 <HAL_USART_Read_Data+0xc>)
   d5e9c:	681b      	ldr	r3, [r3, #0]
   d5e9e:	695b      	ldr	r3, [r3, #20]
   d5ea0:	9301      	str	r3, [sp, #4]
   d5ea2:	bd08      	pop	{r3, pc}
   d5ea4:	0003023c 	.word	0x0003023c

000d5ea8 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d5ea8:	b508      	push	{r3, lr}
   d5eaa:	4b02      	ldr	r3, [pc, #8]	; (d5eb4 <HAL_USART_Peek_Data+0xc>)
   d5eac:	681b      	ldr	r3, [r3, #0]
   d5eae:	699b      	ldr	r3, [r3, #24]
   d5eb0:	9301      	str	r3, [sp, #4]
   d5eb2:	bd08      	pop	{r3, pc}
   d5eb4:	0003023c 	.word	0x0003023c

000d5eb8 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d5eb8:	b508      	push	{r3, lr}
   d5eba:	4b02      	ldr	r3, [pc, #8]	; (d5ec4 <HAL_USART_Flush_Data+0xc>)
   d5ebc:	681b      	ldr	r3, [r3, #0]
   d5ebe:	69db      	ldr	r3, [r3, #28]
   d5ec0:	9301      	str	r3, [sp, #4]
   d5ec2:	bd08      	pop	{r3, pc}
   d5ec4:	0003023c 	.word	0x0003023c

000d5ec8 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d5ec8:	b508      	push	{r3, lr}
   d5eca:	4b02      	ldr	r3, [pc, #8]	; (d5ed4 <HAL_USART_Is_Enabled+0xc>)
   d5ecc:	681b      	ldr	r3, [r3, #0]
   d5ece:	6a1b      	ldr	r3, [r3, #32]
   d5ed0:	9301      	str	r3, [sp, #4]
   d5ed2:	bd08      	pop	{r3, pc}
   d5ed4:	0003023c 	.word	0x0003023c

000d5ed8 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d5ed8:	b508      	push	{r3, lr}
   d5eda:	4b02      	ldr	r3, [pc, #8]	; (d5ee4 <HAL_USART_Available_Data_For_Write+0xc>)
   d5edc:	681b      	ldr	r3, [r3, #0]
   d5ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5ee0:	9301      	str	r3, [sp, #4]
   d5ee2:	bd08      	pop	{r3, pc}
   d5ee4:	0003023c 	.word	0x0003023c

000d5ee8 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d5ee8:	b508      	push	{r3, lr}
   d5eea:	4b02      	ldr	r3, [pc, #8]	; (d5ef4 <HAL_I2C_Begin+0xc>)
   d5eec:	681b      	ldr	r3, [r3, #0]
   d5eee:	68db      	ldr	r3, [r3, #12]
   d5ef0:	9301      	str	r3, [sp, #4]
   d5ef2:	bd08      	pop	{r3, pc}
   d5ef4:	00030228 	.word	0x00030228

000d5ef8 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d5ef8:	b508      	push	{r3, lr}
   d5efa:	4b02      	ldr	r3, [pc, #8]	; (d5f04 <HAL_I2C_Begin_Transmission+0xc>)
   d5efc:	681b      	ldr	r3, [r3, #0]
   d5efe:	699b      	ldr	r3, [r3, #24]
   d5f00:	9301      	str	r3, [sp, #4]
   d5f02:	bd08      	pop	{r3, pc}
   d5f04:	00030228 	.word	0x00030228

000d5f08 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d5f08:	b508      	push	{r3, lr}
   d5f0a:	4b02      	ldr	r3, [pc, #8]	; (d5f14 <HAL_I2C_End_Transmission+0xc>)
   d5f0c:	681b      	ldr	r3, [r3, #0]
   d5f0e:	69db      	ldr	r3, [r3, #28]
   d5f10:	9301      	str	r3, [sp, #4]
   d5f12:	bd08      	pop	{r3, pc}
   d5f14:	00030228 	.word	0x00030228

000d5f18 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d5f18:	b508      	push	{r3, lr}
   d5f1a:	4b02      	ldr	r3, [pc, #8]	; (d5f24 <HAL_I2C_Write_Data+0xc>)
   d5f1c:	681b      	ldr	r3, [r3, #0]
   d5f1e:	6a1b      	ldr	r3, [r3, #32]
   d5f20:	9301      	str	r3, [sp, #4]
   d5f22:	bd08      	pop	{r3, pc}
   d5f24:	00030228 	.word	0x00030228

000d5f28 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d5f28:	b508      	push	{r3, lr}
   d5f2a:	4b02      	ldr	r3, [pc, #8]	; (d5f34 <HAL_I2C_Available_Data+0xc>)
   d5f2c:	681b      	ldr	r3, [r3, #0]
   d5f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5f30:	9301      	str	r3, [sp, #4]
   d5f32:	bd08      	pop	{r3, pc}
   d5f34:	00030228 	.word	0x00030228

000d5f38 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d5f38:	b508      	push	{r3, lr}
   d5f3a:	4b02      	ldr	r3, [pc, #8]	; (d5f44 <HAL_I2C_Read_Data+0xc>)
   d5f3c:	681b      	ldr	r3, [r3, #0]
   d5f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5f40:	9301      	str	r3, [sp, #4]
   d5f42:	bd08      	pop	{r3, pc}
   d5f44:	00030228 	.word	0x00030228

000d5f48 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d5f48:	b508      	push	{r3, lr}
   d5f4a:	4b02      	ldr	r3, [pc, #8]	; (d5f54 <HAL_I2C_Peek_Data+0xc>)
   d5f4c:	681b      	ldr	r3, [r3, #0]
   d5f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5f50:	9301      	str	r3, [sp, #4]
   d5f52:	bd08      	pop	{r3, pc}
   d5f54:	00030228 	.word	0x00030228

000d5f58 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d5f58:	b508      	push	{r3, lr}
   d5f5a:	4b02      	ldr	r3, [pc, #8]	; (d5f64 <HAL_I2C_Flush_Data+0xc>)
   d5f5c:	681b      	ldr	r3, [r3, #0]
   d5f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5f60:	9301      	str	r3, [sp, #4]
   d5f62:	bd08      	pop	{r3, pc}
   d5f64:	00030228 	.word	0x00030228

000d5f68 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d5f68:	b508      	push	{r3, lr}
   d5f6a:	4b02      	ldr	r3, [pc, #8]	; (d5f74 <HAL_I2C_Is_Enabled+0xc>)
   d5f6c:	681b      	ldr	r3, [r3, #0]
   d5f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5f70:	9301      	str	r3, [sp, #4]
   d5f72:	bd08      	pop	{r3, pc}
   d5f74:	00030228 	.word	0x00030228

000d5f78 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d5f78:	b508      	push	{r3, lr}
   d5f7a:	4b02      	ldr	r3, [pc, #8]	; (d5f84 <HAL_I2C_Init+0xc>)
   d5f7c:	681b      	ldr	r3, [r3, #0]
   d5f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5f80:	9301      	str	r3, [sp, #4]
   d5f82:	bd08      	pop	{r3, pc}
   d5f84:	00030228 	.word	0x00030228

000d5f88 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d5f88:	b508      	push	{r3, lr}
   d5f8a:	4b02      	ldr	r3, [pc, #8]	; (d5f94 <HAL_I2C_Request_Data_Ex+0xc>)
   d5f8c:	681b      	ldr	r3, [r3, #0]
   d5f8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5f90:	9301      	str	r3, [sp, #4]
   d5f92:	bd08      	pop	{r3, pc}
   d5f94:	00030228 	.word	0x00030228

000d5f98 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d5f98:	b508      	push	{r3, lr}
   d5f9a:	4b02      	ldr	r3, [pc, #8]	; (d5fa4 <sock_setsockopt+0xc>)
   d5f9c:	681b      	ldr	r3, [r3, #0]
   d5f9e:	699b      	ldr	r3, [r3, #24]
   d5fa0:	9301      	str	r3, [sp, #4]
   d5fa2:	bd08      	pop	{r3, pc}
   d5fa4:	00030238 	.word	0x00030238

000d5fa8 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d5fa8:	b508      	push	{r3, lr}
   d5faa:	4b02      	ldr	r3, [pc, #8]	; (d5fb4 <sock_close+0xc>)
   d5fac:	681b      	ldr	r3, [r3, #0]
   d5fae:	69db      	ldr	r3, [r3, #28]
   d5fb0:	9301      	str	r3, [sp, #4]
   d5fb2:	bd08      	pop	{r3, pc}
   d5fb4:	00030238 	.word	0x00030238

000d5fb8 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d5fb8:	b508      	push	{r3, lr}
   d5fba:	4b02      	ldr	r3, [pc, #8]	; (d5fc4 <sock_connect+0xc>)
   d5fbc:	681b      	ldr	r3, [r3, #0]
   d5fbe:	6a1b      	ldr	r3, [r3, #32]
   d5fc0:	9301      	str	r3, [sp, #4]
   d5fc2:	bd08      	pop	{r3, pc}
   d5fc4:	00030238 	.word	0x00030238

000d5fc8 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d5fc8:	b508      	push	{r3, lr}
   d5fca:	4b02      	ldr	r3, [pc, #8]	; (d5fd4 <sock_recv+0xc>)
   d5fcc:	681b      	ldr	r3, [r3, #0]
   d5fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5fd0:	9301      	str	r3, [sp, #4]
   d5fd2:	bd08      	pop	{r3, pc}
   d5fd4:	00030238 	.word	0x00030238

000d5fd8 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d5fd8:	b508      	push	{r3, lr}
   d5fda:	4b02      	ldr	r3, [pc, #8]	; (d5fe4 <sock_send+0xc>)
   d5fdc:	681b      	ldr	r3, [r3, #0]
   d5fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5fe0:	9301      	str	r3, [sp, #4]
   d5fe2:	bd08      	pop	{r3, pc}
   d5fe4:	00030238 	.word	0x00030238

000d5fe8 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d5fe8:	b508      	push	{r3, lr}
   d5fea:	4b02      	ldr	r3, [pc, #8]	; (d5ff4 <sock_socket+0xc>)
   d5fec:	681b      	ldr	r3, [r3, #0]
   d5fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d5ff0:	9301      	str	r3, [sp, #4]
   d5ff2:	bd08      	pop	{r3, pc}
   d5ff4:	00030238 	.word	0x00030238

000d5ff8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5ff8:	b508      	push	{r3, lr}
   d5ffa:	4b02      	ldr	r3, [pc, #8]	; (d6004 <HAL_USB_USART_Init+0xc>)
   d5ffc:	681b      	ldr	r3, [r3, #0]
   d5ffe:	681b      	ldr	r3, [r3, #0]
   d6000:	9301      	str	r3, [sp, #4]
   d6002:	bd08      	pop	{r3, pc}
   d6004:	0003024c 	.word	0x0003024c

000d6008 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d6008:	b508      	push	{r3, lr}
   d600a:	4b02      	ldr	r3, [pc, #8]	; (d6014 <HAL_USB_USART_Begin+0xc>)
   d600c:	681b      	ldr	r3, [r3, #0]
   d600e:	685b      	ldr	r3, [r3, #4]
   d6010:	9301      	str	r3, [sp, #4]
   d6012:	bd08      	pop	{r3, pc}
   d6014:	0003024c 	.word	0x0003024c

000d6018 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d6018:	b508      	push	{r3, lr}
   d601a:	4b02      	ldr	r3, [pc, #8]	; (d6024 <HAL_USB_USART_Available_Data+0xc>)
   d601c:	681b      	ldr	r3, [r3, #0]
   d601e:	691b      	ldr	r3, [r3, #16]
   d6020:	9301      	str	r3, [sp, #4]
   d6022:	bd08      	pop	{r3, pc}
   d6024:	0003024c 	.word	0x0003024c

000d6028 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d6028:	b508      	push	{r3, lr}
   d602a:	4b02      	ldr	r3, [pc, #8]	; (d6034 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d602c:	681b      	ldr	r3, [r3, #0]
   d602e:	695b      	ldr	r3, [r3, #20]
   d6030:	9301      	str	r3, [sp, #4]
   d6032:	bd08      	pop	{r3, pc}
   d6034:	0003024c 	.word	0x0003024c

000d6038 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6038:	b508      	push	{r3, lr}
   d603a:	4b02      	ldr	r3, [pc, #8]	; (d6044 <HAL_USB_USART_Receive_Data+0xc>)
   d603c:	681b      	ldr	r3, [r3, #0]
   d603e:	699b      	ldr	r3, [r3, #24]
   d6040:	9301      	str	r3, [sp, #4]
   d6042:	bd08      	pop	{r3, pc}
   d6044:	0003024c 	.word	0x0003024c

000d6048 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6048:	b508      	push	{r3, lr}
   d604a:	4b02      	ldr	r3, [pc, #8]	; (d6054 <HAL_USB_USART_Send_Data+0xc>)
   d604c:	681b      	ldr	r3, [r3, #0]
   d604e:	69db      	ldr	r3, [r3, #28]
   d6050:	9301      	str	r3, [sp, #4]
   d6052:	bd08      	pop	{r3, pc}
   d6054:	0003024c 	.word	0x0003024c

000d6058 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d6058:	b508      	push	{r3, lr}
   d605a:	4b02      	ldr	r3, [pc, #8]	; (d6064 <HAL_USB_USART_Flush_Data+0xc>)
   d605c:	681b      	ldr	r3, [r3, #0]
   d605e:	6a1b      	ldr	r3, [r3, #32]
   d6060:	9301      	str	r3, [sp, #4]
   d6062:	bd08      	pop	{r3, pc}
   d6064:	0003024c 	.word	0x0003024c

000d6068 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d6068:	b508      	push	{r3, lr}
   d606a:	4b02      	ldr	r3, [pc, #8]	; (d6074 <panic_+0xc>)
   d606c:	681b      	ldr	r3, [r3, #0]
   d606e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6070:	9301      	str	r3, [sp, #4]
   d6072:	bd08      	pop	{r3, pc}
   d6074:	00030260 	.word	0x00030260

000d6078 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d6078:	b508      	push	{r3, lr}
   d607a:	4b02      	ldr	r3, [pc, #8]	; (d6084 <log_message+0xc>)
   d607c:	681b      	ldr	r3, [r3, #0]
   d607e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6080:	9301      	str	r3, [sp, #4]
   d6082:	bd08      	pop	{r3, pc}
   d6084:	00030260 	.word	0x00030260

000d6088 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d6088:	b508      	push	{r3, lr}
   d608a:	4b02      	ldr	r3, [pc, #8]	; (d6094 <system_mode+0xc>)
   d608c:	681b      	ldr	r3, [r3, #0]
   d608e:	681b      	ldr	r3, [r3, #0]
   d6090:	9301      	str	r3, [sp, #4]
   d6092:	bd08      	pop	{r3, pc}
   d6094:	00030220 	.word	0x00030220

000d6098 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d6098:	b508      	push	{r3, lr}
   d609a:	4b02      	ldr	r3, [pc, #8]	; (d60a4 <set_system_mode+0xc>)
   d609c:	681b      	ldr	r3, [r3, #0]
   d609e:	685b      	ldr	r3, [r3, #4]
   d60a0:	9301      	str	r3, [sp, #4]
   d60a2:	bd08      	pop	{r3, pc}
   d60a4:	00030220 	.word	0x00030220

000d60a8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d60a8:	b508      	push	{r3, lr}
   d60aa:	4b02      	ldr	r3, [pc, #8]	; (d60b4 <system_delay_ms+0xc>)
   d60ac:	681b      	ldr	r3, [r3, #0]
   d60ae:	695b      	ldr	r3, [r3, #20]
   d60b0:	9301      	str	r3, [sp, #4]
   d60b2:	bd08      	pop	{r3, pc}
   d60b4:	00030220 	.word	0x00030220

000d60b8 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d60b8:	b508      	push	{r3, lr}
   d60ba:	4b02      	ldr	r3, [pc, #8]	; (d60c4 <application_thread_current+0xc>)
   d60bc:	681b      	ldr	r3, [r3, #0]
   d60be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d60c0:	9301      	str	r3, [sp, #4]
   d60c2:	bd08      	pop	{r3, pc}
   d60c4:	00030220 	.word	0x00030220

000d60c8 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d60c8:	b508      	push	{r3, lr}
   d60ca:	4b02      	ldr	r3, [pc, #8]	; (d60d4 <application_thread_invoke+0xc>)
   d60cc:	681b      	ldr	r3, [r3, #0]
   d60ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d60d0:	9301      	str	r3, [sp, #4]
   d60d2:	bd08      	pop	{r3, pc}
   d60d4:	00030220 	.word	0x00030220

000d60d8 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d60d8:	b508      	push	{r3, lr}
   d60da:	4b02      	ldr	r3, [pc, #8]	; (d60e4 <system_thread_get_state+0xc>)
   d60dc:	681b      	ldr	r3, [r3, #0]
   d60de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d60e0:	9301      	str	r3, [sp, #4]
   d60e2:	bd08      	pop	{r3, pc}
   d60e4:	00030220 	.word	0x00030220

000d60e8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d60e8:	b508      	push	{r3, lr}
   d60ea:	4b03      	ldr	r3, [pc, #12]	; (d60f8 <system_ctrl_set_app_request_handler+0x10>)
   d60ec:	681b      	ldr	r3, [r3, #0]
   d60ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d60f2:	9301      	str	r3, [sp, #4]
   d60f4:	bd08      	pop	{r3, pc}
   d60f6:	0000      	.short	0x0000
   d60f8:	00030220 	.word	0x00030220

000d60fc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d60fc:	b508      	push	{r3, lr}
   d60fe:	4b03      	ldr	r3, [pc, #12]	; (d610c <system_ctrl_set_result+0x10>)
   d6100:	681b      	ldr	r3, [r3, #0]
   d6102:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d6106:	9301      	str	r3, [sp, #4]
   d6108:	bd08      	pop	{r3, pc}
   d610a:	0000      	.short	0x0000
   d610c:	00030220 	.word	0x00030220

000d6110 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d6110:	b508      	push	{r3, lr}
   d6112:	4b02      	ldr	r3, [pc, #8]	; (d611c <network_connect+0xc>)
   d6114:	681b      	ldr	r3, [r3, #0]
   d6116:	685b      	ldr	r3, [r3, #4]
   d6118:	9301      	str	r3, [sp, #4]
   d611a:	bd08      	pop	{r3, pc}
   d611c:	00030240 	.word	0x00030240

000d6120 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d6120:	b508      	push	{r3, lr}
   d6122:	4b02      	ldr	r3, [pc, #8]	; (d612c <network_connecting+0xc>)
   d6124:	681b      	ldr	r3, [r3, #0]
   d6126:	689b      	ldr	r3, [r3, #8]
   d6128:	9301      	str	r3, [sp, #4]
   d612a:	bd08      	pop	{r3, pc}
   d612c:	00030240 	.word	0x00030240

000d6130 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d6130:	b508      	push	{r3, lr}
   d6132:	4b02      	ldr	r3, [pc, #8]	; (d613c <network_disconnect+0xc>)
   d6134:	681b      	ldr	r3, [r3, #0]
   d6136:	68db      	ldr	r3, [r3, #12]
   d6138:	9301      	str	r3, [sp, #4]
   d613a:	bd08      	pop	{r3, pc}
   d613c:	00030240 	.word	0x00030240

000d6140 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d6140:	b508      	push	{r3, lr}
   d6142:	4b02      	ldr	r3, [pc, #8]	; (d614c <network_ready+0xc>)
   d6144:	681b      	ldr	r3, [r3, #0]
   d6146:	691b      	ldr	r3, [r3, #16]
   d6148:	9301      	str	r3, [sp, #4]
   d614a:	bd08      	pop	{r3, pc}
   d614c:	00030240 	.word	0x00030240

000d6150 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d6150:	b508      	push	{r3, lr}
   d6152:	4b02      	ldr	r3, [pc, #8]	; (d615c <network_on+0xc>)
   d6154:	681b      	ldr	r3, [r3, #0]
   d6156:	695b      	ldr	r3, [r3, #20]
   d6158:	9301      	str	r3, [sp, #4]
   d615a:	bd08      	pop	{r3, pc}
   d615c:	00030240 	.word	0x00030240

000d6160 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d6160:	b508      	push	{r3, lr}
   d6162:	4b02      	ldr	r3, [pc, #8]	; (d616c <network_off+0xc>)
   d6164:	681b      	ldr	r3, [r3, #0]
   d6166:	699b      	ldr	r3, [r3, #24]
   d6168:	9301      	str	r3, [sp, #4]
   d616a:	bd08      	pop	{r3, pc}
   d616c:	00030240 	.word	0x00030240

000d6170 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d6170:	b508      	push	{r3, lr}
   d6172:	4b02      	ldr	r3, [pc, #8]	; (d617c <network_listen+0xc>)
   d6174:	681b      	ldr	r3, [r3, #0]
   d6176:	69db      	ldr	r3, [r3, #28]
   d6178:	9301      	str	r3, [sp, #4]
   d617a:	bd08      	pop	{r3, pc}
   d617c:	00030240 	.word	0x00030240

000d6180 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d6180:	b508      	push	{r3, lr}
   d6182:	4b02      	ldr	r3, [pc, #8]	; (d618c <network_listening+0xc>)
   d6184:	681b      	ldr	r3, [r3, #0]
   d6186:	6a1b      	ldr	r3, [r3, #32]
   d6188:	9301      	str	r3, [sp, #4]
   d618a:	bd08      	pop	{r3, pc}
   d618c:	00030240 	.word	0x00030240

000d6190 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d6190:	b508      	push	{r3, lr}
   d6192:	4b02      	ldr	r3, [pc, #8]	; (d619c <network_set_listen_timeout+0xc>)
   d6194:	681b      	ldr	r3, [r3, #0]
   d6196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6198:	9301      	str	r3, [sp, #4]
   d619a:	bd08      	pop	{r3, pc}
   d619c:	00030240 	.word	0x00030240

000d61a0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d61a0:	b508      	push	{r3, lr}
   d61a2:	4b02      	ldr	r3, [pc, #8]	; (d61ac <network_get_listen_timeout+0xc>)
   d61a4:	681b      	ldr	r3, [r3, #0]
   d61a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d61a8:	9301      	str	r3, [sp, #4]
   d61aa:	bd08      	pop	{r3, pc}
   d61ac:	00030240 	.word	0x00030240

000d61b0 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d61b0:	b508      	push	{r3, lr}
   d61b2:	4b02      	ldr	r3, [pc, #8]	; (d61bc <spark_variable+0xc>)
   d61b4:	681b      	ldr	r3, [r3, #0]
   d61b6:	681b      	ldr	r3, [r3, #0]
   d61b8:	9301      	str	r3, [sp, #4]
   d61ba:	bd08      	pop	{r3, pc}
   d61bc:	00030244 	.word	0x00030244

000d61c0 <spark_process>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d61c0:	b508      	push	{r3, lr}
   d61c2:	4b02      	ldr	r3, [pc, #8]	; (d61cc <spark_process+0xc>)
   d61c4:	681b      	ldr	r3, [r3, #0]
   d61c6:	689b      	ldr	r3, [r3, #8]
   d61c8:	9301      	str	r3, [sp, #4]
   d61ca:	bd08      	pop	{r3, pc}
   d61cc:	00030244 	.word	0x00030244

000d61d0 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d61d0:	b508      	push	{r3, lr}
   d61d2:	4b02      	ldr	r3, [pc, #8]	; (d61dc <spark_cloud_flag_connected+0xc>)
   d61d4:	681b      	ldr	r3, [r3, #0]
   d61d6:	695b      	ldr	r3, [r3, #20]
   d61d8:	9301      	str	r3, [sp, #4]
   d61da:	bd08      	pop	{r3, pc}
   d61dc:	00030244 	.word	0x00030244

000d61e0 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d61e0:	b508      	push	{r3, lr}
   d61e2:	4b02      	ldr	r3, [pc, #8]	; (d61ec <spark_send_event+0xc>)
   d61e4:	681b      	ldr	r3, [r3, #0]
   d61e6:	6a1b      	ldr	r3, [r3, #32]
   d61e8:	9301      	str	r3, [sp, #4]
   d61ea:	bd08      	pop	{r3, pc}
   d61ec:	00030244 	.word	0x00030244

000d61f0 <spark_sync_time>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d61f0:	b508      	push	{r3, lr}
   d61f2:	4b02      	ldr	r3, [pc, #8]	; (d61fc <spark_sync_time+0xc>)
   d61f4:	681b      	ldr	r3, [r3, #0]
   d61f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d61f8:	9301      	str	r3, [sp, #4]
   d61fa:	bd08      	pop	{r3, pc}
   d61fc:	00030244 	.word	0x00030244

000d6200 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d6200:	b508      	push	{r3, lr}
   d6202:	4b02      	ldr	r3, [pc, #8]	; (d620c <spark_sync_time_pending+0xc>)
   d6204:	681b      	ldr	r3, [r3, #0]
   d6206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6208:	9301      	str	r3, [sp, #4]
   d620a:	bd08      	pop	{r3, pc}
   d620c:	00030244 	.word	0x00030244

000d6210 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d6210:	b508      	push	{r3, lr}
   d6212:	4b02      	ldr	r3, [pc, #8]	; (d621c <spark_set_random_seed_from_cloud_handler+0xc>)
   d6214:	681b      	ldr	r3, [r3, #0]
   d6216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6218:	9301      	str	r3, [sp, #4]
   d621a:	bd08      	pop	{r3, pc}
   d621c:	00030244 	.word	0x00030244

000d6220 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d6220:	b508      	push	{r3, lr}
   d6222:	4b02      	ldr	r3, [pc, #8]	; (d622c <malloc+0xc>)
   d6224:	681b      	ldr	r3, [r3, #0]
   d6226:	681b      	ldr	r3, [r3, #0]
   d6228:	9301      	str	r3, [sp, #4]
   d622a:	bd08      	pop	{r3, pc}
   d622c:	0003021c 	.word	0x0003021c

000d6230 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d6230:	b508      	push	{r3, lr}
   d6232:	4b02      	ldr	r3, [pc, #8]	; (d623c <free+0xc>)
   d6234:	681b      	ldr	r3, [r3, #0]
   d6236:	685b      	ldr	r3, [r3, #4]
   d6238:	9301      	str	r3, [sp, #4]
   d623a:	bd08      	pop	{r3, pc}
   d623c:	0003021c 	.word	0x0003021c

000d6240 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d6240:	b508      	push	{r3, lr}
   d6242:	4b02      	ldr	r3, [pc, #8]	; (d624c <realloc+0xc>)
   d6244:	681b      	ldr	r3, [r3, #0]
   d6246:	689b      	ldr	r3, [r3, #8]
   d6248:	9301      	str	r3, [sp, #4]
   d624a:	bd08      	pop	{r3, pc}
   d624c:	0003021c 	.word	0x0003021c

000d6250 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d6250:	b508      	push	{r3, lr}
   d6252:	4b02      	ldr	r3, [pc, #8]	; (d625c <sprintf+0xc>)
   d6254:	681b      	ldr	r3, [r3, #0]
   d6256:	68db      	ldr	r3, [r3, #12]
   d6258:	9301      	str	r3, [sp, #4]
   d625a:	bd08      	pop	{r3, pc}
   d625c:	0003021c 	.word	0x0003021c

000d6260 <siprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d6260:	b508      	push	{r3, lr}
   d6262:	4b02      	ldr	r3, [pc, #8]	; (d626c <siprintf+0xc>)
   d6264:	681b      	ldr	r3, [r3, #0]
   d6266:	691b      	ldr	r3, [r3, #16]
   d6268:	9301      	str	r3, [sp, #4]
   d626a:	bd08      	pop	{r3, pc}
   d626c:	0003021c 	.word	0x0003021c

000d6270 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d6270:	b508      	push	{r3, lr}
   d6272:	4b02      	ldr	r3, [pc, #8]	; (d627c <siscanf+0xc>)
   d6274:	681b      	ldr	r3, [r3, #0]
   d6276:	699b      	ldr	r3, [r3, #24]
   d6278:	9301      	str	r3, [sp, #4]
   d627a:	bd08      	pop	{r3, pc}
   d627c:	0003021c 	.word	0x0003021c

000d6280 <vsnprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d6280:	b508      	push	{r3, lr}
   d6282:	4b02      	ldr	r3, [pc, #8]	; (d628c <vsnprintf+0xc>)
   d6284:	681b      	ldr	r3, [r3, #0]
   d6286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6288:	9301      	str	r3, [sp, #4]
   d628a:	bd08      	pop	{r3, pc}
   d628c:	0003021c 	.word	0x0003021c

000d6290 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d6290:	b508      	push	{r3, lr}
   d6292:	4b02      	ldr	r3, [pc, #8]	; (d629c <abort+0xc>)
   d6294:	681b      	ldr	r3, [r3, #0]
   d6296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6298:	9301      	str	r3, [sp, #4]
   d629a:	bd08      	pop	{r3, pc}
   d629c:	0003021c 	.word	0x0003021c

000d62a0 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d62a0:	b508      	push	{r3, lr}
   d62a2:	4b02      	ldr	r3, [pc, #8]	; (d62ac <_malloc_r+0xc>)
   d62a4:	681b      	ldr	r3, [r3, #0]
   d62a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d62a8:	9301      	str	r3, [sp, #4]
   d62aa:	bd08      	pop	{r3, pc}
   d62ac:	0003021c 	.word	0x0003021c

000d62b0 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d62b0:	b508      	push	{r3, lr}
   d62b2:	4b02      	ldr	r3, [pc, #8]	; (d62bc <__errno+0xc>)
   d62b4:	681b      	ldr	r3, [r3, #0]
   d62b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d62b8:	9301      	str	r3, [sp, #4]
   d62ba:	bd08      	pop	{r3, pc}
   d62bc:	0003021c 	.word	0x0003021c

000d62c0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d62c0:	2200      	movs	r2, #0
   d62c2:	4611      	mov	r1, r2
   d62c4:	6840      	ldr	r0, [r0, #4]
   d62c6:	f7ff bf5b 	b.w	d6180 <network_listening>

000d62ca <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d62ca:	2200      	movs	r2, #0
   d62cc:	4611      	mov	r1, r2
   d62ce:	6840      	ldr	r0, [r0, #4]
   d62d0:	f7ff bf66 	b.w	d61a0 <network_get_listen_timeout>

000d62d4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d62d4:	2200      	movs	r2, #0
   d62d6:	6840      	ldr	r0, [r0, #4]
   d62d8:	f7ff bf5a 	b.w	d6190 <network_set_listen_timeout>

000d62dc <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d62dc:	2200      	movs	r2, #0
   d62de:	f081 0101 	eor.w	r1, r1, #1
   d62e2:	6840      	ldr	r0, [r0, #4]
   d62e4:	f7ff bf44 	b.w	d6170 <network_listen>

000d62e8 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d62e8:	2300      	movs	r3, #0
   d62ea:	461a      	mov	r2, r3
   d62ec:	4619      	mov	r1, r3
   d62ee:	6840      	ldr	r0, [r0, #4]
   d62f0:	f7ff bf36 	b.w	d6160 <network_off>

000d62f4 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d62f4:	2300      	movs	r3, #0
   d62f6:	461a      	mov	r2, r3
   d62f8:	4619      	mov	r1, r3
   d62fa:	6840      	ldr	r0, [r0, #4]
   d62fc:	f7ff bf28 	b.w	d6150 <network_on>

000d6300 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6300:	2200      	movs	r2, #0
   d6302:	4611      	mov	r1, r2
   d6304:	6840      	ldr	r0, [r0, #4]
   d6306:	f7ff bf1b 	b.w	d6140 <network_ready>

000d630a <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d630a:	2200      	movs	r2, #0
   d630c:	4611      	mov	r1, r2
   d630e:	6840      	ldr	r0, [r0, #4]
   d6310:	f7ff bf06 	b.w	d6120 <network_connecting>

000d6314 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6314:	2200      	movs	r2, #0
   d6316:	2102      	movs	r1, #2
   d6318:	6840      	ldr	r0, [r0, #4]
   d631a:	f7ff bf09 	b.w	d6130 <network_disconnect>

000d631e <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d631e:	2300      	movs	r3, #0
   d6320:	461a      	mov	r2, r3
   d6322:	6840      	ldr	r0, [r0, #4]
   d6324:	f7ff bef4 	b.w	d6110 <network_connect>

000d6328 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d6328:	4b02      	ldr	r3, [pc, #8]	; (d6334 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d632a:	2203      	movs	r2, #3
   d632c:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d632e:	4a02      	ldr	r2, [pc, #8]	; (d6338 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d6330:	601a      	str	r2, [r3, #0]
   d6332:	4770      	bx	lr
   d6334:	2003e39c 	.word	0x2003e39c
   d6338:	000dbae8 	.word	0x000dbae8

000d633c <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d633c:	4770      	bx	lr

000d633e <_ZN8SPIClassD0Ev>:
   d633e:	b510      	push	{r4, lr}
   d6340:	210c      	movs	r1, #12
   d6342:	4604      	mov	r4, r0
   d6344:	f001 ffda 	bl	d82fc <_ZdlPvj>
   d6348:	4620      	mov	r0, r4
   d634a:	bd10      	pop	{r4, pc}

000d634c <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d634c:	2100      	movs	r1, #0
   d634e:	f7ff bd0b 	b.w	d5d68 <HAL_SPI_Acquire>

000d6352 <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d6352:	2100      	movs	r1, #0
   d6354:	f7ff bd10 	b.w	d5d78 <HAL_SPI_Release>

000d6358 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d6358:	b510      	push	{r4, lr}
   d635a:	4b05      	ldr	r3, [pc, #20]	; (d6370 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x18>)
   d635c:	6003      	str	r3, [r0, #0]
   d635e:	4604      	mov	r4, r0
{
    _spi = spi;
   d6360:	7101      	strb	r1, [r0, #4]
    HAL_SPI_Init(_spi);
   d6362:	4608      	mov	r0, r1
   d6364:	f7ff fce0 	bl	d5d28 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d6368:	2300      	movs	r3, #0
   d636a:	60a3      	str	r3, [r4, #8]
}
   d636c:	4620      	mov	r0, r4
   d636e:	bd10      	pop	{r4, pc}
   d6370:	000dbb1c 	.word	0x000dbb1c

000d6374 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d6374:	b510      	push	{r4, lr}
   d6376:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d6378:	7900      	ldrb	r0, [r0, #4]
   d637a:	f7ff ffe7 	bl	d634c <_ZN8SPIClass4lockEv.isra.0>
   d637e:	b948      	cbnz	r0, d6394 <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d6380:	7920      	ldrb	r0, [r4, #4]
   d6382:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d6386:	f7ff fcbf 	bl	d5d08 <HAL_SPI_Begin>
        unlock();
   d638a:	7920      	ldrb	r0, [r4, #4]
    }
}
   d638c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d6390:	f7ff bfdf 	b.w	d6352 <_ZN8SPIClass6unlockEv.isra.1>
   d6394:	bd10      	pop	{r4, pc}

000d6396 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d6396:	7900      	ldrb	r0, [r0, #4]
   d6398:	f7ff bfdb 	b.w	d6352 <_ZN8SPIClass6unlockEv.isra.1>

000d639c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d639c:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d639e:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d63a0:	6018      	str	r0, [r3, #0]
   d63a2:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d63a4:	6818      	ldr	r0, [r3, #0]
   d63a6:	4288      	cmp	r0, r1
   d63a8:	b2e5      	uxtb	r5, r4
   d63aa:	d906      	bls.n	d63ba <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d63ac:	3401      	adds	r4, #1
   d63ae:	2c08      	cmp	r4, #8
   d63b0:	d002      	beq.n	d63b8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d63b2:	0840      	lsrs	r0, r0, #1
   d63b4:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d63b6:	e7f5      	b.n	d63a4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d63b8:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d63ba:	4b02      	ldr	r3, [pc, #8]	; (d63c4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d63bc:	5d5b      	ldrb	r3, [r3, r5]
   d63be:	7013      	strb	r3, [r2, #0]
   d63c0:	bd30      	pop	{r4, r5, pc}
   d63c2:	bf00      	nop
   d63c4:	000dbb24 	.word	0x000dbb24

000d63c8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d63c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d63cc:	4607      	mov	r7, r0
   d63ce:	b08f      	sub	sp, #60	; 0x3c
    // Lock peripheral
    CHECK(lock());
   d63d0:	7900      	ldrb	r0, [r0, #4]
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d63d2:	460e      	mov	r6, r1
    // Lock peripheral
    CHECK(lock());
   d63d4:	f7ff ffba 	bl	d634c <_ZN8SPIClass4lockEv.isra.0>
   d63d8:	2800      	cmp	r0, #0
   d63da:	db62      	blt.n	d64a2 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
   d63dc:	793c      	ldrb	r4, [r7, #4]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d63de:	2214      	movs	r2, #20
   d63e0:	2100      	movs	r1, #0
   d63e2:	a809      	add	r0, sp, #36	; 0x24
   d63e4:	f004 fbae 	bl	dab44 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d63e8:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d63ea:	4620      	mov	r0, r4
   d63ec:	2200      	movs	r2, #0
   d63ee:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d63f0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
   d63f4:	f7ff fca8 	bl	d5d48 <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
   d63f8:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d63fc:	b154      	cbz	r4, d6414 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4c>
   d63fe:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d6402:	b935      	cbnz	r5, d6412 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4a>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d6404:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d6408:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d640c:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d6410:	e003      	b.n	d641a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x52>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d6412:	2400      	movs	r4, #0
   d6414:	46a1      	mov	r9, r4
   d6416:	46a0      	mov	r8, r4
   d6418:	2501      	movs	r5, #1
   d641a:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d641c:	b105      	cbz	r5, d6420 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x58>
   d641e:	b9bb      	cbnz	r3, d6450 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
      return true;

    if (default_ == other.default_ &&
   d6420:	429d      	cmp	r5, r3
   d6422:	d10b      	bne.n	d643c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
   d6424:	68b2      	ldr	r2, [r6, #8]
   d6426:	4542      	cmp	r2, r8
   d6428:	d108      	bne.n	d643c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d642a:	f88d 9020 	strb.w	r9, [sp, #32]
   d642e:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d6432:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d6436:	89b2      	ldrh	r2, [r6, #12]
   d6438:	4291      	cmp	r1, r2
   d643a:	d009      	beq.n	d6450 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
   d643c:	b153      	cbz	r3, d6454 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d643e:	2400      	movs	r4, #0
   d6440:	7938      	ldrb	r0, [r7, #4]
   d6442:	9401      	str	r4, [sp, #4]
   d6444:	9400      	str	r4, [sp, #0]
   d6446:	4623      	mov	r3, r4
   d6448:	4622      	mov	r2, r4
   d644a:	2101      	movs	r1, #1

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d644c:	f7ff fc84 	bl	d5d58 <HAL_SPI_Set_Settings>
            }
        }
    }

    return 0;
   d6450:	2000      	movs	r0, #0
   d6452:	e026      	b.n	d64a2 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
   d6454:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
   d6458:	68b1      	ldr	r1, [r6, #8]
   d645a:	980a      	ldr	r0, [sp, #40]	; 0x28
   d645c:	ab04      	add	r3, sp, #16
   d645e:	f10d 020f 	add.w	r2, sp, #15
   d6462:	f7ff ff9b 	bl	d639c <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d6466:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d6468:	b105      	cbz	r5, d646c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>
   d646a:	b9b1      	cbnz	r1, d649a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d646c:	42a9      	cmp	r1, r5
   d646e:	d008      	beq.n	d6482 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xba>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d6470:	2400      	movs	r4, #0
   d6472:	7938      	ldrb	r0, [r7, #4]
   d6474:	9401      	str	r4, [sp, #4]
   d6476:	7b74      	ldrb	r4, [r6, #13]
   d6478:	7b33      	ldrb	r3, [r6, #12]
   d647a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d647e:	9400      	str	r4, [sp, #0]
   d6480:	e7e4      	b.n	d644c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
   d6482:	68b3      	ldr	r3, [r6, #8]
   d6484:	4543      	cmp	r3, r8
   d6486:	d3f3      	bcc.n	d6470 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d6488:	f88d 9020 	strb.w	r9, [sp, #32]
   d648c:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d6490:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d6494:	89b3      	ldrh	r3, [r6, #12]
   d6496:	429a      	cmp	r2, r3
   d6498:	d1ea      	bne.n	d6470 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d649a:	9b04      	ldr	r3, [sp, #16]
   d649c:	4543      	cmp	r3, r8
   d649e:	d1e7      	bne.n	d6470 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
   d64a0:	e7d6      	b.n	d6450 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
            }
        }
    }

    return 0;
}
   d64a2:	b00f      	add	sp, #60	; 0x3c
   d64a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d64a8 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d64a8:	b538      	push	{r3, r4, r5, lr}
   d64aa:	4604      	mov	r4, r0
    uint16_t result = 0;
    if (!lock())
   d64ac:	7900      	ldrb	r0, [r0, #4]

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d64ae:	460d      	mov	r5, r1
    uint16_t result = 0;
    if (!lock())
   d64b0:	f7ff ff4c 	bl	d634c <_ZN8SPIClass4lockEv.isra.0>
   d64b4:	b940      	cbnz	r0, d64c8 <_ZN8SPIClass8transferEh+0x20>
    {
        result = HAL_SPI_Send_Receive_Data(_spi, _data);
   d64b6:	4629      	mov	r1, r5
   d64b8:	7920      	ldrb	r0, [r4, #4]
   d64ba:	f7ff fc2d 	bl	d5d18 <HAL_SPI_Send_Receive_Data>
   d64be:	4605      	mov	r5, r0
        unlock();
   d64c0:	7920      	ldrb	r0, [r4, #4]
   d64c2:	f7ff ff46 	bl	d6352 <_ZN8SPIClass6unlockEv.isra.1>
   d64c6:	e000      	b.n	d64ca <_ZN8SPIClass8transferEh+0x22>
    return clock;
}

byte SPIClass::transfer(byte _data)
{
    uint16_t result = 0;
   d64c8:	2500      	movs	r5, #0
    {
        result = HAL_SPI_Send_Receive_Data(_spi, _data);
        unlock();
    }
    return static_cast<byte>(result);
}
   d64ca:	b2e8      	uxtb	r0, r5
   d64cc:	bd38      	pop	{r3, r4, r5, pc}

000d64ce <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d64ce:	7900      	ldrb	r0, [r0, #4]
   d64d0:	f7ff bc32 	b.w	d5d38 <HAL_SPI_Is_Enabled>

000d64d4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d64d4:	b510      	push	{r4, lr}
   d64d6:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d64d8:	6800      	ldr	r0, [r0, #0]
   d64da:	b118      	cbz	r0, d64e4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d64dc:	f7ff fea8 	bl	d6230 <free>
            wakeupSource_ = nullptr;
   d64e0:	2300      	movs	r3, #0
   d64e2:	6023      	str	r3, [r4, #0]
   d64e4:	bd10      	pop	{r4, pc}

000d64e6 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d64e6:	b510      	push	{r4, lr}
   d64e8:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d64ea:	f7ff fff3 	bl	d64d4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d64ee:	4620      	mov	r0, r4
   d64f0:	bd10      	pop	{r4, pc}
	...

000d64f4 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d64f4:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d64f6:	4c09      	ldr	r4, [pc, #36]	; (d651c <_GLOBAL__sub_I_System+0x28>)
   d64f8:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d64fa:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d64fe:	6020      	str	r0, [r4, #0]
   d6500:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d6502:	71a0      	strb	r0, [r4, #6]
   d6504:	8120      	strh	r0, [r4, #8]
   d6506:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d6508:	f7ff fdc6 	bl	d6098 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d650c:	4620      	mov	r0, r4
   d650e:	4a04      	ldr	r2, [pc, #16]	; (d6520 <_GLOBAL__sub_I_System+0x2c>)
   d6510:	4904      	ldr	r1, [pc, #16]	; (d6524 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d6512:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d6516:	f001 bee3 	b.w	d82e0 <__aeabi_atexit>
   d651a:	bf00      	nop
   d651c:	2003e3a4 	.word	0x2003e3a4
   d6520:	2003e170 	.word	0x2003e170
   d6524:	000d64e7 	.word	0x000d64e7

000d6528 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d6528:	b510      	push	{r4, lr}
   d652a:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d652c:	f004 fb67 	bl	dabfe <strlen>
   d6530:	3801      	subs	r0, #1
   d6532:	1823      	adds	r3, r4, r0
   d6534:	4620      	mov	r0, r4
	while(i<j){
   d6536:	4298      	cmp	r0, r3
   d6538:	d206      	bcs.n	d6548 <_Z11str_reversePc+0x20>
		c = *i;
   d653a:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d653c:	7819      	ldrb	r1, [r3, #0]
   d653e:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d6542:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   d6546:	e7f6      	b.n	d6536 <_Z11str_reversePc+0xe>
   d6548:	bd10      	pop	{r4, pc}

000d654a <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d654a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   d654e:	1e93      	subs	r3, r2, #2
            base = 10;                    /* can only use 0-9, A-Z        */
   d6550:	2b23      	cmp	r3, #35	; 0x23



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d6552:	4615      	mov	r5, r2
   d6554:	b08c      	sub	sp, #48	; 0x30
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
   d6556:	bf34      	ite	cc
   d6558:	4615      	movcc	r5, r2
   d655a:	250a      	movcs	r5, #10
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   d655c:	2300      	movs	r3, #0

      if (10 == base && N < 0L)
   d655e:	2d0a      	cmp	r5, #10



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d6560:	460c      	mov	r4, r1
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   d6562:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c

      if (10 == base && N < 0L)
   d6566:	d107      	bne.n	d6578 <ltoa+0x2e>
   d6568:	4298      	cmp	r0, r3
   d656a:	da05      	bge.n	d6578 <ltoa+0x2e>
      {
            *head++ = '-';
   d656c:	232d      	movs	r3, #45	; 0x2d
   d656e:	f101 0801 	add.w	r8, r1, #1
   d6572:	700b      	strb	r3, [r1, #0]
            uarg    = -N;
   d6574:	4240      	negs	r0, r0
   d6576:	e001      	b.n	d657c <ltoa+0x32>
      }
      else  uarg = N;

      if (uarg)
   d6578:	b1b0      	cbz	r0, d65a8 <ltoa+0x5e>
   d657a:	46a0      	mov	r8, r4
   d657c:	f10d 062b 	add.w	r6, sp, #43	; 0x2b
   d6580:	2701      	movs	r7, #1
      {
            for (i = 1; uarg; ++i)
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   d6582:	462a      	mov	r2, r5
   d6584:	4601      	mov	r1, r0
   d6586:	a801      	add	r0, sp, #4
   d6588:	f004 faa2 	bl	daad0 <ldiv>
   d658c:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   d658e:	9801      	ldr	r0, [sp, #4]
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
   d6590:	2b09      	cmp	r3, #9
   d6592:	bfcc      	ite	gt
   d6594:	2237      	movgt	r2, #55	; 0x37
   d6596:	2230      	movle	r2, #48	; 0x30
   d6598:	fa52 f383 	uxtab	r3, r2, r3
   d659c:	f806 3901 	strb.w	r3, [r6], #-1
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   d65a0:	3701      	adds	r7, #1
   d65a2:	2800      	cmp	r0, #0
   d65a4:	d1ed      	bne.n	d6582 <ltoa+0x38>
   d65a6:	e006      	b.n	d65b6 <ltoa+0x6c>
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
            }
      }
      else  *tail-- = '0';
   d65a8:	2330      	movs	r3, #48	; 0x30
   d65aa:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   d65ae:	46a0      	mov	r8, r4
   d65b0:	f10d 062a 	add.w	r6, sp, #42	; 0x2a


//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
      int i = 2;
   d65b4:	2702      	movs	r7, #2
                  uarg    = r.quot;
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   d65b6:	463a      	mov	r2, r7
   d65b8:	1c71      	adds	r1, r6, #1
   d65ba:	4640      	mov	r0, r8
   d65bc:	f004 fa9c 	bl	daaf8 <memcpy>
      return str;
}
   d65c0:	4620      	mov	r0, r4
   d65c2:	b00c      	add	sp, #48	; 0x30
   d65c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d65c8 <ultoa>:

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d65c8:	b570      	push	{r4, r5, r6, lr}
   d65ca:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d65cc:	1e91      	subs	r1, r2, #2
   d65ce:	2922      	cmp	r1, #34	; 0x22
   d65d0:	d820      	bhi.n	d6614 <ultoa+0x4c>
   d65d2:	4625      	mov	r5, r4
   d65d4:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d65d6:	b910      	cbnz	r0, d65de <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d65d8:	4423      	add	r3, r4
            *ptr++ = '0';
   d65da:	2230      	movs	r2, #48	; 0x30
   d65dc:	e00e      	b.n	d65fc <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d65de:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   d65e2:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   d65e6:	b2c1      	uxtb	r1, r0
   d65e8:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   d65ec:	2809      	cmp	r0, #9
                *ptr += '0';
   d65ee:	bf94      	ite	ls
   d65f0:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d65f2:	3157      	addhi	r1, #87	; 0x57
   d65f4:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   d65f8:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d65fa:	e7eb      	b.n	d65d4 <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d65fc:	4299      	cmp	r1, r3
   d65fe:	d202      	bcs.n	d6606 <ultoa+0x3e>
            *ptr++ = '0';
   d6600:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d6604:	e7fa      	b.n	d65fc <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   d6606:	2300      	movs	r3, #0
	str_reverse(buffer);
   d6608:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   d660a:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   d660c:	f7ff ff8c 	bl	d6528 <_Z11str_reversePc>
	return buffer;
   d6610:	4620      	mov	r0, r4
   d6612:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   d6614:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   d6616:	bd70      	pop	{r4, r5, r6, pc}

000d6618 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d6618:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d661a:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d661c:	460c      	mov	r4, r1
   d661e:	4615      	mov	r5, r2
	if(a<0){
   d6620:	da0b      	bge.n	d663a <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d6622:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d6626:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d662a:	bf14      	ite	ne
   d662c:	4258      	negne	r0, r3
   d662e:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d6630:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d6632:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
   d6634:	462a      	mov	r2, r5
   d6636:	4419      	add	r1, r3
   d6638:	e000      	b.n	d663c <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
   d663a:	2301      	movs	r3, #1
   d663c:	f7ff ffc4 	bl	d65c8 <ultoa>
	}
	return buffer;
}
   d6640:	4620      	mov	r0, r4
   d6642:	bd38      	pop	{r3, r4, r5, pc}

000d6644 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   d6644:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6648:	ec59 8b10 	vmov	r8, r9, d0
   d664c:	4607      	mov	r7, r0
   d664e:	460e      	mov	r6, r1
    bool negative = val<0;
    if (negative) {
   d6650:	2200      	movs	r2, #0
   d6652:	2300      	movs	r3, #0
   d6654:	ee10 0a10 	vmov	r0, s0
   d6658:	4649      	mov	r1, r9
   d665a:	f003 fd0f 	bl	da07c <__aeabi_dcmplt>
   d665e:	b128      	cbz	r0, d666c <_Z4dtoadhPc+0x28>
        val = -val;
   d6660:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   d6664:	4699      	mov	r9, r3
        *sout++ = '-';
   d6666:	232d      	movs	r3, #45	; 0x2d
   d6668:	7033      	strb	r3, [r6, #0]
   d666a:	3601      	adds	r6, #1
   d666c:	2300      	movs	r3, #0
    }
    long scale = 1;
   d666e:	2401      	movs	r4, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   d6670:	220a      	movs	r2, #10
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
   d6672:	b2d9      	uxtb	r1, r3
   d6674:	428f      	cmp	r7, r1
   d6676:	d902      	bls.n	d667e <_Z4dtoadhPc+0x3a>
        scale *= 10;
   d6678:	4354      	muls	r4, r2
   d667a:	3301      	adds	r3, #1
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
   d667c:	e7f9      	b.n	d6672 <_Z4dtoadhPc+0x2e>
        scale *= 10;
    val *= scale;   // capture all the significant digits
   d667e:	4620      	mov	r0, r4
   d6680:	f003 fa24 	bl	d9acc <__aeabi_i2d>
   d6684:	4642      	mov	r2, r8
   d6686:	464b      	mov	r3, r9
   d6688:	f003 fa86 	bl	d9b98 <__aeabi_dmul>
   d668c:	4682      	mov	sl, r0
   d668e:	468b      	mov	fp, r1
    uint64_t fixed = uint64_t(val);
   d6690:	f003 ff40 	bl	da514 <__aeabi_d2ulz>
   d6694:	4680      	mov	r8, r0
   d6696:	4689      	mov	r9, r1
    if ((val-fixed)>=0.5)    // round last digit
   d6698:	f003 fa48 	bl	d9b2c <__aeabi_ul2d>
   d669c:	4602      	mov	r2, r0
   d669e:	460b      	mov	r3, r1
   d66a0:	4650      	mov	r0, sl
   d66a2:	4659      	mov	r1, fp
   d66a4:	f003 f8c4 	bl	d9830 <__aeabi_dsub>
   d66a8:	2200      	movs	r2, #0
   d66aa:	4b17      	ldr	r3, [pc, #92]	; (d6708 <_Z4dtoadhPc+0xc4>)
   d66ac:	f003 fcfa 	bl	da0a4 <__aeabi_dcmpge>
   d66b0:	b118      	cbz	r0, d66ba <_Z4dtoadhPc+0x76>
        fixed++;
   d66b2:	f118 0801 	adds.w	r8, r8, #1
   d66b6:	f149 0900 	adc.w	r9, r9, #0

    unsigned long first = (unsigned long)(fixed / scale);
   d66ba:	17e5      	asrs	r5, r4, #31
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   d66bc:	4622      	mov	r2, r4
   d66be:	462b      	mov	r3, r5
   d66c0:	4640      	mov	r0, r8
   d66c2:	4649      	mov	r1, r9
   d66c4:	f003 ff0e 	bl	da4e4 <__aeabi_uldivmod>
   d66c8:	2301      	movs	r3, #1
   d66ca:	220a      	movs	r2, #10
   d66cc:	4631      	mov	r1, r6
   d66ce:	f7ff ff7b 	bl	d65c8 <ultoa>
    if (prec) {
   d66d2:	b1af      	cbz	r7, d6700 <_Z4dtoadhPc+0xbc>
        sout += strlen(sout);
   d66d4:	4630      	mov	r0, r6
   d66d6:	f004 fa92 	bl	dabfe <strlen>
        *sout++ = '.';
   d66da:	232e      	movs	r3, #46	; 0x2e
   d66dc:	5433      	strb	r3, [r6, r0]
        ultoa(second, sout, 10, prec);
   d66de:	3001      	adds	r0, #1
   d66e0:	4406      	add	r6, r0
   d66e2:	4622      	mov	r2, r4
   d66e4:	462b      	mov	r3, r5
   d66e6:	4640      	mov	r0, r8
   d66e8:	4649      	mov	r1, r9
   d66ea:	f003 fefb 	bl	da4e4 <__aeabi_uldivmod>
   d66ee:	463b      	mov	r3, r7
   d66f0:	4610      	mov	r0, r2
   d66f2:	4631      	mov	r1, r6
   d66f4:	220a      	movs	r2, #10
    }
}
   d66f6:	b001      	add	sp, #4
   d66f8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    ultoa(first, sout, 10, 1);
    if (prec) {
        sout += strlen(sout);
        *sout++ = '.';
        ultoa(second, sout, 10, prec);
   d66fc:	f7ff bf64 	b.w	d65c8 <ultoa>
    }
}
   d6700:	b001      	add	sp, #4
   d6702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6706:	bf00      	nop
   d6708:	3fe00000 	.word	0x3fe00000

000d670c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d670c:	b510      	push	{r4, lr}
   d670e:	4604      	mov	r4, r0
{
	free(buffer);
   d6710:	6800      	ldr	r0, [r0, #0]
   d6712:	f7ff fd8d 	bl	d6230 <free>
}
   d6716:	4620      	mov	r0, r4
   d6718:	bd10      	pop	{r4, pc}

000d671a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d671a:	b510      	push	{r4, lr}
   d671c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d671e:	6800      	ldr	r0, [r0, #0]
   d6720:	b108      	cbz	r0, d6726 <_ZN6String10invalidateEv+0xc>
   d6722:	f7ff fd85 	bl	d6230 <free>
	buffer = NULL;
   d6726:	2300      	movs	r3, #0
   d6728:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d672a:	60a3      	str	r3, [r4, #8]
   d672c:	6063      	str	r3, [r4, #4]
   d672e:	bd10      	pop	{r4, pc}

000d6730 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d6730:	b538      	push	{r3, r4, r5, lr}
   d6732:	4604      	mov	r4, r0
   d6734:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d6736:	6800      	ldr	r0, [r0, #0]
   d6738:	3101      	adds	r1, #1
   d673a:	f7ff fd81 	bl	d6240 <realloc>
	if (newbuffer) {
   d673e:	b110      	cbz	r0, d6746 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d6740:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d6744:	2001      	movs	r0, #1
	}
	return 0;
}
   d6746:	bd38      	pop	{r3, r4, r5, pc}

000d6748 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d6748:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d674a:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d674c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d674e:	b113      	cbz	r3, d6756 <_ZN6String7reserveEj+0xe>
   d6750:	6843      	ldr	r3, [r0, #4]
   d6752:	428b      	cmp	r3, r1
   d6754:	d207      	bcs.n	d6766 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d6756:	4620      	mov	r0, r4
   d6758:	f7ff ffea 	bl	d6730 <_ZN6String12changeBufferEj>
   d675c:	b120      	cbz	r0, d6768 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d675e:	68a3      	ldr	r3, [r4, #8]
   d6760:	b90b      	cbnz	r3, d6766 <_ZN6String7reserveEj+0x1e>
   d6762:	6822      	ldr	r2, [r4, #0]
   d6764:	7013      	strb	r3, [r2, #0]
   d6766:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d6768:	bd10      	pop	{r4, pc}

000d676a <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d676a:	b570      	push	{r4, r5, r6, lr}
   d676c:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d676e:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6770:	4604      	mov	r4, r0
   d6772:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d6774:	f7ff ffe8 	bl	d6748 <_ZN6String7reserveEj>
   d6778:	b918      	cbnz	r0, d6782 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d677a:	4620      	mov	r0, r4
   d677c:	f7ff ffcd 	bl	d671a <_ZN6String10invalidateEv>
		return *this;
   d6780:	e009      	b.n	d6796 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d6782:	462a      	mov	r2, r5
   d6784:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d6786:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d6788:	6820      	ldr	r0, [r4, #0]
   d678a:	f004 f9b5 	bl	daaf8 <memcpy>
	buffer[len] = 0;
   d678e:	6822      	ldr	r2, [r4, #0]
   d6790:	68a3      	ldr	r3, [r4, #8]
   d6792:	2100      	movs	r1, #0
   d6794:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d6796:	4620      	mov	r0, r4
   d6798:	bd70      	pop	{r4, r5, r6, pc}

000d679a <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d679a:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d679c:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d679e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d67a0:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d67a2:	6043      	str	r3, [r0, #4]
	len = 0;
   d67a4:	6083      	str	r3, [r0, #8]
	flags = 0;
   d67a6:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d67a8:	460d      	mov	r5, r1
   d67aa:	b139      	cbz	r1, d67bc <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d67ac:	4608      	mov	r0, r1
   d67ae:	f004 fa26 	bl	dabfe <strlen>
   d67b2:	4629      	mov	r1, r5
   d67b4:	4602      	mov	r2, r0
   d67b6:	4620      	mov	r0, r4
   d67b8:	f7ff ffd7 	bl	d676a <_ZN6String4copyEPKcj>
}
   d67bc:	4620      	mov	r0, r4
   d67be:	bd38      	pop	{r3, r4, r5, pc}

000d67c0 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d67c0:	b538      	push	{r3, r4, r5, lr}
   d67c2:	4605      	mov	r5, r0
	if (buffer) {
   d67c4:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d67c6:	460c      	mov	r4, r1
	if (buffer) {
   d67c8:	b160      	cbz	r0, d67e4 <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
   d67ca:	686a      	ldr	r2, [r5, #4]
   d67cc:	688b      	ldr	r3, [r1, #8]
   d67ce:	429a      	cmp	r2, r3
   d67d0:	d306      	bcc.n	d67e0 <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
   d67d2:	6809      	ldr	r1, [r1, #0]
   d67d4:	f004 f9f0 	bl	dabb8 <strcpy>
			len = rhs.len;
   d67d8:	68a3      	ldr	r3, [r4, #8]
   d67da:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d67dc:	2300      	movs	r3, #0
   d67de:	e00a      	b.n	d67f6 <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
   d67e0:	f7ff fd26 	bl	d6230 <free>
		}
	}
	buffer = rhs.buffer;
   d67e4:	6823      	ldr	r3, [r4, #0]
   d67e6:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d67e8:	6863      	ldr	r3, [r4, #4]
   d67ea:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d67ec:	68a3      	ldr	r3, [r4, #8]
   d67ee:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d67f0:	2300      	movs	r3, #0
   d67f2:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
   d67f4:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
   d67f6:	60a3      	str	r3, [r4, #8]
   d67f8:	bd38      	pop	{r3, r4, r5, pc}

000d67fa <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d67fa:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
   d67fc:	b510      	push	{r4, lr}
   d67fe:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d6800:	d001      	beq.n	d6806 <_ZN6StringaSEOS_+0xc>
   d6802:	f7ff ffdd 	bl	d67c0 <_ZN6String4moveERS_>
	return *this;
}
   d6806:	4620      	mov	r0, r4
   d6808:	bd10      	pop	{r4, pc}

000d680a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d680a:	b538      	push	{r3, r4, r5, lr}
   d680c:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d680e:	460c      	mov	r4, r1
   d6810:	b141      	cbz	r1, d6824 <_ZN6StringaSEPKc+0x1a>
   d6812:	4608      	mov	r0, r1
   d6814:	f004 f9f3 	bl	dabfe <strlen>
   d6818:	4621      	mov	r1, r4
   d681a:	4602      	mov	r2, r0
   d681c:	4628      	mov	r0, r5
   d681e:	f7ff ffa4 	bl	d676a <_ZN6String4copyEPKcj>
   d6822:	e001      	b.n	d6828 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d6824:	f7ff ff79 	bl	d671a <_ZN6String10invalidateEv>

	return *this;
}
   d6828:	4628      	mov	r0, r5
   d682a:	bd38      	pop	{r3, r4, r5, pc}

000d682c <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d682c:	b510      	push	{r4, lr}
   d682e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6830:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d6832:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6834:	6023      	str	r3, [r4, #0]
	capacity = 0;
   d6836:	6063      	str	r3, [r4, #4]
	len = 0;
   d6838:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d683a:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d683c:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
   d683e:	a901      	add	r1, sp, #4
   d6840:	f7ff feea 	bl	d6618 <itoa>
	*this = buf;
   d6844:	a901      	add	r1, sp, #4
   d6846:	4620      	mov	r0, r4
   d6848:	f7ff ffdf 	bl	d680a <_ZN6StringaSEPKc>
}
   d684c:	4620      	mov	r0, r4
   d684e:	b00a      	add	sp, #40	; 0x28
   d6850:	bd10      	pop	{r4, pc}

000d6852 <_ZN6StringC1Edi>:
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}

String::String(double value, int decimalPlaces)
   d6852:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6854:	2300      	movs	r3, #0
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}

String::String(double value, int decimalPlaces)
   d6856:	b08a      	sub	sp, #40	; 0x28
   d6858:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d685a:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d685c:	6043      	str	r3, [r0, #4]
	len = 0;
   d685e:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6860:	7303      	strb	r3, [r0, #12]

String::String(double value, int decimalPlaces)
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
   d6862:	b2c8      	uxtb	r0, r1
   d6864:	a901      	add	r1, sp, #4
   d6866:	f7ff feed 	bl	d6644 <_Z4dtoadhPc>
        *this = buf;
   d686a:	a901      	add	r1, sp, #4
   d686c:	4620      	mov	r0, r4
   d686e:	f7ff ffcc 	bl	d680a <_ZN6StringaSEPKc>
}
   d6872:	4620      	mov	r0, r4
   d6874:	b00a      	add	sp, #40	; 0x28
   d6876:	bd10      	pop	{r4, pc}

000d6878 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d6878:	b570      	push	{r4, r5, r6, lr}
   d687a:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d687c:	b19a      	cbz	r2, d68a6 <_ZNK6String8getBytesEPhjj+0x2e>
   d687e:	b191      	cbz	r1, d68a6 <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
   d6880:	6885      	ldr	r5, [r0, #8]
   d6882:	429d      	cmp	r5, r3
   d6884:	d802      	bhi.n	d688c <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d6886:	2300      	movs	r3, #0
   d6888:	700b      	strb	r3, [r1, #0]
		return;
   d688a:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
   d688c:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
   d688e:	1aed      	subs	r5, r5, r3
	strncpy((char *)buf, buffer + index, n);
   d6890:	6801      	ldr	r1, [r0, #0]
   d6892:	42ac      	cmp	r4, r5
   d6894:	bf28      	it	cs
   d6896:	462c      	movcs	r4, r5
   d6898:	4419      	add	r1, r3
   d689a:	4622      	mov	r2, r4
   d689c:	4630      	mov	r0, r6
   d689e:	f004 f9f0 	bl	dac82 <strncpy>
	buf[n] = 0;
   d68a2:	2300      	movs	r3, #0
   d68a4:	5533      	strb	r3, [r6, r4]
   d68a6:	bd70      	pop	{r4, r5, r6, pc}

000d68a8 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d68a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   d68aa:	429a      	cmp	r2, r3
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d68ac:	460f      	mov	r7, r1
   d68ae:	461d      	mov	r5, r3
	if (left > right) {
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d68b0:	490c      	ldr	r1, [pc, #48]	; (d68e4 <_ZNK6String9substringEjj+0x3c>)
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
   d68b2:	bf88      	it	hi
   d68b4:	4613      	movhi	r3, r2
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d68b6:	4614      	mov	r4, r2
   d68b8:	4606      	mov	r6, r0
	if (left > right) {
   d68ba:	bf84      	itt	hi
   d68bc:	462c      	movhi	r4, r5
   d68be:	461d      	movhi	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d68c0:	f7ff ff6b 	bl	d679a <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   d68c4:	68ba      	ldr	r2, [r7, #8]
   d68c6:	4294      	cmp	r4, r2
   d68c8:	d80a      	bhi.n	d68e0 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   d68ca:	6839      	ldr	r1, [r7, #0]
   d68cc:	4295      	cmp	r5, r2
   d68ce:	bf94      	ite	ls
   d68d0:	ebc4 0205 	rsbls	r2, r4, r5
   d68d4:	ebc4 0202 	rsbhi	r2, r4, r2
   d68d8:	4421      	add	r1, r4
   d68da:	4630      	mov	r0, r6
   d68dc:	f7ff ff45 	bl	d676a <_ZN6String4copyEPKcj>
	return out;
}
   d68e0:	4630      	mov	r0, r6
   d68e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d68e4:	000db8f9 	.word	0x000db8f9

000d68e8 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d68e8:	b510      	push	{r4, lr}
   d68ea:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d68ec:	6800      	ldr	r0, [r0, #0]
   d68ee:	b108      	cbz	r0, d68f4 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d68f0:	f7ff fa9a 	bl	d5e28 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d68f4:	4620      	mov	r0, r4
   d68f6:	bd10      	pop	{r4, pc}

000d68f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d68f8:	680b      	ldr	r3, [r1, #0]
   d68fa:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d68fc:	b113      	cbz	r3, d6904 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d68fe:	685a      	ldr	r2, [r3, #4]
   d6900:	3201      	adds	r2, #1
   d6902:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d6904:	4770      	bx	lr
	...

000d6908 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d6908:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d690a:	4c06      	ldr	r4, [pc, #24]	; (d6924 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d690c:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d690e:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6910:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d6912:	f7ff fa81 	bl	d5e18 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d6916:	4620      	mov	r0, r4
   d6918:	4a03      	ldr	r2, [pc, #12]	; (d6928 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d691a:	4904      	ldr	r1, [pc, #16]	; (d692c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d691c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d6920:	f001 bcde 	b.w	d82e0 <__aeabi_atexit>
   d6924:	2003e3b0 	.word	0x2003e3b0
   d6928:	2003e170 	.word	0x2003e170
   d692c:	000d68e9 	.word	0x000d68e9

000d6930 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6932:	4606      	mov	r6, r0
   d6934:	460d      	mov	r5, r1
   d6936:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d6938:	2400      	movs	r4, #0
  while (size--) {
   d693a:	42bd      	cmp	r5, r7
   d693c:	d00c      	beq.n	d6958 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d693e:	6833      	ldr	r3, [r6, #0]
   d6940:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6944:	689b      	ldr	r3, [r3, #8]
   d6946:	4630      	mov	r0, r6
   d6948:	4798      	blx	r3
     if (chunk>=0)
   d694a:	2800      	cmp	r0, #0
   d694c:	db01      	blt.n	d6952 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d694e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d6950:	e7f3      	b.n	d693a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d6952:	2c00      	cmp	r4, #0
   d6954:	bf08      	it	eq
   d6956:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d6958:	4620      	mov	r0, r4
   d695a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d695c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d695c:	b570      	push	{r4, r5, r6, lr}
   d695e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d6960:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d6962:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d6964:	b149      	cbz	r1, d697a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d6966:	f004 f94a 	bl	dabfe <strlen>
   d696a:	682b      	ldr	r3, [r5, #0]
   d696c:	4602      	mov	r2, r0
   d696e:	4621      	mov	r1, r4
   d6970:	4628      	mov	r0, r5
   d6972:	68db      	ldr	r3, [r3, #12]
    }
   d6974:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6978:	4718      	bx	r3
    }
   d697a:	bd70      	pop	{r4, r5, r6, pc}

000d697c <_ZN5Print5printEPKc>:
   d697c:	b508      	push	{r3, lr}
   d697e:	f7ff ffed 	bl	d695c <_ZN5Print5writeEPKc>
   d6982:	bd08      	pop	{r3, pc}

000d6984 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6984:	6803      	ldr	r3, [r0, #0]
   d6986:	689b      	ldr	r3, [r3, #8]
   d6988:	4718      	bx	r3

000d698a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d698a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d698c:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d698e:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6990:	f7ff fff8 	bl	d6984 <_ZN5Print5printEc>
  n += print('\n');
   d6994:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d6996:	4604      	mov	r4, r0
  n += print('\n');
   d6998:	4628      	mov	r0, r5
   d699a:	f7ff fff3 	bl	d6984 <_ZN5Print5printEc>
  return n;
}
   d699e:	4420      	add	r0, r4
   d69a0:	bd38      	pop	{r3, r4, r5, pc}

000d69a2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d69a2:	b538      	push	{r3, r4, r5, lr}
   d69a4:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d69a6:	f7ff ffd9 	bl	d695c <_ZN5Print5writeEPKc>
   d69aa:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d69ac:	4628      	mov	r0, r5
   d69ae:	f7ff ffec 	bl	d698a <_ZN5Print7printlnEv>
  return n;
}
   d69b2:	4420      	add	r0, r4
   d69b4:	bd38      	pop	{r3, r4, r5, pc}

000d69b6 <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
   d69b6:	f7ff bff4 	b.w	d69a2 <_ZN5Print7printlnEPKc>

000d69ba <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d69ba:	b530      	push	{r4, r5, lr}
   d69bc:	b08b      	sub	sp, #44	; 0x2c
   d69be:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d69c0:	2100      	movs	r1, #0
   d69c2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d69c6:	2a01      	cmp	r2, #1
   d69c8:	bf98      	it	ls
   d69ca:	220a      	movls	r2, #10
   d69cc:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d69d0:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d69d4:	fb05 3312 	mls	r3, r5, r2, r3
   d69d8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d69dc:	2b09      	cmp	r3, #9
   d69de:	bf94      	ite	ls
   d69e0:	3330      	addls	r3, #48	; 0x30
   d69e2:	3337      	addhi	r3, #55	; 0x37
   d69e4:	b2db      	uxtb	r3, r3
   d69e6:	4621      	mov	r1, r4
   d69e8:	f804 3901 	strb.w	r3, [r4], #-1
   d69ec:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d69ee:	2d00      	cmp	r5, #0
   d69f0:	d1ee      	bne.n	d69d0 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d69f2:	f7ff ffb3 	bl	d695c <_ZN5Print5writeEPKc>
}
   d69f6:	b00b      	add	sp, #44	; 0x2c
   d69f8:	bd30      	pop	{r4, r5, pc}
	...

000d69fc <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d69fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6a00:	ec57 6b10 	vmov	r6, r7, d0
   d6a04:	4682      	mov	sl, r0
   d6a06:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d6a08:	ee10 2a10 	vmov	r2, s0
   d6a0c:	463b      	mov	r3, r7
   d6a0e:	ee10 0a10 	vmov	r0, s0
   d6a12:	4639      	mov	r1, r7
   d6a14:	f003 fb5a 	bl	da0cc <__aeabi_dcmpun>
   d6a18:	b108      	cbz	r0, d6a1e <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6a1a:	494e      	ldr	r1, [pc, #312]	; (d6b54 <_ZN5Print10printFloatEdh+0x158>)
   d6a1c:	e012      	b.n	d6a44 <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d6a1e:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d6a22:	f04f 32ff 	mov.w	r2, #4294967295
   d6a26:	4b4c      	ldr	r3, [pc, #304]	; (d6b58 <_ZN5Print10printFloatEdh+0x15c>)
   d6a28:	4630      	mov	r0, r6
   d6a2a:	4649      	mov	r1, r9
   d6a2c:	f003 fb4e 	bl	da0cc <__aeabi_dcmpun>
   d6a30:	b968      	cbnz	r0, d6a4e <_ZN5Print10printFloatEdh+0x52>
   d6a32:	f04f 32ff 	mov.w	r2, #4294967295
   d6a36:	4b48      	ldr	r3, [pc, #288]	; (d6b58 <_ZN5Print10printFloatEdh+0x15c>)
   d6a38:	4630      	mov	r0, r6
   d6a3a:	4649      	mov	r1, r9
   d6a3c:	f003 fb28 	bl	da090 <__aeabi_dcmple>
   d6a40:	b928      	cbnz	r0, d6a4e <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6a42:	4946      	ldr	r1, [pc, #280]	; (d6b5c <_ZN5Print10printFloatEdh+0x160>)
   d6a44:	4650      	mov	r0, sl
   d6a46:	f7ff ff89 	bl	d695c <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d6a4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d6a4e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d6a52:	4b43      	ldr	r3, [pc, #268]	; (d6b60 <_ZN5Print10printFloatEdh+0x164>)
   d6a54:	4630      	mov	r0, r6
   d6a56:	4639      	mov	r1, r7
   d6a58:	f003 fb2e 	bl	da0b8 <__aeabi_dcmpgt>
   d6a5c:	b108      	cbz	r0, d6a62 <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6a5e:	4941      	ldr	r1, [pc, #260]	; (d6b64 <_ZN5Print10printFloatEdh+0x168>)
   d6a60:	e7f0      	b.n	d6a44 <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d6a62:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d6a66:	4b40      	ldr	r3, [pc, #256]	; (d6b68 <_ZN5Print10printFloatEdh+0x16c>)
   d6a68:	4630      	mov	r0, r6
   d6a6a:	4639      	mov	r1, r7
   d6a6c:	f003 fb06 	bl	da07c <__aeabi_dcmplt>
   d6a70:	2800      	cmp	r0, #0
   d6a72:	d1f4      	bne.n	d6a5e <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d6a74:	2200      	movs	r2, #0
   d6a76:	2300      	movs	r3, #0
   d6a78:	4630      	mov	r0, r6
   d6a7a:	4639      	mov	r1, r7
   d6a7c:	f003 fafe 	bl	da07c <__aeabi_dcmplt>
   d6a80:	b140      	cbz	r0, d6a94 <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d6a82:	212d      	movs	r1, #45	; 0x2d
   d6a84:	4650      	mov	r0, sl
   d6a86:	f7ff ff7d 	bl	d6984 <_ZN5Print5printEc>
     number = -number;
   d6a8a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d6a8e:	4604      	mov	r4, r0
     number = -number;
   d6a90:	461f      	mov	r7, r3
   d6a92:	e000      	b.n	d6a96 <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d6a94:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d6a96:	4935      	ldr	r1, [pc, #212]	; (d6b6c <_ZN5Print10printFloatEdh+0x170>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d6a98:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d6a9c:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d6a9e:	fa5f f388 	uxtb.w	r3, r8
   d6aa2:	429d      	cmp	r5, r3
   d6aa4:	d906      	bls.n	d6ab4 <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d6aa6:	2200      	movs	r2, #0
   d6aa8:	4b31      	ldr	r3, [pc, #196]	; (d6b70 <_ZN5Print10printFloatEdh+0x174>)
   d6aaa:	f003 f99f 	bl	d9dec <__aeabi_ddiv>
   d6aae:	f108 0801 	add.w	r8, r8, #1
   d6ab2:	e7f4      	b.n	d6a9e <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d6ab4:	4632      	mov	r2, r6
   d6ab6:	463b      	mov	r3, r7
   d6ab8:	f002 febc 	bl	d9834 <__adddf3>
   d6abc:	460f      	mov	r7, r1
   d6abe:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d6ac0:	f003 fb42 	bl	da148 <__aeabi_d2uiz>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d6ac4:	220a      	movs	r2, #10
   d6ac6:	4601      	mov	r1, r0
   d6ac8:	4680      	mov	r8, r0
   d6aca:	4650      	mov	r0, sl
   d6acc:	f7ff ff75 	bl	d69ba <_ZN5Print11printNumberEmh>
  double remainder = number - (double)int_part;
  n += print(int_part);
   d6ad0:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d6ad2:	b3e5      	cbz	r5, d6b4e <_ZN5Print10printFloatEdh+0x152>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d6ad4:	4640      	mov	r0, r8
   d6ad6:	f002 ffe9 	bl	d9aac <__aeabi_ui2d>
   d6ada:	4602      	mov	r2, r0
   d6adc:	460b      	mov	r3, r1
   d6ade:	4630      	mov	r0, r6
   d6ae0:	4639      	mov	r1, r7
   d6ae2:	f002 fea5 	bl	d9830 <__aeabi_dsub>
   d6ae6:	4606      	mov	r6, r0
   d6ae8:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6aea:	4650      	mov	r0, sl
   d6aec:	4921      	ldr	r1, [pc, #132]	; (d6b74 <_ZN5Print10printFloatEdh+0x178>)
   d6aee:	f7ff ff35 	bl	d695c <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d6af2:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d6af4:	2200      	movs	r2, #0
   d6af6:	4b1e      	ldr	r3, [pc, #120]	; (d6b70 <_ZN5Print10printFloatEdh+0x174>)
   d6af8:	4630      	mov	r0, r6
   d6afa:	4639      	mov	r1, r7
   d6afc:	f003 f84c 	bl	d9b98 <__aeabi_dmul>
   d6b00:	4606      	mov	r6, r0
   d6b02:	460f      	mov	r7, r1
    int toPrint = int(remainder);
   d6b04:	f003 faf8 	bl	da0f8 <__aeabi_d2iz>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d6b08:	f1b0 0900 	subs.w	r9, r0, #0
   d6b0c:	da07      	bge.n	d6b1e <_ZN5Print10printFloatEdh+0x122>
            t = print('-');
   d6b0e:	212d      	movs	r1, #45	; 0x2d
   d6b10:	4650      	mov	r0, sl
   d6b12:	f7ff ff37 	bl	d6984 <_ZN5Print5printEc>
            val = -n;
   d6b16:	f1c9 0100 	rsb	r1, r9, #0
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d6b1a:	4680      	mov	r8, r0
   d6b1c:	e002      	b.n	d6b24 <_ZN5Print10printFloatEdh+0x128>
            val = -n;
        } else {
            val = n;
   d6b1e:	4649      	mov	r1, r9
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d6b20:	f04f 0800 	mov.w	r8, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d6b24:	220a      	movs	r2, #10
   d6b26:	4650      	mov	r0, sl
   d6b28:	f7ff ff47 	bl	d69ba <_ZN5Print11printNumberEmh>
    n += print(toPrint);
   d6b2c:	4440      	add	r0, r8
   d6b2e:	4404      	add	r4, r0
    remainder -= toPrint;
   d6b30:	4648      	mov	r0, r9
   d6b32:	f002 ffcb 	bl	d9acc <__aeabi_i2d>
   d6b36:	4602      	mov	r2, r0
   d6b38:	460b      	mov	r3, r1
   d6b3a:	4630      	mov	r0, r6
   d6b3c:	4639      	mov	r1, r7
   d6b3e:	f002 fe77 	bl	d9830 <__aeabi_dsub>
   d6b42:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d6b44:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d6b48:	4606      	mov	r6, r0
   d6b4a:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d6b4c:	d1d2      	bne.n	d6af4 <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d6b4e:	4620      	mov	r0, r4
   d6b50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6b54:	000dbb2c 	.word	0x000dbb2c
   d6b58:	7fefffff 	.word	0x7fefffff
   d6b5c:	000dbb34 	.word	0x000dbb34
   d6b60:	41efffff 	.word	0x41efffff
   d6b64:	000dbb30 	.word	0x000dbb30
   d6b68:	c1efffff 	.word	0xc1efffff
   d6b6c:	3fe00000 	.word	0x3fe00000
   d6b70:	40240000 	.word	0x40240000
   d6b74:	000dba79 	.word	0x000dba79

000d6b78 <_ZN5Print5printEfi>:
{
  return write(c);
}

size_t Print::print(float n, int digits)
{
   d6b78:	b538      	push	{r3, r4, r5, lr}
   d6b7a:	4604      	mov	r4, r0
  return printFloat((double)n, digits);
   d6b7c:	ee10 0a10 	vmov	r0, s0
   d6b80:	b2cd      	uxtb	r5, r1
   d6b82:	f002 ffb5 	bl	d9af0 <__aeabi_f2d>
   d6b86:	ec41 0b10 	vmov	d0, r0, r1
   d6b8a:	4629      	mov	r1, r5
   d6b8c:	4620      	mov	r0, r4
}
   d6b8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return write(c);
}

size_t Print::print(float n, int digits)
{
  return printFloat((double)n, digits);
   d6b92:	f7ff bf33 	b.w	d69fc <_ZN5Print10printFloatEdh>

000d6b96 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d6b96:	b40c      	push	{r2, r3}
   d6b98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6b9c:	b087      	sub	sp, #28
   d6b9e:	af00      	add	r7, sp, #0
   d6ba0:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d6ba4:	4605      	mov	r5, r0
   d6ba6:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d6baa:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d6bac:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d6bae:	4623      	mov	r3, r4
   d6bb0:	464a      	mov	r2, r9
   d6bb2:	2114      	movs	r1, #20
   d6bb4:	1d38      	adds	r0, r7, #4
   d6bb6:	f7ff fb63 	bl	d6280 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d6bba:	2813      	cmp	r0, #19
   d6bbc:	d805      	bhi.n	d6bca <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6bbe:	1d39      	adds	r1, r7, #4
   d6bc0:	4628      	mov	r0, r5
   d6bc2:	f7ff fecb 	bl	d695c <_ZN5Print5writeEPKc>
   d6bc6:	4604      	mov	r4, r0
   d6bc8:	e013      	b.n	d6bf2 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d6bca:	f100 0308 	add.w	r3, r0, #8
   d6bce:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d6bd2:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d6bd4:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d6bd8:	1c41      	adds	r1, r0, #1
   d6bda:	4623      	mov	r3, r4
   d6bdc:	464a      	mov	r2, r9
   d6bde:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d6be0:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d6be2:	f7ff fb4d 	bl	d6280 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6be6:	4669      	mov	r1, sp
   d6be8:	4628      	mov	r0, r5
   d6bea:	f7ff feb7 	bl	d695c <_ZN5Print5writeEPKc>
   d6bee:	4604      	mov	r4, r0
   d6bf0:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d6bf2:	b11e      	cbz	r6, d6bfc <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d6bf4:	4628      	mov	r0, r5
   d6bf6:	f7ff fec8 	bl	d698a <_ZN5Print7printlnEv>
   d6bfa:	4404      	add	r4, r0
    return n;
}
   d6bfc:	4620      	mov	r0, r4
   d6bfe:	371c      	adds	r7, #28
   d6c00:	46bd      	mov	sp, r7
   d6c02:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6c06:	b002      	add	sp, #8
   d6c08:	4770      	bx	lr
	...

000d6c0c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d6c0c:	4b01      	ldr	r3, [pc, #4]	; (d6c14 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d6c0e:	4a02      	ldr	r2, [pc, #8]	; (d6c18 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d6c10:	601a      	str	r2, [r3, #0]
   d6c12:	4770      	bx	lr
   d6c14:	2003e3b4 	.word	0x2003e3b4
   d6c18:	000dbbab 	.word	0x000dbbab

000d6c1c <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d6c1c:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d6c1e:	2000      	movs	r0, #0
   d6c20:	f7ff faee 	bl	d6200 <spark_sync_time_pending>
   d6c24:	b128      	cbz	r0, d6c32 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6c26:	f7ff fad3 	bl	d61d0 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d6c2a:	f080 0001 	eor.w	r0, r0, #1
   d6c2e:	b2c0      	uxtb	r0, r0
   d6c30:	bd08      	pop	{r3, pc}
   d6c32:	2001      	movs	r0, #1
    }
   d6c34:	bd08      	pop	{r3, pc}
	...

000d6c38 <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d6c38:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   d6c3c:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d6c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d6c44:	d40f      	bmi.n	d6c66 <_ZN9TimeClass4zoneEf+0x2e>
   d6c46:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   d6c4a:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d6c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d6c52:	dc08      	bgt.n	d6c66 <_ZN9TimeClass4zoneEf+0x2e>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   d6c54:	eddf 7a04 	vldr	s15, [pc, #16]	; d6c68 <_ZN9TimeClass4zoneEf+0x30>
   d6c58:	4b04      	ldr	r3, [pc, #16]	; (d6c6c <_ZN9TimeClass4zoneEf+0x34>)
   d6c5a:	ee20 0a27 	vmul.f32	s0, s0, s15
   d6c5e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d6c62:	ed83 0a00 	vstr	s0, [r3]
   d6c66:	4770      	bx	lr
   d6c68:	45610000 	.word	0x45610000
   d6c6c:	2003e3c0 	.word	0x2003e3c0

000d6c70 <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d6c70:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
   d6c72:	4b0e      	ldr	r3, [pc, #56]	; (d6cac <_ZN9TimeClass7timeStrEl+0x3c>)
   d6c74:	681b      	ldr	r3, [r3, #0]
   d6c76:	4419      	add	r1, r3
   d6c78:	4b0d      	ldr	r3, [pc, #52]	; (d6cb0 <_ZN9TimeClass7timeStrEl+0x40>)
   d6c7a:	681b      	ldr	r3, [r3, #0]
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d6c7c:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
   d6c7e:	a802      	add	r0, sp, #8
   d6c80:	4419      	add	r1, r3
   d6c82:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
   d6c86:	f003 fe2b 	bl	da8e0 <localtime>
        char* ascstr = asctime(calendar_time);
   d6c8a:	f003 fddb 	bl	da844 <asctime>
   d6c8e:	4605      	mov	r5, r0
        int len = strlen(ascstr);
   d6c90:	f003 ffb5 	bl	dabfe <strlen>
        ascstr[len-1] = 0; // remove final newline
   d6c94:	4428      	add	r0, r5
   d6c96:	2300      	movs	r3, #0
   d6c98:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
   d6c9c:	4629      	mov	r1, r5
   d6c9e:	4620      	mov	r0, r4
   d6ca0:	f7ff fd7b 	bl	d679a <_ZN6StringC1EPK19__FlashStringHelper>
}
   d6ca4:	4620      	mov	r0, r4
   d6ca6:	b003      	add	sp, #12
   d6ca8:	bd30      	pop	{r4, r5, pc}
   d6caa:	bf00      	nop
   d6cac:	2003e3c0 	.word	0x2003e3c0
   d6cb0:	2003e3bc 	.word	0x2003e3bc

000d6cb4 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d6cb4:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d6cb6:	2000      	movs	r0, #0
   d6cb8:	f7ff f88e 	bl	d5dd8 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d6cbc:	4604      	mov	r4, r0
   d6cbe:	b968      	cbnz	r0, d6cdc <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d6cc0:	f7ff f9e2 	bl	d6088 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d6cc4:	2801      	cmp	r0, #1
   d6cc6:	d10b      	bne.n	d6ce0 <_ZN9TimeClass7isValidEv+0x2c>
   d6cc8:	4620      	mov	r0, r4
   d6cca:	f7ff fa05 	bl	d60d8 <system_thread_get_state>
   d6cce:	b938      	cbnz	r0, d6ce0 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d6cd0:	f7ff ffa4 	bl	d6c1c <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d6cd4:	b930      	cbnz	r0, d6ce4 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d6cd6:	f7ff fa73 	bl	d61c0 <spark_process>
   d6cda:	e7f9      	b.n	d6cd0 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d6cdc:	2001      	movs	r0, #1
   d6cde:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d6ce0:	2000      	movs	r0, #0
   d6ce2:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d6ce4:	f7ff ff9a 	bl	d6c1c <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d6ce8:	2000      	movs	r0, #0
   d6cea:	f7ff f875 	bl	d5dd8 <HAL_RTC_Time_Is_Valid>
   d6cee:	3000      	adds	r0, #0
   d6cf0:	bf18      	it	ne
   d6cf2:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d6cf4:	bd10      	pop	{r4, pc}

000d6cf6 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d6cf6:	b508      	push	{r3, lr}
    (void)isValid();
   d6cf8:	f7ff ffdc 	bl	d6cb4 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d6cfc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d6d00:	f7ff b862 	b.w	d5dc8 <HAL_RTC_Get_UnixTime>

000d6d04 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6d04:	4b02      	ldr	r3, [pc, #8]	; (d6d10 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d6d06:	681a      	ldr	r2, [r3, #0]
   d6d08:	4b02      	ldr	r3, [pc, #8]	; (d6d14 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d6d0a:	601a      	str	r2, [r3, #0]
   d6d0c:	4770      	bx	lr
   d6d0e:	bf00      	nop
   d6d10:	2003e0b4 	.word	0x2003e0b4
   d6d14:	2003e3b8 	.word	0x2003e3b8

000d6d18 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d6d18:	2100      	movs	r1, #0
   d6d1a:	f7ff b9c5 	b.w	d60a8 <system_delay_ms>

000d6d1e <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d6d1e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d6d20:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d6d22:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d6d24:	b113      	cbz	r3, d6d2c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6d26:	2203      	movs	r2, #3
   d6d28:	4601      	mov	r1, r0
   d6d2a:	4798      	blx	r3
    }
   d6d2c:	4620      	mov	r0, r4
   d6d2e:	bd10      	pop	{r4, pc}

000d6d30 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d6d30:	b510      	push	{r4, lr}
   d6d32:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6d34:	f7ff fff3 	bl	d6d1e <_ZNSt14_Function_baseD1Ev>
   d6d38:	4620      	mov	r0, r4
   d6d3a:	bd10      	pop	{r4, pc}

000d6d3c <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d6d3c:	b513      	push	{r0, r1, r4, lr}
   d6d3e:	460b      	mov	r3, r1
   d6d40:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6d42:	c803      	ldmia	r0, {r0, r1}
   d6d44:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d6d48:	e893 0003 	ldmia.w	r3, {r0, r1}
   d6d4c:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d6d50:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d6d54:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d6d58:	b002      	add	sp, #8
   d6d5a:	bd10      	pop	{r4, pc}

000d6d5c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6d5c:	4803      	ldr	r0, [pc, #12]	; (d6d6c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d6d5e:	4a04      	ldr	r2, [pc, #16]	; (d6d70 <_GLOBAL__sub_I_RGB+0x14>)
   d6d60:	4904      	ldr	r1, [pc, #16]	; (d6d74 <_GLOBAL__sub_I_RGB+0x18>)
   d6d62:	2300      	movs	r3, #0
   d6d64:	6083      	str	r3, [r0, #8]
   d6d66:	f001 babb 	b.w	d82e0 <__aeabi_atexit>
   d6d6a:	bf00      	nop
   d6d6c:	2003e3c4 	.word	0x2003e3c4
   d6d70:	2003e170 	.word	0x2003e170
   d6d74:	000d6d31 	.word	0x000d6d31

000d6d78 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d6d78:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d6d7a:	4b0c      	ldr	r3, [pc, #48]	; (d6dac <serialEventRun+0x34>)
   d6d7c:	b133      	cbz	r3, d6d8c <serialEventRun+0x14>
   d6d7e:	f000 fc31 	bl	d75e4 <_Z16_fetch_usbserialv>
   d6d82:	6803      	ldr	r3, [r0, #0]
   d6d84:	691b      	ldr	r3, [r3, #16]
   d6d86:	4798      	blx	r3
   d6d88:	2800      	cmp	r0, #0
   d6d8a:	dc09      	bgt.n	d6da0 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d6d8c:	4b08      	ldr	r3, [pc, #32]	; (d6db0 <serialEventRun+0x38>)
   d6d8e:	b163      	cbz	r3, d6daa <serialEventRun+0x32>
   d6d90:	f000 fcaa 	bl	d76e8 <_Z22__fetch_global_Serial1v>
   d6d94:	6803      	ldr	r3, [r0, #0]
   d6d96:	691b      	ldr	r3, [r3, #16]
   d6d98:	4798      	blx	r3
   d6d9a:	2800      	cmp	r0, #0
   d6d9c:	dc03      	bgt.n	d6da6 <serialEventRun+0x2e>
   d6d9e:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d6da0:	f3af 8000 	nop.w
   d6da4:	e7f2      	b.n	d6d8c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d6da6:	f3af 8000 	nop.w
   d6daa:	bd08      	pop	{r3, pc}
	...

000d6db4 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d6db4:	b508      	push	{r3, lr}
	serialEventRun();
   d6db6:	f7ff ffdf 	bl	d6d78 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6dba:	f7fe fffd 	bl	d5db8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6dbe:	4b01      	ldr	r3, [pc, #4]	; (d6dc4 <_post_loop+0x10>)
   d6dc0:	6018      	str	r0, [r3, #0]
   d6dc2:	bd08      	pop	{r3, pc}
   d6dc4:	2003e708 	.word	0x2003e708

000d6dc8 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d6dc8:	4802      	ldr	r0, [pc, #8]	; (d6dd4 <_Z33system_initialize_user_backup_ramv+0xc>)
   d6dca:	4a03      	ldr	r2, [pc, #12]	; (d6dd8 <_Z33system_initialize_user_backup_ramv+0x10>)
   d6dcc:	4903      	ldr	r1, [pc, #12]	; (d6ddc <_Z33system_initialize_user_backup_ramv+0x14>)
   d6dce:	1a12      	subs	r2, r2, r0
   d6dd0:	f003 be92 	b.w	daaf8 <memcpy>
   d6dd4:	2003f400 	.word	0x2003f400
   d6dd8:	2003f404 	.word	0x2003f404
   d6ddc:	000dc0d8 	.word	0x000dc0d8

000d6de0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6de0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6de2:	2300      	movs	r3, #0
   d6de4:	9300      	str	r3, [sp, #0]
   d6de6:	461a      	mov	r2, r3
   d6de8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6dec:	f7ff f986 	bl	d60fc <system_ctrl_set_result>
}
   d6df0:	b003      	add	sp, #12
   d6df2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6df8 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d6df8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6dfa:	8843      	ldrh	r3, [r0, #2]
   d6dfc:	2b0a      	cmp	r3, #10
   d6dfe:	d008      	beq.n	d6e12 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6e00:	2b50      	cmp	r3, #80	; 0x50
   d6e02:	d109      	bne.n	d6e18 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d6e04:	4b09      	ldr	r3, [pc, #36]	; (d6e2c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6e06:	681b      	ldr	r3, [r3, #0]
   d6e08:	b13b      	cbz	r3, d6e1a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d6e0a:	b003      	add	sp, #12
   d6e0c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d6e10:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d6e12:	f7ff ffe5 	bl	d6de0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d6e16:	e006      	b.n	d6e26 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6e18:	2300      	movs	r3, #0
   d6e1a:	9300      	str	r3, [sp, #0]
   d6e1c:	461a      	mov	r2, r3
   d6e1e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6e22:	f7ff f96b 	bl	d60fc <system_ctrl_set_result>
        break;
    }
}
   d6e26:	b003      	add	sp, #12
   d6e28:	f85d fb04 	ldr.w	pc, [sp], #4
   d6e2c:	2003e3d4 	.word	0x2003e3d4

000d6e30 <module_user_init_hook>:

void module_user_init_hook()
{
   d6e30:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6e32:	4c10      	ldr	r4, [pc, #64]	; (d6e74 <module_user_init_hook+0x44>)
   d6e34:	4d10      	ldr	r5, [pc, #64]	; (d6e78 <module_user_init_hook+0x48>)
   d6e36:	6823      	ldr	r3, [r4, #0]
   d6e38:	42ab      	cmp	r3, r5
   d6e3a:	4b10      	ldr	r3, [pc, #64]	; (d6e7c <module_user_init_hook+0x4c>)
   d6e3c:	bf0c      	ite	eq
   d6e3e:	2201      	moveq	r2, #1
   d6e40:	2200      	movne	r2, #0
   d6e42:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d6e44:	d002      	beq.n	d6e4c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d6e46:	f7ff ffbf 	bl	d6dc8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d6e4a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6e4c:	f7fe ffa4 	bl	d5d98 <HAL_RNG_GetRandomNumber>
   d6e50:	4604      	mov	r4, r0
    srand(seed);
   d6e52:	f003 fe7f 	bl	dab54 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d6e56:	4b0a      	ldr	r3, [pc, #40]	; (d6e80 <module_user_init_hook+0x50>)
   d6e58:	b113      	cbz	r3, d6e60 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d6e5a:	4620      	mov	r0, r4
   d6e5c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6e60:	2100      	movs	r1, #0
   d6e62:	4807      	ldr	r0, [pc, #28]	; (d6e80 <module_user_init_hook+0x50>)
   d6e64:	f7ff f9d4 	bl	d6210 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6e68:	2100      	movs	r1, #0
   d6e6a:	4806      	ldr	r0, [pc, #24]	; (d6e84 <module_user_init_hook+0x54>)
}
   d6e6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6e70:	f7ff b93a 	b.w	d60e8 <system_ctrl_set_app_request_handler>
   d6e74:	2003f400 	.word	0x2003f400
   d6e78:	9a271c1e 	.word	0x9a271c1e
   d6e7c:	2003e3d8 	.word	0x2003e3d8
   d6e80:	00000000 	.word	0x00000000
   d6e84:	000d6df9 	.word	0x000d6df9

000d6e88 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d6e88:	4770      	bx	lr

000d6e8a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d6e8a:	2000      	movs	r0, #0
   d6e8c:	4770      	bx	lr

000d6e8e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d6e8e:	b510      	push	{r4, lr}
   d6e90:	2110      	movs	r1, #16
   d6e92:	4604      	mov	r4, r0
   d6e94:	f001 fa32 	bl	d82fc <_ZdlPvj>
   d6e98:	4620      	mov	r0, r4
   d6e9a:	bd10      	pop	{r4, pc}

000d6e9c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d6e9c:	b508      	push	{r3, lr}
      { delete this; }
   d6e9e:	b108      	cbz	r0, d6ea4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d6ea0:	f7ff fff5 	bl	d6e8e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d6ea4:	bd08      	pop	{r3, pc}

000d6ea6 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d6ea6:	2200      	movs	r2, #0
   d6ea8:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d6eaa:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d6eac:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d6eb0:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6eb2:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d6eb6:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d6eb8:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6eba:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6ebc:	680c      	ldr	r4, [r1, #0]
   d6ebe:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d6ec0:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d6ec2:	bd10      	pop	{r4, pc}

000d6ec4 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d6ec4:	b510      	push	{r4, lr}
   d6ec6:	4604      	mov	r4, r0
    free((void*)msg_);
   d6ec8:	6800      	ldr	r0, [r0, #0]
   d6eca:	f7ff f9b1 	bl	d6230 <free>
}
   d6ece:	4620      	mov	r0, r4
   d6ed0:	bd10      	pop	{r4, pc}

000d6ed2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d6ed2:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d6ed4:	68c4      	ldr	r4, [r0, #12]
   d6ed6:	b1f4      	cbz	r4, d6f16 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d6ed8:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d6eda:	2b02      	cmp	r3, #2
   d6edc:	d103      	bne.n	d6ee6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d6ede:	f104 000c 	add.w	r0, r4, #12
   d6ee2:	f7ff ffef 	bl	d6ec4 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d6ee6:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d6ee8:	b135      	cbz	r5, d6ef8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6eea:	4628      	mov	r0, r5
   d6eec:	f7ff ff17 	bl	d6d1e <_ZNSt14_Function_baseD1Ev>
   d6ef0:	2110      	movs	r1, #16
   d6ef2:	4628      	mov	r0, r5
   d6ef4:	f001 fa02 	bl	d82fc <_ZdlPvj>
   d6ef8:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d6efa:	b135      	cbz	r5, d6f0a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d6efc:	4628      	mov	r0, r5
   d6efe:	f7ff ff0e 	bl	d6d1e <_ZNSt14_Function_baseD1Ev>
   d6f02:	2110      	movs	r1, #16
   d6f04:	4628      	mov	r0, r5
   d6f06:	f001 f9f9 	bl	d82fc <_ZdlPvj>
   d6f0a:	4620      	mov	r0, r4
   d6f0c:	2114      	movs	r1, #20
   d6f0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d6f12:	f001 b9f3 	b.w	d82fc <_ZdlPvj>
   d6f16:	bd38      	pop	{r3, r4, r5, pc}

000d6f18 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d6f18:	b513      	push	{r0, r1, r4, lr}
   d6f1a:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6f1c:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d6f20:	2300      	movs	r3, #0
   d6f22:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d6f24:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6f26:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d6f28:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6f2a:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d6f2c:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d6f2e:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6f30:	f7fd fa7e 	bl	d4430 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6f34:	4620      	mov	r0, r4
   d6f36:	b002      	add	sp, #8
   d6f38:	bd10      	pop	{r4, pc}

000d6f3a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d6f3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6f3c:	460c      	mov	r4, r1
   d6f3e:	ad02      	add	r5, sp, #8
   d6f40:	f854 3b04 	ldr.w	r3, [r4], #4
   d6f44:	f845 3d08 	str.w	r3, [r5, #-8]!
   d6f48:	4606      	mov	r6, r0
   d6f4a:	460f      	mov	r7, r1
   d6f4c:	a801      	add	r0, sp, #4
   d6f4e:	4621      	mov	r1, r4
   d6f50:	f7ff fcd2 	bl	d68f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d6f54:	4629      	mov	r1, r5
   d6f56:	4630      	mov	r0, r6
   d6f58:	f7ff ffde 	bl	d6f18 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6f5c:	a801      	add	r0, sp, #4
   d6f5e:	f7fd fa67 	bl	d4430 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6f62:	4620      	mov	r0, r4
   d6f64:	f7fd fa64 	bl	d4430 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d6f68:	4638      	mov	r0, r7
   d6f6a:	2108      	movs	r1, #8
   d6f6c:	f001 f9c6 	bl	d82fc <_ZdlPvj>
        return p;
    }
   d6f70:	4630      	mov	r0, r6
   d6f72:	b003      	add	sp, #12
   d6f74:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d6f78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d6f78:	b538      	push	{r3, r4, r5, lr}
   d6f7a:	2300      	movs	r3, #0
   d6f7c:	4604      	mov	r4, r0
   d6f7e:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6f80:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d6f82:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6f84:	f7fd f889 	bl	d409a <_Znwj>
   d6f88:	b128      	cbz	r0, d6f96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d6f8a:	2301      	movs	r3, #1
   d6f8c:	6043      	str	r3, [r0, #4]
   d6f8e:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d6f90:	4b02      	ldr	r3, [pc, #8]	; (d6f9c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d6f92:	6003      	str	r3, [r0, #0]
   d6f94:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6f96:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d6f98:	4620      	mov	r0, r4
   d6f9a:	bd38      	pop	{r3, r4, r5, pc}
   d6f9c:	000dbc3c 	.word	0x000dbc3c

000d6fa0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6fa0:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d6fa2:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6fa4:	b90a      	cbnz	r2, d6faa <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d6fa6:	f001 f9bc 	bl	d8322 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6faa:	68c3      	ldr	r3, [r0, #12]
    }
   d6fac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6fb0:	4718      	bx	r3

000d6fb2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6fb2:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6fb4:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d6fb6:	f100 0110 	add.w	r1, r0, #16
   d6fba:	f7ff fff1 	bl	d6fa0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d6fbe:	bd08      	pop	{r3, pc}

000d6fc0 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6fc0:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d6fc2:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6fc4:	b90a      	cbnz	r2, d6fca <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d6fc6:	f001 f9ac 	bl	d8322 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6fca:	68c3      	ldr	r3, [r0, #12]
    }
   d6fcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6fd0:	4718      	bx	r3

000d6fd2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6fd2:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6fd4:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d6fd6:	f100 0110 	add.w	r1, r0, #16
   d6fda:	f7ff fff1 	bl	d6fc0 <_ZNKSt8functionIFvRKbEEclES1_>
   d6fde:	bd08      	pop	{r3, pc}

000d6fe0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6fe0:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6fe2:	2300      	movs	r3, #0
   d6fe4:	6083      	str	r3, [r0, #8]
   d6fe6:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6fe8:	4604      	mov	r4, r0
   d6fea:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d6fec:	b12b      	cbz	r3, d6ffa <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6fee:	2202      	movs	r2, #2
   d6ff0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6ff2:	68eb      	ldr	r3, [r5, #12]
   d6ff4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6ff6:	68ab      	ldr	r3, [r5, #8]
   d6ff8:	60a3      	str	r3, [r4, #8]
	}
    }
   d6ffa:	4620      	mov	r0, r4
   d6ffc:	bd38      	pop	{r3, r4, r5, pc}
	...

000d7000 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d7000:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7002:	b089      	sub	sp, #36	; 0x24
   d7004:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d7006:	4668      	mov	r0, sp
   d7008:	f7ff ff4d 	bl	d6ea6 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d700c:	2300      	movs	r3, #0
   d700e:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d7012:	f04f 0202 	mov.w	r2, #2
   d7016:	e8d4 3f4f 	ldrexb	r3, [r4]
   d701a:	2b00      	cmp	r3, #0
   d701c:	d103      	bne.n	d7026 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d701e:	e8c4 2f41 	strexb	r1, r2, [r4]
   d7022:	2900      	cmp	r1, #0
   d7024:	d1f7      	bne.n	d7016 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d7026:	d002      	beq.n	d702e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d7028:	f88d 3008 	strb.w	r3, [sp, #8]
   d702c:	e063      	b.n	d70f6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d702e:	f114 050c 	adds.w	r5, r4, #12
   d7032:	d003      	beq.n	d703c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d7034:	4669      	mov	r1, sp
   d7036:	4628      	mov	r0, r5
   d7038:	f7ff ff35 	bl	d6ea6 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d703c:	f3bf 8f5f 	dmb	sy
   d7040:	2301      	movs	r3, #1
   d7042:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d7044:	2000      	movs	r0, #0
   d7046:	f104 0308 	add.w	r3, r4, #8
   d704a:	f3bf 8f5f 	dmb	sy
   d704e:	e853 6f00 	ldrex	r6, [r3]
   d7052:	e843 0200 	strex	r2, r0, [r3]
   d7056:	2a00      	cmp	r2, #0
   d7058:	d1f9      	bne.n	d704e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d705a:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d705e:	2e00      	cmp	r6, #0
   d7060:	d049      	beq.n	d70f6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d7062:	f7ff f829 	bl	d60b8 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d7066:	b120      	cbz	r0, d7072 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d7068:	4629      	mov	r1, r5
   d706a:	4630      	mov	r0, r6
   d706c:	f7ff ff98 	bl	d6fa0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d7070:	e03a      	b.n	d70e8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d7072:	4631      	mov	r1, r6
   d7074:	a802      	add	r0, sp, #8
   d7076:	f7ff ffb3 	bl	d6fe0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d707a:	68e0      	ldr	r0, [r4, #12]
   d707c:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d7080:	b108      	cbz	r0, d7086 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d7082:	f003 fda1 	bl	dabc8 <strdup>
   d7086:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d7088:	2010      	movs	r0, #16
   d708a:	f8ad 501c 	strh.w	r5, [sp, #28]
   d708e:	f7fd f804 	bl	d409a <_Znwj>
   d7092:	4605      	mov	r5, r0
   d7094:	b1e8      	cbz	r0, d70d2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7096:	2700      	movs	r7, #0
   d7098:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d709a:	2018      	movs	r0, #24
   d709c:	f7fc fffd 	bl	d409a <_Znwj>
   d70a0:	4604      	mov	r4, r0
   d70a2:	b188      	cbz	r0, d70c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d70a4:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d70a6:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d70a8:	a802      	add	r0, sp, #8
   d70aa:	f7ff fe47 	bl	d6d3c <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d70ae:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d70b0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d70b2:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d70b4:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d70b6:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d70b8:	a906      	add	r1, sp, #24
   d70ba:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d70bc:	60e3      	str	r3, [r4, #12]
   d70be:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d70c2:	9205      	str	r2, [sp, #20]
   d70c4:	f7ff feef 	bl	d6ea6 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d70c8:	4b0d      	ldr	r3, [pc, #52]	; (d7100 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d70ca:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d70cc:	4b0d      	ldr	r3, [pc, #52]	; (d7104 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d70ce:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d70d0:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d70d2:	a806      	add	r0, sp, #24
   d70d4:	f7ff fef6 	bl	d6ec4 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d70d8:	a802      	add	r0, sp, #8
   d70da:	f7ff fe20 	bl	d6d1e <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d70de:	2200      	movs	r2, #0
   d70e0:	4629      	mov	r1, r5
   d70e2:	4809      	ldr	r0, [pc, #36]	; (d7108 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d70e4:	f7fe fff0 	bl	d60c8 <application_thread_invoke>
   d70e8:	4630      	mov	r0, r6
   d70ea:	f7ff fe18 	bl	d6d1e <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d70ee:	2110      	movs	r1, #16
   d70f0:	4630      	mov	r0, r6
   d70f2:	f001 f903 	bl	d82fc <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d70f6:	4668      	mov	r0, sp
   d70f8:	f7ff fee4 	bl	d6ec4 <_ZN8particle5ErrorD1Ev>
    }
   d70fc:	b009      	add	sp, #36	; 0x24
   d70fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7100:	000d6fb3 	.word	0x000d6fb3
   d7104:	000d7229 	.word	0x000d7229
   d7108:	000d7735 	.word	0x000d7735

000d710c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d710c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7110:	b08b      	sub	sp, #44	; 0x2c
   d7112:	4606      	mov	r6, r0
   d7114:	460f      	mov	r7, r1
   d7116:	4690      	mov	r8, r2
   d7118:	4699      	mov	r9, r3
   d711a:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d711e:	f7ff f857 	bl	d61d0 <spark_cloud_flag_connected>
   d7122:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d7124:	4683      	mov	fp, r0
   d7126:	bb30      	cbnz	r0, d7176 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d7128:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d712c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d712e:	a905      	add	r1, sp, #20
   d7130:	4628      	mov	r0, r5
   d7132:	f8ad 3018 	strh.w	r3, [sp, #24]
   d7136:	f7ff feb6 	bl	d6ea6 <_ZN8particle5ErrorC1EOS0_>
   d713a:	2014      	movs	r0, #20
   d713c:	f7fc ffad 	bl	d409a <_Znwj>
   d7140:	4604      	mov	r4, r0
   d7142:	b158      	cbz	r0, d715c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d7144:	2302      	movs	r3, #2
   d7146:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7148:	2301      	movs	r3, #1
   d714a:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d714c:	f8c0 b004 	str.w	fp, [r0, #4]
   d7150:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d7154:	4629      	mov	r1, r5
   d7156:	300c      	adds	r0, #12
   d7158:	f7ff fea5 	bl	d6ea6 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d715c:	4630      	mov	r0, r6
   d715e:	4621      	mov	r1, r4
   d7160:	f840 4b04 	str.w	r4, [r0], #4
   d7164:	f7ff ff08 	bl	d6f78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d7168:	4628      	mov	r0, r5
   d716a:	f7ff feab 	bl	d6ec4 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d716e:	a805      	add	r0, sp, #20
   d7170:	f7ff fea8 	bl	d6ec4 <_ZN8particle5ErrorD1Ev>
   d7174:	e052      	b.n	d721c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d7176:	2400      	movs	r4, #0
   d7178:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d717a:	2014      	movs	r0, #20
   d717c:	606c      	str	r4, [r5, #4]
   d717e:	60ac      	str	r4, [r5, #8]
   d7180:	9307      	str	r3, [sp, #28]
   d7182:	f7fc ff8a 	bl	d409a <_Znwj>
   d7186:	4601      	mov	r1, r0
   d7188:	b118      	cbz	r0, d7192 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d718a:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d718c:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d718e:	6044      	str	r4, [r0, #4]
   d7190:	6084      	str	r4, [r0, #8]
   d7192:	a804      	add	r0, sp, #16
   d7194:	9103      	str	r1, [sp, #12]
   d7196:	f7ff feef 	bl	d6f78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d719a:	4b22      	ldr	r3, [pc, #136]	; (d7224 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d719c:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d719e:	2008      	movs	r0, #8
   d71a0:	f7fc ff7b 	bl	d409a <_Znwj>
   d71a4:	4604      	mov	r4, r0
   d71a6:	b128      	cbz	r0, d71b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d71a8:	9b03      	ldr	r3, [sp, #12]
   d71aa:	f840 3b04 	str.w	r3, [r0], #4
   d71ae:	a904      	add	r1, sp, #16
   d71b0:	f7ff fba2 	bl	d68f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d71b4:	9500      	str	r5, [sp, #0]
   d71b6:	fa5f f38a 	uxtb.w	r3, sl
   d71ba:	464a      	mov	r2, r9
   d71bc:	4641      	mov	r1, r8
   d71be:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d71c0:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d71c2:	f7ff f80d 	bl	d61e0 <spark_send_event>
   d71c6:	b920      	cbnz	r0, d71d2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d71c8:	9b03      	ldr	r3, [sp, #12]
   d71ca:	785b      	ldrb	r3, [r3, #1]
   d71cc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d71d0:	b183      	cbz	r3, d71f4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d71d2:	9b03      	ldr	r3, [sp, #12]
   d71d4:	9305      	str	r3, [sp, #20]
   d71d6:	a904      	add	r1, sp, #16
   d71d8:	a806      	add	r0, sp, #24
   d71da:	f7ff fb8d 	bl	d68f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d71de:	a905      	add	r1, sp, #20
   d71e0:	4630      	mov	r0, r6
   d71e2:	f7ff fe99 	bl	d6f18 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d71e6:	a806      	add	r0, sp, #24
   d71e8:	f7fd f922 	bl	d4430 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d71ec:	a804      	add	r0, sp, #16
   d71ee:	f7fd f91f 	bl	d4430 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d71f2:	e013      	b.n	d721c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d71f4:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d71f8:	a905      	add	r1, sp, #20
   d71fa:	a803      	add	r0, sp, #12
   d71fc:	9205      	str	r2, [sp, #20]
   d71fe:	f8ad 3018 	strh.w	r3, [sp, #24]
   d7202:	f7ff fefd 	bl	d7000 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d7206:	a805      	add	r0, sp, #20
   d7208:	f7ff fe5c 	bl	d6ec4 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d720c:	a805      	add	r0, sp, #20
   d720e:	9909      	ldr	r1, [sp, #36]	; 0x24
   d7210:	f7ff fe93 	bl	d6f3a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d7214:	a806      	add	r0, sp, #24
   d7216:	f7fd f90b 	bl	d4430 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d721a:	e7da      	b.n	d71d2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d721c:	4630      	mov	r0, r6
   d721e:	b00b      	add	sp, #44	; 0x2c
   d7220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7224:	000d7399 	.word	0x000d7399

000d7228 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d7228:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d722a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d722c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d722e:	d006      	beq.n	d723e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d7230:	2a03      	cmp	r2, #3
   d7232:	d017      	beq.n	d7264 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d7234:	2a01      	cmp	r2, #1
   d7236:	d122      	bne.n	d727e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d7238:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d723a:	6003      	str	r3, [r0, #0]
	      break;
   d723c:	e01f      	b.n	d727e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d723e:	2018      	movs	r0, #24
   d7240:	680e      	ldr	r6, [r1, #0]
   d7242:	f7fc ff2a 	bl	d409a <_Znwj>
   d7246:	4605      	mov	r5, r0
   d7248:	b150      	cbz	r0, d7260 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d724a:	4631      	mov	r1, r6
   d724c:	f7ff fec8 	bl	d6fe0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d7250:	6930      	ldr	r0, [r6, #16]
   d7252:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d7256:	b108      	cbz	r0, d725c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d7258:	f003 fcb6 	bl	dabc8 <strdup>
   d725c:	6128      	str	r0, [r5, #16]
   d725e:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d7260:	6025      	str	r5, [r4, #0]
   d7262:	e00c      	b.n	d727e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d7264:	6804      	ldr	r4, [r0, #0]
   d7266:	b154      	cbz	r4, d727e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d7268:	f104 0010 	add.w	r0, r4, #16
   d726c:	f7ff fe2a 	bl	d6ec4 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7270:	4620      	mov	r0, r4
   d7272:	f7ff fd54 	bl	d6d1e <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d7276:	2118      	movs	r1, #24
   d7278:	4620      	mov	r0, r4
   d727a:	f001 f83f 	bl	d82fc <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d727e:	2000      	movs	r0, #0
   d7280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7282 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d7282:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7284:	2300      	movs	r3, #0
   d7286:	6083      	str	r3, [r0, #8]
   d7288:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d728a:	4604      	mov	r4, r0
   d728c:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d728e:	b12b      	cbz	r3, d729c <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d7290:	2202      	movs	r2, #2
   d7292:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d7294:	68eb      	ldr	r3, [r5, #12]
   d7296:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d7298:	68ab      	ldr	r3, [r5, #8]
   d729a:	60a3      	str	r3, [r4, #8]
	}
    }
   d729c:	4620      	mov	r0, r4
   d729e:	bd38      	pop	{r3, r4, r5, pc}

000d72a0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d72a0:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d72a2:	b570      	push	{r4, r5, r6, lr}
   d72a4:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d72a6:	d006      	beq.n	d72b6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d72a8:	2a03      	cmp	r2, #3
   d72aa:	d011      	beq.n	d72d0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d72ac:	2a01      	cmp	r2, #1
   d72ae:	d118      	bne.n	d72e2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d72b0:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d72b2:	6003      	str	r3, [r0, #0]
	      break;
   d72b4:	e015      	b.n	d72e2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d72b6:	2014      	movs	r0, #20
   d72b8:	680e      	ldr	r6, [r1, #0]
   d72ba:	f7fc feee 	bl	d409a <_Znwj>
   d72be:	4605      	mov	r5, r0
   d72c0:	b120      	cbz	r0, d72cc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d72c2:	4631      	mov	r1, r6
   d72c4:	f7ff ffdd 	bl	d7282 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d72c8:	7c33      	ldrb	r3, [r6, #16]
   d72ca:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d72cc:	6025      	str	r5, [r4, #0]
   d72ce:	e008      	b.n	d72e2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d72d0:	6804      	ldr	r4, [r0, #0]
   d72d2:	b134      	cbz	r4, d72e2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d72d4:	4620      	mov	r0, r4
   d72d6:	f7ff fd22 	bl	d6d1e <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d72da:	2114      	movs	r1, #20
   d72dc:	4620      	mov	r0, r4
   d72de:	f001 f80d 	bl	d82fc <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d72e2:	2000      	movs	r0, #0
   d72e4:	bd70      	pop	{r4, r5, r6, pc}
	...

000d72e8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d72e8:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d72ea:	2300      	movs	r3, #0
   d72ec:	b087      	sub	sp, #28
   d72ee:	460c      	mov	r4, r1
   d72f0:	f3bf 8f5f 	dmb	sy
   d72f4:	e850 6f00 	ldrex	r6, [r0]
   d72f8:	e840 3200 	strex	r2, r3, [r0]
   d72fc:	2a00      	cmp	r2, #0
   d72fe:	d1f9      	bne.n	d72f4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d7300:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d7304:	2e00      	cmp	r6, #0
   d7306:	d03f      	beq.n	d7388 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d7308:	4618      	mov	r0, r3
   d730a:	f7fe fed5 	bl	d60b8 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d730e:	4607      	mov	r7, r0
   d7310:	b120      	cbz	r0, d731c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d7312:	4621      	mov	r1, r4
   d7314:	4630      	mov	r0, r6
   d7316:	f7ff fe53 	bl	d6fc0 <_ZNKSt8functionIFvRKbEEclES1_>
   d731a:	e02e      	b.n	d737a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d731c:	4631      	mov	r1, r6
   d731e:	a801      	add	r0, sp, #4
   d7320:	f7ff ffaf 	bl	d7282 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d7324:	7823      	ldrb	r3, [r4, #0]
   d7326:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d732a:	2010      	movs	r0, #16
   d732c:	f7fc feb5 	bl	d409a <_Znwj>
   d7330:	4605      	mov	r5, r0
   d7332:	b1d0      	cbz	r0, d736a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7334:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7336:	2014      	movs	r0, #20
   d7338:	f7fc feaf 	bl	d409a <_Znwj>
   d733c:	4604      	mov	r4, r0
   d733e:	b178      	cbz	r0, d7360 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7340:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d7342:	4601      	mov	r1, r0
   d7344:	a801      	add	r0, sp, #4
   d7346:	f7ff fcf9 	bl	d6d3c <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d734a:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d734c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d734e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7350:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d7352:	9203      	str	r2, [sp, #12]
   d7354:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d7356:	60e3      	str	r3, [r4, #12]
   d7358:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d735c:	9204      	str	r2, [sp, #16]
   d735e:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d7360:	4b0a      	ldr	r3, [pc, #40]	; (d738c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d7362:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d7364:	4b0a      	ldr	r3, [pc, #40]	; (d7390 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7366:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d7368:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d736a:	a801      	add	r0, sp, #4
   d736c:	f7ff fcd7 	bl	d6d1e <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d7370:	2200      	movs	r2, #0
   d7372:	4629      	mov	r1, r5
   d7374:	4807      	ldr	r0, [pc, #28]	; (d7394 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d7376:	f7fe fea7 	bl	d60c8 <application_thread_invoke>
   d737a:	4630      	mov	r0, r6
   d737c:	f7ff fccf 	bl	d6d1e <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d7380:	2110      	movs	r1, #16
   d7382:	4630      	mov	r0, r6
   d7384:	f000 ffba 	bl	d82fc <_ZdlPvj>
        }
    }
   d7388:	b007      	add	sp, #28
   d738a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d738c:	000d6fd3 	.word	0x000d6fd3
   d7390:	000d72a1 	.word	0x000d72a1
   d7394:	000d7735 	.word	0x000d7735

000d7398 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d7398:	b530      	push	{r4, r5, lr}
   d739a:	b085      	sub	sp, #20
   d739c:	4604      	mov	r4, r0
   d739e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d73a0:	4668      	mov	r0, sp
   d73a2:	4611      	mov	r1, r2
   d73a4:	f7ff fdc9 	bl	d6f3a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d73a8:	b17c      	cbz	r4, d73ca <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d73aa:	b224      	sxth	r4, r4
   d73ac:	4628      	mov	r0, r5
   d73ae:	b10d      	cbz	r5, d73b4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d73b0:	f003 fc0a 	bl	dabc8 <strdup>
   d73b4:	9002      	str	r0, [sp, #8]
   d73b6:	a902      	add	r1, sp, #8
   d73b8:	4668      	mov	r0, sp
   d73ba:	f8ad 400c 	strh.w	r4, [sp, #12]
   d73be:	f7ff fe1f 	bl	d7000 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d73c2:	a802      	add	r0, sp, #8
   d73c4:	f7ff fd7e 	bl	d6ec4 <_ZN8particle5ErrorD1Ev>
   d73c8:	e01d      	b.n	d7406 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d73ca:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d73cc:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d73d0:	f04f 0201 	mov.w	r2, #1
   d73d4:	e8d0 3f4f 	ldrexb	r3, [r0]
   d73d8:	42a3      	cmp	r3, r4
   d73da:	d103      	bne.n	d73e4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d73dc:	e8c0 2f41 	strexb	r1, r2, [r0]
   d73e0:	2900      	cmp	r1, #0
   d73e2:	d1f7      	bne.n	d73d4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d73e4:	d002      	beq.n	d73ec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d73e6:	f88d 3008 	strb.w	r3, [sp, #8]
   d73ea:	e00c      	b.n	d7406 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d73ec:	f110 010c 	adds.w	r1, r0, #12
   d73f0:	f04f 0301 	mov.w	r3, #1
   d73f4:	bf18      	it	ne
   d73f6:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d73f8:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d73fc:	3004      	adds	r0, #4
   d73fe:	f800 3c03 	strb.w	r3, [r0, #-3]
   d7402:	f7ff ff71 	bl	d72e8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d7406:	a801      	add	r0, sp, #4
   d7408:	f7fd f812 	bl	d4430 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d740c:	b005      	add	sp, #20
   d740e:	bd30      	pop	{r4, r5, pc}

000d7410 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d7410:	4770      	bx	lr

000d7412 <_ZN9IPAddressD0Ev>:
   d7412:	b510      	push	{r4, lr}
   d7414:	2118      	movs	r1, #24
   d7416:	4604      	mov	r4, r0
   d7418:	f000 ff70 	bl	d82fc <_ZdlPvj>
   d741c:	4620      	mov	r0, r4
   d741e:	bd10      	pop	{r4, pc}

000d7420 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7420:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d7422:	7d03      	ldrb	r3, [r0, #20]
   d7424:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7426:	b08d      	sub	sp, #52	; 0x34
   d7428:	460e      	mov	r6, r1
   d742a:	f100 0704 	add.w	r7, r0, #4
   d742e:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d7432:	d002      	beq.n	d743a <_ZNK9IPAddress7printToER5Print+0x1a>
   d7434:	f100 0508 	add.w	r5, r0, #8
   d7438:	e018      	b.n	d746c <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d743a:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d743c:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d743e:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7442:	232f      	movs	r3, #47	; 0x2f
   d7444:	462a      	mov	r2, r5
   d7446:	200a      	movs	r0, #10
   d7448:	f7fe fcf6 	bl	d5e38 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d744c:	4628      	mov	r0, r5
   d744e:	f003 fbd6 	bl	dabfe <strlen>
   d7452:	6833      	ldr	r3, [r6, #0]
   d7454:	4602      	mov	r2, r0
   d7456:	68db      	ldr	r3, [r3, #12]
   d7458:	4629      	mov	r1, r5
   d745a:	4630      	mov	r0, r6
   d745c:	4798      	blx	r3
   d745e:	e00f      	b.n	d7480 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d7460:	b124      	cbz	r4, d746c <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d7462:	212e      	movs	r1, #46	; 0x2e
   d7464:	4630      	mov	r0, r6
   d7466:	f7ff fa8d 	bl	d6984 <_ZN5Print5printEc>
   d746a:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d746c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d7470:	220a      	movs	r2, #10
   d7472:	4630      	mov	r0, r6
   d7474:	f7ff faa1 	bl	d69ba <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d7478:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d747a:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d747c:	d1f0      	bne.n	d7460 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d747e:	4620      	mov	r0, r4
    }
    return n;
}
   d7480:	b00d      	add	sp, #52	; 0x34
   d7482:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7484 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d7484:	b510      	push	{r4, lr}
   d7486:	4b05      	ldr	r3, [pc, #20]	; (d749c <_ZN9IPAddressC1Ev+0x18>)
   d7488:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d748a:	2211      	movs	r2, #17
   d748c:	f840 3b04 	str.w	r3, [r0], #4
   d7490:	2100      	movs	r1, #0
   d7492:	f003 fb57 	bl	dab44 <memset>
{
    clear();
}
   d7496:	4620      	mov	r0, r4
   d7498:	bd10      	pop	{r4, pc}
   d749a:	bf00      	nop
   d749c:	000dbc58 	.word	0x000dbc58

000d74a0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d74a0:	4603      	mov	r3, r0
   d74a2:	4a07      	ldr	r2, [pc, #28]	; (d74c0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d74a4:	b510      	push	{r4, lr}
   d74a6:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d74aa:	f101 0210 	add.w	r2, r1, #16
   d74ae:	f851 4b04 	ldr.w	r4, [r1], #4
   d74b2:	f843 4b04 	str.w	r4, [r3], #4
   d74b6:	4291      	cmp	r1, r2
   d74b8:	d1f9      	bne.n	d74ae <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d74ba:	780a      	ldrb	r2, [r1, #0]
   d74bc:	701a      	strb	r2, [r3, #0]
}
   d74be:	bd10      	pop	{r4, pc}
   d74c0:	000dbc58 	.word	0x000dbc58

000d74c4 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d74c4:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d74c6:	2b04      	cmp	r3, #4
   d74c8:	d101      	bne.n	d74ce <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d74ca:	6840      	ldr	r0, [r0, #4]
   d74cc:	e008      	b.n	d74e0 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d74ce:	2b06      	cmp	r3, #6
   d74d0:	d10a      	bne.n	d74e8 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d74d2:	6843      	ldr	r3, [r0, #4]
   d74d4:	b953      	cbnz	r3, d74ec <_ZNK9IPAddresscvbEv+0x28>
   d74d6:	6883      	ldr	r3, [r0, #8]
   d74d8:	b943      	cbnz	r3, d74ec <_ZNK9IPAddresscvbEv+0x28>
   d74da:	68c3      	ldr	r3, [r0, #12]
   d74dc:	b933      	cbnz	r3, d74ec <_ZNK9IPAddresscvbEv+0x28>
   d74de:	6900      	ldr	r0, [r0, #16]
   d74e0:	3000      	adds	r0, #0
   d74e2:	bf18      	it	ne
   d74e4:	2001      	movne	r0, #1
   d74e6:	4770      	bx	lr
    } else {
        return false;
   d74e8:	2000      	movs	r0, #0
   d74ea:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d74ec:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d74ee:	4770      	bx	lr

000d74f0 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d74f0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d74f2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d74f6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d74fa:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d74fe:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d7502:	2304      	movs	r3, #4
   d7504:	6041      	str	r1, [r0, #4]
   d7506:	7503      	strb	r3, [r0, #20]
   d7508:	bd10      	pop	{r4, pc}

000d750a <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d750a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d750c:	780d      	ldrb	r5, [r1, #0]
   d750e:	788b      	ldrb	r3, [r1, #2]
   d7510:	784a      	ldrb	r2, [r1, #1]
   d7512:	78c9      	ldrb	r1, [r1, #3]
   d7514:	9100      	str	r1, [sp, #0]
   d7516:	4629      	mov	r1, r5
   d7518:	f7ff ffea 	bl	d74f0 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d751c:	b003      	add	sp, #12
   d751e:	bd30      	pop	{r4, r5, pc}

000d7520 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7520:	7441      	strb	r1, [r0, #17]
   d7522:	4770      	bx	lr

000d7524 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d7524:	4770      	bx	lr

000d7526 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d7526:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d7528:	2100      	movs	r1, #0
   d752a:	7c00      	ldrb	r0, [r0, #16]
   d752c:	f7fe fd84 	bl	d6038 <HAL_USB_USART_Receive_Data>
}
   d7530:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7534:	bf28      	it	cs
   d7536:	f04f 30ff 	movcs.w	r0, #4294967295
   d753a:	bd08      	pop	{r3, pc}

000d753c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d753c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d753e:	2101      	movs	r1, #1
   d7540:	7c00      	ldrb	r0, [r0, #16]
   d7542:	f7fe fd79 	bl	d6038 <HAL_USB_USART_Receive_Data>
}
   d7546:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d754a:	bf28      	it	cs
   d754c:	f04f 30ff 	movcs.w	r0, #4294967295
   d7550:	bd08      	pop	{r3, pc}

000d7552 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d7552:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d7554:	7c00      	ldrb	r0, [r0, #16]
   d7556:	f7fe fd67 	bl	d6028 <HAL_USB_USART_Available_Data_For_Write>
}
   d755a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d755e:	bd08      	pop	{r3, pc}

000d7560 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d7560:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d7562:	7c00      	ldrb	r0, [r0, #16]
   d7564:	f7fe fd58 	bl	d6018 <HAL_USB_USART_Available_Data>
}
   d7568:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d756c:	bd08      	pop	{r3, pc}

000d756e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d756e:	7c00      	ldrb	r0, [r0, #16]
   d7570:	f7fe bd72 	b.w	d6058 <HAL_USB_USART_Flush_Data>

000d7574 <_ZN9USBSerialD0Ev>:
   d7574:	b510      	push	{r4, lr}
   d7576:	2114      	movs	r1, #20
   d7578:	4604      	mov	r4, r0
   d757a:	f000 febf 	bl	d82fc <_ZdlPvj>
   d757e:	4620      	mov	r0, r4
   d7580:	bd10      	pop	{r4, pc}

000d7582 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d7582:	b538      	push	{r3, r4, r5, lr}
   d7584:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7586:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d7588:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d758a:	f7fe fd4d 	bl	d6028 <HAL_USB_USART_Available_Data_For_Write>
   d758e:	2800      	cmp	r0, #0
   d7590:	dc01      	bgt.n	d7596 <_ZN9USBSerial5writeEh+0x14>
   d7592:	7c60      	ldrb	r0, [r4, #17]
   d7594:	b128      	cbz	r0, d75a2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d7596:	4629      	mov	r1, r5
   d7598:	7c20      	ldrb	r0, [r4, #16]
   d759a:	f7fe fd55 	bl	d6048 <HAL_USB_USART_Send_Data>
   d759e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d75a2:	bd38      	pop	{r3, r4, r5, pc}

000d75a4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d75a4:	b510      	push	{r4, lr}
   d75a6:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d75a8:	2300      	movs	r3, #0
   d75aa:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d75ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d75b0:	60a3      	str	r3, [r4, #8]
   d75b2:	4b05      	ldr	r3, [pc, #20]	; (d75c8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d75b4:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d75b6:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d75b8:	4608      	mov	r0, r1
{
  _serial = serial;
   d75ba:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d75bc:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d75be:	4611      	mov	r1, r2
   d75c0:	f7fe fd1a 	bl	d5ff8 <HAL_USB_USART_Init>
}
   d75c4:	4620      	mov	r0, r4
   d75c6:	bd10      	pop	{r4, pc}
   d75c8:	000dbc6c 	.word	0x000dbc6c

000d75cc <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d75cc:	2200      	movs	r2, #0
   d75ce:	7c00      	ldrb	r0, [r0, #16]
   d75d0:	f7fe bd1a 	b.w	d6008 <HAL_USB_USART_Begin>

000d75d4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d75d4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d75d6:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d75d8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d75da:	2100      	movs	r1, #0
   d75dc:	f003 fab2 	bl	dab44 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d75e0:	4620      	mov	r0, r4
   d75e2:	bd10      	pop	{r4, pc}

000d75e4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d75e4:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d75e6:	4d0e      	ldr	r5, [pc, #56]	; (d7620 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d75e8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d75ea:	a801      	add	r0, sp, #4
   d75ec:	f7ff fff2 	bl	d75d4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d75f0:	6829      	ldr	r1, [r5, #0]
   d75f2:	f011 0401 	ands.w	r4, r1, #1
   d75f6:	d110      	bne.n	d761a <_Z16_fetch_usbserialv+0x36>
   d75f8:	4628      	mov	r0, r5
   d75fa:	f7fc fd5f 	bl	d40bc <__cxa_guard_acquire>
   d75fe:	b160      	cbz	r0, d761a <_Z16_fetch_usbserialv+0x36>
   d7600:	aa01      	add	r2, sp, #4
   d7602:	4621      	mov	r1, r4
   d7604:	4807      	ldr	r0, [pc, #28]	; (d7624 <_Z16_fetch_usbserialv+0x40>)
   d7606:	f7ff ffcd 	bl	d75a4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d760a:	4628      	mov	r0, r5
   d760c:	f7fc fd5b 	bl	d40c6 <__cxa_guard_release>
   d7610:	4a05      	ldr	r2, [pc, #20]	; (d7628 <_Z16_fetch_usbserialv+0x44>)
   d7612:	4906      	ldr	r1, [pc, #24]	; (d762c <_Z16_fetch_usbserialv+0x48>)
   d7614:	4803      	ldr	r0, [pc, #12]	; (d7624 <_Z16_fetch_usbserialv+0x40>)
   d7616:	f000 fe63 	bl	d82e0 <__aeabi_atexit>
	return _usbserial;
}
   d761a:	4802      	ldr	r0, [pc, #8]	; (d7624 <_Z16_fetch_usbserialv+0x40>)
   d761c:	b007      	add	sp, #28
   d761e:	bd30      	pop	{r4, r5, pc}
   d7620:	2003e3dc 	.word	0x2003e3dc
   d7624:	2003e3e0 	.word	0x2003e3e0
   d7628:	2003e170 	.word	0x2003e170
   d762c:	000d7525 	.word	0x000d7525

000d7630 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d7630:	4770      	bx	lr

000d7632 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7632:	7441      	strb	r1, [r0, #17]
   d7634:	4770      	bx	lr

000d7636 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d7636:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d7638:	7c00      	ldrb	r0, [r0, #16]
   d763a:	f7fe fc4d 	bl	d5ed8 <HAL_USART_Available_Data_For_Write>
}
   d763e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7642:	bd08      	pop	{r3, pc}

000d7644 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d7644:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d7646:	7c00      	ldrb	r0, [r0, #16]
   d7648:	f7fe fc1e 	bl	d5e88 <HAL_USART_Available_Data>
}
   d764c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7650:	bd08      	pop	{r3, pc}

000d7652 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d7652:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d7654:	7c00      	ldrb	r0, [r0, #16]
   d7656:	f7fe fc27 	bl	d5ea8 <HAL_USART_Peek_Data>
}
   d765a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d765e:	bf28      	it	cs
   d7660:	f04f 30ff 	movcs.w	r0, #4294967295
   d7664:	bd08      	pop	{r3, pc}

000d7666 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d7666:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d7668:	7c00      	ldrb	r0, [r0, #16]
   d766a:	f7fe fc15 	bl	d5e98 <HAL_USART_Read_Data>
}
   d766e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7672:	bf28      	it	cs
   d7674:	f04f 30ff 	movcs.w	r0, #4294967295
   d7678:	bd08      	pop	{r3, pc}

000d767a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d767a:	7c00      	ldrb	r0, [r0, #16]
   d767c:	f7fe bc1c 	b.w	d5eb8 <HAL_USART_Flush_Data>

000d7680 <_ZN11USARTSerialD0Ev>:
   d7680:	b510      	push	{r4, lr}
   d7682:	2114      	movs	r1, #20
   d7684:	4604      	mov	r4, r0
   d7686:	f000 fe39 	bl	d82fc <_ZdlPvj>
   d768a:	4620      	mov	r0, r4
   d768c:	bd10      	pop	{r4, pc}

000d768e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d768e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7690:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d7692:	4604      	mov	r4, r0
   d7694:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7696:	b925      	cbnz	r5, d76a2 <_ZN11USARTSerial5writeEh+0x14>
   d7698:	7c00      	ldrb	r0, [r0, #16]
   d769a:	f7fe fc1d 	bl	d5ed8 <HAL_USART_Available_Data_For_Write>
   d769e:	2800      	cmp	r0, #0
   d76a0:	dd05      	ble.n	d76ae <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d76a2:	4631      	mov	r1, r6
   d76a4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d76a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d76aa:	f7fe bbe5 	b.w	d5e78 <HAL_USART_Write_Data>
  }
  return 0;
}
   d76ae:	4628      	mov	r0, r5
   d76b0:	bd70      	pop	{r4, r5, r6, pc}
	...

000d76b4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d76b4:	b510      	push	{r4, lr}
   d76b6:	4604      	mov	r4, r0
   d76b8:	4608      	mov	r0, r1
   d76ba:	4611      	mov	r1, r2
   d76bc:	2200      	movs	r2, #0
   d76be:	6062      	str	r2, [r4, #4]
   d76c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d76c4:	60a2      	str	r2, [r4, #8]
   d76c6:	4a05      	ldr	r2, [pc, #20]	; (d76dc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d76c8:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d76ca:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d76cc:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d76ce:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d76d0:	461a      	mov	r2, r3
   d76d2:	f7fe fbc9 	bl	d5e68 <HAL_USART_Init>
}
   d76d6:	4620      	mov	r0, r4
   d76d8:	bd10      	pop	{r4, pc}
   d76da:	bf00      	nop
   d76dc:	000dbc9c 	.word	0x000dbc9c

000d76e0 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d76e0:	7c00      	ldrb	r0, [r0, #16]
   d76e2:	f7fe bbf1 	b.w	d5ec8 <HAL_USART_Is_Enabled>
	...

000d76e8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d76e8:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d76ea:	4d0c      	ldr	r5, [pc, #48]	; (d771c <_Z22__fetch_global_Serial1v+0x34>)
   d76ec:	6829      	ldr	r1, [r5, #0]
   d76ee:	f011 0401 	ands.w	r4, r1, #1
   d76f2:	d111      	bne.n	d7718 <_Z22__fetch_global_Serial1v+0x30>
   d76f4:	4628      	mov	r0, r5
   d76f6:	f7fc fce1 	bl	d40bc <__cxa_guard_acquire>
   d76fa:	b168      	cbz	r0, d7718 <_Z22__fetch_global_Serial1v+0x30>
   d76fc:	4a08      	ldr	r2, [pc, #32]	; (d7720 <_Z22__fetch_global_Serial1v+0x38>)
   d76fe:	4b09      	ldr	r3, [pc, #36]	; (d7724 <_Z22__fetch_global_Serial1v+0x3c>)
   d7700:	4809      	ldr	r0, [pc, #36]	; (d7728 <_Z22__fetch_global_Serial1v+0x40>)
   d7702:	4621      	mov	r1, r4
   d7704:	f7ff ffd6 	bl	d76b4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d7708:	4628      	mov	r0, r5
   d770a:	f7fc fcdc 	bl	d40c6 <__cxa_guard_release>
   d770e:	4a07      	ldr	r2, [pc, #28]	; (d772c <_Z22__fetch_global_Serial1v+0x44>)
   d7710:	4907      	ldr	r1, [pc, #28]	; (d7730 <_Z22__fetch_global_Serial1v+0x48>)
   d7712:	4805      	ldr	r0, [pc, #20]	; (d7728 <_Z22__fetch_global_Serial1v+0x40>)
   d7714:	f000 fde4 	bl	d82e0 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d7718:	4803      	ldr	r0, [pc, #12]	; (d7728 <_Z22__fetch_global_Serial1v+0x40>)
   d771a:	bd38      	pop	{r3, r4, r5, pc}
   d771c:	2003e48c 	.word	0x2003e48c
   d7720:	2003e490 	.word	0x2003e490
   d7724:	2003e408 	.word	0x2003e408
   d7728:	2003e3f4 	.word	0x2003e3f4
   d772c:	2003e170 	.word	0x2003e170
   d7730:	000d7631 	.word	0x000d7631

000d7734 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d7734:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7736:	6883      	ldr	r3, [r0, #8]
   d7738:	4604      	mov	r4, r0
   d773a:	b90b      	cbnz	r3, d7740 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d773c:	f000 fdf1 	bl	d8322 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7740:	68c3      	ldr	r3, [r0, #12]
   d7742:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d7744:	68a3      	ldr	r3, [r4, #8]
   d7746:	b11b      	cbz	r3, d7750 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7748:	2203      	movs	r2, #3
   d774a:	4621      	mov	r1, r4
   d774c:	4620      	mov	r0, r4
   d774e:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d7750:	4620      	mov	r0, r4
   d7752:	2110      	movs	r1, #16
}
   d7754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d7758:	f000 bdd0 	b.w	d82fc <_ZdlPvj>

000d775c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d775c:	4770      	bx	lr

000d775e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d775e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7760:	4606      	mov	r6, r0
   d7762:	4615      	mov	r5, r2
   d7764:	460c      	mov	r4, r1
   d7766:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7768:	42bc      	cmp	r4, r7
   d776a:	d006      	beq.n	d777a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d776c:	6833      	ldr	r3, [r6, #0]
   d776e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d7772:	689b      	ldr	r3, [r3, #8]
   d7774:	4630      	mov	r0, r6
   d7776:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7778:	e7f6      	b.n	d7768 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d777a:	4628      	mov	r0, r5
   d777c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d777e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d777e:	2200      	movs	r2, #0
   d7780:	7c00      	ldrb	r0, [r0, #16]
   d7782:	f7fe bbc9 	b.w	d5f18 <HAL_I2C_Write_Data>

000d7786 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d7786:	2100      	movs	r1, #0
   d7788:	7c00      	ldrb	r0, [r0, #16]
   d778a:	f7fe bbcd 	b.w	d5f28 <HAL_I2C_Available_Data>

000d778e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d778e:	2100      	movs	r1, #0
   d7790:	7c00      	ldrb	r0, [r0, #16]
   d7792:	f7fe bbd1 	b.w	d5f38 <HAL_I2C_Read_Data>

000d7796 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d7796:	2100      	movs	r1, #0
   d7798:	7c00      	ldrb	r0, [r0, #16]
   d779a:	f7fe bbd5 	b.w	d5f48 <HAL_I2C_Peek_Data>

000d779e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d779e:	2100      	movs	r1, #0
   d77a0:	7c00      	ldrb	r0, [r0, #16]
   d77a2:	f7fe bbd9 	b.w	d5f58 <HAL_I2C_Flush_Data>

000d77a6 <_ZN7TwoWireD0Ev>:
   d77a6:	b510      	push	{r4, lr}
   d77a8:	2114      	movs	r1, #20
   d77aa:	4604      	mov	r4, r0
   d77ac:	f000 fda6 	bl	d82fc <_ZdlPvj>
   d77b0:	4620      	mov	r0, r4
   d77b2:	bd10      	pop	{r4, pc}

000d77b4 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d77b4:	b510      	push	{r4, lr}
   d77b6:	4604      	mov	r4, r0
   d77b8:	2300      	movs	r3, #0
   d77ba:	6063      	str	r3, [r4, #4]
   d77bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d77c0:	60a3      	str	r3, [r4, #8]
   d77c2:	4b04      	ldr	r3, [pc, #16]	; (d77d4 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d77c4:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d77c6:	4608      	mov	r0, r1
   d77c8:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d77ca:	4611      	mov	r1, r2
   d77cc:	f7fe fbd4 	bl	d5f78 <HAL_I2C_Init>
}
   d77d0:	4620      	mov	r0, r4
   d77d2:	bd10      	pop	{r4, pc}
   d77d4:	000dbccc 	.word	0x000dbccc

000d77d8 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d77d8:	2300      	movs	r3, #0
   d77da:	461a      	mov	r2, r3
   d77dc:	4619      	mov	r1, r3
   d77de:	7c00      	ldrb	r0, [r0, #16]
   d77e0:	f7fe bb82 	b.w	d5ee8 <HAL_I2C_Begin>

000d77e4 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d77e4:	b570      	push	{r4, r5, r6, lr}
   d77e6:	460c      	mov	r4, r1
   d77e8:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d77ea:	2514      	movs	r5, #20
   d77ec:	4606      	mov	r6, r0
   d77ee:	462a      	mov	r2, r5
   d77f0:	2100      	movs	r1, #0
   d77f2:	a801      	add	r0, sp, #4
   d77f4:	f003 f9a6 	bl	dab44 <memset>
   d77f8:	7823      	ldrb	r3, [r4, #0]
   d77fa:	f88d 3008 	strb.w	r3, [sp, #8]
   d77fe:	6863      	ldr	r3, [r4, #4]
   d7800:	9303      	str	r3, [sp, #12]
   d7802:	68e3      	ldr	r3, [r4, #12]
   d7804:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d7806:	2200      	movs	r2, #0
   d7808:	7a23      	ldrb	r3, [r4, #8]
   d780a:	7c30      	ldrb	r0, [r6, #16]
   d780c:	f8ad 5004 	strh.w	r5, [sp, #4]
   d7810:	a901      	add	r1, sp, #4
   d7812:	9305      	str	r3, [sp, #20]
   d7814:	f7fe fbb8 	bl	d5f88 <HAL_I2C_Request_Data_Ex>
}
   d7818:	b006      	add	sp, #24
   d781a:	bd70      	pop	{r4, r5, r6, pc}

000d781c <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d781c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d781e:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d7820:	f88d 1000 	strb.w	r1, [sp]
   d7824:	f04f 0164 	mov.w	r1, #100	; 0x64
   d7828:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d782a:	bf18      	it	ne
   d782c:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d782e:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d7830:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d7832:	f88d 3008 	strb.w	r3, [sp, #8]
   d7836:	f7ff ffd5 	bl	d77e4 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d783a:	b005      	add	sp, #20
   d783c:	f85d fb04 	ldr.w	pc, [sp], #4

000d7840 <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   d7840:	2301      	movs	r3, #1
   d7842:	f7ff bfeb 	b.w	d781c <_ZN7TwoWire11requestFromEhjh>

000d7846 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d7846:	2200      	movs	r2, #0
   d7848:	7c00      	ldrb	r0, [r0, #16]
   d784a:	f7fe bb55 	b.w	d5ef8 <HAL_I2C_Begin_Transmission>

000d784e <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d784e:	2200      	movs	r2, #0
   d7850:	7c00      	ldrb	r0, [r0, #16]
   d7852:	f7fe bb59 	b.w	d5f08 <HAL_I2C_End_Transmission>

000d7856 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d7856:	2101      	movs	r1, #1
   d7858:	f7ff bff9 	b.w	d784e <_ZN7TwoWire15endTransmissionEh>

000d785c <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d785c:	2100      	movs	r1, #0
   d785e:	7c00      	ldrb	r0, [r0, #16]
   d7860:	f7fe bb82 	b.w	d5f68 <HAL_I2C_Is_Enabled>

000d7864 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7864:	2200      	movs	r2, #0
   d7866:	4611      	mov	r1, r2
   d7868:	6840      	ldr	r0, [r0, #4]
   d786a:	f7fe bc89 	b.w	d6180 <network_listening>

000d786e <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d786e:	2200      	movs	r2, #0
   d7870:	4611      	mov	r1, r2
   d7872:	6840      	ldr	r0, [r0, #4]
   d7874:	f7fe bc94 	b.w	d61a0 <network_get_listen_timeout>

000d7878 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d7878:	2200      	movs	r2, #0
   d787a:	6840      	ldr	r0, [r0, #4]
   d787c:	f7fe bc88 	b.w	d6190 <network_set_listen_timeout>

000d7880 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7880:	2200      	movs	r2, #0
   d7882:	f081 0101 	eor.w	r1, r1, #1
   d7886:	6840      	ldr	r0, [r0, #4]
   d7888:	f7fe bc72 	b.w	d6170 <network_listen>

000d788c <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d788c:	2300      	movs	r3, #0
   d788e:	461a      	mov	r2, r3
   d7890:	2101      	movs	r1, #1
   d7892:	6840      	ldr	r0, [r0, #4]
   d7894:	f7fe bc64 	b.w	d6160 <network_off>

000d7898 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d7898:	2300      	movs	r3, #0
   d789a:	461a      	mov	r2, r3
   d789c:	4619      	mov	r1, r3
   d789e:	6840      	ldr	r0, [r0, #4]
   d78a0:	f7fe bc56 	b.w	d6150 <network_on>

000d78a4 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d78a4:	2200      	movs	r2, #0
   d78a6:	4611      	mov	r1, r2
   d78a8:	6840      	ldr	r0, [r0, #4]
   d78aa:	f7fe bc49 	b.w	d6140 <network_ready>

000d78ae <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d78ae:	2200      	movs	r2, #0
   d78b0:	4611      	mov	r1, r2
   d78b2:	6840      	ldr	r0, [r0, #4]
   d78b4:	f7fe bc34 	b.w	d6120 <network_connecting>

000d78b8 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d78b8:	2200      	movs	r2, #0
   d78ba:	2102      	movs	r1, #2
   d78bc:	6840      	ldr	r0, [r0, #4]
   d78be:	f7fe bc37 	b.w	d6130 <network_disconnect>

000d78c2 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d78c2:	2300      	movs	r3, #0
   d78c4:	461a      	mov	r2, r3
   d78c6:	6840      	ldr	r0, [r0, #4]
   d78c8:	f7fe bc22 	b.w	d6110 <network_connect>

000d78cc <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d78cc:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d78ce:	4605      	mov	r5, r0
   d78d0:	b188      	cbz	r0, d78f6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d78d2:	6804      	ldr	r4, [r0, #0]
   d78d4:	b14c      	cbz	r4, d78ea <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d78d6:	68a3      	ldr	r3, [r4, #8]
   d78d8:	b11b      	cbz	r3, d78e2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d78da:	2203      	movs	r2, #3
   d78dc:	4621      	mov	r1, r4
   d78de:	4620      	mov	r0, r4
   d78e0:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d78e2:	2110      	movs	r1, #16
   d78e4:	4620      	mov	r0, r4
   d78e6:	f000 fd09 	bl	d82fc <_ZdlPvj>
   d78ea:	4628      	mov	r0, r5
   d78ec:	2114      	movs	r1, #20
      }
   d78ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d78f2:	f000 bd03 	b.w	d82fc <_ZdlPvj>
   d78f6:	bd38      	pop	{r3, r4, r5, pc}

000d78f8 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d78f8:	b110      	cbz	r0, d7900 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d78fa:	6803      	ldr	r3, [r0, #0]
   d78fc:	685b      	ldr	r3, [r3, #4]
   d78fe:	4718      	bx	r3
   d7900:	4770      	bx	lr

000d7902 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d7902:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d7904:	6803      	ldr	r3, [r0, #0]
   d7906:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d7908:	b1bb      	cbz	r3, d793a <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d790a:	6858      	ldr	r0, [r3, #4]
   d790c:	f7fe fa6c 	bl	d5de8 <os_thread_is_current>
   d7910:	b978      	cbnz	r0, d7932 <_ZN6ThreadD1Ev+0x30>
   d7912:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d7914:	7c5a      	ldrb	r2, [r3, #17]
   d7916:	b912      	cbnz	r2, d791e <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d7918:	6858      	ldr	r0, [r3, #4]
   d791a:	f7fe fa6d 	bl	d5df8 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d791e:	6823      	ldr	r3, [r4, #0]
   d7920:	6858      	ldr	r0, [r3, #4]
   d7922:	f7fe fa71 	bl	d5e08 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7926:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d7928:	2300      	movs	r3, #0
   d792a:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d792c:	b128      	cbz	r0, d793a <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d792e:	f7ff ffcd 	bl	d78cc <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7932:	6820      	ldr	r0, [r4, #0]
   d7934:	b108      	cbz	r0, d793a <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d7936:	f7ff ffc9 	bl	d78cc <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d793a:	4620      	mov	r0, r4
   d793c:	bd10      	pop	{r4, pc}

000d793e <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d793e:	b538      	push	{r3, r4, r5, lr}
   d7940:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7942:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d7946:	b108      	cbz	r0, d794c <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d7948:	f7fc fbab 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d794c:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d7950:	b108      	cbz	r0, d7956 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d7952:	f7fe fa69 	bl	d5e28 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7956:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d795a:	b135      	cbz	r5, d796a <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d795c:	4628      	mov	r0, r5
   d795e:	f7ff ffd0 	bl	d7902 <_ZN6ThreadD1Ev>
   d7962:	2104      	movs	r1, #4
   d7964:	4628      	mov	r0, r5
   d7966:	f000 fcc9 	bl	d82fc <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d796a:	6820      	ldr	r0, [r4, #0]
   d796c:	b108      	cbz	r0, d7972 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d796e:	f7ff ffc3 	bl	d78f8 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d7972:	4620      	mov	r0, r4
   d7974:	bd38      	pop	{r3, r4, r5, pc}
	...

000d7978 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d7978:	b510      	push	{r4, lr}
   d797a:	4b04      	ldr	r3, [pc, #16]	; (d798c <_ZN5spark9MeshClassD1Ev+0x14>)
   d797c:	4604      	mov	r4, r0
   d797e:	f840 3b08 	str.w	r3, [r0], #8
   d7982:	f7ff ffdc 	bl	d793e <_ZN5spark11MeshPublishD1Ev>
   d7986:	4620      	mov	r0, r4
   d7988:	bd10      	pop	{r4, pc}
   d798a:	bf00      	nop
   d798c:	000dbcf4 	.word	0x000dbcf4

000d7990 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d7990:	b538      	push	{r3, r4, r5, lr}
   d7992:	4c0e      	ldr	r4, [pc, #56]	; (d79cc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d7994:	4b0e      	ldr	r3, [pc, #56]	; (d79d0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d7996:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d7998:	2500      	movs	r5, #0
   d799a:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d799c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d79a0:	6063      	str	r3, [r4, #4]
   d79a2:	60a5      	str	r5, [r4, #8]
   d79a4:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d79a8:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d79ac:	f7fe fa34 	bl	d5e18 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d79b0:	4b08      	ldr	r3, [pc, #32]	; (d79d4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d79b2:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d79b6:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d79ba:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d79bc:	4620      	mov	r0, r4
   d79be:	4a06      	ldr	r2, [pc, #24]	; (d79d8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d79c0:	4906      	ldr	r1, [pc, #24]	; (d79dc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d79c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d79c6:	f000 bc8b 	b.w	d82e0 <__aeabi_atexit>
   d79ca:	bf00      	nop
   d79cc:	2003e514 	.word	0x2003e514
   d79d0:	000dbddc 	.word	0x000dbddc
   d79d4:	000dbcf4 	.word	0x000dbcf4
   d79d8:	2003e170 	.word	0x2003e170
   d79dc:	000d7979 	.word	0x000d7979

000d79e0 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d79e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d79e2:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d79e4:	6803      	ldr	r3, [r0, #0]
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d79e6:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d79ea:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d79ec:	2201      	movs	r2, #1
   d79ee:	f04f 33ff 	mov.w	r3, #4294967295
   d79f2:	4621      	mov	r1, r4
   d79f4:	47a8      	blx	r5
}
   d79f6:	b003      	add	sp, #12
   d79f8:	bd30      	pop	{r4, r5, pc}

000d79fa <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d79fa:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d79fc:	6803      	ldr	r3, [r0, #0]
   d79fe:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d7a00:	f04f 33ff 	mov.w	r3, #4294967295
   d7a04:	46a4      	mov	ip, r4
}
   d7a06:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d7a0a:	4760      	bx	ip

000d7a0c <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d7a0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7a0e:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   d7a10:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d7a12:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   d7a16:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d7a18:	4621      	mov	r1, r4
   d7a1a:	4613      	mov	r3, r2
   d7a1c:	2201      	movs	r2, #1
   d7a1e:	47a8      	blx	r5
}
   d7a20:	b003      	add	sp, #12
   d7a22:	bd30      	pop	{r4, r5, pc}

000d7a24 <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   d7a24:	4770      	bx	lr

000d7a26 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d7a26:	b538      	push	{r3, r4, r5, lr}
   d7a28:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d7a2a:	681a      	ldr	r2, [r3, #0]
   d7a2c:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d7a2e:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   d7a30:	da05      	bge.n	d7a3e <_ZN9TCPClient9connectedEv+0x18>
   d7a32:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7a36:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7a3a:	429a      	cmp	r2, r3
   d7a3c:	d001      	beq.n	d7a42 <_ZN9TCPClient9connectedEv+0x1c>
   d7a3e:	2501      	movs	r5, #1
   d7a40:	e00b      	b.n	d7a5a <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   d7a42:	6803      	ldr	r3, [r0, #0]
   d7a44:	691b      	ldr	r3, [r3, #16]
   d7a46:	4798      	blx	r3
   d7a48:	2800      	cmp	r0, #0
   d7a4a:	bf14      	ite	ne
   d7a4c:	2501      	movne	r5, #1
   d7a4e:	2500      	moveq	r5, #0
        if (!rv) {
   d7a50:	d103      	bne.n	d7a5a <_ZN9TCPClient9connectedEv+0x34>
            stop();
   d7a52:	6823      	ldr	r3, [r4, #0]
   d7a54:	4620      	mov	r0, r4
   d7a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7a58:	4798      	blx	r3
        }
    }
    return rv;
}
   d7a5a:	4628      	mov	r0, r5
   d7a5c:	bd38      	pop	{r3, r4, r5, pc}

000d7a5e <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d7a5e:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   d7a60:	6818      	ldr	r0, [r3, #0]
}
   d7a62:	43c0      	mvns	r0, r0
   d7a64:	0fc0      	lsrs	r0, r0, #31
   d7a66:	4770      	bx	lr

000d7a68 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d7a68:	4770      	bx	lr

000d7a6a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d7a6a:	2000      	movs	r0, #0
   d7a6c:	4770      	bx	lr

000d7a6e <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d7a6e:	b510      	push	{r4, lr}
   d7a70:	2114      	movs	r1, #20
   d7a72:	4604      	mov	r4, r0
   d7a74:	f000 fc42 	bl	d82fc <_ZdlPvj>
   d7a78:	4620      	mov	r0, r4
   d7a7a:	bd10      	pop	{r4, pc}

000d7a7c <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d7a7c:	f7fc bb0f 	b.w	d409e <_ZdlPv>

000d7a80 <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d7a80:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d7a82:	4616      	mov	r6, r2

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   d7a84:	2200      	movs	r2, #0
   d7a86:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   d7a88:	9202      	str	r2, [sp, #8]
   d7a8a:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   d7a8c:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d7a8e:	4604      	mov	r4, r0
   d7a90:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   d7a92:	d008      	beq.n	d7aa6 <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   d7a94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7a98:	fbb3 f1f2 	udiv	r1, r3, r2
   d7a9c:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d7a9e:	fb02 3111 	mls	r1, r2, r1, r3
   d7aa2:	434a      	muls	r2, r1
   d7aa4:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d7aa6:	6960      	ldr	r0, [r4, #20]
   d7aa8:	2308      	movs	r3, #8
   d7aaa:	9300      	str	r3, [sp, #0]
   d7aac:	f241 0205 	movw	r2, #4101	; 0x1005
   d7ab0:	446b      	add	r3, sp
   d7ab2:	f640 71ff 	movw	r1, #4095	; 0xfff
   d7ab6:	6800      	ldr	r0, [r0, #0]
   d7ab8:	f7fe fa6e 	bl	d5f98 <sock_setsockopt>
    if (ret < 0) {
   d7abc:	2800      	cmp	r0, #0
   d7abe:	db08      	blt.n	d7ad2 <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   d7ac0:	6960      	ldr	r0, [r4, #20]
   d7ac2:	2300      	movs	r3, #0
   d7ac4:	4632      	mov	r2, r6
   d7ac6:	4629      	mov	r1, r5
   d7ac8:	6800      	ldr	r0, [r0, #0]
   d7aca:	f7fe fa85 	bl	d5fd8 <sock_send>
    if (ret < 0) {
   d7ace:	2800      	cmp	r0, #0
   d7ad0:	da04      	bge.n	d7adc <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   d7ad2:	f7fe fbed 	bl	d62b0 <__errno>
   d7ad6:	6803      	ldr	r3, [r0, #0]
   d7ad8:	6063      	str	r3, [r4, #4]
   d7ada:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   d7adc:	b004      	add	sp, #16
   d7ade:	bd70      	pop	{r4, r5, r6, pc}

000d7ae0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d7ae0:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d7ae2:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d7ae4:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d7ae6:	689b      	ldr	r3, [r3, #8]
   d7ae8:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d7aea:	68a3      	ldr	r3, [r4, #8]
   d7aec:	3b01      	subs	r3, #1
   d7aee:	60a3      	str	r3, [r4, #8]
   d7af0:	b92b      	cbnz	r3, d7afe <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   d7af2:	6823      	ldr	r3, [r4, #0]
   d7af4:	4620      	mov	r0, r4
   d7af6:	68db      	ldr	r3, [r3, #12]
        }
    }
   d7af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d7afc:	4718      	bx	r3
   d7afe:	bd10      	pop	{r4, pc}

000d7b00 <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   d7b00:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d7b02:	4604      	mov	r4, r0
   d7b04:	694d      	ldr	r5, [r1, #20]
   d7b06:	4b05      	ldr	r3, [pc, #20]	; (d7b1c <_ZN9TCPClient8remoteIPEv+0x1c>)
   d7b08:	f844 3b04 	str.w	r3, [r4], #4
   d7b0c:	358c      	adds	r5, #140	; 0x8c
   d7b0e:	4606      	mov	r6, r0
   d7b10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7b12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7b14:	682b      	ldr	r3, [r5, #0]
   d7b16:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d7b18:	4630      	mov	r0, r6
   d7b1a:	bd70      	pop	{r4, r5, r6, pc}
   d7b1c:	000dbc58 	.word	0x000dbc58

000d7b20 <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d7b20:	b510      	push	{r4, lr}
   d7b22:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d7b24:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7b28:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7b2c:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d7b2e:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d7b30:	d005      	beq.n	d7b3e <_ZN9TCPClient4peekEv+0x1e>
   d7b32:	6962      	ldr	r2, [r4, #20]
   d7b34:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d7b38:	4413      	add	r3, r2
   d7b3a:	7918      	ldrb	r0, [r3, #4]
   d7b3c:	bd10      	pop	{r4, pc}
   d7b3e:	6803      	ldr	r3, [r0, #0]
   d7b40:	691b      	ldr	r3, [r3, #16]
   d7b42:	4798      	blx	r3
   d7b44:	2800      	cmp	r0, #0
   d7b46:	d1f4      	bne.n	d7b32 <_ZN9TCPClient4peekEv+0x12>
   d7b48:	f04f 30ff 	mov.w	r0, #4294967295
}
   d7b4c:	bd10      	pop	{r4, pc}

000d7b4e <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d7b4e:	b510      	push	{r4, lr}
   d7b50:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d7b52:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7b56:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7b5a:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d7b5c:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d7b5e:	d008      	beq.n	d7b72 <_ZN9TCPClient4readEv+0x24>
   d7b60:	6962      	ldr	r2, [r4, #20]
   d7b62:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d7b66:	1c59      	adds	r1, r3, #1
   d7b68:	4413      	add	r3, r2
   d7b6a:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   d7b6e:	7918      	ldrb	r0, [r3, #4]
   d7b70:	bd10      	pop	{r4, pc}
   d7b72:	6803      	ldr	r3, [r0, #0]
   d7b74:	691b      	ldr	r3, [r3, #16]
   d7b76:	4798      	blx	r3
   d7b78:	2800      	cmp	r0, #0
   d7b7a:	d1f1      	bne.n	d7b60 <_ZN9TCPClient4readEv+0x12>
   d7b7c:	f04f 30ff 	mov.w	r0, #4294967295
}
   d7b80:	bd10      	pop	{r4, pc}

000d7b82 <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   d7b82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7b84:	6943      	ldr	r3, [r0, #20]
   d7b86:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   d7b88:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7b8c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7b90:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   d7b92:	4605      	mov	r5, r0
   d7b94:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   d7b96:	d106      	bne.n	d7ba6 <_ZN9TCPClient4readEPhj+0x24>
   d7b98:	6803      	ldr	r3, [r0, #0]
   d7b9a:	691b      	ldr	r3, [r3, #16]
   d7b9c:	4798      	blx	r3
   d7b9e:	b910      	cbnz	r0, d7ba6 <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   d7ba0:	f04f 34ff 	mov.w	r4, #4294967295
   d7ba4:	e014      	b.n	d7bd0 <_ZN9TCPClient4readEPhj+0x4e>
   d7ba6:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   d7ba8:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d7bac:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d7bb0:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d7bb2:	42bc      	cmp	r4, r7
   d7bb4:	bf28      	it	cs
   d7bb6:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d7bb8:	4419      	add	r1, r3
   d7bba:	4622      	mov	r2, r4
   d7bbc:	3104      	adds	r1, #4
   d7bbe:	4630      	mov	r0, r6
   d7bc0:	f002 ff9a 	bl	daaf8 <memcpy>
   d7bc4:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d7bc6:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d7bca:	4423      	add	r3, r4
   d7bcc:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   d7bd0:	4620      	mov	r0, r4
   d7bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7bd4 <_ZN9TCPClient7connectEPKctm>:
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d7bd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7bd8:	4698      	mov	r8, r3
    stop();
   d7bda:	6803      	ldr	r3, [r0, #0]
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d7bdc:	b093      	sub	sp, #76	; 0x4c
    stop();
   d7bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d7be0:	460d      	mov	r5, r1
   d7be2:	4606      	mov	r6, r0
   d7be4:	4617      	mov	r7, r2
    stop();
   d7be6:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   d7be8:	ab12      	add	r3, sp, #72	; 0x48
   d7bea:	2400      	movs	r4, #0
   d7bec:	f843 4d48 	str.w	r4, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d7bf0:	4622      	mov	r2, r4
   d7bf2:	4621      	mov	r1, r4
   d7bf4:	4628      	mov	r0, r5
   d7bf6:	f7fe f847 	bl	d5c88 <netdb_getaddrinfo>
   d7bfa:	4681      	mov	r9, r0
   d7bfc:	2800      	cmp	r0, #0
   d7bfe:	d13d      	bne.n	d7c7c <_ZN9TCPClient7connectEPKctm+0xa8>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d7c00:	9b00      	ldr	r3, [sp, #0]
   d7c02:	2b00      	cmp	r3, #0
   d7c04:	d056      	beq.n	d7cb4 <_ZN9TCPClient7connectEPKctm+0xe0>
   d7c06:	695b      	ldr	r3, [r3, #20]
   d7c08:	2b00      	cmp	r3, #0
   d7c0a:	d053      	beq.n	d7cb4 <_ZN9TCPClient7connectEPKctm+0xe0>
        IPAddress addr;
   d7c0c:	a806      	add	r0, sp, #24
   d7c0e:	f7ff fc39 	bl	d7484 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d7c12:	9b00      	ldr	r3, [sp, #0]
   d7c14:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d7c16:	7863      	ldrb	r3, [r4, #1]
   d7c18:	2b02      	cmp	r3, #2
   d7c1a:	d101      	bne.n	d7c20 <_ZN9TCPClient7connectEPKctm+0x4c>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d7c1c:	1d21      	adds	r1, r4, #4
   d7c1e:	e013      	b.n	d7c48 <_ZN9TCPClient7connectEPKctm+0x74>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d7c20:	2b0a      	cmp	r3, #10
   d7c22:	d114      	bne.n	d7c4e <_ZN9TCPClient7connectEPKctm+0x7a>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d7c24:	2211      	movs	r2, #17
   d7c26:	4649      	mov	r1, r9
   d7c28:	a801      	add	r0, sp, #4
   d7c2a:	f002 ff8b 	bl	dab44 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d7c2e:	68a3      	ldr	r3, [r4, #8]
   d7c30:	bb33      	cbnz	r3, d7c80 <_ZN9TCPClient7connectEPKctm+0xac>
   d7c32:	68e3      	ldr	r3, [r4, #12]
   d7c34:	bb23      	cbnz	r3, d7c80 <_ZN9TCPClient7connectEPKctm+0xac>
   d7c36:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d7c3a:	6925      	ldr	r5, [r4, #16]
   d7c3c:	f7fe f904 	bl	d5e48 <inet_htonl>
   d7c40:	4285      	cmp	r5, r0
   d7c42:	d11d      	bne.n	d7c80 <_ZN9TCPClient7connectEPKctm+0xac>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d7c44:	f104 0114 	add.w	r1, r4, #20
   d7c48:	a806      	add	r0, sp, #24
   d7c4a:	f7ff fc5e 	bl	d750a <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d7c4e:	a806      	add	r0, sp, #24
   d7c50:	f7ff fc38 	bl	d74c4 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d7c54:	2800      	cmp	r0, #0
   d7c56:	d02d      	beq.n	d7cb4 <_ZN9TCPClient7connectEPKctm+0xe0>
            return connect(addr, port, nif);
   d7c58:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d7c5a:	ad07      	add	r5, sp, #28
   d7c5c:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d7c60:	4b18      	ldr	r3, [pc, #96]	; (d7cc4 <_ZN9TCPClient7connectEPKctm+0xf0>)
   d7c62:	930c      	str	r3, [sp, #48]	; 0x30
   d7c64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7c66:	ac0d      	add	r4, sp, #52	; 0x34
   d7c68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7c6a:	682b      	ldr	r3, [r5, #0]
   d7c6c:	7023      	strb	r3, [r4, #0]
   d7c6e:	463a      	mov	r2, r7
   d7c70:	4643      	mov	r3, r8
   d7c72:	a90c      	add	r1, sp, #48	; 0x30
   d7c74:	4630      	mov	r0, r6
   d7c76:	47c8      	blx	r9
   d7c78:	4681      	mov	r9, r0
   d7c7a:	e01b      	b.n	d7cb4 <_ZN9TCPClient7connectEPKctm+0xe0>

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d7c7c:	46a1      	mov	r9, r4
   d7c7e:	e019      	b.n	d7cb4 <_ZN9TCPClient7connectEPKctm+0xe0>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7c80:	f104 0308 	add.w	r3, r4, #8
   d7c84:	ad01      	add	r5, sp, #4
   d7c86:	3418      	adds	r4, #24
   d7c88:	6818      	ldr	r0, [r3, #0]
   d7c8a:	6859      	ldr	r1, [r3, #4]
   d7c8c:	462a      	mov	r2, r5
   d7c8e:	c203      	stmia	r2!, {r0, r1}
   d7c90:	3308      	adds	r3, #8
   d7c92:	42a3      	cmp	r3, r4
   d7c94:	4615      	mov	r5, r2
   d7c96:	d1f7      	bne.n	d7c88 <_ZN9TCPClient7connectEPKctm+0xb4>
            a.v = 6;
   d7c98:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d7c9a:	a901      	add	r1, sp, #4
   d7c9c:	a80c      	add	r0, sp, #48	; 0x30
   d7c9e:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d7ca0:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d7ca4:	f7ff fbfc 	bl	d74a0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7ca8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7caa:	ac07      	add	r4, sp, #28
   d7cac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7cae:	682b      	ldr	r3, [r5, #0]
   d7cb0:	7023      	strb	r3, [r4, #0]
   d7cb2:	e7cc      	b.n	d7c4e <_ZN9TCPClient7connectEPKctm+0x7a>
// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d7cb4:	9800      	ldr	r0, [sp, #0]
   d7cb6:	f7fd ffdf 	bl	d5c78 <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return 0; // error, could not connect
}
   d7cba:	4648      	mov	r0, r9
   d7cbc:	b013      	add	sp, #76	; 0x4c
   d7cbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d7cc2:	bf00      	nop
   d7cc4:	000dbc58 	.word	0x000dbc58

000d7cc8 <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   d7cc8:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d7cca:	2300      	movs	r3, #0
   d7ccc:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d7cd0:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d7cd2:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   d7cd6:	4770      	bx	lr

000d7cd8 <_ZN9TCPClient7connectE9IPAddresstm>:

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d7cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7cdc:	461e      	mov	r6, r3
    stop();
   d7cde:	6803      	ldr	r3, [r0, #0]

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d7ce0:	460c      	mov	r4, r1
   d7ce2:	b08a      	sub	sp, #40	; 0x28
    stop();
   d7ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d7ce6:	4605      	mov	r5, r0
   d7ce8:	4617      	mov	r7, r2
    stop();
   d7cea:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d7cec:	7d23      	ldrb	r3, [r4, #20]
   d7cee:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d7cf2:	2b04      	cmp	r3, #4
   d7cf4:	bf0c      	ite	eq
   d7cf6:	2002      	moveq	r0, #2
   d7cf8:	200a      	movne	r0, #10
   d7cfa:	2206      	movs	r2, #6
   d7cfc:	2101      	movs	r1, #1
   d7cfe:	f7fe f973 	bl	d5fe8 <sock_socket>
   d7d02:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d7d06:	696b      	ldr	r3, [r5, #20]
   d7d08:	681b      	ldr	r3, [r3, #0]
   d7d0a:	2b00      	cmp	r3, #0
   d7d0c:	db18      	blt.n	d7d40 <_ZN9TCPClient7connectE9IPAddresstm+0x68>

    flush_buffer();
   d7d0e:	4628      	mov	r0, r5
   d7d10:	f7ff ffda 	bl	d7cc8 <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d7d14:	b1d6      	cbz	r6, d7d4c <_ZN9TCPClient7connectE9IPAddresstm+0x74>
        struct ifreq ifr = {};
   d7d16:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d7d18:	a903      	add	r1, sp, #12
   d7d1a:	b2f0      	uxtb	r0, r6
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   d7d1c:	9303      	str	r3, [sp, #12]
   d7d1e:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d7d22:	f7fe f831 	bl	d5d88 <if_index_to_name>
   d7d26:	b958      	cbnz	r0, d7d40 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d7d28:	6968      	ldr	r0, [r5, #20]
   d7d2a:	2306      	movs	r3, #6
   d7d2c:	9300      	str	r3, [sp, #0]
   d7d2e:	f241 020b 	movw	r2, #4107	; 0x100b
   d7d32:	ab03      	add	r3, sp, #12
   d7d34:	f640 71ff 	movw	r1, #4095	; 0xfff
   d7d38:	6800      	ldr	r0, [r0, #0]
   d7d3a:	f7fe f92d 	bl	d5f98 <sock_setsockopt>
   d7d3e:	b128      	cbz	r0, d7d4c <_ZN9TCPClient7connectE9IPAddresstm+0x74>

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d7d40:	682b      	ldr	r3, [r5, #0]
   d7d42:	4628      	mov	r0, r5
   d7d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d7d46:	2400      	movs	r4, #0

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d7d48:	4798      	blx	r3
   d7d4a:	e03b      	b.n	d7dc4 <_ZN9TCPClient7connectE9IPAddresstm+0xec>
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   d7d4c:	261c      	movs	r6, #28
   d7d4e:	4632      	mov	r2, r6
   d7d50:	2100      	movs	r1, #0
   d7d52:	a803      	add	r0, sp, #12
   d7d54:	f002 fef6 	bl	dab44 <memset>
    if (ip.version() == 4) {
   d7d58:	7d23      	ldrb	r3, [r4, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   d7d5a:	f88d 600c 	strb.w	r6, [sp, #12]
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   d7d5e:	2b04      	cmp	r3, #4
   d7d60:	d10c      	bne.n	d7d7c <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d7d62:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   d7d64:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d7d66:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   d7d6a:	f7fe f875 	bl	d5e58 <inet_htons>
   d7d6e:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d7d72:	6860      	ldr	r0, [r4, #4]
   d7d74:	f7fe f868 	bl	d5e48 <inet_htonl>
   d7d78:	9004      	str	r0, [sp, #16]
   d7d7a:	e013      	b.n	d7da4 <_ZN9TCPClient7connectE9IPAddresstm+0xcc>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d7d7c:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   d7d7e:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d7d80:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   d7d84:	f7fe f868 	bl	d5e58 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d7d88:	ae05      	add	r6, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   d7d8a:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d7d8e:	1d23      	adds	r3, r4, #4
   d7d90:	f104 0714 	add.w	r7, r4, #20
   d7d94:	6818      	ldr	r0, [r3, #0]
   d7d96:	6859      	ldr	r1, [r3, #4]
   d7d98:	4632      	mov	r2, r6
   d7d9a:	c203      	stmia	r2!, {r0, r1}
   d7d9c:	3308      	adds	r3, #8
   d7d9e:	42bb      	cmp	r3, r7
   d7da0:	4616      	mov	r6, r2
   d7da2:	d1f7      	bne.n	d7d94 <_ZN9TCPClient7connectE9IPAddresstm+0xbc>
    }

    // FIXME: timeout?
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d7da4:	696b      	ldr	r3, [r5, #20]
   d7da6:	221c      	movs	r2, #28
   d7da8:	a903      	add	r1, sp, #12
   d7daa:	6818      	ldr	r0, [r3, #0]
   d7dac:	f7fe f904 	bl	d5fb8 <sock_connect>
   d7db0:	2800      	cmp	r0, #0
   d7db2:	d1c5      	bne.n	d7d40 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
   d7db4:	3404      	adds	r4, #4
   d7db6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7db8:	696d      	ldr	r5, [r5, #20]
   d7dba:	358c      	adds	r5, #140	; 0x8c
   d7dbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d7dbe:	6823      	ldr	r3, [r4, #0]
   d7dc0:	702b      	strb	r3, [r5, #0]

    d_->remoteIP = ip;

    done.dismiss();

    return 1; // success
   d7dc2:	2401      	movs	r4, #1
}
   d7dc4:	4620      	mov	r0, r4
   d7dc6:	b00a      	add	sp, #40	; 0x28
   d7dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7dcc <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d7dcc:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d7dce:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d7dd0:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d7dd2:	6818      	ldr	r0, [r3, #0]
   d7dd4:	2800      	cmp	r0, #0
   d7dd6:	db01      	blt.n	d7ddc <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d7dd8:	f7fe f8e6 	bl	d5fa8 <sock_close>
   d7ddc:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   d7dde:	f04f 32ff 	mov.w	r2, #4294967295
   d7de2:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d7de4:	6960      	ldr	r0, [r4, #20]
   d7de6:	2211      	movs	r2, #17
   d7de8:	2100      	movs	r1, #0
   d7dea:	308c      	adds	r0, #140	; 0x8c
   d7dec:	f002 feaa 	bl	dab44 <memset>
    d_->remoteIP.clear();
    flush_buffer();
   d7df0:	4620      	mov	r0, r4
}
   d7df2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   d7df6:	f7ff bf67 	b.w	d7cc8 <_ZN9TCPClient12flush_bufferEv>
	...

000d7dfc <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d7dfc:	b530      	push	{r4, r5, lr}
   d7dfe:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d7e00:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d7e04:	b08b      	sub	sp, #44	; 0x2c
   d7e06:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d7e08:	b11b      	cbz	r3, d7e12 <_ZN9TCPClient9availableEv+0x16>
   d7e0a:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d7e0e:	429a      	cmp	r2, r3
   d7e10:	d040      	beq.n	d7e94 <_ZN9TCPClient9availableEv+0x98>
   d7e12:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   d7e14:	6818      	ldr	r0, [r3, #0]
   d7e16:	2800      	cmp	r0, #0
   d7e18:	db3f      	blt.n	d7e9a <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   d7e1a:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   d7e1e:	2d7f      	cmp	r5, #127	; 0x7f
   d7e20:	d83b      	bhi.n	d7e9a <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d7e22:	1d19      	adds	r1, r3, #4
   d7e24:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d7e28:	2308      	movs	r3, #8
   d7e2a:	4429      	add	r1, r5
   d7e2c:	f7fe f8cc 	bl	d5fc8 <sock_recv>
            if (ret > 0) {
   d7e30:	2800      	cmp	r0, #0
   d7e32:	dd0c      	ble.n	d7e4e <_ZN9TCPClient9availableEv+0x52>
   d7e34:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d7e36:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7e3a:	b90a      	cbnz	r2, d7e40 <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   d7e3c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d7e40:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   d7e42:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d7e46:	4418      	add	r0, r3
   d7e48:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   d7e4c:	e025      	b.n	d7e9a <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d7e4e:	f7fe fa2f 	bl	d62b0 <__errno>
   d7e52:	6803      	ldr	r3, [r0, #0]
   d7e54:	2b0b      	cmp	r3, #11
   d7e56:	d020      	beq.n	d7e9a <_ZN9TCPClient9availableEv+0x9e>
   d7e58:	f7fe fa2a 	bl	d62b0 <__errno>
   d7e5c:	6803      	ldr	r3, [r0, #0]
   d7e5e:	2b0b      	cmp	r3, #11
   d7e60:	d01b      	beq.n	d7e9a <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   d7e62:	2320      	movs	r3, #32
   d7e64:	2500      	movs	r5, #0
   d7e66:	9302      	str	r3, [sp, #8]
   d7e68:	9503      	str	r5, [sp, #12]
   d7e6a:	f7fe fa21 	bl	d62b0 <__errno>
   d7e6e:	6803      	ldr	r3, [r0, #0]
   d7e70:	9301      	str	r3, [sp, #4]
   d7e72:	4b0e      	ldr	r3, [pc, #56]	; (d7eac <_ZN9TCPClient9availableEv+0xb0>)
   d7e74:	9300      	str	r3, [sp, #0]
   d7e76:	aa02      	add	r2, sp, #8
   d7e78:	462b      	mov	r3, r5
   d7e7a:	490d      	ldr	r1, [pc, #52]	; (d7eb0 <_ZN9TCPClient9availableEv+0xb4>)
   d7e7c:	2032      	movs	r0, #50	; 0x32
   d7e7e:	f7fe f8fb 	bl	d6078 <log_message>
                    sock_close(d_->sock);
   d7e82:	6963      	ldr	r3, [r4, #20]
   d7e84:	6818      	ldr	r0, [r3, #0]
   d7e86:	f7fe f88f 	bl	d5fa8 <sock_close>
   d7e8a:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d7e8c:	f04f 32ff 	mov.w	r2, #4294967295
   d7e90:	601a      	str	r2, [r3, #0]
   d7e92:	e002      	b.n	d7e9a <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   d7e94:	f7ff ff18 	bl	d7cc8 <_ZN9TCPClient12flush_bufferEv>
   d7e98:	e7bb      	b.n	d7e12 <_ZN9TCPClient9availableEv+0x16>
   d7e9a:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   d7e9c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d7ea0:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   d7ea4:	1a18      	subs	r0, r3, r0
}
   d7ea6:	b00b      	add	sp, #44	; 0x2c
   d7ea8:	bd30      	pop	{r4, r5, pc}
   d7eaa:	bf00      	nop
   d7eac:	000dbd8f 	.word	0x000dbd8f
   d7eb0:	000dbd88 	.word	0x000dbd88

000d7eb4 <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d7eb4:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d7eb6:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d7eb8:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   d7eba:	6001      	str	r1, [r0, #0]
   d7ebc:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   d7ec0:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   d7ec4:	3088      	adds	r0, #136	; 0x88
   d7ec6:	f7ff fadd 	bl	d7484 <_ZN9IPAddressC1Ev>
}
   d7eca:	4620      	mov	r0, r4
   d7ecc:	bd10      	pop	{r4, pc}
	...

000d7ed0 <_ZN9TCPClientC1Ei>:
   d7ed0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d7ed4:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d7ed6:	2300      	movs	r3, #0
   d7ed8:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   d7eda:	4a14      	ldr	r2, [pc, #80]	; (d7f2c <_ZN9TCPClientC1Ei+0x5c>)
   d7edc:	6043      	str	r3, [r0, #4]
   d7ede:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d7ee0:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d7ee2:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d7ee4:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d7ee6:	20a0      	movs	r0, #160	; 0xa0
   d7ee8:	460e      	mov	r6, r1
   d7eea:	f7fc f8d6 	bl	d409a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d7eee:	4605      	mov	r5, r0
   d7ef0:	b110      	cbz	r0, d7ef8 <_ZN9TCPClientC1Ei+0x28>
   d7ef2:	4631      	mov	r1, r6
   d7ef4:	f7ff ffde 	bl	d7eb4 <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d7ef8:	2014      	movs	r0, #20
   d7efa:	f7fc f8ce 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d7efe:	4603      	mov	r3, r0
   d7f00:	b128      	cbz	r0, d7f0e <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d7f02:	2201      	movs	r2, #1
   d7f04:	6042      	str	r2, [r0, #4]
   d7f06:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d7f08:	4a09      	ldr	r2, [pc, #36]	; (d7f30 <_ZN9TCPClientC1Ei+0x60>)
   d7f0a:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d7f0c:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d7f0e:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d7f10:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d7f12:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d7f14:	b128      	cbz	r0, d7f22 <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d7f16:	6843      	ldr	r3, [r0, #4]
   d7f18:	3b01      	subs	r3, #1
   d7f1a:	6043      	str	r3, [r0, #4]
   d7f1c:	b90b      	cbnz	r3, d7f22 <_ZN9TCPClientC1Ei+0x52>
   d7f1e:	f7ff fddf 	bl	d7ae0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   d7f22:	4620      	mov	r0, r4
   d7f24:	f7ff fed0 	bl	d7cc8 <_ZN9TCPClient12flush_bufferEv>
}
   d7f28:	4620      	mov	r0, r4
   d7f2a:	bd70      	pop	{r4, r5, r6, pc}
   d7f2c:	000dbd44 	.word	0x000dbd44
   d7f30:	000dbd28 	.word	0x000dbd28

000d7f34 <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d7f34:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d7f36:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d7f3a:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d7f3c:	f7ff ffc8 	bl	d7ed0 <_ZN9TCPClientC1Ei>
}
   d7f40:	4620      	mov	r0, r4
   d7f42:	bd10      	pop	{r4, pc}

000d7f44 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   d7f44:	b510      	push	{r4, lr}
   d7f46:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d7f48:	6800      	ldr	r0, [r0, #0]
   d7f4a:	2800      	cmp	r0, #0
   d7f4c:	db01      	blt.n	d7f52 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d7f4e:	f7fe f82b 	bl	d5fa8 <sock_close>
    }
}
   d7f52:	4620      	mov	r0, r4
   d7f54:	bd10      	pop	{r4, pc}

000d7f56 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d7f56:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d7f58:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   d7f5a:	4620      	mov	r0, r4
   d7f5c:	f7ff fff2 	bl	d7f44 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   d7f60:	b124      	cbz	r4, d7f6c <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d7f62:	4620      	mov	r0, r4
   d7f64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d7f68:	f7fc b899 	b.w	d409e <_ZdlPv>
   d7f6c:	bd10      	pop	{r4, pc}

000d7f6e <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d7f6e:	2200      	movs	r2, #0
   d7f70:	4611      	mov	r1, r2
   d7f72:	6840      	ldr	r0, [r0, #4]
   d7f74:	f7fe b8e4 	b.w	d6140 <network_ready>

000d7f78 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7f78:	2200      	movs	r2, #0
   d7f7a:	4611      	mov	r1, r2
   d7f7c:	6840      	ldr	r0, [r0, #4]
   d7f7e:	f7fe b8ff 	b.w	d6180 <network_listening>

000d7f82 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d7f82:	2200      	movs	r2, #0
   d7f84:	4611      	mov	r1, r2
   d7f86:	6840      	ldr	r0, [r0, #4]
   d7f88:	f7fe b90a 	b.w	d61a0 <network_get_listen_timeout>

000d7f8c <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d7f8c:	2200      	movs	r2, #0
   d7f8e:	6840      	ldr	r0, [r0, #4]
   d7f90:	f7fe b8fe 	b.w	d6190 <network_set_listen_timeout>

000d7f94 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7f94:	2200      	movs	r2, #0
   d7f96:	f081 0101 	eor.w	r1, r1, #1
   d7f9a:	6840      	ldr	r0, [r0, #4]
   d7f9c:	f7fe b8e8 	b.w	d6170 <network_listen>

000d7fa0 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d7fa0:	2300      	movs	r3, #0
   d7fa2:	461a      	mov	r2, r3
   d7fa4:	4619      	mov	r1, r3
   d7fa6:	6840      	ldr	r0, [r0, #4]
   d7fa8:	f7fe b8da 	b.w	d6160 <network_off>

000d7fac <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d7fac:	2300      	movs	r3, #0
   d7fae:	461a      	mov	r2, r3
   d7fb0:	4619      	mov	r1, r3
   d7fb2:	6840      	ldr	r0, [r0, #4]
   d7fb4:	f7fe b8cc 	b.w	d6150 <network_on>

000d7fb8 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7fb8:	2200      	movs	r2, #0
   d7fba:	4611      	mov	r1, r2
   d7fbc:	6840      	ldr	r0, [r0, #4]
   d7fbe:	f7fe b8af 	b.w	d6120 <network_connecting>

000d7fc2 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7fc2:	2200      	movs	r2, #0
   d7fc4:	2102      	movs	r1, #2
   d7fc6:	6840      	ldr	r0, [r0, #4]
   d7fc8:	f7fe b8b2 	b.w	d6130 <network_disconnect>

000d7fcc <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7fcc:	2300      	movs	r3, #0
   d7fce:	461a      	mov	r2, r3
   d7fd0:	6840      	ldr	r0, [r0, #4]
   d7fd2:	f7fe b89d 	b.w	d6110 <network_connect>
	...

000d7fd8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d7fd8:	4b02      	ldr	r3, [pc, #8]	; (d7fe4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d7fda:	2204      	movs	r2, #4
   d7fdc:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d7fde:	4a02      	ldr	r2, [pc, #8]	; (d7fe8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d7fe0:	601a      	str	r2, [r3, #0]
   d7fe2:	4770      	bx	lr
   d7fe4:	2003e6e8 	.word	0x2003e6e8
   d7fe8:	000dbda8 	.word	0x000dbda8

000d7fec <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7fec:	2300      	movs	r3, #0
   d7fee:	461a      	mov	r2, r3
   d7ff0:	6840      	ldr	r0, [r0, #4]
   d7ff2:	f7fe b88d 	b.w	d6110 <network_connect>

000d7ff6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d7ff6:	2200      	movs	r2, #0
   d7ff8:	2102      	movs	r1, #2
   d7ffa:	6840      	ldr	r0, [r0, #4]
   d7ffc:	f7fe b898 	b.w	d6130 <network_disconnect>

000d8000 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d8000:	2200      	movs	r2, #0
   d8002:	4611      	mov	r1, r2
   d8004:	6840      	ldr	r0, [r0, #4]
   d8006:	f7fe b88b 	b.w	d6120 <network_connecting>

000d800a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d800a:	2200      	movs	r2, #0
   d800c:	4611      	mov	r1, r2
   d800e:	6840      	ldr	r0, [r0, #4]
   d8010:	f7fe b896 	b.w	d6140 <network_ready>

000d8014 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d8014:	2300      	movs	r3, #0
   d8016:	461a      	mov	r2, r3
   d8018:	4619      	mov	r1, r3
   d801a:	6840      	ldr	r0, [r0, #4]
   d801c:	f7fe b898 	b.w	d6150 <network_on>

000d8020 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d8020:	2300      	movs	r3, #0
   d8022:	461a      	mov	r2, r3
   d8024:	4619      	mov	r1, r3
   d8026:	6840      	ldr	r0, [r0, #4]
   d8028:	f7fe b89a 	b.w	d6160 <network_off>

000d802c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d802c:	2200      	movs	r2, #0
   d802e:	f081 0101 	eor.w	r1, r1, #1
   d8032:	6840      	ldr	r0, [r0, #4]
   d8034:	f7fe b89c 	b.w	d6170 <network_listen>

000d8038 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d8038:	2200      	movs	r2, #0
   d803a:	6840      	ldr	r0, [r0, #4]
   d803c:	f7fe b8a8 	b.w	d6190 <network_set_listen_timeout>

000d8040 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d8040:	2200      	movs	r2, #0
   d8042:	4611      	mov	r1, r2
   d8044:	6840      	ldr	r0, [r0, #4]
   d8046:	f7fe b8ab 	b.w	d61a0 <network_get_listen_timeout>

000d804a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d804a:	2200      	movs	r2, #0
   d804c:	4611      	mov	r1, r2
   d804e:	6840      	ldr	r0, [r0, #4]
   d8050:	f7fe b896 	b.w	d6180 <network_listening>

000d8054 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d8054:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d8058:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d805a:	b095      	sub	sp, #84	; 0x54
   d805c:	4616      	mov	r6, r2
   d805e:	460d      	mov	r5, r1
   d8060:	4607      	mov	r7, r0
    IPAddress addr;
   d8062:	f7ff fa0f 	bl	d7484 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d8066:	4621      	mov	r1, r4
   d8068:	2220      	movs	r2, #32
   d806a:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d806c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d806e:	f002 fd69 	bl	dab44 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d8072:	2340      	movs	r3, #64	; 0x40
   d8074:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d8076:	4621      	mov	r1, r4
   d8078:	466b      	mov	r3, sp
   d807a:	aa0c      	add	r2, sp, #48	; 0x30
   d807c:	4630      	mov	r0, r6
   d807e:	f7fd fe03 	bl	d5c88 <netdb_getaddrinfo>
    if (!r) {
   d8082:	4604      	mov	r4, r0
   d8084:	2800      	cmp	r0, #0
   d8086:	d144      	bne.n	d8112 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8088:	4602      	mov	r2, r0
   d808a:	2101      	movs	r1, #1
   d808c:	6868      	ldr	r0, [r5, #4]
   d808e:	f7fe f857 	bl	d6140 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8092:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8094:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8096:	4622      	mov	r2, r4
   d8098:	6868      	ldr	r0, [r5, #4]
   d809a:	f7fe f851 	bl	d6140 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d809e:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d80a0:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d80a2:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d80a4:	2e00      	cmp	r6, #0
   d80a6:	d034      	beq.n	d8112 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d80a8:	2900      	cmp	r1, #0
   d80aa:	d132      	bne.n	d8112 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d80ac:	6873      	ldr	r3, [r6, #4]
   d80ae:	2b02      	cmp	r3, #2
   d80b0:	d002      	beq.n	d80b8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d80b2:	2b0a      	cmp	r3, #10
   d80b4:	d009      	beq.n	d80ca <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d80b6:	e02a      	b.n	d810e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d80b8:	f1b8 0f00 	cmp.w	r8, #0
   d80bc:	d027      	beq.n	d810e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d80be:	6971      	ldr	r1, [r6, #20]
   d80c0:	4638      	mov	r0, r7
   d80c2:	3104      	adds	r1, #4
   d80c4:	f7ff fa21 	bl	d750a <_ZN9IPAddressaSEPKh>
   d80c8:	e020      	b.n	d810c <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d80ca:	f1b9 0f00 	cmp.w	r9, #0
   d80ce:	d01e      	beq.n	d810e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d80d0:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d80d2:	2211      	movs	r2, #17
   d80d4:	a801      	add	r0, sp, #4
   d80d6:	f002 fd35 	bl	dab44 <memset>
                    a.v = 6;
   d80da:	2306      	movs	r3, #6
   d80dc:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d80e0:	ad01      	add	r5, sp, #4
   d80e2:	f104 0308 	add.w	r3, r4, #8
   d80e6:	3418      	adds	r4, #24
   d80e8:	6818      	ldr	r0, [r3, #0]
   d80ea:	6859      	ldr	r1, [r3, #4]
   d80ec:	462a      	mov	r2, r5
   d80ee:	c203      	stmia	r2!, {r0, r1}
   d80f0:	3308      	adds	r3, #8
   d80f2:	42a3      	cmp	r3, r4
   d80f4:	4615      	mov	r5, r2
   d80f6:	d1f7      	bne.n	d80e8 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d80f8:	a901      	add	r1, sp, #4
   d80fa:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d80fc:	ad07      	add	r5, sp, #28
   d80fe:	f7ff f9cf 	bl	d74a0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d8102:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8104:	1d3c      	adds	r4, r7, #4
   d8106:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8108:	682b      	ldr	r3, [r5, #0]
   d810a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d810c:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d810e:	69f6      	ldr	r6, [r6, #28]
   d8110:	e7c8      	b.n	d80a4 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d8112:	9800      	ldr	r0, [sp, #0]
   d8114:	f7fd fdb0 	bl	d5c78 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d8118:	4638      	mov	r0, r7
   d811a:	b015      	add	sp, #84	; 0x54
   d811c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d8120 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d8120:	4b02      	ldr	r3, [pc, #8]	; (d812c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d8122:	4a03      	ldr	r2, [pc, #12]	; (d8130 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d8124:	601a      	str	r2, [r3, #0]
   d8126:	2200      	movs	r2, #0
   d8128:	605a      	str	r2, [r3, #4]
   d812a:	4770      	bx	lr
   d812c:	2003e6f0 	.word	0x2003e6f0
   d8130:	000dbddc 	.word	0x000dbddc

000d8134 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d8134:	b510      	push	{r4, lr}
   d8136:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d8138:	f000 f872 	bl	d8220 <_ZN8particle7globals11instanceSpiEv>
   d813c:	f7fe f9c7 	bl	d64ce <_ZN8SPIClass9isEnabledEv>
   d8140:	b128      	cbz	r0, d814e <pinAvailable+0x1a>
   d8142:	f1a4 030b 	sub.w	r3, r4, #11
   d8146:	2b02      	cmp	r3, #2
   d8148:	d801      	bhi.n	d814e <pinAvailable+0x1a>
  {
    return 0; // 'pin' is used
   d814a:	2000      	movs	r0, #0
   d814c:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d814e:	f000 f8a1 	bl	d8294 <_Z19__fetch_global_Wirev>
   d8152:	f7ff fb83 	bl	d785c <_ZN7TwoWire9isEnabledEv>
   d8156:	b108      	cbz	r0, d815c <pinAvailable+0x28>
   d8158:	2c01      	cmp	r4, #1
   d815a:	d9f6      	bls.n	d814a <pinAvailable+0x16>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d815c:	f7ff fac4 	bl	d76e8 <_Z22__fetch_global_Serial1v>
   d8160:	f7ff fabe 	bl	d76e0 <_ZN11USARTSerial9isEnabledEv>
   d8164:	b118      	cbz	r0, d816e <pinAvailable+0x3a>
   d8166:	f1a4 0309 	sub.w	r3, r4, #9
   d816a:	2b01      	cmp	r3, #1
   d816c:	d9ed      	bls.n	d814a <pinAvailable+0x16>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d816e:	2c23      	cmp	r4, #35	; 0x23
   d8170:	bf8c      	ite	hi
   d8172:	2000      	movhi	r0, #0
   d8174:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d8176:	bd10      	pop	{r4, pc}

000d8178 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8178:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d817a:	b538      	push	{r3, r4, r5, lr}
   d817c:	4604      	mov	r4, r0
   d817e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8180:	d80a      	bhi.n	d8198 <pinMode+0x20>
   d8182:	29ff      	cmp	r1, #255	; 0xff
   d8184:	d008      	beq.n	d8198 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d8186:	f7ff ffd5 	bl	d8134 <pinAvailable>
   d818a:	b128      	cbz	r0, d8198 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d818c:	4629      	mov	r1, r5
   d818e:	4620      	mov	r0, r4
}
   d8190:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d8194:	f7fd bd90 	b.w	d5cb8 <HAL_Pin_Mode>
   d8198:	bd38      	pop	{r3, r4, r5, pc}

000d819a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d819a:	b538      	push	{r3, r4, r5, lr}
   d819c:	4604      	mov	r4, r0
   d819e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d81a0:	f7fd fd92 	bl	d5cc8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d81a4:	28ff      	cmp	r0, #255	; 0xff
   d81a6:	d010      	beq.n	d81ca <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d81a8:	2806      	cmp	r0, #6
   d81aa:	d804      	bhi.n	d81b6 <digitalWrite+0x1c>
   d81ac:	234d      	movs	r3, #77	; 0x4d
   d81ae:	fa23 f000 	lsr.w	r0, r3, r0
   d81b2:	07c3      	lsls	r3, r0, #31
   d81b4:	d409      	bmi.n	d81ca <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d81b6:	4620      	mov	r0, r4
   d81b8:	f7ff ffbc 	bl	d8134 <pinAvailable>
   d81bc:	b128      	cbz	r0, d81ca <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d81be:	4629      	mov	r1, r5
   d81c0:	4620      	mov	r0, r4
}
   d81c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d81c6:	f7fd bd87 	b.w	d5cd8 <HAL_GPIO_Write>
   d81ca:	bd38      	pop	{r3, r4, r5, pc}

000d81cc <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d81cc:	b510      	push	{r4, lr}
   d81ce:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d81d0:	f7fd fd7a 	bl	d5cc8 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d81d4:	3804      	subs	r0, #4
   d81d6:	b2c0      	uxtb	r0, r0
   d81d8:	2801      	cmp	r0, #1
   d81da:	d908      	bls.n	d81ee <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d81dc:	4620      	mov	r0, r4
   d81de:	f7ff ffa9 	bl	d8134 <pinAvailable>
   d81e2:	b120      	cbz	r0, d81ee <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d81e4:	4620      	mov	r0, r4
}
   d81e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d81ea:	f7fd bd7d 	b.w	d5ce8 <HAL_GPIO_Read>
}
   d81ee:	2000      	movs	r0, #0
   d81f0:	bd10      	pop	{r4, pc}

000d81f2 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d81f2:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d81f4:	b510      	push	{r4, lr}
   d81f6:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d81f8:	bf9c      	itt	ls
   d81fa:	340e      	addls	r4, #14
   d81fc:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d81fe:	4620      	mov	r0, r4
   d8200:	f7ff ff98 	bl	d8134 <pinAvailable>
   d8204:	b150      	cbz	r0, d821c <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d8206:	2103      	movs	r1, #3
   d8208:	4620      	mov	r0, r4
   d820a:	f7fd fd4d 	bl	d5ca8 <HAL_Validate_Pin_Function>
   d820e:	2803      	cmp	r0, #3
   d8210:	d104      	bne.n	d821c <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d8212:	4620      	mov	r0, r4
}
   d8214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d8218:	f7fd bd6e 	b.w	d5cf8 <HAL_ADC_Read>
}
   d821c:	2000      	movs	r0, #0
   d821e:	bd10      	pop	{r4, pc}

000d8220 <_ZN8particle7globals11instanceSpiEv>:
#ifndef SPARK_WIRING_NO_SPI

namespace particle {
namespace globals {

SPIClass& instanceSpi() {
   d8220:	b538      	push	{r3, r4, r5, lr}
    static SPIClass instance(HAL_SPI_INTERFACE1);
   d8222:	4d0b      	ldr	r5, [pc, #44]	; (d8250 <_ZN8particle7globals11instanceSpiEv+0x30>)
   d8224:	6829      	ldr	r1, [r5, #0]
   d8226:	f011 0401 	ands.w	r4, r1, #1
   d822a:	d10f      	bne.n	d824c <_ZN8particle7globals11instanceSpiEv+0x2c>
   d822c:	4628      	mov	r0, r5
   d822e:	f7fb ff45 	bl	d40bc <__cxa_guard_acquire>
   d8232:	b158      	cbz	r0, d824c <_ZN8particle7globals11instanceSpiEv+0x2c>
   d8234:	4621      	mov	r1, r4
   d8236:	4807      	ldr	r0, [pc, #28]	; (d8254 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d8238:	f7fe f88e 	bl	d6358 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d823c:	4628      	mov	r0, r5
   d823e:	f7fb ff42 	bl	d40c6 <__cxa_guard_release>
   d8242:	4a05      	ldr	r2, [pc, #20]	; (d8258 <_ZN8particle7globals11instanceSpiEv+0x38>)
   d8244:	4905      	ldr	r1, [pc, #20]	; (d825c <_ZN8particle7globals11instanceSpiEv+0x3c>)
   d8246:	4803      	ldr	r0, [pc, #12]	; (d8254 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d8248:	f000 f84a 	bl	d82e0 <__aeabi_atexit>
    return instance;
}
   d824c:	4801      	ldr	r0, [pc, #4]	; (d8254 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d824e:	bd38      	pop	{r3, r4, r5, pc}
   d8250:	2003e704 	.word	0x2003e704
   d8254:	2003e6f8 	.word	0x2003e6f8
   d8258:	2003e170 	.word	0x2003e170
   d825c:	000d633d 	.word	0x000d633d

000d8260 <_Z17acquireWireBufferv>:
   d8260:	b570      	push	{r4, r5, r6, lr}
   d8262:	4604      	mov	r4, r0
   d8264:	2514      	movs	r5, #20
   d8266:	462a      	mov	r2, r5
   d8268:	4e09      	ldr	r6, [pc, #36]	; (d8290 <_Z17acquireWireBufferv+0x30>)
   d826a:	2100      	movs	r1, #0
   d826c:	f002 fc6a 	bl	dab44 <memset>
   d8270:	8025      	strh	r5, [r4, #0]
   d8272:	2520      	movs	r5, #32
   d8274:	4631      	mov	r1, r6
   d8276:	60a5      	str	r5, [r4, #8]
   d8278:	6125      	str	r5, [r4, #16]
   d827a:	4628      	mov	r0, r5
   d827c:	f000 f840 	bl	d8300 <_ZnajRKSt9nothrow_t>
   d8280:	4631      	mov	r1, r6
   d8282:	6060      	str	r0, [r4, #4]
   d8284:	4628      	mov	r0, r5
   d8286:	f000 f83b 	bl	d8300 <_ZnajRKSt9nothrow_t>
   d828a:	60e0      	str	r0, [r4, #12]
   d828c:	4620      	mov	r0, r4
   d828e:	bd70      	pop	{r4, r5, r6, pc}
   d8290:	000dbe08 	.word	0x000dbe08

000d8294 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d8294:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8296:	4d0e      	ldr	r5, [pc, #56]	; (d82d0 <_Z19__fetch_global_Wirev+0x3c>)
   d8298:	6829      	ldr	r1, [r5, #0]
   d829a:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d829e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d82a0:	d113      	bne.n	d82ca <_Z19__fetch_global_Wirev+0x36>
   d82a2:	4628      	mov	r0, r5
   d82a4:	f7fb ff0a 	bl	d40bc <__cxa_guard_acquire>
   d82a8:	b178      	cbz	r0, d82ca <_Z19__fetch_global_Wirev+0x36>
   d82aa:	a801      	add	r0, sp, #4
   d82ac:	f7ff ffd8 	bl	d8260 <_Z17acquireWireBufferv>
   d82b0:	aa01      	add	r2, sp, #4
   d82b2:	4621      	mov	r1, r4
   d82b4:	4807      	ldr	r0, [pc, #28]	; (d82d4 <_Z19__fetch_global_Wirev+0x40>)
   d82b6:	f7ff fa7d 	bl	d77b4 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d82ba:	4628      	mov	r0, r5
   d82bc:	f7fb ff03 	bl	d40c6 <__cxa_guard_release>
   d82c0:	4a05      	ldr	r2, [pc, #20]	; (d82d8 <_Z19__fetch_global_Wirev+0x44>)
   d82c2:	4906      	ldr	r1, [pc, #24]	; (d82dc <_Z19__fetch_global_Wirev+0x48>)
   d82c4:	4803      	ldr	r0, [pc, #12]	; (d82d4 <_Z19__fetch_global_Wirev+0x40>)
   d82c6:	f000 f80b 	bl	d82e0 <__aeabi_atexit>
	return wire;
}
   d82ca:	4802      	ldr	r0, [pc, #8]	; (d82d4 <_Z19__fetch_global_Wirev+0x40>)
   d82cc:	b007      	add	sp, #28
   d82ce:	bd30      	pop	{r4, r5, pc}
   d82d0:	2003e70c 	.word	0x2003e70c
   d82d4:	2003e710 	.word	0x2003e710
   d82d8:	2003e170 	.word	0x2003e170
   d82dc:	000d775d 	.word	0x000d775d

000d82e0 <__aeabi_atexit>:
   d82e0:	460b      	mov	r3, r1
   d82e2:	4601      	mov	r1, r0
   d82e4:	4618      	mov	r0, r3
   d82e6:	f002 baed 	b.w	da8c4 <__cxa_atexit>
	...

000d82ec <_ZSt15get_new_handlerv>:
   d82ec:	4b02      	ldr	r3, [pc, #8]	; (d82f8 <_ZSt15get_new_handlerv+0xc>)
   d82ee:	6818      	ldr	r0, [r3, #0]
   d82f0:	f3bf 8f5f 	dmb	sy
   d82f4:	4770      	bx	lr
   d82f6:	bf00      	nop
   d82f8:	2003e724 	.word	0x2003e724

000d82fc <_ZdlPvj>:
   d82fc:	f7fb becf 	b.w	d409e <_ZdlPv>

000d8300 <_ZnajRKSt9nothrow_t>:
   d8300:	f000 b800 	b.w	d8304 <_ZnwjRKSt9nothrow_t>

000d8304 <_ZnwjRKSt9nothrow_t>:
   d8304:	b510      	push	{r4, lr}
   d8306:	2800      	cmp	r0, #0
   d8308:	bf14      	ite	ne
   d830a:	4604      	movne	r4, r0
   d830c:	2401      	moveq	r4, #1
   d830e:	4620      	mov	r0, r4
   d8310:	f7fd ff86 	bl	d6220 <malloc>
   d8314:	b920      	cbnz	r0, d8320 <_ZnwjRKSt9nothrow_t+0x1c>
   d8316:	f7ff ffe9 	bl	d82ec <_ZSt15get_new_handlerv>
   d831a:	b108      	cbz	r0, d8320 <_ZnwjRKSt9nothrow_t+0x1c>
   d831c:	4780      	blx	r0
   d831e:	e7f6      	b.n	d830e <_ZnwjRKSt9nothrow_t+0xa>
   d8320:	bd10      	pop	{r4, pc}

000d8322 <_ZSt25__throw_bad_function_callv>:
   d8322:	b508      	push	{r3, lr}
   d8324:	f7fd ffb4 	bl	d6290 <abort>

000d8328 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d8328:	4b18      	ldr	r3, [pc, #96]	; (d838c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d832a:	681a      	ldr	r2, [r3, #0]
   d832c:	07d1      	lsls	r1, r2, #31
   d832e:	bf5c      	itt	pl
   d8330:	2201      	movpl	r2, #1
   d8332:	601a      	strpl	r2, [r3, #0]
   d8334:	4b16      	ldr	r3, [pc, #88]	; (d8390 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d8336:	681a      	ldr	r2, [r3, #0]
   d8338:	07d2      	lsls	r2, r2, #31
   d833a:	bf5c      	itt	pl
   d833c:	2201      	movpl	r2, #1
   d833e:	601a      	strpl	r2, [r3, #0]
   d8340:	4b14      	ldr	r3, [pc, #80]	; (d8394 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d8342:	681a      	ldr	r2, [r3, #0]
   d8344:	07d0      	lsls	r0, r2, #31
   d8346:	bf5c      	itt	pl
   d8348:	2201      	movpl	r2, #1
   d834a:	601a      	strpl	r2, [r3, #0]
   d834c:	4b12      	ldr	r3, [pc, #72]	; (d8398 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d834e:	681a      	ldr	r2, [r3, #0]
   d8350:	07d1      	lsls	r1, r2, #31
   d8352:	bf5c      	itt	pl
   d8354:	2201      	movpl	r2, #1
   d8356:	601a      	strpl	r2, [r3, #0]
   d8358:	4b10      	ldr	r3, [pc, #64]	; (d839c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d835a:	681a      	ldr	r2, [r3, #0]
   d835c:	07d2      	lsls	r2, r2, #31
   d835e:	bf5c      	itt	pl
   d8360:	2201      	movpl	r2, #1
   d8362:	601a      	strpl	r2, [r3, #0]
   d8364:	4b0e      	ldr	r3, [pc, #56]	; (d83a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d8366:	681a      	ldr	r2, [r3, #0]
   d8368:	07d0      	lsls	r0, r2, #31
   d836a:	bf5c      	itt	pl
   d836c:	2201      	movpl	r2, #1
   d836e:	601a      	strpl	r2, [r3, #0]
   d8370:	4b0c      	ldr	r3, [pc, #48]	; (d83a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d8372:	681a      	ldr	r2, [r3, #0]
   d8374:	07d1      	lsls	r1, r2, #31
   d8376:	bf5c      	itt	pl
   d8378:	2201      	movpl	r2, #1
   d837a:	601a      	strpl	r2, [r3, #0]
   d837c:	4b0a      	ldr	r3, [pc, #40]	; (d83a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d837e:	681a      	ldr	r2, [r3, #0]
   d8380:	07d2      	lsls	r2, r2, #31
   d8382:	bf5c      	itt	pl
   d8384:	2201      	movpl	r2, #1
   d8386:	601a      	strpl	r2, [r3, #0]
   d8388:	4770      	bx	lr
   d838a:	bf00      	nop
   d838c:	2003e744 	.word	0x2003e744
   d8390:	2003e740 	.word	0x2003e740
   d8394:	2003e73c 	.word	0x2003e73c
   d8398:	2003e738 	.word	0x2003e738
   d839c:	2003e734 	.word	0x2003e734
   d83a0:	2003e730 	.word	0x2003e730
   d83a4:	2003e72c 	.word	0x2003e72c
   d83a8:	2003e728 	.word	0x2003e728

000d83ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d83ac:	4b24      	ldr	r3, [pc, #144]	; (d8440 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d83ae:	681a      	ldr	r2, [r3, #0]
   d83b0:	07d0      	lsls	r0, r2, #31
   d83b2:	bf5c      	itt	pl
   d83b4:	2201      	movpl	r2, #1
   d83b6:	601a      	strpl	r2, [r3, #0]
   d83b8:	4b22      	ldr	r3, [pc, #136]	; (d8444 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d83ba:	681a      	ldr	r2, [r3, #0]
   d83bc:	07d1      	lsls	r1, r2, #31
   d83be:	bf5c      	itt	pl
   d83c0:	2201      	movpl	r2, #1
   d83c2:	601a      	strpl	r2, [r3, #0]
   d83c4:	4b20      	ldr	r3, [pc, #128]	; (d8448 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d83c6:	681a      	ldr	r2, [r3, #0]
   d83c8:	07d2      	lsls	r2, r2, #31
   d83ca:	bf5c      	itt	pl
   d83cc:	2201      	movpl	r2, #1
   d83ce:	601a      	strpl	r2, [r3, #0]
   d83d0:	4b1e      	ldr	r3, [pc, #120]	; (d844c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d83d2:	681a      	ldr	r2, [r3, #0]
   d83d4:	07d0      	lsls	r0, r2, #31
   d83d6:	bf5c      	itt	pl
   d83d8:	2201      	movpl	r2, #1
   d83da:	601a      	strpl	r2, [r3, #0]
   d83dc:	4b1c      	ldr	r3, [pc, #112]	; (d8450 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d83de:	681a      	ldr	r2, [r3, #0]
   d83e0:	07d1      	lsls	r1, r2, #31
   d83e2:	bf5c      	itt	pl
   d83e4:	2201      	movpl	r2, #1
   d83e6:	601a      	strpl	r2, [r3, #0]
   d83e8:	4b1a      	ldr	r3, [pc, #104]	; (d8454 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d83ea:	681a      	ldr	r2, [r3, #0]
   d83ec:	07d2      	lsls	r2, r2, #31
   d83ee:	bf5c      	itt	pl
   d83f0:	2201      	movpl	r2, #1
   d83f2:	601a      	strpl	r2, [r3, #0]
   d83f4:	4b18      	ldr	r3, [pc, #96]	; (d8458 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d83f6:	681a      	ldr	r2, [r3, #0]
   d83f8:	07d0      	lsls	r0, r2, #31
   d83fa:	bf5c      	itt	pl
   d83fc:	2201      	movpl	r2, #1
   d83fe:	601a      	strpl	r2, [r3, #0]
   d8400:	4b16      	ldr	r3, [pc, #88]	; (d845c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d8402:	681a      	ldr	r2, [r3, #0]
   d8404:	07d1      	lsls	r1, r2, #31
   d8406:	bf5c      	itt	pl
   d8408:	2201      	movpl	r2, #1
   d840a:	601a      	strpl	r2, [r3, #0]
   d840c:	4b14      	ldr	r3, [pc, #80]	; (d8460 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d840e:	681a      	ldr	r2, [r3, #0]
   d8410:	07d2      	lsls	r2, r2, #31
   d8412:	bf5c      	itt	pl
   d8414:	2201      	movpl	r2, #1
   d8416:	601a      	strpl	r2, [r3, #0]
   d8418:	4b12      	ldr	r3, [pc, #72]	; (d8464 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d841a:	681a      	ldr	r2, [r3, #0]
   d841c:	07d0      	lsls	r0, r2, #31
   d841e:	bf5c      	itt	pl
   d8420:	2201      	movpl	r2, #1
   d8422:	601a      	strpl	r2, [r3, #0]
   d8424:	4b10      	ldr	r3, [pc, #64]	; (d8468 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d8426:	681a      	ldr	r2, [r3, #0]
   d8428:	07d1      	lsls	r1, r2, #31
   d842a:	bf5c      	itt	pl
   d842c:	2201      	movpl	r2, #1
   d842e:	601a      	strpl	r2, [r3, #0]
   d8430:	4b0e      	ldr	r3, [pc, #56]	; (d846c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d8432:	681a      	ldr	r2, [r3, #0]
   d8434:	07d2      	lsls	r2, r2, #31
   d8436:	bf5c      	itt	pl
   d8438:	2201      	movpl	r2, #1
   d843a:	601a      	strpl	r2, [r3, #0]
   d843c:	4770      	bx	lr
   d843e:	bf00      	nop
   d8440:	2003e774 	.word	0x2003e774
   d8444:	2003e770 	.word	0x2003e770
   d8448:	2003e76c 	.word	0x2003e76c
   d844c:	2003e768 	.word	0x2003e768
   d8450:	2003e764 	.word	0x2003e764
   d8454:	2003e760 	.word	0x2003e760
   d8458:	2003e75c 	.word	0x2003e75c
   d845c:	2003e758 	.word	0x2003e758
   d8460:	2003e754 	.word	0x2003e754
   d8464:	2003e750 	.word	0x2003e750
   d8468:	2003e74c 	.word	0x2003e74c
   d846c:	2003e748 	.word	0x2003e748

000d8470 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d8470:	4b24      	ldr	r3, [pc, #144]	; (d8504 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d8472:	681a      	ldr	r2, [r3, #0]
   d8474:	07d0      	lsls	r0, r2, #31
   d8476:	bf5c      	itt	pl
   d8478:	2201      	movpl	r2, #1
   d847a:	601a      	strpl	r2, [r3, #0]
   d847c:	4b22      	ldr	r3, [pc, #136]	; (d8508 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d847e:	681a      	ldr	r2, [r3, #0]
   d8480:	07d1      	lsls	r1, r2, #31
   d8482:	bf5c      	itt	pl
   d8484:	2201      	movpl	r2, #1
   d8486:	601a      	strpl	r2, [r3, #0]
   d8488:	4b20      	ldr	r3, [pc, #128]	; (d850c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d848a:	681a      	ldr	r2, [r3, #0]
   d848c:	07d2      	lsls	r2, r2, #31
   d848e:	bf5c      	itt	pl
   d8490:	2201      	movpl	r2, #1
   d8492:	601a      	strpl	r2, [r3, #0]
   d8494:	4b1e      	ldr	r3, [pc, #120]	; (d8510 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d8496:	681a      	ldr	r2, [r3, #0]
   d8498:	07d0      	lsls	r0, r2, #31
   d849a:	bf5c      	itt	pl
   d849c:	2201      	movpl	r2, #1
   d849e:	601a      	strpl	r2, [r3, #0]
   d84a0:	4b1c      	ldr	r3, [pc, #112]	; (d8514 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d84a2:	681a      	ldr	r2, [r3, #0]
   d84a4:	07d1      	lsls	r1, r2, #31
   d84a6:	bf5c      	itt	pl
   d84a8:	2201      	movpl	r2, #1
   d84aa:	601a      	strpl	r2, [r3, #0]
   d84ac:	4b1a      	ldr	r3, [pc, #104]	; (d8518 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d84ae:	681a      	ldr	r2, [r3, #0]
   d84b0:	07d2      	lsls	r2, r2, #31
   d84b2:	bf5c      	itt	pl
   d84b4:	2201      	movpl	r2, #1
   d84b6:	601a      	strpl	r2, [r3, #0]
   d84b8:	4b18      	ldr	r3, [pc, #96]	; (d851c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d84ba:	681a      	ldr	r2, [r3, #0]
   d84bc:	07d0      	lsls	r0, r2, #31
   d84be:	bf5c      	itt	pl
   d84c0:	2201      	movpl	r2, #1
   d84c2:	601a      	strpl	r2, [r3, #0]
   d84c4:	4b16      	ldr	r3, [pc, #88]	; (d8520 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d84c6:	681a      	ldr	r2, [r3, #0]
   d84c8:	07d1      	lsls	r1, r2, #31
   d84ca:	bf5c      	itt	pl
   d84cc:	2201      	movpl	r2, #1
   d84ce:	601a      	strpl	r2, [r3, #0]
   d84d0:	4b14      	ldr	r3, [pc, #80]	; (d8524 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d84d2:	681a      	ldr	r2, [r3, #0]
   d84d4:	07d2      	lsls	r2, r2, #31
   d84d6:	bf5c      	itt	pl
   d84d8:	2201      	movpl	r2, #1
   d84da:	601a      	strpl	r2, [r3, #0]
   d84dc:	4b12      	ldr	r3, [pc, #72]	; (d8528 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d84de:	681a      	ldr	r2, [r3, #0]
   d84e0:	07d0      	lsls	r0, r2, #31
   d84e2:	bf5c      	itt	pl
   d84e4:	2201      	movpl	r2, #1
   d84e6:	601a      	strpl	r2, [r3, #0]
   d84e8:	4b10      	ldr	r3, [pc, #64]	; (d852c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d84ea:	681a      	ldr	r2, [r3, #0]
   d84ec:	07d1      	lsls	r1, r2, #31
   d84ee:	bf5c      	itt	pl
   d84f0:	2201      	movpl	r2, #1
   d84f2:	601a      	strpl	r2, [r3, #0]
   d84f4:	4b0e      	ldr	r3, [pc, #56]	; (d8530 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d84f6:	681a      	ldr	r2, [r3, #0]
   d84f8:	07d2      	lsls	r2, r2, #31
   d84fa:	bf5c      	itt	pl
   d84fc:	2201      	movpl	r2, #1
   d84fe:	601a      	strpl	r2, [r3, #0]
   d8500:	4770      	bx	lr
   d8502:	bf00      	nop
   d8504:	2003e7a4 	.word	0x2003e7a4
   d8508:	2003e7a0 	.word	0x2003e7a0
   d850c:	2003e79c 	.word	0x2003e79c
   d8510:	2003e798 	.word	0x2003e798
   d8514:	2003e794 	.word	0x2003e794
   d8518:	2003e790 	.word	0x2003e790
   d851c:	2003e78c 	.word	0x2003e78c
   d8520:	2003e788 	.word	0x2003e788
   d8524:	2003e784 	.word	0x2003e784
   d8528:	2003e780 	.word	0x2003e780
   d852c:	2003e77c 	.word	0x2003e77c
   d8530:	2003e778 	.word	0x2003e778

000d8534 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d8534:	4b18      	ldr	r3, [pc, #96]	; (d8598 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d8536:	681a      	ldr	r2, [r3, #0]
   d8538:	07d1      	lsls	r1, r2, #31
   d853a:	bf5c      	itt	pl
   d853c:	2201      	movpl	r2, #1
   d853e:	601a      	strpl	r2, [r3, #0]
   d8540:	4b16      	ldr	r3, [pc, #88]	; (d859c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d8542:	681a      	ldr	r2, [r3, #0]
   d8544:	07d2      	lsls	r2, r2, #31
   d8546:	bf5c      	itt	pl
   d8548:	2201      	movpl	r2, #1
   d854a:	601a      	strpl	r2, [r3, #0]
   d854c:	4b14      	ldr	r3, [pc, #80]	; (d85a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d854e:	681a      	ldr	r2, [r3, #0]
   d8550:	07d0      	lsls	r0, r2, #31
   d8552:	bf5c      	itt	pl
   d8554:	2201      	movpl	r2, #1
   d8556:	601a      	strpl	r2, [r3, #0]
   d8558:	4b12      	ldr	r3, [pc, #72]	; (d85a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d855a:	681a      	ldr	r2, [r3, #0]
   d855c:	07d1      	lsls	r1, r2, #31
   d855e:	bf5c      	itt	pl
   d8560:	2201      	movpl	r2, #1
   d8562:	601a      	strpl	r2, [r3, #0]
   d8564:	4b10      	ldr	r3, [pc, #64]	; (d85a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d8566:	681a      	ldr	r2, [r3, #0]
   d8568:	07d2      	lsls	r2, r2, #31
   d856a:	bf5c      	itt	pl
   d856c:	2201      	movpl	r2, #1
   d856e:	601a      	strpl	r2, [r3, #0]
   d8570:	4b0e      	ldr	r3, [pc, #56]	; (d85ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d8572:	681a      	ldr	r2, [r3, #0]
   d8574:	07d0      	lsls	r0, r2, #31
   d8576:	bf5c      	itt	pl
   d8578:	2201      	movpl	r2, #1
   d857a:	601a      	strpl	r2, [r3, #0]
   d857c:	4b0c      	ldr	r3, [pc, #48]	; (d85b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d857e:	681a      	ldr	r2, [r3, #0]
   d8580:	07d1      	lsls	r1, r2, #31
   d8582:	bf5c      	itt	pl
   d8584:	2201      	movpl	r2, #1
   d8586:	601a      	strpl	r2, [r3, #0]
   d8588:	4b0a      	ldr	r3, [pc, #40]	; (d85b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d858a:	681a      	ldr	r2, [r3, #0]
   d858c:	07d2      	lsls	r2, r2, #31
   d858e:	bf5c      	itt	pl
   d8590:	2201      	movpl	r2, #1
   d8592:	601a      	strpl	r2, [r3, #0]
   d8594:	4770      	bx	lr
   d8596:	bf00      	nop
   d8598:	2003e7c4 	.word	0x2003e7c4
   d859c:	2003e7c0 	.word	0x2003e7c0
   d85a0:	2003e7bc 	.word	0x2003e7bc
   d85a4:	2003e7b8 	.word	0x2003e7b8
   d85a8:	2003e7b4 	.word	0x2003e7b4
   d85ac:	2003e7b0 	.word	0x2003e7b0
   d85b0:	2003e7ac 	.word	0x2003e7ac
   d85b4:	2003e7a8 	.word	0x2003e7a8

000d85b8 <pow>:
   d85b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d85bc:	ed2d 8b02 	vpush	{d8}
   d85c0:	f8df a324 	ldr.w	sl, [pc, #804]	; d88e8 <pow+0x330>
   d85c4:	b08b      	sub	sp, #44	; 0x2c
   d85c6:	ec57 6b10 	vmov	r6, r7, d0
   d85ca:	ec55 4b11 	vmov	r4, r5, d1
   d85ce:	f000 f98f 	bl	d88f0 <__ieee754_pow>
   d85d2:	f99a 8000 	ldrsb.w	r8, [sl]
   d85d6:	eeb0 8a40 	vmov.f32	s16, s0
   d85da:	eef0 8a60 	vmov.f32	s17, s1
   d85de:	f1b8 3fff 	cmp.w	r8, #4294967295
   d85e2:	d048      	beq.n	d8676 <pow+0xbe>
   d85e4:	4622      	mov	r2, r4
   d85e6:	462b      	mov	r3, r5
   d85e8:	4620      	mov	r0, r4
   d85ea:	4629      	mov	r1, r5
   d85ec:	f001 fd6e 	bl	da0cc <__aeabi_dcmpun>
   d85f0:	4683      	mov	fp, r0
   d85f2:	2800      	cmp	r0, #0
   d85f4:	d13f      	bne.n	d8676 <pow+0xbe>
   d85f6:	4632      	mov	r2, r6
   d85f8:	463b      	mov	r3, r7
   d85fa:	4630      	mov	r0, r6
   d85fc:	4639      	mov	r1, r7
   d85fe:	f001 fd65 	bl	da0cc <__aeabi_dcmpun>
   d8602:	4681      	mov	r9, r0
   d8604:	2800      	cmp	r0, #0
   d8606:	f040 8090 	bne.w	d872a <pow+0x172>
   d860a:	4630      	mov	r0, r6
   d860c:	4639      	mov	r1, r7
   d860e:	2200      	movs	r2, #0
   d8610:	2300      	movs	r3, #0
   d8612:	f001 fd29 	bl	da068 <__aeabi_dcmpeq>
   d8616:	2800      	cmp	r0, #0
   d8618:	d036      	beq.n	d8688 <pow+0xd0>
   d861a:	2200      	movs	r2, #0
   d861c:	2300      	movs	r3, #0
   d861e:	4620      	mov	r0, r4
   d8620:	4629      	mov	r1, r5
   d8622:	f001 fd21 	bl	da068 <__aeabi_dcmpeq>
   d8626:	4683      	mov	fp, r0
   d8628:	b1b8      	cbz	r0, d865a <pow+0xa2>
   d862a:	ed9f 7ba5 	vldr	d7, [pc, #660]	; d88c0 <pow+0x308>
   d862e:	2201      	movs	r2, #1
   d8630:	4ba9      	ldr	r3, [pc, #676]	; (d88d8 <pow+0x320>)
   d8632:	f8cd 9020 	str.w	r9, [sp, #32]
   d8636:	9200      	str	r2, [sp, #0]
   d8638:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d863c:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d8640:	ed8d 7b06 	vstr	d7, [sp, #24]
   d8644:	9301      	str	r3, [sp, #4]
   d8646:	f1b8 0f00 	cmp.w	r8, #0
   d864a:	d05b      	beq.n	d8704 <pow+0x14c>
   d864c:	ed9f 0b9e 	vldr	d0, [pc, #632]	; d88c8 <pow+0x310>
   d8650:	b00b      	add	sp, #44	; 0x2c
   d8652:	ecbd 8b02 	vpop	{d8}
   d8656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d865a:	ec45 4b10 	vmov	d0, r4, r5
   d865e:	f000 ffa7 	bl	d95b0 <finite>
   d8662:	b140      	cbz	r0, d8676 <pow+0xbe>
   d8664:	2200      	movs	r2, #0
   d8666:	2300      	movs	r3, #0
   d8668:	4620      	mov	r0, r4
   d866a:	4629      	mov	r1, r5
   d866c:	f001 fd06 	bl	da07c <__aeabi_dcmplt>
   d8670:	2800      	cmp	r0, #0
   d8672:	f040 80c5 	bne.w	d8800 <pow+0x248>
   d8676:	eeb0 0a48 	vmov.f32	s0, s16
   d867a:	eef0 0a68 	vmov.f32	s1, s17
   d867e:	b00b      	add	sp, #44	; 0x2c
   d8680:	ecbd 8b02 	vpop	{d8}
   d8684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8688:	eeb0 0a48 	vmov.f32	s0, s16
   d868c:	eef0 0a68 	vmov.f32	s1, s17
   d8690:	f000 ff8e 	bl	d95b0 <finite>
   d8694:	4680      	mov	r8, r0
   d8696:	2800      	cmp	r0, #0
   d8698:	d061      	beq.n	d875e <pow+0x1a6>
   d869a:	f04f 0800 	mov.w	r8, #0
   d869e:	f04f 0900 	mov.w	r9, #0
   d86a2:	ec51 0b18 	vmov	r0, r1, d8
   d86a6:	4642      	mov	r2, r8
   d86a8:	464b      	mov	r3, r9
   d86aa:	f001 fcdd 	bl	da068 <__aeabi_dcmpeq>
   d86ae:	2800      	cmp	r0, #0
   d86b0:	d0e1      	beq.n	d8676 <pow+0xbe>
   d86b2:	ec47 6b10 	vmov	d0, r6, r7
   d86b6:	f000 ff7b 	bl	d95b0 <finite>
   d86ba:	2800      	cmp	r0, #0
   d86bc:	d0db      	beq.n	d8676 <pow+0xbe>
   d86be:	ec45 4b10 	vmov	d0, r4, r5
   d86c2:	f000 ff75 	bl	d95b0 <finite>
   d86c6:	2800      	cmp	r0, #0
   d86c8:	d0d5      	beq.n	d8676 <pow+0xbe>
   d86ca:	f99a 3000 	ldrsb.w	r3, [sl]
   d86ce:	4a82      	ldr	r2, [pc, #520]	; (d88d8 <pow+0x320>)
   d86d0:	9201      	str	r2, [sp, #4]
   d86d2:	2104      	movs	r1, #4
   d86d4:	2200      	movs	r2, #0
   d86d6:	2b02      	cmp	r3, #2
   d86d8:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d86dc:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d86e0:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d86e4:	9100      	str	r1, [sp, #0]
   d86e6:	9208      	str	r2, [sp, #32]
   d86e8:	d003      	beq.n	d86f2 <pow+0x13a>
   d86ea:	4668      	mov	r0, sp
   d86ec:	f000 ff68 	bl	d95c0 <matherr>
   d86f0:	b970      	cbnz	r0, d8710 <pow+0x158>
   d86f2:	f7fd fddd 	bl	d62b0 <__errno>
   d86f6:	2322      	movs	r3, #34	; 0x22
   d86f8:	6003      	str	r3, [r0, #0]
   d86fa:	e009      	b.n	d8710 <pow+0x158>
   d86fc:	ed9f 7b70 	vldr	d7, [pc, #448]	; d88c0 <pow+0x308>
   d8700:	ed8d 7b06 	vstr	d7, [sp, #24]
   d8704:	4668      	mov	r0, sp
   d8706:	f000 ff5b 	bl	d95c0 <matherr>
   d870a:	2800      	cmp	r0, #0
   d870c:	f000 808e 	beq.w	d882c <pow+0x274>
   d8710:	9b08      	ldr	r3, [sp, #32]
   d8712:	b11b      	cbz	r3, d871c <pow+0x164>
   d8714:	f7fd fdcc 	bl	d62b0 <__errno>
   d8718:	9b08      	ldr	r3, [sp, #32]
   d871a:	6003      	str	r3, [r0, #0]
   d871c:	ed9d 0b06 	vldr	d0, [sp, #24]
   d8720:	b00b      	add	sp, #44	; 0x2c
   d8722:	ecbd 8b02 	vpop	{d8}
   d8726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d872a:	2200      	movs	r2, #0
   d872c:	2300      	movs	r3, #0
   d872e:	4620      	mov	r0, r4
   d8730:	4629      	mov	r1, r5
   d8732:	f001 fc99 	bl	da068 <__aeabi_dcmpeq>
   d8736:	2800      	cmp	r0, #0
   d8738:	d09d      	beq.n	d8676 <pow+0xbe>
   d873a:	ed9f 0b63 	vldr	d0, [pc, #396]	; d88c8 <pow+0x310>
   d873e:	4b66      	ldr	r3, [pc, #408]	; (d88d8 <pow+0x320>)
   d8740:	f8cd b020 	str.w	fp, [sp, #32]
   d8744:	2201      	movs	r2, #1
   d8746:	f1b8 0f02 	cmp.w	r8, #2
   d874a:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d874e:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d8752:	ed8d 0b06 	vstr	d0, [sp, #24]
   d8756:	e88d 000c 	stmia.w	sp, {r2, r3}
   d875a:	d1d3      	bne.n	d8704 <pow+0x14c>
   d875c:	e78f      	b.n	d867e <pow+0xc6>
   d875e:	ec47 6b10 	vmov	d0, r6, r7
   d8762:	f000 ff25 	bl	d95b0 <finite>
   d8766:	2800      	cmp	r0, #0
   d8768:	d097      	beq.n	d869a <pow+0xe2>
   d876a:	ec45 4b10 	vmov	d0, r4, r5
   d876e:	f000 ff1f 	bl	d95b0 <finite>
   d8772:	2800      	cmp	r0, #0
   d8774:	d091      	beq.n	d869a <pow+0xe2>
   d8776:	ec53 2b18 	vmov	r2, r3, d8
   d877a:	ee18 0a10 	vmov	r0, s16
   d877e:	4619      	mov	r1, r3
   d8780:	f001 fca4 	bl	da0cc <__aeabi_dcmpun>
   d8784:	2800      	cmp	r0, #0
   d8786:	d17c      	bne.n	d8882 <pow+0x2ca>
   d8788:	2303      	movs	r3, #3
   d878a:	f99a 8000 	ldrsb.w	r8, [sl]
   d878e:	9300      	str	r3, [sp, #0]
   d8790:	4b51      	ldr	r3, [pc, #324]	; (d88d8 <pow+0x320>)
   d8792:	9008      	str	r0, [sp, #32]
   d8794:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d8798:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d879c:	9301      	str	r3, [sp, #4]
   d879e:	f1b8 0f00 	cmp.w	r8, #0
   d87a2:	d148      	bne.n	d8836 <pow+0x27e>
   d87a4:	f8df 9144 	ldr.w	r9, [pc, #324]	; d88ec <pow+0x334>
   d87a8:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
   d87ac:	2200      	movs	r2, #0
   d87ae:	2300      	movs	r3, #0
   d87b0:	4630      	mov	r0, r6
   d87b2:	4639      	mov	r1, r7
   d87b4:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d87b8:	f001 fc60 	bl	da07c <__aeabi_dcmplt>
   d87bc:	2800      	cmp	r0, #0
   d87be:	d094      	beq.n	d86ea <pow+0x132>
   d87c0:	2200      	movs	r2, #0
   d87c2:	4b46      	ldr	r3, [pc, #280]	; (d88dc <pow+0x324>)
   d87c4:	4620      	mov	r0, r4
   d87c6:	4629      	mov	r1, r5
   d87c8:	f001 f9e6 	bl	d9b98 <__aeabi_dmul>
   d87cc:	4604      	mov	r4, r0
   d87ce:	460d      	mov	r5, r1
   d87d0:	ec45 4b10 	vmov	d0, r4, r5
   d87d4:	f000 ff00 	bl	d95d8 <rint>
   d87d8:	4620      	mov	r0, r4
   d87da:	ec53 2b10 	vmov	r2, r3, d0
   d87de:	4629      	mov	r1, r5
   d87e0:	f001 fc42 	bl	da068 <__aeabi_dcmpeq>
   d87e4:	2800      	cmp	r0, #0
   d87e6:	d149      	bne.n	d887c <pow+0x2c4>
   d87e8:	4b3d      	ldr	r3, [pc, #244]	; (d88e0 <pow+0x328>)
   d87ea:	f99a 8000 	ldrsb.w	r8, [sl]
   d87ee:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d87f2:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d87f6:	f1b8 0f02 	cmp.w	r8, #2
   d87fa:	f47f af76 	bne.w	d86ea <pow+0x132>
   d87fe:	e778      	b.n	d86f2 <pow+0x13a>
   d8800:	4a35      	ldr	r2, [pc, #212]	; (d88d8 <pow+0x320>)
   d8802:	f99a 3000 	ldrsb.w	r3, [sl]
   d8806:	f8cd b020 	str.w	fp, [sp, #32]
   d880a:	2101      	movs	r1, #1
   d880c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d8810:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d8814:	e88d 0006 	stmia.w	sp, {r1, r2}
   d8818:	2b00      	cmp	r3, #0
   d881a:	f43f af6f 	beq.w	d86fc <pow+0x144>
   d881e:	4931      	ldr	r1, [pc, #196]	; (d88e4 <pow+0x32c>)
   d8820:	2000      	movs	r0, #0
   d8822:	2b02      	cmp	r3, #2
   d8824:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d8828:	f47f af6c 	bne.w	d8704 <pow+0x14c>
   d882c:	f7fd fd40 	bl	d62b0 <__errno>
   d8830:	2321      	movs	r3, #33	; 0x21
   d8832:	6003      	str	r3, [r0, #0]
   d8834:	e76c      	b.n	d8710 <pow+0x158>
   d8836:	ed9f 7b26 	vldr	d7, [pc, #152]	; d88d0 <pow+0x318>
   d883a:	2200      	movs	r2, #0
   d883c:	2300      	movs	r3, #0
   d883e:	4630      	mov	r0, r6
   d8840:	4639      	mov	r1, r7
   d8842:	ed8d 7b06 	vstr	d7, [sp, #24]
   d8846:	f001 fc19 	bl	da07c <__aeabi_dcmplt>
   d884a:	2800      	cmp	r0, #0
   d884c:	d0d3      	beq.n	d87f6 <pow+0x23e>
   d884e:	2200      	movs	r2, #0
   d8850:	4b22      	ldr	r3, [pc, #136]	; (d88dc <pow+0x324>)
   d8852:	4620      	mov	r0, r4
   d8854:	4629      	mov	r1, r5
   d8856:	f001 f99f 	bl	d9b98 <__aeabi_dmul>
   d885a:	4604      	mov	r4, r0
   d885c:	460d      	mov	r5, r1
   d885e:	ec45 4b10 	vmov	d0, r4, r5
   d8862:	f000 feb9 	bl	d95d8 <rint>
   d8866:	4620      	mov	r0, r4
   d8868:	ec53 2b10 	vmov	r2, r3, d0
   d886c:	4629      	mov	r1, r5
   d886e:	f001 fbfb 	bl	da068 <__aeabi_dcmpeq>
   d8872:	b918      	cbnz	r0, d887c <pow+0x2c4>
   d8874:	4b1b      	ldr	r3, [pc, #108]	; (d88e4 <pow+0x32c>)
   d8876:	2200      	movs	r2, #0
   d8878:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d887c:	f99a 8000 	ldrsb.w	r8, [sl]
   d8880:	e7b9      	b.n	d87f6 <pow+0x23e>
   d8882:	4b15      	ldr	r3, [pc, #84]	; (d88d8 <pow+0x320>)
   d8884:	f99a 9000 	ldrsb.w	r9, [sl]
   d8888:	f8cd 8020 	str.w	r8, [sp, #32]
   d888c:	2201      	movs	r2, #1
   d888e:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d8892:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d8896:	e88d 000c 	stmia.w	sp, {r2, r3}
   d889a:	f1b9 0f00 	cmp.w	r9, #0
   d889e:	f43f af2d 	beq.w	d86fc <pow+0x144>
   d88a2:	2200      	movs	r2, #0
   d88a4:	2300      	movs	r3, #0
   d88a6:	4610      	mov	r0, r2
   d88a8:	4619      	mov	r1, r3
   d88aa:	f001 fa9f 	bl	d9dec <__aeabi_ddiv>
   d88ae:	f1b9 0f02 	cmp.w	r9, #2
   d88b2:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d88b6:	d0b9      	beq.n	d882c <pow+0x274>
   d88b8:	e724      	b.n	d8704 <pow+0x14c>
   d88ba:	bf00      	nop
   d88bc:	f3af 8000 	nop.w
	...
   d88cc:	3ff00000 	.word	0x3ff00000
   d88d0:	00000000 	.word	0x00000000
   d88d4:	7ff00000 	.word	0x7ff00000
   d88d8:	000dbe0c 	.word	0x000dbe0c
   d88dc:	3fe00000 	.word	0x3fe00000
   d88e0:	c7efffff 	.word	0xc7efffff
   d88e4:	fff00000 	.word	0xfff00000
   d88e8:	2003e0b8 	.word	0x2003e0b8
   d88ec:	47efffff 	.word	0x47efffff

000d88f0 <__ieee754_pow>:
   d88f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d88f4:	ec51 0b11 	vmov	r0, r1, d1
   d88f8:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   d88fc:	ea58 0400 	orrs.w	r4, r8, r0
   d8900:	b093      	sub	sp, #76	; 0x4c
   d8902:	d03c      	beq.n	d897e <__ieee754_pow+0x8e>
   d8904:	ec53 2b10 	vmov	r2, r3, d0
   d8908:	4e6d      	ldr	r6, [pc, #436]	; (d8ac0 <__ieee754_pow+0x1d0>)
   d890a:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   d890e:	42b4      	cmp	r4, r6
   d8910:	ee10 aa10 	vmov	sl, s0
   d8914:	461d      	mov	r5, r3
   d8916:	dc2b      	bgt.n	d8970 <__ieee754_pow+0x80>
   d8918:	4689      	mov	r9, r1
   d891a:	ee11 ea10 	vmov	lr, s2
   d891e:	d026      	beq.n	d896e <__ieee754_pow+0x7e>
   d8920:	45b0      	cmp	r8, r6
   d8922:	dc25      	bgt.n	d8970 <__ieee754_pow+0x80>
   d8924:	4e66      	ldr	r6, [pc, #408]	; (d8ac0 <__ieee754_pow+0x1d0>)
   d8926:	45b0      	cmp	r8, r6
   d8928:	d077      	beq.n	d8a1a <__ieee754_pow+0x12a>
   d892a:	2d00      	cmp	r5, #0
   d892c:	4616      	mov	r6, r2
   d892e:	461f      	mov	r7, r3
   d8930:	e9cd 0100 	strd	r0, r1, [sp]
   d8934:	db75      	blt.n	d8a22 <__ieee754_pow+0x132>
   d8936:	f04f 0b00 	mov.w	fp, #0
   d893a:	f1be 0f00 	cmp.w	lr, #0
   d893e:	d12d      	bne.n	d899c <__ieee754_pow+0xac>
   d8940:	4b5f      	ldr	r3, [pc, #380]	; (d8ac0 <__ieee754_pow+0x1d0>)
   d8942:	4598      	cmp	r8, r3
   d8944:	f000 8089 	beq.w	d8a5a <__ieee754_pow+0x16a>
   d8948:	4b5e      	ldr	r3, [pc, #376]	; (d8ac4 <__ieee754_pow+0x1d4>)
   d894a:	4598      	cmp	r8, r3
   d894c:	d05e      	beq.n	d8a0c <__ieee754_pow+0x11c>
   d894e:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
   d8952:	f000 83de 	beq.w	d9112 <__ieee754_pow+0x822>
   d8956:	4b5c      	ldr	r3, [pc, #368]	; (d8ac8 <__ieee754_pow+0x1d8>)
   d8958:	4599      	cmp	r9, r3
   d895a:	d11f      	bne.n	d899c <__ieee754_pow+0xac>
   d895c:	2d00      	cmp	r5, #0
   d895e:	db1d      	blt.n	d899c <__ieee754_pow+0xac>
   d8960:	ec47 6b10 	vmov	d0, r6, r7
   d8964:	b013      	add	sp, #76	; 0x4c
   d8966:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d896a:	f000 bd49 	b.w	d9400 <__ieee754_sqrt>
   d896e:	b15a      	cbz	r2, d8988 <__ieee754_pow+0x98>
   d8970:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
   d8974:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
   d8978:	ea54 030a 	orrs.w	r3, r4, sl
   d897c:	d106      	bne.n	d898c <__ieee754_pow+0x9c>
   d897e:	ed9f 0b4a 	vldr	d0, [pc, #296]	; d8aa8 <__ieee754_pow+0x1b8>
   d8982:	b013      	add	sp, #76	; 0x4c
   d8984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8988:	45a0      	cmp	r8, r4
   d898a:	ddcb      	ble.n	d8924 <__ieee754_pow+0x34>
   d898c:	484f      	ldr	r0, [pc, #316]	; (d8acc <__ieee754_pow+0x1dc>)
   d898e:	b013      	add	sp, #76	; 0x4c
   d8990:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8994:	f000 be18 	b.w	d95c8 <nan>
   d8998:	f04f 0b00 	mov.w	fp, #0
   d899c:	ec47 6b10 	vmov	d0, r6, r7
   d89a0:	f000 fdfe 	bl	d95a0 <fabs>
   d89a4:	ec51 0b10 	vmov	r0, r1, d0
   d89a8:	f1ba 0f00 	cmp.w	sl, #0
   d89ac:	d01e      	beq.n	d89ec <__ieee754_pow+0xfc>
   d89ae:	0fed      	lsrs	r5, r5, #31
   d89b0:	f105 3aff 	add.w	sl, r5, #4294967295
   d89b4:	ea5b 030a 	orrs.w	r3, fp, sl
   d89b8:	d063      	beq.n	d8a82 <__ieee754_pow+0x192>
   d89ba:	4b45      	ldr	r3, [pc, #276]	; (d8ad0 <__ieee754_pow+0x1e0>)
   d89bc:	4598      	cmp	r8, r3
   d89be:	f340 808d 	ble.w	d8adc <__ieee754_pow+0x1ec>
   d89c2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   d89c6:	4598      	cmp	r8, r3
   d89c8:	f340 8438 	ble.w	d923c <__ieee754_pow+0x94c>
   d89cc:	4b41      	ldr	r3, [pc, #260]	; (d8ad4 <__ieee754_pow+0x1e4>)
   d89ce:	429c      	cmp	r4, r3
   d89d0:	dd62      	ble.n	d8a98 <__ieee754_pow+0x1a8>
   d89d2:	f1b9 0f00 	cmp.w	r9, #0
   d89d6:	dd62      	ble.n	d8a9e <__ieee754_pow+0x1ae>
   d89d8:	a335      	add	r3, pc, #212	; (adr r3, d8ab0 <__ieee754_pow+0x1c0>)
   d89da:	e9d3 2300 	ldrd	r2, r3, [r3]
   d89de:	4610      	mov	r0, r2
   d89e0:	4619      	mov	r1, r3
   d89e2:	f001 f8d9 	bl	d9b98 <__aeabi_dmul>
   d89e6:	ec41 0b10 	vmov	d0, r0, r1
   d89ea:	e7ca      	b.n	d8982 <__ieee754_pow+0x92>
   d89ec:	b124      	cbz	r4, d89f8 <__ieee754_pow+0x108>
   d89ee:	4b35      	ldr	r3, [pc, #212]	; (d8ac4 <__ieee754_pow+0x1d4>)
   d89f0:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
   d89f4:	429a      	cmp	r2, r3
   d89f6:	d1da      	bne.n	d89ae <__ieee754_pow+0xbe>
   d89f8:	f1b9 0f00 	cmp.w	r9, #0
   d89fc:	f2c0 83cb 	blt.w	d9196 <__ieee754_pow+0x8a6>
   d8a00:	2d00      	cmp	r5, #0
   d8a02:	f2c0 8374 	blt.w	d90ee <__ieee754_pow+0x7fe>
   d8a06:	ec41 0b10 	vmov	d0, r0, r1
   d8a0a:	e7ba      	b.n	d8982 <__ieee754_pow+0x92>
   d8a0c:	f1b9 0f00 	cmp.w	r9, #0
   d8a10:	f2c0 847a 	blt.w	d9308 <__ieee754_pow+0xa18>
   d8a14:	ec47 6b10 	vmov	d0, r6, r7
   d8a18:	e7b3      	b.n	d8982 <__ieee754_pow+0x92>
   d8a1a:	f1be 0f00 	cmp.w	lr, #0
   d8a1e:	d084      	beq.n	d892a <__ieee754_pow+0x3a>
   d8a20:	e7a6      	b.n	d8970 <__ieee754_pow+0x80>
   d8a22:	4b2d      	ldr	r3, [pc, #180]	; (d8ad8 <__ieee754_pow+0x1e8>)
   d8a24:	4598      	cmp	r8, r3
   d8a26:	dc29      	bgt.n	d8a7c <__ieee754_pow+0x18c>
   d8a28:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
   d8a2c:	4598      	cmp	r8, r3
   d8a2e:	dd82      	ble.n	d8936 <__ieee754_pow+0x46>
   d8a30:	ea4f 5328 	mov.w	r3, r8, asr #20
   d8a34:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   d8a38:	2b14      	cmp	r3, #20
   d8a3a:	f340 847f 	ble.w	d933c <__ieee754_pow+0xa4c>
   d8a3e:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
   d8a42:	fa2e f203 	lsr.w	r2, lr, r3
   d8a46:	fa02 f303 	lsl.w	r3, r2, r3
   d8a4a:	459e      	cmp	lr, r3
   d8a4c:	f47f af73 	bne.w	d8936 <__ieee754_pow+0x46>
   d8a50:	f002 0201 	and.w	r2, r2, #1
   d8a54:	f1c2 0b02 	rsb	fp, r2, #2
   d8a58:	e76f      	b.n	d893a <__ieee754_pow+0x4a>
   d8a5a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
   d8a5e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   d8a62:	ea53 030a 	orrs.w	r3, r3, sl
   d8a66:	d08a      	beq.n	d897e <__ieee754_pow+0x8e>
   d8a68:	4b1a      	ldr	r3, [pc, #104]	; (d8ad4 <__ieee754_pow+0x1e4>)
   d8a6a:	429c      	cmp	r4, r3
   d8a6c:	f340 8385 	ble.w	d917a <__ieee754_pow+0x88a>
   d8a70:	f1b9 0f00 	cmp.w	r9, #0
   d8a74:	db13      	blt.n	d8a9e <__ieee754_pow+0x1ae>
   d8a76:	ed9d 0b00 	vldr	d0, [sp]
   d8a7a:	e782      	b.n	d8982 <__ieee754_pow+0x92>
   d8a7c:	f04f 0b02 	mov.w	fp, #2
   d8a80:	e75b      	b.n	d893a <__ieee754_pow+0x4a>
   d8a82:	4632      	mov	r2, r6
   d8a84:	463b      	mov	r3, r7
   d8a86:	4610      	mov	r0, r2
   d8a88:	4619      	mov	r1, r3
   d8a8a:	f000 fed1 	bl	d9830 <__aeabi_dsub>
   d8a8e:	4602      	mov	r2, r0
   d8a90:	460b      	mov	r3, r1
   d8a92:	f001 f9ab 	bl	d9dec <__aeabi_ddiv>
   d8a96:	e7b6      	b.n	d8a06 <__ieee754_pow+0x116>
   d8a98:	f1b9 0f00 	cmp.w	r9, #0
   d8a9c:	db9c      	blt.n	d89d8 <__ieee754_pow+0xe8>
   d8a9e:	ed9f 0b06 	vldr	d0, [pc, #24]	; d8ab8 <__ieee754_pow+0x1c8>
   d8aa2:	e76e      	b.n	d8982 <__ieee754_pow+0x92>
   d8aa4:	f3af 8000 	nop.w
   d8aa8:	00000000 	.word	0x00000000
   d8aac:	3ff00000 	.word	0x3ff00000
   d8ab0:	8800759c 	.word	0x8800759c
   d8ab4:	7e37e43c 	.word	0x7e37e43c
	...
   d8ac0:	7ff00000 	.word	0x7ff00000
   d8ac4:	3ff00000 	.word	0x3ff00000
   d8ac8:	3fe00000 	.word	0x3fe00000
   d8acc:	000dbe10 	.word	0x000dbe10
   d8ad0:	41e00000 	.word	0x41e00000
   d8ad4:	3fefffff 	.word	0x3fefffff
   d8ad8:	433fffff 	.word	0x433fffff
   d8adc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
   d8ae0:	f04f 0200 	mov.w	r2, #0
   d8ae4:	da05      	bge.n	d8af2 <__ieee754_pow+0x202>
   d8ae6:	4bd6      	ldr	r3, [pc, #856]	; (d8e40 <__ieee754_pow+0x550>)
   d8ae8:	f001 f856 	bl	d9b98 <__aeabi_dmul>
   d8aec:	f06f 0234 	mvn.w	r2, #52	; 0x34
   d8af0:	460c      	mov	r4, r1
   d8af2:	1523      	asrs	r3, r4, #20
   d8af4:	4ed3      	ldr	r6, [pc, #844]	; (d8e44 <__ieee754_pow+0x554>)
   d8af6:	f3c4 0413 	ubfx	r4, r4, #0, #20
   d8afa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   d8afe:	4413      	add	r3, r2
   d8b00:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
   d8b04:	42b4      	cmp	r4, r6
   d8b06:	461a      	mov	r2, r3
   d8b08:	930d      	str	r3, [sp, #52]	; 0x34
   d8b0a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
   d8b0e:	f340 8349 	ble.w	d91a4 <__ieee754_pow+0x8b4>
   d8b12:	4bcd      	ldr	r3, [pc, #820]	; (d8e48 <__ieee754_pow+0x558>)
   d8b14:	429c      	cmp	r4, r3
   d8b16:	f340 842d 	ble.w	d9374 <__ieee754_pow+0xa84>
   d8b1a:	ed9f 7bb3 	vldr	d7, [pc, #716]	; d8de8 <__ieee754_pow+0x4f8>
   d8b1e:	ed8d 7b08 	vstr	d7, [sp, #32]
   d8b22:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d8b26:	ed9f 7bb2 	vldr	d7, [pc, #712]	; d8df0 <__ieee754_pow+0x500>
   d8b2a:	4613      	mov	r3, r2
   d8b2c:	ed8d 7b06 	vstr	d7, [sp, #24]
   d8b30:	3301      	adds	r3, #1
   d8b32:	930d      	str	r3, [sp, #52]	; 0x34
   d8b34:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
   d8b38:	f04f 0800 	mov.w	r8, #0
   d8b3c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d8b40:	4629      	mov	r1, r5
   d8b42:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d8b46:	f000 fe73 	bl	d9830 <__aeabi_dsub>
   d8b4a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d8b4e:	4606      	mov	r6, r0
   d8b50:	460f      	mov	r7, r1
   d8b52:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d8b56:	f000 fe6d 	bl	d9834 <__adddf3>
   d8b5a:	4602      	mov	r2, r0
   d8b5c:	460b      	mov	r3, r1
   d8b5e:	2000      	movs	r0, #0
   d8b60:	49ba      	ldr	r1, [pc, #744]	; (d8e4c <__ieee754_pow+0x55c>)
   d8b62:	f001 f943 	bl	d9dec <__aeabi_ddiv>
   d8b66:	4603      	mov	r3, r0
   d8b68:	460c      	mov	r4, r1
   d8b6a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
   d8b6e:	4602      	mov	r2, r0
   d8b70:	460b      	mov	r3, r1
   d8b72:	4630      	mov	r0, r6
   d8b74:	4639      	mov	r1, r7
   d8b76:	f001 f80f 	bl	d9b98 <__aeabi_dmul>
   d8b7a:	106b      	asrs	r3, r5, #1
   d8b7c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   d8b80:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
   d8b84:	eb03 0508 	add.w	r5, r3, r8
   d8b88:	460a      	mov	r2, r1
   d8b8a:	2300      	movs	r3, #0
   d8b8c:	4601      	mov	r1, r0
   d8b8e:	e9cd 1202 	strd	r1, r2, [sp, #8]
   d8b92:	9302      	str	r3, [sp, #8]
   d8b94:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
   d8b98:	2400      	movs	r4, #0
   d8b9a:	e9cd 1204 	strd	r1, r2, [sp, #16]
   d8b9e:	462b      	mov	r3, r5
   d8ba0:	4622      	mov	r2, r4
   d8ba2:	4640      	mov	r0, r8
   d8ba4:	4649      	mov	r1, r9
   d8ba6:	f000 fff7 	bl	d9b98 <__aeabi_dmul>
   d8baa:	4602      	mov	r2, r0
   d8bac:	460b      	mov	r3, r1
   d8bae:	4630      	mov	r0, r6
   d8bb0:	4639      	mov	r1, r7
   d8bb2:	f000 fe3d 	bl	d9830 <__aeabi_dsub>
   d8bb6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d8bba:	4606      	mov	r6, r0
   d8bbc:	460f      	mov	r7, r1
   d8bbe:	4620      	mov	r0, r4
   d8bc0:	4629      	mov	r1, r5
   d8bc2:	f000 fe35 	bl	d9830 <__aeabi_dsub>
   d8bc6:	4602      	mov	r2, r0
   d8bc8:	460b      	mov	r3, r1
   d8bca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d8bce:	f000 fe2f 	bl	d9830 <__aeabi_dsub>
   d8bd2:	4642      	mov	r2, r8
   d8bd4:	464b      	mov	r3, r9
   d8bd6:	f000 ffdf 	bl	d9b98 <__aeabi_dmul>
   d8bda:	4602      	mov	r2, r0
   d8bdc:	460b      	mov	r3, r1
   d8bde:	4630      	mov	r0, r6
   d8be0:	4639      	mov	r1, r7
   d8be2:	f000 fe25 	bl	d9830 <__aeabi_dsub>
   d8be6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   d8bea:	f000 ffd5 	bl	d9b98 <__aeabi_dmul>
   d8bee:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
   d8bf2:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d8bf6:	4622      	mov	r2, r4
   d8bf8:	462b      	mov	r3, r5
   d8bfa:	4620      	mov	r0, r4
   d8bfc:	4629      	mov	r1, r5
   d8bfe:	f000 ffcb 	bl	d9b98 <__aeabi_dmul>
   d8c02:	a37d      	add	r3, pc, #500	; (adr r3, d8df8 <__ieee754_pow+0x508>)
   d8c04:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8c08:	4604      	mov	r4, r0
   d8c0a:	460d      	mov	r5, r1
   d8c0c:	f000 ffc4 	bl	d9b98 <__aeabi_dmul>
   d8c10:	a37b      	add	r3, pc, #492	; (adr r3, d8e00 <__ieee754_pow+0x510>)
   d8c12:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8c16:	f000 fe0d 	bl	d9834 <__adddf3>
   d8c1a:	4622      	mov	r2, r4
   d8c1c:	462b      	mov	r3, r5
   d8c1e:	f000 ffbb 	bl	d9b98 <__aeabi_dmul>
   d8c22:	a379      	add	r3, pc, #484	; (adr r3, d8e08 <__ieee754_pow+0x518>)
   d8c24:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8c28:	f000 fe04 	bl	d9834 <__adddf3>
   d8c2c:	4622      	mov	r2, r4
   d8c2e:	462b      	mov	r3, r5
   d8c30:	f000 ffb2 	bl	d9b98 <__aeabi_dmul>
   d8c34:	a376      	add	r3, pc, #472	; (adr r3, d8e10 <__ieee754_pow+0x520>)
   d8c36:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8c3a:	f000 fdfb 	bl	d9834 <__adddf3>
   d8c3e:	4622      	mov	r2, r4
   d8c40:	462b      	mov	r3, r5
   d8c42:	f000 ffa9 	bl	d9b98 <__aeabi_dmul>
   d8c46:	a374      	add	r3, pc, #464	; (adr r3, d8e18 <__ieee754_pow+0x528>)
   d8c48:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8c4c:	f000 fdf2 	bl	d9834 <__adddf3>
   d8c50:	4622      	mov	r2, r4
   d8c52:	462b      	mov	r3, r5
   d8c54:	f000 ffa0 	bl	d9b98 <__aeabi_dmul>
   d8c58:	a371      	add	r3, pc, #452	; (adr r3, d8e20 <__ieee754_pow+0x530>)
   d8c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8c5e:	f000 fde9 	bl	d9834 <__adddf3>
   d8c62:	4622      	mov	r2, r4
   d8c64:	4606      	mov	r6, r0
   d8c66:	460f      	mov	r7, r1
   d8c68:	462b      	mov	r3, r5
   d8c6a:	4620      	mov	r0, r4
   d8c6c:	4629      	mov	r1, r5
   d8c6e:	f000 ff93 	bl	d9b98 <__aeabi_dmul>
   d8c72:	4602      	mov	r2, r0
   d8c74:	460b      	mov	r3, r1
   d8c76:	4630      	mov	r0, r6
   d8c78:	4639      	mov	r1, r7
   d8c7a:	f000 ff8d 	bl	d9b98 <__aeabi_dmul>
   d8c7e:	4642      	mov	r2, r8
   d8c80:	4604      	mov	r4, r0
   d8c82:	460d      	mov	r5, r1
   d8c84:	464b      	mov	r3, r9
   d8c86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d8c8a:	f000 fdd3 	bl	d9834 <__adddf3>
   d8c8e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d8c92:	f000 ff81 	bl	d9b98 <__aeabi_dmul>
   d8c96:	4622      	mov	r2, r4
   d8c98:	462b      	mov	r3, r5
   d8c9a:	f000 fdcb 	bl	d9834 <__adddf3>
   d8c9e:	4642      	mov	r2, r8
   d8ca0:	4606      	mov	r6, r0
   d8ca2:	460f      	mov	r7, r1
   d8ca4:	464b      	mov	r3, r9
   d8ca6:	4640      	mov	r0, r8
   d8ca8:	4649      	mov	r1, r9
   d8caa:	f000 ff75 	bl	d9b98 <__aeabi_dmul>
   d8cae:	2200      	movs	r2, #0
   d8cb0:	4b67      	ldr	r3, [pc, #412]	; (d8e50 <__ieee754_pow+0x560>)
   d8cb2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d8cb6:	f000 fdbd 	bl	d9834 <__adddf3>
   d8cba:	4632      	mov	r2, r6
   d8cbc:	463b      	mov	r3, r7
   d8cbe:	f000 fdb9 	bl	d9834 <__adddf3>
   d8cc2:	9802      	ldr	r0, [sp, #8]
   d8cc4:	460d      	mov	r5, r1
   d8cc6:	4604      	mov	r4, r0
   d8cc8:	4622      	mov	r2, r4
   d8cca:	462b      	mov	r3, r5
   d8ccc:	4640      	mov	r0, r8
   d8cce:	4649      	mov	r1, r9
   d8cd0:	f000 ff62 	bl	d9b98 <__aeabi_dmul>
   d8cd4:	2200      	movs	r2, #0
   d8cd6:	4680      	mov	r8, r0
   d8cd8:	4689      	mov	r9, r1
   d8cda:	4b5d      	ldr	r3, [pc, #372]	; (d8e50 <__ieee754_pow+0x560>)
   d8cdc:	4620      	mov	r0, r4
   d8cde:	4629      	mov	r1, r5
   d8ce0:	f000 fda6 	bl	d9830 <__aeabi_dsub>
   d8ce4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d8ce8:	f000 fda2 	bl	d9830 <__aeabi_dsub>
   d8cec:	4602      	mov	r2, r0
   d8cee:	460b      	mov	r3, r1
   d8cf0:	4630      	mov	r0, r6
   d8cf2:	4639      	mov	r1, r7
   d8cf4:	f000 fd9c 	bl	d9830 <__aeabi_dsub>
   d8cf8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d8cfc:	f000 ff4c 	bl	d9b98 <__aeabi_dmul>
   d8d00:	4622      	mov	r2, r4
   d8d02:	4606      	mov	r6, r0
   d8d04:	460f      	mov	r7, r1
   d8d06:	462b      	mov	r3, r5
   d8d08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d8d0c:	f000 ff44 	bl	d9b98 <__aeabi_dmul>
   d8d10:	4602      	mov	r2, r0
   d8d12:	460b      	mov	r3, r1
   d8d14:	4630      	mov	r0, r6
   d8d16:	4639      	mov	r1, r7
   d8d18:	f000 fd8c 	bl	d9834 <__adddf3>
   d8d1c:	4606      	mov	r6, r0
   d8d1e:	460f      	mov	r7, r1
   d8d20:	4602      	mov	r2, r0
   d8d22:	460b      	mov	r3, r1
   d8d24:	4640      	mov	r0, r8
   d8d26:	4649      	mov	r1, r9
   d8d28:	e9cd 8904 	strd	r8, r9, [sp, #16]
   d8d2c:	f000 fd82 	bl	d9834 <__adddf3>
   d8d30:	9802      	ldr	r0, [sp, #8]
   d8d32:	a33d      	add	r3, pc, #244	; (adr r3, d8e28 <__ieee754_pow+0x538>)
   d8d34:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8d38:	4604      	mov	r4, r0
   d8d3a:	460d      	mov	r5, r1
   d8d3c:	f000 ff2c 	bl	d9b98 <__aeabi_dmul>
   d8d40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d8d44:	4680      	mov	r8, r0
   d8d46:	4689      	mov	r9, r1
   d8d48:	4620      	mov	r0, r4
   d8d4a:	4629      	mov	r1, r5
   d8d4c:	f000 fd70 	bl	d9830 <__aeabi_dsub>
   d8d50:	4602      	mov	r2, r0
   d8d52:	460b      	mov	r3, r1
   d8d54:	4630      	mov	r0, r6
   d8d56:	4639      	mov	r1, r7
   d8d58:	f000 fd6a 	bl	d9830 <__aeabi_dsub>
   d8d5c:	a334      	add	r3, pc, #208	; (adr r3, d8e30 <__ieee754_pow+0x540>)
   d8d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8d62:	f000 ff19 	bl	d9b98 <__aeabi_dmul>
   d8d66:	a334      	add	r3, pc, #208	; (adr r3, d8e38 <__ieee754_pow+0x548>)
   d8d68:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8d6c:	4606      	mov	r6, r0
   d8d6e:	460f      	mov	r7, r1
   d8d70:	4620      	mov	r0, r4
   d8d72:	4629      	mov	r1, r5
   d8d74:	f000 ff10 	bl	d9b98 <__aeabi_dmul>
   d8d78:	4602      	mov	r2, r0
   d8d7a:	460b      	mov	r3, r1
   d8d7c:	4630      	mov	r0, r6
   d8d7e:	4639      	mov	r1, r7
   d8d80:	f000 fd58 	bl	d9834 <__adddf3>
   d8d84:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   d8d88:	f000 fd54 	bl	d9834 <__adddf3>
   d8d8c:	4606      	mov	r6, r0
   d8d8e:	980d      	ldr	r0, [sp, #52]	; 0x34
   d8d90:	460f      	mov	r7, r1
   d8d92:	f000 fe9b 	bl	d9acc <__aeabi_i2d>
   d8d96:	4632      	mov	r2, r6
   d8d98:	4604      	mov	r4, r0
   d8d9a:	460d      	mov	r5, r1
   d8d9c:	463b      	mov	r3, r7
   d8d9e:	4640      	mov	r0, r8
   d8da0:	4649      	mov	r1, r9
   d8da2:	f000 fd47 	bl	d9834 <__adddf3>
   d8da6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d8daa:	f000 fd43 	bl	d9834 <__adddf3>
   d8dae:	4622      	mov	r2, r4
   d8db0:	462b      	mov	r3, r5
   d8db2:	f000 fd3f 	bl	d9834 <__adddf3>
   d8db6:	9802      	ldr	r0, [sp, #8]
   d8db8:	4622      	mov	r2, r4
   d8dba:	462b      	mov	r3, r5
   d8dbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d8dc0:	f000 fd36 	bl	d9830 <__aeabi_dsub>
   d8dc4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d8dc8:	f000 fd32 	bl	d9830 <__aeabi_dsub>
   d8dcc:	4642      	mov	r2, r8
   d8dce:	464b      	mov	r3, r9
   d8dd0:	f000 fd2e 	bl	d9830 <__aeabi_dsub>
   d8dd4:	4602      	mov	r2, r0
   d8dd6:	460b      	mov	r3, r1
   d8dd8:	4630      	mov	r0, r6
   d8dda:	4639      	mov	r1, r7
   d8ddc:	f000 fd28 	bl	d9830 <__aeabi_dsub>
   d8de0:	4680      	mov	r8, r0
   d8de2:	4689      	mov	r9, r1
   d8de4:	e036      	b.n	d8e54 <__ieee754_pow+0x564>
   d8de6:	bf00      	nop
	...
   d8df4:	3ff00000 	.word	0x3ff00000
   d8df8:	4a454eef 	.word	0x4a454eef
   d8dfc:	3fca7e28 	.word	0x3fca7e28
   d8e00:	93c9db65 	.word	0x93c9db65
   d8e04:	3fcd864a 	.word	0x3fcd864a
   d8e08:	a91d4101 	.word	0xa91d4101
   d8e0c:	3fd17460 	.word	0x3fd17460
   d8e10:	518f264d 	.word	0x518f264d
   d8e14:	3fd55555 	.word	0x3fd55555
   d8e18:	db6fabff 	.word	0xdb6fabff
   d8e1c:	3fdb6db6 	.word	0x3fdb6db6
   d8e20:	33333303 	.word	0x33333303
   d8e24:	3fe33333 	.word	0x3fe33333
   d8e28:	e0000000 	.word	0xe0000000
   d8e2c:	3feec709 	.word	0x3feec709
   d8e30:	dc3a03fd 	.word	0xdc3a03fd
   d8e34:	3feec709 	.word	0x3feec709
   d8e38:	145b01f5 	.word	0x145b01f5
   d8e3c:	be3e2fe0 	.word	0xbe3e2fe0
   d8e40:	43400000 	.word	0x43400000
   d8e44:	0003988e 	.word	0x0003988e
   d8e48:	000bb679 	.word	0x000bb679
   d8e4c:	3ff00000 	.word	0x3ff00000
   d8e50:	40080000 	.word	0x40080000
   d8e54:	f10b 33ff 	add.w	r3, fp, #4294967295
   d8e58:	ea53 030a 	orrs.w	r3, r3, sl
   d8e5c:	f000 8188 	beq.w	d9170 <__ieee754_pow+0x880>
   d8e60:	ed9f 7bd7 	vldr	d7, [pc, #860]	; d91c0 <__ieee754_pow+0x8d0>
   d8e64:	ed8d 7b06 	vstr	d7, [sp, #24]
   d8e68:	e9dd ab00 	ldrd	sl, fp, [sp]
   d8e6c:	4653      	mov	r3, sl
   d8e6e:	465c      	mov	r4, fp
   d8e70:	e9cd 3400 	strd	r3, r4, [sp]
   d8e74:	2300      	movs	r3, #0
   d8e76:	9300      	str	r3, [sp, #0]
   d8e78:	e9dd 4500 	ldrd	r4, r5, [sp]
   d8e7c:	4650      	mov	r0, sl
   d8e7e:	4622      	mov	r2, r4
   d8e80:	462b      	mov	r3, r5
   d8e82:	4659      	mov	r1, fp
   d8e84:	f000 fcd4 	bl	d9830 <__aeabi_dsub>
   d8e88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d8e8c:	f000 fe84 	bl	d9b98 <__aeabi_dmul>
   d8e90:	4652      	mov	r2, sl
   d8e92:	4606      	mov	r6, r0
   d8e94:	460f      	mov	r7, r1
   d8e96:	465b      	mov	r3, fp
   d8e98:	4640      	mov	r0, r8
   d8e9a:	4649      	mov	r1, r9
   d8e9c:	f000 fe7c 	bl	d9b98 <__aeabi_dmul>
   d8ea0:	4602      	mov	r2, r0
   d8ea2:	460b      	mov	r3, r1
   d8ea4:	4630      	mov	r0, r6
   d8ea6:	4639      	mov	r1, r7
   d8ea8:	f000 fcc4 	bl	d9834 <__adddf3>
   d8eac:	4622      	mov	r2, r4
   d8eae:	4680      	mov	r8, r0
   d8eb0:	4689      	mov	r9, r1
   d8eb2:	462b      	mov	r3, r5
   d8eb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d8eb8:	e9cd 8904 	strd	r8, r9, [sp, #16]
   d8ebc:	f000 fe6c 	bl	d9b98 <__aeabi_dmul>
   d8ec0:	460b      	mov	r3, r1
   d8ec2:	4602      	mov	r2, r0
   d8ec4:	4606      	mov	r6, r0
   d8ec6:	460f      	mov	r7, r1
   d8ec8:	4640      	mov	r0, r8
   d8eca:	4649      	mov	r1, r9
   d8ecc:	f000 fcb2 	bl	d9834 <__adddf3>
   d8ed0:	4bd5      	ldr	r3, [pc, #852]	; (d9228 <__ieee754_pow+0x938>)
   d8ed2:	4299      	cmp	r1, r3
   d8ed4:	4604      	mov	r4, r0
   d8ed6:	460d      	mov	r5, r1
   d8ed8:	468a      	mov	sl, r1
   d8eda:	f340 8123 	ble.w	d9124 <__ieee754_pow+0x834>
   d8ede:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   d8ee2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   d8ee6:	4303      	orrs	r3, r0
   d8ee8:	f040 8218 	bne.w	d931c <__ieee754_pow+0xa2c>
   d8eec:	a3b6      	add	r3, pc, #728	; (adr r3, d91c8 <__ieee754_pow+0x8d8>)
   d8eee:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8ef2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d8ef6:	f000 fc9d 	bl	d9834 <__adddf3>
   d8efa:	4632      	mov	r2, r6
   d8efc:	4680      	mov	r8, r0
   d8efe:	4689      	mov	r9, r1
   d8f00:	463b      	mov	r3, r7
   d8f02:	4620      	mov	r0, r4
   d8f04:	4629      	mov	r1, r5
   d8f06:	f000 fc93 	bl	d9830 <__aeabi_dsub>
   d8f0a:	4602      	mov	r2, r0
   d8f0c:	460b      	mov	r3, r1
   d8f0e:	4640      	mov	r0, r8
   d8f10:	4649      	mov	r1, r9
   d8f12:	f001 f8d1 	bl	da0b8 <__aeabi_dcmpgt>
   d8f16:	2800      	cmp	r0, #0
   d8f18:	f040 8200 	bne.w	d931c <__ieee754_pow+0xa2c>
   d8f1c:	46a8      	mov	r8, r5
   d8f1e:	ea4f 5328 	mov.w	r3, r8, asr #20
   d8f22:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   d8f26:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   d8f2a:	fa42 f303 	asr.w	r3, r2, r3
   d8f2e:	4453      	add	r3, sl
   d8f30:	f3c3 520a 	ubfx	r2, r3, #20, #11
   d8f34:	4dbd      	ldr	r5, [pc, #756]	; (d922c <__ieee754_pow+0x93c>)
   d8f36:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   d8f3a:	4115      	asrs	r5, r2
   d8f3c:	f3c3 0b13 	ubfx	fp, r3, #0, #20
   d8f40:	2000      	movs	r0, #0
   d8f42:	f1c2 0414 	rsb	r4, r2, #20
   d8f46:	ea23 0105 	bic.w	r1, r3, r5
   d8f4a:	f44b 1b80 	orr.w	fp, fp, #1048576	; 0x100000
   d8f4e:	f1ba 0f00 	cmp.w	sl, #0
   d8f52:	4602      	mov	r2, r0
   d8f54:	460b      	mov	r3, r1
   d8f56:	fa4b fb04 	asr.w	fp, fp, r4
   d8f5a:	4630      	mov	r0, r6
   d8f5c:	4639      	mov	r1, r7
   d8f5e:	bfb8      	it	lt
   d8f60:	f1cb 0b00 	rsblt	fp, fp, #0
   d8f64:	f000 fc64 	bl	d9830 <__aeabi_dsub>
   d8f68:	4602      	mov	r2, r0
   d8f6a:	460b      	mov	r3, r1
   d8f6c:	4606      	mov	r6, r0
   d8f6e:	460f      	mov	r7, r1
   d8f70:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d8f74:	f000 fc5e 	bl	d9834 <__adddf3>
   d8f78:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
   d8f7c:	2400      	movs	r4, #0
   d8f7e:	a394      	add	r3, pc, #592	; (adr r3, d91d0 <__ieee754_pow+0x8e0>)
   d8f80:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8f84:	4620      	mov	r0, r4
   d8f86:	460d      	mov	r5, r1
   d8f88:	f000 fe06 	bl	d9b98 <__aeabi_dmul>
   d8f8c:	4632      	mov	r2, r6
   d8f8e:	4680      	mov	r8, r0
   d8f90:	4689      	mov	r9, r1
   d8f92:	463b      	mov	r3, r7
   d8f94:	4620      	mov	r0, r4
   d8f96:	4629      	mov	r1, r5
   d8f98:	f000 fc4a 	bl	d9830 <__aeabi_dsub>
   d8f9c:	4602      	mov	r2, r0
   d8f9e:	460b      	mov	r3, r1
   d8fa0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d8fa4:	f000 fc44 	bl	d9830 <__aeabi_dsub>
   d8fa8:	a38b      	add	r3, pc, #556	; (adr r3, d91d8 <__ieee754_pow+0x8e8>)
   d8faa:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8fae:	f000 fdf3 	bl	d9b98 <__aeabi_dmul>
   d8fb2:	a38b      	add	r3, pc, #556	; (adr r3, d91e0 <__ieee754_pow+0x8f0>)
   d8fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8fb8:	4606      	mov	r6, r0
   d8fba:	460f      	mov	r7, r1
   d8fbc:	4620      	mov	r0, r4
   d8fbe:	4629      	mov	r1, r5
   d8fc0:	f000 fdea 	bl	d9b98 <__aeabi_dmul>
   d8fc4:	4602      	mov	r2, r0
   d8fc6:	460b      	mov	r3, r1
   d8fc8:	4630      	mov	r0, r6
   d8fca:	4639      	mov	r1, r7
   d8fcc:	f000 fc32 	bl	d9834 <__adddf3>
   d8fd0:	4606      	mov	r6, r0
   d8fd2:	460f      	mov	r7, r1
   d8fd4:	4602      	mov	r2, r0
   d8fd6:	460b      	mov	r3, r1
   d8fd8:	4640      	mov	r0, r8
   d8fda:	4649      	mov	r1, r9
   d8fdc:	f000 fc2a 	bl	d9834 <__adddf3>
   d8fe0:	4642      	mov	r2, r8
   d8fe2:	464b      	mov	r3, r9
   d8fe4:	4604      	mov	r4, r0
   d8fe6:	460d      	mov	r5, r1
   d8fe8:	f000 fc22 	bl	d9830 <__aeabi_dsub>
   d8fec:	4602      	mov	r2, r0
   d8fee:	460b      	mov	r3, r1
   d8ff0:	4630      	mov	r0, r6
   d8ff2:	4639      	mov	r1, r7
   d8ff4:	f000 fc1c 	bl	d9830 <__aeabi_dsub>
   d8ff8:	4622      	mov	r2, r4
   d8ffa:	4680      	mov	r8, r0
   d8ffc:	4689      	mov	r9, r1
   d8ffe:	462b      	mov	r3, r5
   d9000:	4620      	mov	r0, r4
   d9002:	4629      	mov	r1, r5
   d9004:	f000 fdc8 	bl	d9b98 <__aeabi_dmul>
   d9008:	a377      	add	r3, pc, #476	; (adr r3, d91e8 <__ieee754_pow+0x8f8>)
   d900a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d900e:	4606      	mov	r6, r0
   d9010:	460f      	mov	r7, r1
   d9012:	f000 fdc1 	bl	d9b98 <__aeabi_dmul>
   d9016:	a376      	add	r3, pc, #472	; (adr r3, d91f0 <__ieee754_pow+0x900>)
   d9018:	e9d3 2300 	ldrd	r2, r3, [r3]
   d901c:	f000 fc08 	bl	d9830 <__aeabi_dsub>
   d9020:	4632      	mov	r2, r6
   d9022:	463b      	mov	r3, r7
   d9024:	f000 fdb8 	bl	d9b98 <__aeabi_dmul>
   d9028:	a373      	add	r3, pc, #460	; (adr r3, d91f8 <__ieee754_pow+0x908>)
   d902a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d902e:	f000 fc01 	bl	d9834 <__adddf3>
   d9032:	4632      	mov	r2, r6
   d9034:	463b      	mov	r3, r7
   d9036:	f000 fdaf 	bl	d9b98 <__aeabi_dmul>
   d903a:	a371      	add	r3, pc, #452	; (adr r3, d9200 <__ieee754_pow+0x910>)
   d903c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9040:	f000 fbf6 	bl	d9830 <__aeabi_dsub>
   d9044:	4632      	mov	r2, r6
   d9046:	463b      	mov	r3, r7
   d9048:	f000 fda6 	bl	d9b98 <__aeabi_dmul>
   d904c:	a36e      	add	r3, pc, #440	; (adr r3, d9208 <__ieee754_pow+0x918>)
   d904e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9052:	f000 fbef 	bl	d9834 <__adddf3>
   d9056:	4632      	mov	r2, r6
   d9058:	463b      	mov	r3, r7
   d905a:	f000 fd9d 	bl	d9b98 <__aeabi_dmul>
   d905e:	4602      	mov	r2, r0
   d9060:	460b      	mov	r3, r1
   d9062:	4620      	mov	r0, r4
   d9064:	4629      	mov	r1, r5
   d9066:	f000 fbe3 	bl	d9830 <__aeabi_dsub>
   d906a:	4606      	mov	r6, r0
   d906c:	460f      	mov	r7, r1
   d906e:	4602      	mov	r2, r0
   d9070:	460b      	mov	r3, r1
   d9072:	4620      	mov	r0, r4
   d9074:	4629      	mov	r1, r5
   d9076:	f000 fd8f 	bl	d9b98 <__aeabi_dmul>
   d907a:	2200      	movs	r2, #0
   d907c:	e9cd 0100 	strd	r0, r1, [sp]
   d9080:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d9084:	4630      	mov	r0, r6
   d9086:	4639      	mov	r1, r7
   d9088:	f000 fbd2 	bl	d9830 <__aeabi_dsub>
   d908c:	4602      	mov	r2, r0
   d908e:	460b      	mov	r3, r1
   d9090:	e9dd 0100 	ldrd	r0, r1, [sp]
   d9094:	f000 feaa 	bl	d9dec <__aeabi_ddiv>
   d9098:	4642      	mov	r2, r8
   d909a:	4606      	mov	r6, r0
   d909c:	460f      	mov	r7, r1
   d909e:	464b      	mov	r3, r9
   d90a0:	4620      	mov	r0, r4
   d90a2:	4629      	mov	r1, r5
   d90a4:	f000 fd78 	bl	d9b98 <__aeabi_dmul>
   d90a8:	4642      	mov	r2, r8
   d90aa:	464b      	mov	r3, r9
   d90ac:	f000 fbc2 	bl	d9834 <__adddf3>
   d90b0:	4602      	mov	r2, r0
   d90b2:	460b      	mov	r3, r1
   d90b4:	4630      	mov	r0, r6
   d90b6:	4639      	mov	r1, r7
   d90b8:	f000 fbba 	bl	d9830 <__aeabi_dsub>
   d90bc:	4622      	mov	r2, r4
   d90be:	462b      	mov	r3, r5
   d90c0:	f000 fbb6 	bl	d9830 <__aeabi_dsub>
   d90c4:	4602      	mov	r2, r0
   d90c6:	460b      	mov	r3, r1
   d90c8:	2000      	movs	r0, #0
   d90ca:	4959      	ldr	r1, [pc, #356]	; (d9230 <__ieee754_pow+0x940>)
   d90cc:	f000 fbb0 	bl	d9830 <__aeabi_dsub>
   d90d0:	448a      	add	sl, r1
   d90d2:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
   d90d6:	4602      	mov	r2, r0
   d90d8:	460b      	mov	r3, r1
   d90da:	f2c0 815b 	blt.w	d9394 <__ieee754_pow+0xaa4>
   d90de:	4651      	mov	r1, sl
   d90e0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d90e4:	f000 fd58 	bl	d9b98 <__aeabi_dmul>
   d90e8:	ec41 0b10 	vmov	d0, r0, r1
   d90ec:	e449      	b.n	d8982 <__ieee754_pow+0x92>
   d90ee:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
   d90f2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
   d90f6:	ea54 030b 	orrs.w	r3, r4, fp
   d90fa:	f000 8137 	beq.w	d936c <__ieee754_pow+0xa7c>
   d90fe:	f1bb 0f01 	cmp.w	fp, #1
   d9102:	f47f ac80 	bne.w	d8a06 <__ieee754_pow+0x116>
   d9106:	4602      	mov	r2, r0
   d9108:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d910c:	ec43 2b10 	vmov	d0, r2, r3
   d9110:	e437      	b.n	d8982 <__ieee754_pow+0x92>
   d9112:	4632      	mov	r2, r6
   d9114:	463b      	mov	r3, r7
   d9116:	4630      	mov	r0, r6
   d9118:	4639      	mov	r1, r7
   d911a:	f000 fd3d 	bl	d9b98 <__aeabi_dmul>
   d911e:	ec41 0b10 	vmov	d0, r0, r1
   d9122:	e42e      	b.n	d8982 <__ieee754_pow+0x92>
   d9124:	4b43      	ldr	r3, [pc, #268]	; (d9234 <__ieee754_pow+0x944>)
   d9126:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   d912a:	4598      	cmp	r8, r3
   d912c:	f340 8115 	ble.w	d935a <__ieee754_pow+0xa6a>
   d9130:	4b41      	ldr	r3, [pc, #260]	; (d9238 <__ieee754_pow+0x948>)
   d9132:	440b      	add	r3, r1
   d9134:	4303      	orrs	r3, r0
   d9136:	d10c      	bne.n	d9152 <__ieee754_pow+0x862>
   d9138:	4632      	mov	r2, r6
   d913a:	463b      	mov	r3, r7
   d913c:	f000 fb78 	bl	d9830 <__aeabi_dsub>
   d9140:	4602      	mov	r2, r0
   d9142:	460b      	mov	r3, r1
   d9144:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d9148:	f000 ffa2 	bl	da090 <__aeabi_dcmple>
   d914c:	2800      	cmp	r0, #0
   d914e:	f43f aee6 	beq.w	d8f1e <__ieee754_pow+0x62e>
   d9152:	a32f      	add	r3, pc, #188	; (adr r3, d9210 <__ieee754_pow+0x920>)
   d9154:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9158:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d915c:	f000 fd1c 	bl	d9b98 <__aeabi_dmul>
   d9160:	a32b      	add	r3, pc, #172	; (adr r3, d9210 <__ieee754_pow+0x920>)
   d9162:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9166:	f000 fd17 	bl	d9b98 <__aeabi_dmul>
   d916a:	ec41 0b10 	vmov	d0, r0, r1
   d916e:	e408      	b.n	d8982 <__ieee754_pow+0x92>
   d9170:	ed9f 7b29 	vldr	d7, [pc, #164]	; d9218 <__ieee754_pow+0x928>
   d9174:	ed8d 7b06 	vstr	d7, [sp, #24]
   d9178:	e676      	b.n	d8e68 <__ieee754_pow+0x578>
   d917a:	f1b9 0f00 	cmp.w	r9, #0
   d917e:	f6bf ac8e 	bge.w	d8a9e <__ieee754_pow+0x1ae>
   d9182:	e9dd 3400 	ldrd	r3, r4, [sp]
   d9186:	ee00 3a10 	vmov	s0, r3
   d918a:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
   d918e:	ee00 3a90 	vmov	s1, r3
   d9192:	f7ff bbf6 	b.w	d8982 <__ieee754_pow+0x92>
   d9196:	4602      	mov	r2, r0
   d9198:	460b      	mov	r3, r1
   d919a:	2000      	movs	r0, #0
   d919c:	4924      	ldr	r1, [pc, #144]	; (d9230 <__ieee754_pow+0x940>)
   d919e:	f000 fe25 	bl	d9dec <__aeabi_ddiv>
   d91a2:	e42d      	b.n	d8a00 <__ieee754_pow+0x110>
   d91a4:	ed9f 7b1e 	vldr	d7, [pc, #120]	; d9220 <__ieee754_pow+0x930>
   d91a8:	ed8d 7b08 	vstr	d7, [sp, #32]
   d91ac:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d91b0:	ed9f 7b03 	vldr	d7, [pc, #12]	; d91c0 <__ieee754_pow+0x8d0>
   d91b4:	f04f 0800 	mov.w	r8, #0
   d91b8:	ed8d 7b06 	vstr	d7, [sp, #24]
   d91bc:	e4be      	b.n	d8b3c <__ieee754_pow+0x24c>
   d91be:	bf00      	nop
   d91c0:	00000000 	.word	0x00000000
   d91c4:	3ff00000 	.word	0x3ff00000
   d91c8:	652b82fe 	.word	0x652b82fe
   d91cc:	3c971547 	.word	0x3c971547
   d91d0:	00000000 	.word	0x00000000
   d91d4:	3fe62e43 	.word	0x3fe62e43
   d91d8:	fefa39ef 	.word	0xfefa39ef
   d91dc:	3fe62e42 	.word	0x3fe62e42
   d91e0:	0ca86c39 	.word	0x0ca86c39
   d91e4:	be205c61 	.word	0xbe205c61
   d91e8:	72bea4d0 	.word	0x72bea4d0
   d91ec:	3e663769 	.word	0x3e663769
   d91f0:	c5d26bf1 	.word	0xc5d26bf1
   d91f4:	3ebbbd41 	.word	0x3ebbbd41
   d91f8:	af25de2c 	.word	0xaf25de2c
   d91fc:	3f11566a 	.word	0x3f11566a
   d9200:	16bebd93 	.word	0x16bebd93
   d9204:	3f66c16c 	.word	0x3f66c16c
   d9208:	5555553e 	.word	0x5555553e
   d920c:	3fc55555 	.word	0x3fc55555
   d9210:	c2f8f359 	.word	0xc2f8f359
   d9214:	01a56e1f 	.word	0x01a56e1f
   d9218:	00000000 	.word	0x00000000
   d921c:	bff00000 	.word	0xbff00000
	...
   d9228:	408fffff 	.word	0x408fffff
   d922c:	000fffff 	.word	0x000fffff
   d9230:	3ff00000 	.word	0x3ff00000
   d9234:	4090cbff 	.word	0x4090cbff
   d9238:	3f6f3400 	.word	0x3f6f3400
   d923c:	4b6c      	ldr	r3, [pc, #432]	; (d93f0 <__ieee754_pow+0xb00>)
   d923e:	429c      	cmp	r4, r3
   d9240:	f77f ac2a 	ble.w	d8a98 <__ieee754_pow+0x1a8>
   d9244:	4b6b      	ldr	r3, [pc, #428]	; (d93f4 <__ieee754_pow+0xb04>)
   d9246:	429c      	cmp	r4, r3
   d9248:	f73f abc3 	bgt.w	d89d2 <__ieee754_pow+0xe2>
   d924c:	2200      	movs	r2, #0
   d924e:	4b69      	ldr	r3, [pc, #420]	; (d93f4 <__ieee754_pow+0xb04>)
   d9250:	f000 faee 	bl	d9830 <__aeabi_dsub>
   d9254:	a356      	add	r3, pc, #344	; (adr r3, d93b0 <__ieee754_pow+0xac0>)
   d9256:	e9d3 2300 	ldrd	r2, r3, [r3]
   d925a:	4604      	mov	r4, r0
   d925c:	460d      	mov	r5, r1
   d925e:	f000 fc9b 	bl	d9b98 <__aeabi_dmul>
   d9262:	a355      	add	r3, pc, #340	; (adr r3, d93b8 <__ieee754_pow+0xac8>)
   d9264:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9268:	4680      	mov	r8, r0
   d926a:	4689      	mov	r9, r1
   d926c:	4620      	mov	r0, r4
   d926e:	4629      	mov	r1, r5
   d9270:	f000 fc92 	bl	d9b98 <__aeabi_dmul>
   d9274:	2200      	movs	r2, #0
   d9276:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d927a:	4b5f      	ldr	r3, [pc, #380]	; (d93f8 <__ieee754_pow+0xb08>)
   d927c:	4620      	mov	r0, r4
   d927e:	4629      	mov	r1, r5
   d9280:	f000 fc8a 	bl	d9b98 <__aeabi_dmul>
   d9284:	4602      	mov	r2, r0
   d9286:	460b      	mov	r3, r1
   d9288:	a14d      	add	r1, pc, #308	; (adr r1, d93c0 <__ieee754_pow+0xad0>)
   d928a:	e9d1 0100 	ldrd	r0, r1, [r1]
   d928e:	f000 facf 	bl	d9830 <__aeabi_dsub>
   d9292:	4622      	mov	r2, r4
   d9294:	462b      	mov	r3, r5
   d9296:	f000 fc7f 	bl	d9b98 <__aeabi_dmul>
   d929a:	4602      	mov	r2, r0
   d929c:	460b      	mov	r3, r1
   d929e:	2000      	movs	r0, #0
   d92a0:	4956      	ldr	r1, [pc, #344]	; (d93fc <__ieee754_pow+0xb0c>)
   d92a2:	f000 fac5 	bl	d9830 <__aeabi_dsub>
   d92a6:	4622      	mov	r2, r4
   d92a8:	462b      	mov	r3, r5
   d92aa:	4606      	mov	r6, r0
   d92ac:	460f      	mov	r7, r1
   d92ae:	4620      	mov	r0, r4
   d92b0:	4629      	mov	r1, r5
   d92b2:	f000 fc71 	bl	d9b98 <__aeabi_dmul>
   d92b6:	4602      	mov	r2, r0
   d92b8:	460b      	mov	r3, r1
   d92ba:	4630      	mov	r0, r6
   d92bc:	4639      	mov	r1, r7
   d92be:	f000 fc6b 	bl	d9b98 <__aeabi_dmul>
   d92c2:	a341      	add	r3, pc, #260	; (adr r3, d93c8 <__ieee754_pow+0xad8>)
   d92c4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d92c8:	f000 fc66 	bl	d9b98 <__aeabi_dmul>
   d92cc:	4602      	mov	r2, r0
   d92ce:	460b      	mov	r3, r1
   d92d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d92d4:	f000 faac 	bl	d9830 <__aeabi_dsub>
   d92d8:	4602      	mov	r2, r0
   d92da:	460b      	mov	r3, r1
   d92dc:	4604      	mov	r4, r0
   d92de:	460d      	mov	r5, r1
   d92e0:	4640      	mov	r0, r8
   d92e2:	4649      	mov	r1, r9
   d92e4:	f000 faa6 	bl	d9834 <__adddf3>
   d92e8:	4642      	mov	r2, r8
   d92ea:	464b      	mov	r3, r9
   d92ec:	2000      	movs	r0, #0
   d92ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d92f2:	f000 fa9d 	bl	d9830 <__aeabi_dsub>
   d92f6:	4602      	mov	r2, r0
   d92f8:	460b      	mov	r3, r1
   d92fa:	4620      	mov	r0, r4
   d92fc:	4629      	mov	r1, r5
   d92fe:	f000 fa97 	bl	d9830 <__aeabi_dsub>
   d9302:	4680      	mov	r8, r0
   d9304:	4689      	mov	r9, r1
   d9306:	e5a5      	b.n	d8e54 <__ieee754_pow+0x564>
   d9308:	4632      	mov	r2, r6
   d930a:	463b      	mov	r3, r7
   d930c:	2000      	movs	r0, #0
   d930e:	4939      	ldr	r1, [pc, #228]	; (d93f4 <__ieee754_pow+0xb04>)
   d9310:	f000 fd6c 	bl	d9dec <__aeabi_ddiv>
   d9314:	ec41 0b10 	vmov	d0, r0, r1
   d9318:	f7ff bb33 	b.w	d8982 <__ieee754_pow+0x92>
   d931c:	a32c      	add	r3, pc, #176	; (adr r3, d93d0 <__ieee754_pow+0xae0>)
   d931e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9322:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d9326:	f000 fc37 	bl	d9b98 <__aeabi_dmul>
   d932a:	a329      	add	r3, pc, #164	; (adr r3, d93d0 <__ieee754_pow+0xae0>)
   d932c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9330:	f000 fc32 	bl	d9b98 <__aeabi_dmul>
   d9334:	ec41 0b10 	vmov	d0, r0, r1
   d9338:	f7ff bb23 	b.w	d8982 <__ieee754_pow+0x92>
   d933c:	f1be 0f00 	cmp.w	lr, #0
   d9340:	f47f ab2a 	bne.w	d8998 <__ieee754_pow+0xa8>
   d9344:	f1c3 0314 	rsb	r3, r3, #20
   d9348:	fa48 f203 	asr.w	r2, r8, r3
   d934c:	fa02 f303 	lsl.w	r3, r2, r3
   d9350:	4598      	cmp	r8, r3
   d9352:	d027      	beq.n	d93a4 <__ieee754_pow+0xab4>
   d9354:	46f3      	mov	fp, lr
   d9356:	f7ff baf7 	b.w	d8948 <__ieee754_pow+0x58>
   d935a:	4b28      	ldr	r3, [pc, #160]	; (d93fc <__ieee754_pow+0xb0c>)
   d935c:	4598      	cmp	r8, r3
   d935e:	f73f adde 	bgt.w	d8f1e <__ieee754_pow+0x62e>
   d9362:	e9dd 3400 	ldrd	r3, r4, [sp]
   d9366:	469a      	mov	sl, r3
   d9368:	469b      	mov	fp, r3
   d936a:	e607      	b.n	d8f7c <__ieee754_pow+0x68c>
   d936c:	4602      	mov	r2, r0
   d936e:	460b      	mov	r3, r1
   d9370:	f7ff bb89 	b.w	d8a86 <__ieee754_pow+0x196>
   d9374:	ed9f 7b18 	vldr	d7, [pc, #96]	; d93d8 <__ieee754_pow+0xae8>
   d9378:	ed8d 7b08 	vstr	d7, [sp, #32]
   d937c:	ed9f 7b18 	vldr	d7, [pc, #96]	; d93e0 <__ieee754_pow+0xaf0>
   d9380:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d9384:	ed9f 7b18 	vldr	d7, [pc, #96]	; d93e8 <__ieee754_pow+0xaf8>
   d9388:	f44f 2880 	mov.w	r8, #262144	; 0x40000
   d938c:	ed8d 7b06 	vstr	d7, [sp, #24]
   d9390:	f7ff bbd4 	b.w	d8b3c <__ieee754_pow+0x24c>
   d9394:	4658      	mov	r0, fp
   d9396:	ec43 2b10 	vmov	d0, r2, r3
   d939a:	f000 f9b1 	bl	d9700 <scalbn>
   d939e:	ec51 0b10 	vmov	r0, r1, d0
   d93a2:	e69d      	b.n	d90e0 <__ieee754_pow+0x7f0>
   d93a4:	f002 0201 	and.w	r2, r2, #1
   d93a8:	f1c2 0b02 	rsb	fp, r2, #2
   d93ac:	f7ff bacc 	b.w	d8948 <__ieee754_pow+0x58>
   d93b0:	60000000 	.word	0x60000000
   d93b4:	3ff71547 	.word	0x3ff71547
   d93b8:	f85ddf44 	.word	0xf85ddf44
   d93bc:	3e54ae0b 	.word	0x3e54ae0b
   d93c0:	55555555 	.word	0x55555555
   d93c4:	3fd55555 	.word	0x3fd55555
   d93c8:	652b82fe 	.word	0x652b82fe
   d93cc:	3ff71547 	.word	0x3ff71547
   d93d0:	8800759c 	.word	0x8800759c
   d93d4:	7e37e43c 	.word	0x7e37e43c
   d93d8:	40000000 	.word	0x40000000
   d93dc:	3fe2b803 	.word	0x3fe2b803
   d93e0:	43cfd006 	.word	0x43cfd006
   d93e4:	3e4cfdeb 	.word	0x3e4cfdeb
   d93e8:	00000000 	.word	0x00000000
   d93ec:	3ff80000 	.word	0x3ff80000
   d93f0:	3feffffe 	.word	0x3feffffe
   d93f4:	3ff00000 	.word	0x3ff00000
   d93f8:	3fd00000 	.word	0x3fd00000
   d93fc:	3fe00000 	.word	0x3fe00000

000d9400 <__ieee754_sqrt>:
   d9400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9404:	4965      	ldr	r1, [pc, #404]	; (d959c <__ieee754_sqrt+0x19c>)
   d9406:	ec55 4b10 	vmov	r4, r5, d0
   d940a:	460e      	mov	r6, r1
   d940c:	4029      	ands	r1, r5
   d940e:	42b1      	cmp	r1, r6
   d9410:	f000 8097 	beq.w	d9542 <__ieee754_sqrt+0x142>
   d9414:	2d00      	cmp	r5, #0
   d9416:	462b      	mov	r3, r5
   d9418:	ee10 2a10 	vmov	r2, s0
   d941c:	dd74      	ble.n	d9508 <__ieee754_sqrt+0x108>
   d941e:	152f      	asrs	r7, r5, #20
   d9420:	d07f      	beq.n	d9522 <__ieee754_sqrt+0x122>
   d9422:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   d9426:	f3c3 0313 	ubfx	r3, r3, #0, #20
   d942a:	07f9      	lsls	r1, r7, #31
   d942c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d9430:	d465      	bmi.n	d94fe <__ieee754_sqrt+0xfe>
   d9432:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
   d9436:	2600      	movs	r6, #0
   d9438:	440b      	add	r3, r1
   d943a:	107f      	asrs	r7, r7, #1
   d943c:	0052      	lsls	r2, r2, #1
   d943e:	46b6      	mov	lr, r6
   d9440:	2016      	movs	r0, #22
   d9442:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   d9446:	eb0e 0401 	add.w	r4, lr, r1
   d944a:	429c      	cmp	r4, r3
   d944c:	ea4f 75d2 	mov.w	r5, r2, lsr #31
   d9450:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d9454:	dc03      	bgt.n	d945e <__ieee754_sqrt+0x5e>
   d9456:	1b1b      	subs	r3, r3, r4
   d9458:	eb04 0e01 	add.w	lr, r4, r1
   d945c:	440e      	add	r6, r1
   d945e:	3801      	subs	r0, #1
   d9460:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   d9464:	ea4f 0151 	mov.w	r1, r1, lsr #1
   d9468:	d1ed      	bne.n	d9446 <__ieee754_sqrt+0x46>
   d946a:	4684      	mov	ip, r0
   d946c:	2420      	movs	r4, #32
   d946e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   d9472:	e009      	b.n	d9488 <__ieee754_sqrt+0x88>
   d9474:	d020      	beq.n	d94b8 <__ieee754_sqrt+0xb8>
   d9476:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
   d947a:	3c01      	subs	r4, #1
   d947c:	ea4f 0151 	mov.w	r1, r1, lsr #1
   d9480:	442b      	add	r3, r5
   d9482:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d9486:	d020      	beq.n	d94ca <__ieee754_sqrt+0xca>
   d9488:	459e      	cmp	lr, r3
   d948a:	eb01 050c 	add.w	r5, r1, ip
   d948e:	daf1      	bge.n	d9474 <__ieee754_sqrt+0x74>
   d9490:	2d00      	cmp	r5, #0
   d9492:	eb05 0c01 	add.w	ip, r5, r1
   d9496:	db09      	blt.n	d94ac <__ieee754_sqrt+0xac>
   d9498:	46f0      	mov	r8, lr
   d949a:	4295      	cmp	r5, r2
   d949c:	ebce 0303 	rsb	r3, lr, r3
   d94a0:	d900      	bls.n	d94a4 <__ieee754_sqrt+0xa4>
   d94a2:	3b01      	subs	r3, #1
   d94a4:	1b52      	subs	r2, r2, r5
   d94a6:	4408      	add	r0, r1
   d94a8:	46c6      	mov	lr, r8
   d94aa:	e7e4      	b.n	d9476 <__ieee754_sqrt+0x76>
   d94ac:	f1bc 0f00 	cmp.w	ip, #0
   d94b0:	dbf2      	blt.n	d9498 <__ieee754_sqrt+0x98>
   d94b2:	f10e 0801 	add.w	r8, lr, #1
   d94b6:	e7f0      	b.n	d949a <__ieee754_sqrt+0x9a>
   d94b8:	4295      	cmp	r5, r2
   d94ba:	d81e      	bhi.n	d94fa <__ieee754_sqrt+0xfa>
   d94bc:	2d00      	cmp	r5, #0
   d94be:	eb05 0c01 	add.w	ip, r5, r1
   d94c2:	db50      	blt.n	d9566 <__ieee754_sqrt+0x166>
   d94c4:	4698      	mov	r8, r3
   d94c6:	2300      	movs	r3, #0
   d94c8:	e7ec      	b.n	d94a4 <__ieee754_sqrt+0xa4>
   d94ca:	4313      	orrs	r3, r2
   d94cc:	d004      	beq.n	d94d8 <__ieee754_sqrt+0xd8>
   d94ce:	1c42      	adds	r2, r0, #1
   d94d0:	d04d      	beq.n	d956e <__ieee754_sqrt+0x16e>
   d94d2:	f000 0301 	and.w	r3, r0, #1
   d94d6:	4418      	add	r0, r3
   d94d8:	0840      	lsrs	r0, r0, #1
   d94da:	1071      	asrs	r1, r6, #1
   d94dc:	07f3      	lsls	r3, r6, #31
   d94de:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   d94e2:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   d94e6:	bf48      	it	mi
   d94e8:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   d94ec:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   d94f0:	4602      	mov	r2, r0
   d94f2:	ec43 2b10 	vmov	d0, r2, r3
   d94f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d94fa:	4673      	mov	r3, lr
   d94fc:	e7bb      	b.n	d9476 <__ieee754_sqrt+0x76>
   d94fe:	005b      	lsls	r3, r3, #1
   d9500:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
   d9504:	0052      	lsls	r2, r2, #1
   d9506:	e794      	b.n	d9432 <__ieee754_sqrt+0x32>
   d9508:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
   d950c:	4321      	orrs	r1, r4
   d950e:	d028      	beq.n	d9562 <__ieee754_sqrt+0x162>
   d9510:	bbad      	cbnz	r5, d957e <__ieee754_sqrt+0x17e>
   d9512:	462f      	mov	r7, r5
   d9514:	0ad3      	lsrs	r3, r2, #11
   d9516:	3f15      	subs	r7, #21
   d9518:	0552      	lsls	r2, r2, #21
   d951a:	2b00      	cmp	r3, #0
   d951c:	d0fa      	beq.n	d9514 <__ieee754_sqrt+0x114>
   d951e:	02dd      	lsls	r5, r3, #11
   d9520:	d428      	bmi.n	d9574 <__ieee754_sqrt+0x174>
   d9522:	2100      	movs	r1, #0
   d9524:	e000      	b.n	d9528 <__ieee754_sqrt+0x128>
   d9526:	4601      	mov	r1, r0
   d9528:	005b      	lsls	r3, r3, #1
   d952a:	02dc      	lsls	r4, r3, #11
   d952c:	f101 0001 	add.w	r0, r1, #1
   d9530:	d5f9      	bpl.n	d9526 <__ieee754_sqrt+0x126>
   d9532:	f1c0 0420 	rsb	r4, r0, #32
   d9536:	fa22 f404 	lsr.w	r4, r2, r4
   d953a:	4323      	orrs	r3, r4
   d953c:	1a7f      	subs	r7, r7, r1
   d953e:	4082      	lsls	r2, r0
   d9540:	e76f      	b.n	d9422 <__ieee754_sqrt+0x22>
   d9542:	ee10 2a10 	vmov	r2, s0
   d9546:	462b      	mov	r3, r5
   d9548:	ee10 0a10 	vmov	r0, s0
   d954c:	4629      	mov	r1, r5
   d954e:	f000 fb23 	bl	d9b98 <__aeabi_dmul>
   d9552:	4622      	mov	r2, r4
   d9554:	462b      	mov	r3, r5
   d9556:	f000 f96d 	bl	d9834 <__adddf3>
   d955a:	ec41 0b10 	vmov	d0, r0, r1
   d955e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d9562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d9566:	f1bc 0f00 	cmp.w	ip, #0
   d956a:	daa2      	bge.n	d94b2 <__ieee754_sqrt+0xb2>
   d956c:	e7aa      	b.n	d94c4 <__ieee754_sqrt+0xc4>
   d956e:	3601      	adds	r6, #1
   d9570:	4620      	mov	r0, r4
   d9572:	e7b2      	b.n	d94da <__ieee754_sqrt+0xda>
   d9574:	2420      	movs	r4, #32
   d9576:	f04f 31ff 	mov.w	r1, #4294967295
   d957a:	2000      	movs	r0, #0
   d957c:	e7db      	b.n	d9536 <__ieee754_sqrt+0x136>
   d957e:	ee10 2a10 	vmov	r2, s0
   d9582:	462b      	mov	r3, r5
   d9584:	4620      	mov	r0, r4
   d9586:	4629      	mov	r1, r5
   d9588:	f000 f952 	bl	d9830 <__aeabi_dsub>
   d958c:	4602      	mov	r2, r0
   d958e:	460b      	mov	r3, r1
   d9590:	f000 fc2c 	bl	d9dec <__aeabi_ddiv>
   d9594:	ec41 0b10 	vmov	d0, r0, r1
   d9598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d959c:	7ff00000 	.word	0x7ff00000

000d95a0 <fabs>:
   d95a0:	ec53 2b10 	vmov	r2, r3, d0
   d95a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   d95a8:	ec43 2b10 	vmov	d0, r2, r3
   d95ac:	4770      	bx	lr
   d95ae:	bf00      	nop

000d95b0 <finite>:
   d95b0:	ee10 3a90 	vmov	r3, s1
   d95b4:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
   d95b8:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   d95bc:	0fc0      	lsrs	r0, r0, #31
   d95be:	4770      	bx	lr

000d95c0 <matherr>:
   d95c0:	2000      	movs	r0, #0
   d95c2:	4770      	bx	lr
   d95c4:	0000      	movs	r0, r0
	...

000d95c8 <nan>:
   d95c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; d95d0 <nan+0x8>
   d95cc:	4770      	bx	lr
   d95ce:	bf00      	nop
   d95d0:	00000000 	.word	0x00000000
   d95d4:	7ff80000 	.word	0x7ff80000

000d95d8 <rint>:
   d95d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d95da:	ec53 2b10 	vmov	r2, r3, d0
   d95de:	f3c3 560a 	ubfx	r6, r3, #20, #11
   d95e2:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
   d95e6:	2813      	cmp	r0, #19
   d95e8:	b083      	sub	sp, #12
   d95ea:	4619      	mov	r1, r3
   d95ec:	ea4f 74d3 	mov.w	r4, r3, lsr #31
   d95f0:	ee10 5a10 	vmov	r5, s0
   d95f4:	dc2f      	bgt.n	d9656 <rint+0x7e>
   d95f6:	2800      	cmp	r0, #0
   d95f8:	db49      	blt.n	d968e <rint+0xb6>
   d95fa:	4e3f      	ldr	r6, [pc, #252]	; (d96f8 <rint+0x120>)
   d95fc:	4106      	asrs	r6, r0
   d95fe:	ea03 0706 	and.w	r7, r3, r6
   d9602:	4317      	orrs	r7, r2
   d9604:	d02c      	beq.n	d9660 <rint+0x88>
   d9606:	0876      	lsrs	r6, r6, #1
   d9608:	4033      	ands	r3, r6
   d960a:	431d      	orrs	r5, r3
   d960c:	d00c      	beq.n	d9628 <rint+0x50>
   d960e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   d9612:	2813      	cmp	r0, #19
   d9614:	ea21 0606 	bic.w	r6, r1, r6
   d9618:	fa43 f100 	asr.w	r1, r3, r0
   d961c:	ea41 0106 	orr.w	r1, r1, r6
   d9620:	bf0c      	ite	eq
   d9622:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
   d9626:	2500      	movne	r5, #0
   d9628:	4834      	ldr	r0, [pc, #208]	; (d96fc <rint+0x124>)
   d962a:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
   d962e:	462a      	mov	r2, r5
   d9630:	e9d4 4500 	ldrd	r4, r5, [r4]
   d9634:	4610      	mov	r0, r2
   d9636:	462b      	mov	r3, r5
   d9638:	4622      	mov	r2, r4
   d963a:	f000 f8fb 	bl	d9834 <__adddf3>
   d963e:	e9cd 0100 	strd	r0, r1, [sp]
   d9642:	4622      	mov	r2, r4
   d9644:	462b      	mov	r3, r5
   d9646:	e9dd 0100 	ldrd	r0, r1, [sp]
   d964a:	f000 f8f1 	bl	d9830 <__aeabi_dsub>
   d964e:	ec41 0b10 	vmov	d0, r0, r1
   d9652:	b003      	add	sp, #12
   d9654:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9656:	2833      	cmp	r0, #51	; 0x33
   d9658:	dd06      	ble.n	d9668 <rint+0x90>
   d965a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   d965e:	d042      	beq.n	d96e6 <rint+0x10e>
   d9660:	ec43 2b10 	vmov	d0, r2, r3
   d9664:	b003      	add	sp, #12
   d9666:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9668:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   d966c:	f04f 30ff 	mov.w	r0, #4294967295
   d9670:	40f0      	lsrs	r0, r6
   d9672:	4202      	tst	r2, r0
   d9674:	d0f4      	beq.n	d9660 <rint+0x88>
   d9676:	0840      	lsrs	r0, r0, #1
   d9678:	4202      	tst	r2, r0
   d967a:	d0d5      	beq.n	d9628 <rint+0x50>
   d967c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d9680:	ea25 0000 	bic.w	r0, r5, r0
   d9684:	fa43 f606 	asr.w	r6, r3, r6
   d9688:	ea46 0500 	orr.w	r5, r6, r0
   d968c:	e7cc      	b.n	d9628 <rint+0x50>
   d968e:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   d9692:	4310      	orrs	r0, r2
   d9694:	ee10 7a10 	vmov	r7, s0
   d9698:	d0e2      	beq.n	d9660 <rint+0x88>
   d969a:	f3c3 0013 	ubfx	r0, r3, #0, #20
   d969e:	4307      	orrs	r7, r0
   d96a0:	4278      	negs	r0, r7
   d96a2:	4307      	orrs	r7, r0
   d96a4:	4815      	ldr	r0, [pc, #84]	; (d96fc <rint+0x124>)
   d96a6:	0c59      	lsrs	r1, r3, #17
   d96a8:	0b3f      	lsrs	r7, r7, #12
   d96aa:	0449      	lsls	r1, r1, #17
   d96ac:	f407 2700 	and.w	r7, r7, #524288	; 0x80000
   d96b0:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   d96b4:	ea47 0301 	orr.w	r3, r7, r1
   d96b8:	e9d0 6700 	ldrd	r6, r7, [r0]
   d96bc:	4619      	mov	r1, r3
   d96be:	4610      	mov	r0, r2
   d96c0:	463b      	mov	r3, r7
   d96c2:	4632      	mov	r2, r6
   d96c4:	f000 f8b6 	bl	d9834 <__adddf3>
   d96c8:	e9cd 0100 	strd	r0, r1, [sp]
   d96cc:	463b      	mov	r3, r7
   d96ce:	4632      	mov	r2, r6
   d96d0:	e9dd 0100 	ldrd	r0, r1, [sp]
   d96d4:	f000 f8ac 	bl	d9830 <__aeabi_dsub>
   d96d8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d96dc:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
   d96e0:	ec41 0b10 	vmov	d0, r0, r1
   d96e4:	e7be      	b.n	d9664 <rint+0x8c>
   d96e6:	ee10 0a10 	vmov	r0, s0
   d96ea:	4619      	mov	r1, r3
   d96ec:	f000 f8a2 	bl	d9834 <__adddf3>
   d96f0:	ec41 0b10 	vmov	d0, r0, r1
   d96f4:	e7b6      	b.n	d9664 <rint+0x8c>
   d96f6:	bf00      	nop
   d96f8:	000fffff 	.word	0x000fffff
   d96fc:	000dbe18 	.word	0x000dbe18

000d9700 <scalbn>:
   d9700:	ec53 2b10 	vmov	r2, r3, d0
   d9704:	b570      	push	{r4, r5, r6, lr}
   d9706:	f3c3 540a 	ubfx	r4, r3, #20, #11
   d970a:	4619      	mov	r1, r3
   d970c:	4605      	mov	r5, r0
   d970e:	bb14      	cbnz	r4, d9756 <scalbn+0x56>
   d9710:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   d9714:	4311      	orrs	r1, r2
   d9716:	d02a      	beq.n	d976e <scalbn+0x6e>
   d9718:	4619      	mov	r1, r3
   d971a:	2200      	movs	r2, #0
   d971c:	4b38      	ldr	r3, [pc, #224]	; (d9800 <scalbn+0x100>)
   d971e:	4e39      	ldr	r6, [pc, #228]	; (d9804 <scalbn+0x104>)
   d9720:	ee10 0a10 	vmov	r0, s0
   d9724:	f000 fa38 	bl	d9b98 <__aeabi_dmul>
   d9728:	42b5      	cmp	r5, r6
   d972a:	4602      	mov	r2, r0
   d972c:	460b      	mov	r3, r1
   d972e:	db1f      	blt.n	d9770 <scalbn+0x70>
   d9730:	f3c1 540a 	ubfx	r4, r1, #20, #11
   d9734:	3c36      	subs	r4, #54	; 0x36
   d9736:	442c      	add	r4, r5
   d9738:	f240 70fe 	movw	r0, #2046	; 0x7fe
   d973c:	4284      	cmp	r4, r0
   d973e:	dc1f      	bgt.n	d9780 <scalbn+0x80>
   d9740:	2c00      	cmp	r4, #0
   d9742:	dd2d      	ble.n	d97a0 <scalbn+0xa0>
   d9744:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   d9748:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   d974c:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
   d9750:	ec43 2b10 	vmov	d0, r2, r3
   d9754:	bd70      	pop	{r4, r5, r6, pc}
   d9756:	f240 70ff 	movw	r0, #2047	; 0x7ff
   d975a:	4284      	cmp	r4, r0
   d975c:	d1eb      	bne.n	d9736 <scalbn+0x36>
   d975e:	ee10 0a10 	vmov	r0, s0
   d9762:	4619      	mov	r1, r3
   d9764:	f000 f866 	bl	d9834 <__adddf3>
   d9768:	ec41 0b10 	vmov	d0, r0, r1
   d976c:	bd70      	pop	{r4, r5, r6, pc}
   d976e:	bd70      	pop	{r4, r5, r6, pc}
   d9770:	a31f      	add	r3, pc, #124	; (adr r3, d97f0 <scalbn+0xf0>)
   d9772:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9776:	f000 fa0f 	bl	d9b98 <__aeabi_dmul>
   d977a:	ec41 0b10 	vmov	d0, r0, r1
   d977e:	bd70      	pop	{r4, r5, r6, pc}
   d9780:	ec43 2b11 	vmov	d1, r2, r3
   d9784:	ed9f 0b1c 	vldr	d0, [pc, #112]	; d97f8 <scalbn+0xf8>
   d9788:	f000 f840 	bl	d980c <copysign>
   d978c:	a31a      	add	r3, pc, #104	; (adr r3, d97f8 <scalbn+0xf8>)
   d978e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9792:	ec51 0b10 	vmov	r0, r1, d0
   d9796:	f000 f9ff 	bl	d9b98 <__aeabi_dmul>
   d979a:	ec41 0b10 	vmov	d0, r0, r1
   d979e:	bd70      	pop	{r4, r5, r6, pc}
   d97a0:	f114 0f35 	cmn.w	r4, #53	; 0x35
   d97a4:	da13      	bge.n	d97ce <scalbn+0xce>
   d97a6:	f24c 3150 	movw	r1, #50000	; 0xc350
   d97aa:	428d      	cmp	r5, r1
   d97ac:	ec43 2b11 	vmov	d1, r2, r3
   d97b0:	dce8      	bgt.n	d9784 <scalbn+0x84>
   d97b2:	ed9f 0b0f 	vldr	d0, [pc, #60]	; d97f0 <scalbn+0xf0>
   d97b6:	f000 f829 	bl	d980c <copysign>
   d97ba:	a30d      	add	r3, pc, #52	; (adr r3, d97f0 <scalbn+0xf0>)
   d97bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d97c0:	ec51 0b10 	vmov	r0, r1, d0
   d97c4:	f000 f9e8 	bl	d9b98 <__aeabi_dmul>
   d97c8:	ec41 0b10 	vmov	d0, r0, r1
   d97cc:	bd70      	pop	{r4, r5, r6, pc}
   d97ce:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   d97d2:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   d97d6:	3436      	adds	r4, #54	; 0x36
   d97d8:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
   d97dc:	4610      	mov	r0, r2
   d97de:	4619      	mov	r1, r3
   d97e0:	2200      	movs	r2, #0
   d97e2:	4b09      	ldr	r3, [pc, #36]	; (d9808 <scalbn+0x108>)
   d97e4:	f000 f9d8 	bl	d9b98 <__aeabi_dmul>
   d97e8:	ec41 0b10 	vmov	d0, r0, r1
   d97ec:	bd70      	pop	{r4, r5, r6, pc}
   d97ee:	bf00      	nop
   d97f0:	c2f8f359 	.word	0xc2f8f359
   d97f4:	01a56e1f 	.word	0x01a56e1f
   d97f8:	8800759c 	.word	0x8800759c
   d97fc:	7e37e43c 	.word	0x7e37e43c
   d9800:	43500000 	.word	0x43500000
   d9804:	ffff3cb0 	.word	0xffff3cb0
   d9808:	3c900000 	.word	0x3c900000

000d980c <copysign>:
   d980c:	ec53 2b10 	vmov	r2, r3, d0
   d9810:	ee11 0a90 	vmov	r0, s3
   d9814:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   d9818:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   d981c:	ea41 0300 	orr.w	r3, r1, r0
   d9820:	ec43 2b10 	vmov	d0, r2, r3
   d9824:	4770      	bx	lr
   d9826:	bf00      	nop

000d9828 <__aeabi_drsub>:
   d9828:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d982c:	e002      	b.n	d9834 <__adddf3>
   d982e:	bf00      	nop

000d9830 <__aeabi_dsub>:
   d9830:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d9834 <__adddf3>:
   d9834:	b530      	push	{r4, r5, lr}
   d9836:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d983a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d983e:	ea94 0f05 	teq	r4, r5
   d9842:	bf08      	it	eq
   d9844:	ea90 0f02 	teqeq	r0, r2
   d9848:	bf1f      	itttt	ne
   d984a:	ea54 0c00 	orrsne.w	ip, r4, r0
   d984e:	ea55 0c02 	orrsne.w	ip, r5, r2
   d9852:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d9856:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d985a:	f000 80e2 	beq.w	d9a22 <__adddf3+0x1ee>
   d985e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d9862:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d9866:	bfb8      	it	lt
   d9868:	426d      	neglt	r5, r5
   d986a:	dd0c      	ble.n	d9886 <__adddf3+0x52>
   d986c:	442c      	add	r4, r5
   d986e:	ea80 0202 	eor.w	r2, r0, r2
   d9872:	ea81 0303 	eor.w	r3, r1, r3
   d9876:	ea82 0000 	eor.w	r0, r2, r0
   d987a:	ea83 0101 	eor.w	r1, r3, r1
   d987e:	ea80 0202 	eor.w	r2, r0, r2
   d9882:	ea81 0303 	eor.w	r3, r1, r3
   d9886:	2d36      	cmp	r5, #54	; 0x36
   d9888:	bf88      	it	hi
   d988a:	bd30      	pophi	{r4, r5, pc}
   d988c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d9890:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d9894:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d9898:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d989c:	d002      	beq.n	d98a4 <__adddf3+0x70>
   d989e:	4240      	negs	r0, r0
   d98a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d98a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d98a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d98ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d98b0:	d002      	beq.n	d98b8 <__adddf3+0x84>
   d98b2:	4252      	negs	r2, r2
   d98b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d98b8:	ea94 0f05 	teq	r4, r5
   d98bc:	f000 80a7 	beq.w	d9a0e <__adddf3+0x1da>
   d98c0:	f1a4 0401 	sub.w	r4, r4, #1
   d98c4:	f1d5 0e20 	rsbs	lr, r5, #32
   d98c8:	db0d      	blt.n	d98e6 <__adddf3+0xb2>
   d98ca:	fa02 fc0e 	lsl.w	ip, r2, lr
   d98ce:	fa22 f205 	lsr.w	r2, r2, r5
   d98d2:	1880      	adds	r0, r0, r2
   d98d4:	f141 0100 	adc.w	r1, r1, #0
   d98d8:	fa03 f20e 	lsl.w	r2, r3, lr
   d98dc:	1880      	adds	r0, r0, r2
   d98de:	fa43 f305 	asr.w	r3, r3, r5
   d98e2:	4159      	adcs	r1, r3
   d98e4:	e00e      	b.n	d9904 <__adddf3+0xd0>
   d98e6:	f1a5 0520 	sub.w	r5, r5, #32
   d98ea:	f10e 0e20 	add.w	lr, lr, #32
   d98ee:	2a01      	cmp	r2, #1
   d98f0:	fa03 fc0e 	lsl.w	ip, r3, lr
   d98f4:	bf28      	it	cs
   d98f6:	f04c 0c02 	orrcs.w	ip, ip, #2
   d98fa:	fa43 f305 	asr.w	r3, r3, r5
   d98fe:	18c0      	adds	r0, r0, r3
   d9900:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d9904:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9908:	d507      	bpl.n	d991a <__adddf3+0xe6>
   d990a:	f04f 0e00 	mov.w	lr, #0
   d990e:	f1dc 0c00 	rsbs	ip, ip, #0
   d9912:	eb7e 0000 	sbcs.w	r0, lr, r0
   d9916:	eb6e 0101 	sbc.w	r1, lr, r1
   d991a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d991e:	d31b      	bcc.n	d9958 <__adddf3+0x124>
   d9920:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d9924:	d30c      	bcc.n	d9940 <__adddf3+0x10c>
   d9926:	0849      	lsrs	r1, r1, #1
   d9928:	ea5f 0030 	movs.w	r0, r0, rrx
   d992c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d9930:	f104 0401 	add.w	r4, r4, #1
   d9934:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d9938:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d993c:	f080 809a 	bcs.w	d9a74 <__adddf3+0x240>
   d9940:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d9944:	bf08      	it	eq
   d9946:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d994a:	f150 0000 	adcs.w	r0, r0, #0
   d994e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d9952:	ea41 0105 	orr.w	r1, r1, r5
   d9956:	bd30      	pop	{r4, r5, pc}
   d9958:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d995c:	4140      	adcs	r0, r0
   d995e:	eb41 0101 	adc.w	r1, r1, r1
   d9962:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9966:	f1a4 0401 	sub.w	r4, r4, #1
   d996a:	d1e9      	bne.n	d9940 <__adddf3+0x10c>
   d996c:	f091 0f00 	teq	r1, #0
   d9970:	bf04      	itt	eq
   d9972:	4601      	moveq	r1, r0
   d9974:	2000      	moveq	r0, #0
   d9976:	fab1 f381 	clz	r3, r1
   d997a:	bf08      	it	eq
   d997c:	3320      	addeq	r3, #32
   d997e:	f1a3 030b 	sub.w	r3, r3, #11
   d9982:	f1b3 0220 	subs.w	r2, r3, #32
   d9986:	da0c      	bge.n	d99a2 <__adddf3+0x16e>
   d9988:	320c      	adds	r2, #12
   d998a:	dd08      	ble.n	d999e <__adddf3+0x16a>
   d998c:	f102 0c14 	add.w	ip, r2, #20
   d9990:	f1c2 020c 	rsb	r2, r2, #12
   d9994:	fa01 f00c 	lsl.w	r0, r1, ip
   d9998:	fa21 f102 	lsr.w	r1, r1, r2
   d999c:	e00c      	b.n	d99b8 <__adddf3+0x184>
   d999e:	f102 0214 	add.w	r2, r2, #20
   d99a2:	bfd8      	it	le
   d99a4:	f1c2 0c20 	rsble	ip, r2, #32
   d99a8:	fa01 f102 	lsl.w	r1, r1, r2
   d99ac:	fa20 fc0c 	lsr.w	ip, r0, ip
   d99b0:	bfdc      	itt	le
   d99b2:	ea41 010c 	orrle.w	r1, r1, ip
   d99b6:	4090      	lslle	r0, r2
   d99b8:	1ae4      	subs	r4, r4, r3
   d99ba:	bfa2      	ittt	ge
   d99bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d99c0:	4329      	orrge	r1, r5
   d99c2:	bd30      	popge	{r4, r5, pc}
   d99c4:	ea6f 0404 	mvn.w	r4, r4
   d99c8:	3c1f      	subs	r4, #31
   d99ca:	da1c      	bge.n	d9a06 <__adddf3+0x1d2>
   d99cc:	340c      	adds	r4, #12
   d99ce:	dc0e      	bgt.n	d99ee <__adddf3+0x1ba>
   d99d0:	f104 0414 	add.w	r4, r4, #20
   d99d4:	f1c4 0220 	rsb	r2, r4, #32
   d99d8:	fa20 f004 	lsr.w	r0, r0, r4
   d99dc:	fa01 f302 	lsl.w	r3, r1, r2
   d99e0:	ea40 0003 	orr.w	r0, r0, r3
   d99e4:	fa21 f304 	lsr.w	r3, r1, r4
   d99e8:	ea45 0103 	orr.w	r1, r5, r3
   d99ec:	bd30      	pop	{r4, r5, pc}
   d99ee:	f1c4 040c 	rsb	r4, r4, #12
   d99f2:	f1c4 0220 	rsb	r2, r4, #32
   d99f6:	fa20 f002 	lsr.w	r0, r0, r2
   d99fa:	fa01 f304 	lsl.w	r3, r1, r4
   d99fe:	ea40 0003 	orr.w	r0, r0, r3
   d9a02:	4629      	mov	r1, r5
   d9a04:	bd30      	pop	{r4, r5, pc}
   d9a06:	fa21 f004 	lsr.w	r0, r1, r4
   d9a0a:	4629      	mov	r1, r5
   d9a0c:	bd30      	pop	{r4, r5, pc}
   d9a0e:	f094 0f00 	teq	r4, #0
   d9a12:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d9a16:	bf06      	itte	eq
   d9a18:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d9a1c:	3401      	addeq	r4, #1
   d9a1e:	3d01      	subne	r5, #1
   d9a20:	e74e      	b.n	d98c0 <__adddf3+0x8c>
   d9a22:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d9a26:	bf18      	it	ne
   d9a28:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d9a2c:	d029      	beq.n	d9a82 <__adddf3+0x24e>
   d9a2e:	ea94 0f05 	teq	r4, r5
   d9a32:	bf08      	it	eq
   d9a34:	ea90 0f02 	teqeq	r0, r2
   d9a38:	d005      	beq.n	d9a46 <__adddf3+0x212>
   d9a3a:	ea54 0c00 	orrs.w	ip, r4, r0
   d9a3e:	bf04      	itt	eq
   d9a40:	4619      	moveq	r1, r3
   d9a42:	4610      	moveq	r0, r2
   d9a44:	bd30      	pop	{r4, r5, pc}
   d9a46:	ea91 0f03 	teq	r1, r3
   d9a4a:	bf1e      	ittt	ne
   d9a4c:	2100      	movne	r1, #0
   d9a4e:	2000      	movne	r0, #0
   d9a50:	bd30      	popne	{r4, r5, pc}
   d9a52:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d9a56:	d105      	bne.n	d9a64 <__adddf3+0x230>
   d9a58:	0040      	lsls	r0, r0, #1
   d9a5a:	4149      	adcs	r1, r1
   d9a5c:	bf28      	it	cs
   d9a5e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d9a62:	bd30      	pop	{r4, r5, pc}
   d9a64:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d9a68:	bf3c      	itt	cc
   d9a6a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d9a6e:	bd30      	popcc	{r4, r5, pc}
   d9a70:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9a74:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d9a78:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d9a7c:	f04f 0000 	mov.w	r0, #0
   d9a80:	bd30      	pop	{r4, r5, pc}
   d9a82:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d9a86:	bf1a      	itte	ne
   d9a88:	4619      	movne	r1, r3
   d9a8a:	4610      	movne	r0, r2
   d9a8c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d9a90:	bf1c      	itt	ne
   d9a92:	460b      	movne	r3, r1
   d9a94:	4602      	movne	r2, r0
   d9a96:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d9a9a:	bf06      	itte	eq
   d9a9c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d9aa0:	ea91 0f03 	teqeq	r1, r3
   d9aa4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d9aa8:	bd30      	pop	{r4, r5, pc}
   d9aaa:	bf00      	nop

000d9aac <__aeabi_ui2d>:
   d9aac:	f090 0f00 	teq	r0, #0
   d9ab0:	bf04      	itt	eq
   d9ab2:	2100      	moveq	r1, #0
   d9ab4:	4770      	bxeq	lr
   d9ab6:	b530      	push	{r4, r5, lr}
   d9ab8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9abc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9ac0:	f04f 0500 	mov.w	r5, #0
   d9ac4:	f04f 0100 	mov.w	r1, #0
   d9ac8:	e750      	b.n	d996c <__adddf3+0x138>
   d9aca:	bf00      	nop

000d9acc <__aeabi_i2d>:
   d9acc:	f090 0f00 	teq	r0, #0
   d9ad0:	bf04      	itt	eq
   d9ad2:	2100      	moveq	r1, #0
   d9ad4:	4770      	bxeq	lr
   d9ad6:	b530      	push	{r4, r5, lr}
   d9ad8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9adc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9ae0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d9ae4:	bf48      	it	mi
   d9ae6:	4240      	negmi	r0, r0
   d9ae8:	f04f 0100 	mov.w	r1, #0
   d9aec:	e73e      	b.n	d996c <__adddf3+0x138>
   d9aee:	bf00      	nop

000d9af0 <__aeabi_f2d>:
   d9af0:	0042      	lsls	r2, r0, #1
   d9af2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d9af6:	ea4f 0131 	mov.w	r1, r1, rrx
   d9afa:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d9afe:	bf1f      	itttt	ne
   d9b00:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d9b04:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d9b08:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d9b0c:	4770      	bxne	lr
   d9b0e:	f092 0f00 	teq	r2, #0
   d9b12:	bf14      	ite	ne
   d9b14:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d9b18:	4770      	bxeq	lr
   d9b1a:	b530      	push	{r4, r5, lr}
   d9b1c:	f44f 7460 	mov.w	r4, #896	; 0x380
   d9b20:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9b24:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d9b28:	e720      	b.n	d996c <__adddf3+0x138>
   d9b2a:	bf00      	nop

000d9b2c <__aeabi_ul2d>:
   d9b2c:	ea50 0201 	orrs.w	r2, r0, r1
   d9b30:	bf08      	it	eq
   d9b32:	4770      	bxeq	lr
   d9b34:	b530      	push	{r4, r5, lr}
   d9b36:	f04f 0500 	mov.w	r5, #0
   d9b3a:	e00a      	b.n	d9b52 <__aeabi_l2d+0x16>

000d9b3c <__aeabi_l2d>:
   d9b3c:	ea50 0201 	orrs.w	r2, r0, r1
   d9b40:	bf08      	it	eq
   d9b42:	4770      	bxeq	lr
   d9b44:	b530      	push	{r4, r5, lr}
   d9b46:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d9b4a:	d502      	bpl.n	d9b52 <__aeabi_l2d+0x16>
   d9b4c:	4240      	negs	r0, r0
   d9b4e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9b52:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9b56:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9b5a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d9b5e:	f43f aedc 	beq.w	d991a <__adddf3+0xe6>
   d9b62:	f04f 0203 	mov.w	r2, #3
   d9b66:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d9b6a:	bf18      	it	ne
   d9b6c:	3203      	addne	r2, #3
   d9b6e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d9b72:	bf18      	it	ne
   d9b74:	3203      	addne	r2, #3
   d9b76:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d9b7a:	f1c2 0320 	rsb	r3, r2, #32
   d9b7e:	fa00 fc03 	lsl.w	ip, r0, r3
   d9b82:	fa20 f002 	lsr.w	r0, r0, r2
   d9b86:	fa01 fe03 	lsl.w	lr, r1, r3
   d9b8a:	ea40 000e 	orr.w	r0, r0, lr
   d9b8e:	fa21 f102 	lsr.w	r1, r1, r2
   d9b92:	4414      	add	r4, r2
   d9b94:	e6c1      	b.n	d991a <__adddf3+0xe6>
   d9b96:	bf00      	nop

000d9b98 <__aeabi_dmul>:
   d9b98:	b570      	push	{r4, r5, r6, lr}
   d9b9a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d9b9e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d9ba2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d9ba6:	bf1d      	ittte	ne
   d9ba8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d9bac:	ea94 0f0c 	teqne	r4, ip
   d9bb0:	ea95 0f0c 	teqne	r5, ip
   d9bb4:	f000 f8de 	bleq	d9d74 <__aeabi_dmul+0x1dc>
   d9bb8:	442c      	add	r4, r5
   d9bba:	ea81 0603 	eor.w	r6, r1, r3
   d9bbe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d9bc2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d9bc6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d9bca:	bf18      	it	ne
   d9bcc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d9bd0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9bd4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d9bd8:	d038      	beq.n	d9c4c <__aeabi_dmul+0xb4>
   d9bda:	fba0 ce02 	umull	ip, lr, r0, r2
   d9bde:	f04f 0500 	mov.w	r5, #0
   d9be2:	fbe1 e502 	umlal	lr, r5, r1, r2
   d9be6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d9bea:	fbe0 e503 	umlal	lr, r5, r0, r3
   d9bee:	f04f 0600 	mov.w	r6, #0
   d9bf2:	fbe1 5603 	umlal	r5, r6, r1, r3
   d9bf6:	f09c 0f00 	teq	ip, #0
   d9bfa:	bf18      	it	ne
   d9bfc:	f04e 0e01 	orrne.w	lr, lr, #1
   d9c00:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d9c04:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d9c08:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d9c0c:	d204      	bcs.n	d9c18 <__aeabi_dmul+0x80>
   d9c0e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d9c12:	416d      	adcs	r5, r5
   d9c14:	eb46 0606 	adc.w	r6, r6, r6
   d9c18:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d9c1c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d9c20:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d9c24:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d9c28:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d9c2c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d9c30:	bf88      	it	hi
   d9c32:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d9c36:	d81e      	bhi.n	d9c76 <__aeabi_dmul+0xde>
   d9c38:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d9c3c:	bf08      	it	eq
   d9c3e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d9c42:	f150 0000 	adcs.w	r0, r0, #0
   d9c46:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d9c4a:	bd70      	pop	{r4, r5, r6, pc}
   d9c4c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d9c50:	ea46 0101 	orr.w	r1, r6, r1
   d9c54:	ea40 0002 	orr.w	r0, r0, r2
   d9c58:	ea81 0103 	eor.w	r1, r1, r3
   d9c5c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d9c60:	bfc2      	ittt	gt
   d9c62:	ebd4 050c 	rsbsgt	r5, r4, ip
   d9c66:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d9c6a:	bd70      	popgt	{r4, r5, r6, pc}
   d9c6c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9c70:	f04f 0e00 	mov.w	lr, #0
   d9c74:	3c01      	subs	r4, #1
   d9c76:	f300 80ab 	bgt.w	d9dd0 <__aeabi_dmul+0x238>
   d9c7a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d9c7e:	bfde      	ittt	le
   d9c80:	2000      	movle	r0, #0
   d9c82:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d9c86:	bd70      	pople	{r4, r5, r6, pc}
   d9c88:	f1c4 0400 	rsb	r4, r4, #0
   d9c8c:	3c20      	subs	r4, #32
   d9c8e:	da35      	bge.n	d9cfc <__aeabi_dmul+0x164>
   d9c90:	340c      	adds	r4, #12
   d9c92:	dc1b      	bgt.n	d9ccc <__aeabi_dmul+0x134>
   d9c94:	f104 0414 	add.w	r4, r4, #20
   d9c98:	f1c4 0520 	rsb	r5, r4, #32
   d9c9c:	fa00 f305 	lsl.w	r3, r0, r5
   d9ca0:	fa20 f004 	lsr.w	r0, r0, r4
   d9ca4:	fa01 f205 	lsl.w	r2, r1, r5
   d9ca8:	ea40 0002 	orr.w	r0, r0, r2
   d9cac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d9cb0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d9cb4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d9cb8:	fa21 f604 	lsr.w	r6, r1, r4
   d9cbc:	eb42 0106 	adc.w	r1, r2, r6
   d9cc0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9cc4:	bf08      	it	eq
   d9cc6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9cca:	bd70      	pop	{r4, r5, r6, pc}
   d9ccc:	f1c4 040c 	rsb	r4, r4, #12
   d9cd0:	f1c4 0520 	rsb	r5, r4, #32
   d9cd4:	fa00 f304 	lsl.w	r3, r0, r4
   d9cd8:	fa20 f005 	lsr.w	r0, r0, r5
   d9cdc:	fa01 f204 	lsl.w	r2, r1, r4
   d9ce0:	ea40 0002 	orr.w	r0, r0, r2
   d9ce4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9ce8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d9cec:	f141 0100 	adc.w	r1, r1, #0
   d9cf0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9cf4:	bf08      	it	eq
   d9cf6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9cfa:	bd70      	pop	{r4, r5, r6, pc}
   d9cfc:	f1c4 0520 	rsb	r5, r4, #32
   d9d00:	fa00 f205 	lsl.w	r2, r0, r5
   d9d04:	ea4e 0e02 	orr.w	lr, lr, r2
   d9d08:	fa20 f304 	lsr.w	r3, r0, r4
   d9d0c:	fa01 f205 	lsl.w	r2, r1, r5
   d9d10:	ea43 0302 	orr.w	r3, r3, r2
   d9d14:	fa21 f004 	lsr.w	r0, r1, r4
   d9d18:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9d1c:	fa21 f204 	lsr.w	r2, r1, r4
   d9d20:	ea20 0002 	bic.w	r0, r0, r2
   d9d24:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d9d28:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9d2c:	bf08      	it	eq
   d9d2e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9d32:	bd70      	pop	{r4, r5, r6, pc}
   d9d34:	f094 0f00 	teq	r4, #0
   d9d38:	d10f      	bne.n	d9d5a <__aeabi_dmul+0x1c2>
   d9d3a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d9d3e:	0040      	lsls	r0, r0, #1
   d9d40:	eb41 0101 	adc.w	r1, r1, r1
   d9d44:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9d48:	bf08      	it	eq
   d9d4a:	3c01      	subeq	r4, #1
   d9d4c:	d0f7      	beq.n	d9d3e <__aeabi_dmul+0x1a6>
   d9d4e:	ea41 0106 	orr.w	r1, r1, r6
   d9d52:	f095 0f00 	teq	r5, #0
   d9d56:	bf18      	it	ne
   d9d58:	4770      	bxne	lr
   d9d5a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d9d5e:	0052      	lsls	r2, r2, #1
   d9d60:	eb43 0303 	adc.w	r3, r3, r3
   d9d64:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d9d68:	bf08      	it	eq
   d9d6a:	3d01      	subeq	r5, #1
   d9d6c:	d0f7      	beq.n	d9d5e <__aeabi_dmul+0x1c6>
   d9d6e:	ea43 0306 	orr.w	r3, r3, r6
   d9d72:	4770      	bx	lr
   d9d74:	ea94 0f0c 	teq	r4, ip
   d9d78:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d9d7c:	bf18      	it	ne
   d9d7e:	ea95 0f0c 	teqne	r5, ip
   d9d82:	d00c      	beq.n	d9d9e <__aeabi_dmul+0x206>
   d9d84:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9d88:	bf18      	it	ne
   d9d8a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9d8e:	d1d1      	bne.n	d9d34 <__aeabi_dmul+0x19c>
   d9d90:	ea81 0103 	eor.w	r1, r1, r3
   d9d94:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9d98:	f04f 0000 	mov.w	r0, #0
   d9d9c:	bd70      	pop	{r4, r5, r6, pc}
   d9d9e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9da2:	bf06      	itte	eq
   d9da4:	4610      	moveq	r0, r2
   d9da6:	4619      	moveq	r1, r3
   d9da8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9dac:	d019      	beq.n	d9de2 <__aeabi_dmul+0x24a>
   d9dae:	ea94 0f0c 	teq	r4, ip
   d9db2:	d102      	bne.n	d9dba <__aeabi_dmul+0x222>
   d9db4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d9db8:	d113      	bne.n	d9de2 <__aeabi_dmul+0x24a>
   d9dba:	ea95 0f0c 	teq	r5, ip
   d9dbe:	d105      	bne.n	d9dcc <__aeabi_dmul+0x234>
   d9dc0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d9dc4:	bf1c      	itt	ne
   d9dc6:	4610      	movne	r0, r2
   d9dc8:	4619      	movne	r1, r3
   d9dca:	d10a      	bne.n	d9de2 <__aeabi_dmul+0x24a>
   d9dcc:	ea81 0103 	eor.w	r1, r1, r3
   d9dd0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9dd4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d9dd8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d9ddc:	f04f 0000 	mov.w	r0, #0
   d9de0:	bd70      	pop	{r4, r5, r6, pc}
   d9de2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d9de6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d9dea:	bd70      	pop	{r4, r5, r6, pc}

000d9dec <__aeabi_ddiv>:
   d9dec:	b570      	push	{r4, r5, r6, lr}
   d9dee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d9df2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d9df6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d9dfa:	bf1d      	ittte	ne
   d9dfc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d9e00:	ea94 0f0c 	teqne	r4, ip
   d9e04:	ea95 0f0c 	teqne	r5, ip
   d9e08:	f000 f8a7 	bleq	d9f5a <__aeabi_ddiv+0x16e>
   d9e0c:	eba4 0405 	sub.w	r4, r4, r5
   d9e10:	ea81 0e03 	eor.w	lr, r1, r3
   d9e14:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d9e18:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d9e1c:	f000 8088 	beq.w	d9f30 <__aeabi_ddiv+0x144>
   d9e20:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d9e24:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d9e28:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d9e2c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d9e30:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d9e34:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d9e38:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d9e3c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d9e40:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d9e44:	429d      	cmp	r5, r3
   d9e46:	bf08      	it	eq
   d9e48:	4296      	cmpeq	r6, r2
   d9e4a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d9e4e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d9e52:	d202      	bcs.n	d9e5a <__aeabi_ddiv+0x6e>
   d9e54:	085b      	lsrs	r3, r3, #1
   d9e56:	ea4f 0232 	mov.w	r2, r2, rrx
   d9e5a:	1ab6      	subs	r6, r6, r2
   d9e5c:	eb65 0503 	sbc.w	r5, r5, r3
   d9e60:	085b      	lsrs	r3, r3, #1
   d9e62:	ea4f 0232 	mov.w	r2, r2, rrx
   d9e66:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d9e6a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d9e6e:	ebb6 0e02 	subs.w	lr, r6, r2
   d9e72:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9e76:	bf22      	ittt	cs
   d9e78:	1ab6      	subcs	r6, r6, r2
   d9e7a:	4675      	movcs	r5, lr
   d9e7c:	ea40 000c 	orrcs.w	r0, r0, ip
   d9e80:	085b      	lsrs	r3, r3, #1
   d9e82:	ea4f 0232 	mov.w	r2, r2, rrx
   d9e86:	ebb6 0e02 	subs.w	lr, r6, r2
   d9e8a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9e8e:	bf22      	ittt	cs
   d9e90:	1ab6      	subcs	r6, r6, r2
   d9e92:	4675      	movcs	r5, lr
   d9e94:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d9e98:	085b      	lsrs	r3, r3, #1
   d9e9a:	ea4f 0232 	mov.w	r2, r2, rrx
   d9e9e:	ebb6 0e02 	subs.w	lr, r6, r2
   d9ea2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9ea6:	bf22      	ittt	cs
   d9ea8:	1ab6      	subcs	r6, r6, r2
   d9eaa:	4675      	movcs	r5, lr
   d9eac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d9eb0:	085b      	lsrs	r3, r3, #1
   d9eb2:	ea4f 0232 	mov.w	r2, r2, rrx
   d9eb6:	ebb6 0e02 	subs.w	lr, r6, r2
   d9eba:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9ebe:	bf22      	ittt	cs
   d9ec0:	1ab6      	subcs	r6, r6, r2
   d9ec2:	4675      	movcs	r5, lr
   d9ec4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d9ec8:	ea55 0e06 	orrs.w	lr, r5, r6
   d9ecc:	d018      	beq.n	d9f00 <__aeabi_ddiv+0x114>
   d9ece:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d9ed2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d9ed6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d9eda:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d9ede:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d9ee2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d9ee6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d9eea:	d1c0      	bne.n	d9e6e <__aeabi_ddiv+0x82>
   d9eec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9ef0:	d10b      	bne.n	d9f0a <__aeabi_ddiv+0x11e>
   d9ef2:	ea41 0100 	orr.w	r1, r1, r0
   d9ef6:	f04f 0000 	mov.w	r0, #0
   d9efa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d9efe:	e7b6      	b.n	d9e6e <__aeabi_ddiv+0x82>
   d9f00:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9f04:	bf04      	itt	eq
   d9f06:	4301      	orreq	r1, r0
   d9f08:	2000      	moveq	r0, #0
   d9f0a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d9f0e:	bf88      	it	hi
   d9f10:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d9f14:	f63f aeaf 	bhi.w	d9c76 <__aeabi_dmul+0xde>
   d9f18:	ebb5 0c03 	subs.w	ip, r5, r3
   d9f1c:	bf04      	itt	eq
   d9f1e:	ebb6 0c02 	subseq.w	ip, r6, r2
   d9f22:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d9f26:	f150 0000 	adcs.w	r0, r0, #0
   d9f2a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d9f2e:	bd70      	pop	{r4, r5, r6, pc}
   d9f30:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d9f34:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d9f38:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d9f3c:	bfc2      	ittt	gt
   d9f3e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d9f42:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d9f46:	bd70      	popgt	{r4, r5, r6, pc}
   d9f48:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9f4c:	f04f 0e00 	mov.w	lr, #0
   d9f50:	3c01      	subs	r4, #1
   d9f52:	e690      	b.n	d9c76 <__aeabi_dmul+0xde>
   d9f54:	ea45 0e06 	orr.w	lr, r5, r6
   d9f58:	e68d      	b.n	d9c76 <__aeabi_dmul+0xde>
   d9f5a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d9f5e:	ea94 0f0c 	teq	r4, ip
   d9f62:	bf08      	it	eq
   d9f64:	ea95 0f0c 	teqeq	r5, ip
   d9f68:	f43f af3b 	beq.w	d9de2 <__aeabi_dmul+0x24a>
   d9f6c:	ea94 0f0c 	teq	r4, ip
   d9f70:	d10a      	bne.n	d9f88 <__aeabi_ddiv+0x19c>
   d9f72:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d9f76:	f47f af34 	bne.w	d9de2 <__aeabi_dmul+0x24a>
   d9f7a:	ea95 0f0c 	teq	r5, ip
   d9f7e:	f47f af25 	bne.w	d9dcc <__aeabi_dmul+0x234>
   d9f82:	4610      	mov	r0, r2
   d9f84:	4619      	mov	r1, r3
   d9f86:	e72c      	b.n	d9de2 <__aeabi_dmul+0x24a>
   d9f88:	ea95 0f0c 	teq	r5, ip
   d9f8c:	d106      	bne.n	d9f9c <__aeabi_ddiv+0x1b0>
   d9f8e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d9f92:	f43f aefd 	beq.w	d9d90 <__aeabi_dmul+0x1f8>
   d9f96:	4610      	mov	r0, r2
   d9f98:	4619      	mov	r1, r3
   d9f9a:	e722      	b.n	d9de2 <__aeabi_dmul+0x24a>
   d9f9c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9fa0:	bf18      	it	ne
   d9fa2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9fa6:	f47f aec5 	bne.w	d9d34 <__aeabi_dmul+0x19c>
   d9faa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d9fae:	f47f af0d 	bne.w	d9dcc <__aeabi_dmul+0x234>
   d9fb2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d9fb6:	f47f aeeb 	bne.w	d9d90 <__aeabi_dmul+0x1f8>
   d9fba:	e712      	b.n	d9de2 <__aeabi_dmul+0x24a>

000d9fbc <__gedf2>:
   d9fbc:	f04f 3cff 	mov.w	ip, #4294967295
   d9fc0:	e006      	b.n	d9fd0 <__cmpdf2+0x4>
   d9fc2:	bf00      	nop

000d9fc4 <__ledf2>:
   d9fc4:	f04f 0c01 	mov.w	ip, #1
   d9fc8:	e002      	b.n	d9fd0 <__cmpdf2+0x4>
   d9fca:	bf00      	nop

000d9fcc <__cmpdf2>:
   d9fcc:	f04f 0c01 	mov.w	ip, #1
   d9fd0:	f84d cd04 	str.w	ip, [sp, #-4]!
   d9fd4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9fd8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9fdc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9fe0:	bf18      	it	ne
   d9fe2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d9fe6:	d01b      	beq.n	da020 <__cmpdf2+0x54>
   d9fe8:	b001      	add	sp, #4
   d9fea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d9fee:	bf0c      	ite	eq
   d9ff0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d9ff4:	ea91 0f03 	teqne	r1, r3
   d9ff8:	bf02      	ittt	eq
   d9ffa:	ea90 0f02 	teqeq	r0, r2
   d9ffe:	2000      	moveq	r0, #0
   da000:	4770      	bxeq	lr
   da002:	f110 0f00 	cmn.w	r0, #0
   da006:	ea91 0f03 	teq	r1, r3
   da00a:	bf58      	it	pl
   da00c:	4299      	cmppl	r1, r3
   da00e:	bf08      	it	eq
   da010:	4290      	cmpeq	r0, r2
   da012:	bf2c      	ite	cs
   da014:	17d8      	asrcs	r0, r3, #31
   da016:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   da01a:	f040 0001 	orr.w	r0, r0, #1
   da01e:	4770      	bx	lr
   da020:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   da024:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   da028:	d102      	bne.n	da030 <__cmpdf2+0x64>
   da02a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   da02e:	d107      	bne.n	da040 <__cmpdf2+0x74>
   da030:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   da034:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   da038:	d1d6      	bne.n	d9fe8 <__cmpdf2+0x1c>
   da03a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   da03e:	d0d3      	beq.n	d9fe8 <__cmpdf2+0x1c>
   da040:	f85d 0b04 	ldr.w	r0, [sp], #4
   da044:	4770      	bx	lr
   da046:	bf00      	nop

000da048 <__aeabi_cdrcmple>:
   da048:	4684      	mov	ip, r0
   da04a:	4610      	mov	r0, r2
   da04c:	4662      	mov	r2, ip
   da04e:	468c      	mov	ip, r1
   da050:	4619      	mov	r1, r3
   da052:	4663      	mov	r3, ip
   da054:	e000      	b.n	da058 <__aeabi_cdcmpeq>
   da056:	bf00      	nop

000da058 <__aeabi_cdcmpeq>:
   da058:	b501      	push	{r0, lr}
   da05a:	f7ff ffb7 	bl	d9fcc <__cmpdf2>
   da05e:	2800      	cmp	r0, #0
   da060:	bf48      	it	mi
   da062:	f110 0f00 	cmnmi.w	r0, #0
   da066:	bd01      	pop	{r0, pc}

000da068 <__aeabi_dcmpeq>:
   da068:	f84d ed08 	str.w	lr, [sp, #-8]!
   da06c:	f7ff fff4 	bl	da058 <__aeabi_cdcmpeq>
   da070:	bf0c      	ite	eq
   da072:	2001      	moveq	r0, #1
   da074:	2000      	movne	r0, #0
   da076:	f85d fb08 	ldr.w	pc, [sp], #8
   da07a:	bf00      	nop

000da07c <__aeabi_dcmplt>:
   da07c:	f84d ed08 	str.w	lr, [sp, #-8]!
   da080:	f7ff ffea 	bl	da058 <__aeabi_cdcmpeq>
   da084:	bf34      	ite	cc
   da086:	2001      	movcc	r0, #1
   da088:	2000      	movcs	r0, #0
   da08a:	f85d fb08 	ldr.w	pc, [sp], #8
   da08e:	bf00      	nop

000da090 <__aeabi_dcmple>:
   da090:	f84d ed08 	str.w	lr, [sp, #-8]!
   da094:	f7ff ffe0 	bl	da058 <__aeabi_cdcmpeq>
   da098:	bf94      	ite	ls
   da09a:	2001      	movls	r0, #1
   da09c:	2000      	movhi	r0, #0
   da09e:	f85d fb08 	ldr.w	pc, [sp], #8
   da0a2:	bf00      	nop

000da0a4 <__aeabi_dcmpge>:
   da0a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   da0a8:	f7ff ffce 	bl	da048 <__aeabi_cdrcmple>
   da0ac:	bf94      	ite	ls
   da0ae:	2001      	movls	r0, #1
   da0b0:	2000      	movhi	r0, #0
   da0b2:	f85d fb08 	ldr.w	pc, [sp], #8
   da0b6:	bf00      	nop

000da0b8 <__aeabi_dcmpgt>:
   da0b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   da0bc:	f7ff ffc4 	bl	da048 <__aeabi_cdrcmple>
   da0c0:	bf34      	ite	cc
   da0c2:	2001      	movcc	r0, #1
   da0c4:	2000      	movcs	r0, #0
   da0c6:	f85d fb08 	ldr.w	pc, [sp], #8
   da0ca:	bf00      	nop

000da0cc <__aeabi_dcmpun>:
   da0cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   da0d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   da0d4:	d102      	bne.n	da0dc <__aeabi_dcmpun+0x10>
   da0d6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   da0da:	d10a      	bne.n	da0f2 <__aeabi_dcmpun+0x26>
   da0dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   da0e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   da0e4:	d102      	bne.n	da0ec <__aeabi_dcmpun+0x20>
   da0e6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   da0ea:	d102      	bne.n	da0f2 <__aeabi_dcmpun+0x26>
   da0ec:	f04f 0000 	mov.w	r0, #0
   da0f0:	4770      	bx	lr
   da0f2:	f04f 0001 	mov.w	r0, #1
   da0f6:	4770      	bx	lr

000da0f8 <__aeabi_d2iz>:
   da0f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   da0fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   da100:	d215      	bcs.n	da12e <__aeabi_d2iz+0x36>
   da102:	d511      	bpl.n	da128 <__aeabi_d2iz+0x30>
   da104:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   da108:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   da10c:	d912      	bls.n	da134 <__aeabi_d2iz+0x3c>
   da10e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   da112:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   da116:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   da11a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   da11e:	fa23 f002 	lsr.w	r0, r3, r2
   da122:	bf18      	it	ne
   da124:	4240      	negne	r0, r0
   da126:	4770      	bx	lr
   da128:	f04f 0000 	mov.w	r0, #0
   da12c:	4770      	bx	lr
   da12e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   da132:	d105      	bne.n	da140 <__aeabi_d2iz+0x48>
   da134:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   da138:	bf08      	it	eq
   da13a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   da13e:	4770      	bx	lr
   da140:	f04f 0000 	mov.w	r0, #0
   da144:	4770      	bx	lr
   da146:	bf00      	nop

000da148 <__aeabi_d2uiz>:
   da148:	004a      	lsls	r2, r1, #1
   da14a:	d211      	bcs.n	da170 <__aeabi_d2uiz+0x28>
   da14c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   da150:	d211      	bcs.n	da176 <__aeabi_d2uiz+0x2e>
   da152:	d50d      	bpl.n	da170 <__aeabi_d2uiz+0x28>
   da154:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   da158:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   da15c:	d40e      	bmi.n	da17c <__aeabi_d2uiz+0x34>
   da15e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   da162:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   da166:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   da16a:	fa23 f002 	lsr.w	r0, r3, r2
   da16e:	4770      	bx	lr
   da170:	f04f 0000 	mov.w	r0, #0
   da174:	4770      	bx	lr
   da176:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   da17a:	d102      	bne.n	da182 <__aeabi_d2uiz+0x3a>
   da17c:	f04f 30ff 	mov.w	r0, #4294967295
   da180:	4770      	bx	lr
   da182:	f04f 0000 	mov.w	r0, #0
   da186:	4770      	bx	lr

000da188 <__aeabi_d2f>:
   da188:	ea4f 0241 	mov.w	r2, r1, lsl #1
   da18c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   da190:	bf24      	itt	cs
   da192:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   da196:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   da19a:	d90d      	bls.n	da1b8 <__aeabi_d2f+0x30>
   da19c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   da1a0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   da1a4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   da1a8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   da1ac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   da1b0:	bf08      	it	eq
   da1b2:	f020 0001 	biceq.w	r0, r0, #1
   da1b6:	4770      	bx	lr
   da1b8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   da1bc:	d121      	bne.n	da202 <__aeabi_d2f+0x7a>
   da1be:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   da1c2:	bfbc      	itt	lt
   da1c4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   da1c8:	4770      	bxlt	lr
   da1ca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da1ce:	ea4f 5252 	mov.w	r2, r2, lsr #21
   da1d2:	f1c2 0218 	rsb	r2, r2, #24
   da1d6:	f1c2 0c20 	rsb	ip, r2, #32
   da1da:	fa10 f30c 	lsls.w	r3, r0, ip
   da1de:	fa20 f002 	lsr.w	r0, r0, r2
   da1e2:	bf18      	it	ne
   da1e4:	f040 0001 	orrne.w	r0, r0, #1
   da1e8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   da1ec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   da1f0:	fa03 fc0c 	lsl.w	ip, r3, ip
   da1f4:	ea40 000c 	orr.w	r0, r0, ip
   da1f8:	fa23 f302 	lsr.w	r3, r3, r2
   da1fc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   da200:	e7cc      	b.n	da19c <__aeabi_d2f+0x14>
   da202:	ea7f 5362 	mvns.w	r3, r2, asr #21
   da206:	d107      	bne.n	da218 <__aeabi_d2f+0x90>
   da208:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   da20c:	bf1e      	ittt	ne
   da20e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   da212:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   da216:	4770      	bxne	lr
   da218:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   da21c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   da220:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   da224:	4770      	bx	lr
   da226:	bf00      	nop

000da228 <__aeabi_frsub>:
   da228:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   da22c:	e002      	b.n	da234 <__addsf3>
   da22e:	bf00      	nop

000da230 <__aeabi_fsub>:
   da230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000da234 <__addsf3>:
   da234:	0042      	lsls	r2, r0, #1
   da236:	bf1f      	itttt	ne
   da238:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   da23c:	ea92 0f03 	teqne	r2, r3
   da240:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   da244:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   da248:	d06a      	beq.n	da320 <__addsf3+0xec>
   da24a:	ea4f 6212 	mov.w	r2, r2, lsr #24
   da24e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   da252:	bfc1      	itttt	gt
   da254:	18d2      	addgt	r2, r2, r3
   da256:	4041      	eorgt	r1, r0
   da258:	4048      	eorgt	r0, r1
   da25a:	4041      	eorgt	r1, r0
   da25c:	bfb8      	it	lt
   da25e:	425b      	neglt	r3, r3
   da260:	2b19      	cmp	r3, #25
   da262:	bf88      	it	hi
   da264:	4770      	bxhi	lr
   da266:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   da26a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   da26e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   da272:	bf18      	it	ne
   da274:	4240      	negne	r0, r0
   da276:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   da27a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   da27e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   da282:	bf18      	it	ne
   da284:	4249      	negne	r1, r1
   da286:	ea92 0f03 	teq	r2, r3
   da28a:	d03f      	beq.n	da30c <__addsf3+0xd8>
   da28c:	f1a2 0201 	sub.w	r2, r2, #1
   da290:	fa41 fc03 	asr.w	ip, r1, r3
   da294:	eb10 000c 	adds.w	r0, r0, ip
   da298:	f1c3 0320 	rsb	r3, r3, #32
   da29c:	fa01 f103 	lsl.w	r1, r1, r3
   da2a0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   da2a4:	d502      	bpl.n	da2ac <__addsf3+0x78>
   da2a6:	4249      	negs	r1, r1
   da2a8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   da2ac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   da2b0:	d313      	bcc.n	da2da <__addsf3+0xa6>
   da2b2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   da2b6:	d306      	bcc.n	da2c6 <__addsf3+0x92>
   da2b8:	0840      	lsrs	r0, r0, #1
   da2ba:	ea4f 0131 	mov.w	r1, r1, rrx
   da2be:	f102 0201 	add.w	r2, r2, #1
   da2c2:	2afe      	cmp	r2, #254	; 0xfe
   da2c4:	d251      	bcs.n	da36a <__addsf3+0x136>
   da2c6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   da2ca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   da2ce:	bf08      	it	eq
   da2d0:	f020 0001 	biceq.w	r0, r0, #1
   da2d4:	ea40 0003 	orr.w	r0, r0, r3
   da2d8:	4770      	bx	lr
   da2da:	0049      	lsls	r1, r1, #1
   da2dc:	eb40 0000 	adc.w	r0, r0, r0
   da2e0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   da2e4:	f1a2 0201 	sub.w	r2, r2, #1
   da2e8:	d1ed      	bne.n	da2c6 <__addsf3+0x92>
   da2ea:	fab0 fc80 	clz	ip, r0
   da2ee:	f1ac 0c08 	sub.w	ip, ip, #8
   da2f2:	ebb2 020c 	subs.w	r2, r2, ip
   da2f6:	fa00 f00c 	lsl.w	r0, r0, ip
   da2fa:	bfaa      	itet	ge
   da2fc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   da300:	4252      	neglt	r2, r2
   da302:	4318      	orrge	r0, r3
   da304:	bfbc      	itt	lt
   da306:	40d0      	lsrlt	r0, r2
   da308:	4318      	orrlt	r0, r3
   da30a:	4770      	bx	lr
   da30c:	f092 0f00 	teq	r2, #0
   da310:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   da314:	bf06      	itte	eq
   da316:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   da31a:	3201      	addeq	r2, #1
   da31c:	3b01      	subne	r3, #1
   da31e:	e7b5      	b.n	da28c <__addsf3+0x58>
   da320:	ea4f 0341 	mov.w	r3, r1, lsl #1
   da324:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   da328:	bf18      	it	ne
   da32a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   da32e:	d021      	beq.n	da374 <__addsf3+0x140>
   da330:	ea92 0f03 	teq	r2, r3
   da334:	d004      	beq.n	da340 <__addsf3+0x10c>
   da336:	f092 0f00 	teq	r2, #0
   da33a:	bf08      	it	eq
   da33c:	4608      	moveq	r0, r1
   da33e:	4770      	bx	lr
   da340:	ea90 0f01 	teq	r0, r1
   da344:	bf1c      	itt	ne
   da346:	2000      	movne	r0, #0
   da348:	4770      	bxne	lr
   da34a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   da34e:	d104      	bne.n	da35a <__addsf3+0x126>
   da350:	0040      	lsls	r0, r0, #1
   da352:	bf28      	it	cs
   da354:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   da358:	4770      	bx	lr
   da35a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   da35e:	bf3c      	itt	cc
   da360:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   da364:	4770      	bxcc	lr
   da366:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   da36a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   da36e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   da372:	4770      	bx	lr
   da374:	ea7f 6222 	mvns.w	r2, r2, asr #24
   da378:	bf16      	itet	ne
   da37a:	4608      	movne	r0, r1
   da37c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   da380:	4601      	movne	r1, r0
   da382:	0242      	lsls	r2, r0, #9
   da384:	bf06      	itte	eq
   da386:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   da38a:	ea90 0f01 	teqeq	r0, r1
   da38e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   da392:	4770      	bx	lr

000da394 <__aeabi_ui2f>:
   da394:	f04f 0300 	mov.w	r3, #0
   da398:	e004      	b.n	da3a4 <__aeabi_i2f+0x8>
   da39a:	bf00      	nop

000da39c <__aeabi_i2f>:
   da39c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   da3a0:	bf48      	it	mi
   da3a2:	4240      	negmi	r0, r0
   da3a4:	ea5f 0c00 	movs.w	ip, r0
   da3a8:	bf08      	it	eq
   da3aa:	4770      	bxeq	lr
   da3ac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   da3b0:	4601      	mov	r1, r0
   da3b2:	f04f 0000 	mov.w	r0, #0
   da3b6:	e01c      	b.n	da3f2 <__aeabi_l2f+0x2a>

000da3b8 <__aeabi_ul2f>:
   da3b8:	ea50 0201 	orrs.w	r2, r0, r1
   da3bc:	bf08      	it	eq
   da3be:	4770      	bxeq	lr
   da3c0:	f04f 0300 	mov.w	r3, #0
   da3c4:	e00a      	b.n	da3dc <__aeabi_l2f+0x14>
   da3c6:	bf00      	nop

000da3c8 <__aeabi_l2f>:
   da3c8:	ea50 0201 	orrs.w	r2, r0, r1
   da3cc:	bf08      	it	eq
   da3ce:	4770      	bxeq	lr
   da3d0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   da3d4:	d502      	bpl.n	da3dc <__aeabi_l2f+0x14>
   da3d6:	4240      	negs	r0, r0
   da3d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da3dc:	ea5f 0c01 	movs.w	ip, r1
   da3e0:	bf02      	ittt	eq
   da3e2:	4684      	moveq	ip, r0
   da3e4:	4601      	moveq	r1, r0
   da3e6:	2000      	moveq	r0, #0
   da3e8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   da3ec:	bf08      	it	eq
   da3ee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   da3f2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   da3f6:	fabc f28c 	clz	r2, ip
   da3fa:	3a08      	subs	r2, #8
   da3fc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   da400:	db10      	blt.n	da424 <__aeabi_l2f+0x5c>
   da402:	fa01 fc02 	lsl.w	ip, r1, r2
   da406:	4463      	add	r3, ip
   da408:	fa00 fc02 	lsl.w	ip, r0, r2
   da40c:	f1c2 0220 	rsb	r2, r2, #32
   da410:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   da414:	fa20 f202 	lsr.w	r2, r0, r2
   da418:	eb43 0002 	adc.w	r0, r3, r2
   da41c:	bf08      	it	eq
   da41e:	f020 0001 	biceq.w	r0, r0, #1
   da422:	4770      	bx	lr
   da424:	f102 0220 	add.w	r2, r2, #32
   da428:	fa01 fc02 	lsl.w	ip, r1, r2
   da42c:	f1c2 0220 	rsb	r2, r2, #32
   da430:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   da434:	fa21 f202 	lsr.w	r2, r1, r2
   da438:	eb43 0002 	adc.w	r0, r3, r2
   da43c:	bf08      	it	eq
   da43e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   da442:	4770      	bx	lr

000da444 <__aeabi_ldivmod>:
   da444:	b97b      	cbnz	r3, da466 <__aeabi_ldivmod+0x22>
   da446:	b972      	cbnz	r2, da466 <__aeabi_ldivmod+0x22>
   da448:	2900      	cmp	r1, #0
   da44a:	bfbe      	ittt	lt
   da44c:	2000      	movlt	r0, #0
   da44e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   da452:	e006      	blt.n	da462 <__aeabi_ldivmod+0x1e>
   da454:	bf08      	it	eq
   da456:	2800      	cmpeq	r0, #0
   da458:	bf1c      	itt	ne
   da45a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   da45e:	f04f 30ff 	movne.w	r0, #4294967295
   da462:	f000 b9ed 	b.w	da840 <__aeabi_idiv0>
   da466:	f1ad 0c08 	sub.w	ip, sp, #8
   da46a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   da46e:	2900      	cmp	r1, #0
   da470:	db09      	blt.n	da486 <__aeabi_ldivmod+0x42>
   da472:	2b00      	cmp	r3, #0
   da474:	db1a      	blt.n	da4ac <__aeabi_ldivmod+0x68>
   da476:	f000 f871 	bl	da55c <__udivmoddi4>
   da47a:	f8dd e004 	ldr.w	lr, [sp, #4]
   da47e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   da482:	b004      	add	sp, #16
   da484:	4770      	bx	lr
   da486:	4240      	negs	r0, r0
   da488:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da48c:	2b00      	cmp	r3, #0
   da48e:	db1b      	blt.n	da4c8 <__aeabi_ldivmod+0x84>
   da490:	f000 f864 	bl	da55c <__udivmoddi4>
   da494:	f8dd e004 	ldr.w	lr, [sp, #4]
   da498:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   da49c:	b004      	add	sp, #16
   da49e:	4240      	negs	r0, r0
   da4a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da4a4:	4252      	negs	r2, r2
   da4a6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   da4aa:	4770      	bx	lr
   da4ac:	4252      	negs	r2, r2
   da4ae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   da4b2:	f000 f853 	bl	da55c <__udivmoddi4>
   da4b6:	f8dd e004 	ldr.w	lr, [sp, #4]
   da4ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   da4be:	b004      	add	sp, #16
   da4c0:	4240      	negs	r0, r0
   da4c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da4c6:	4770      	bx	lr
   da4c8:	4252      	negs	r2, r2
   da4ca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   da4ce:	f000 f845 	bl	da55c <__udivmoddi4>
   da4d2:	f8dd e004 	ldr.w	lr, [sp, #4]
   da4d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   da4da:	b004      	add	sp, #16
   da4dc:	4252      	negs	r2, r2
   da4de:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   da4e2:	4770      	bx	lr

000da4e4 <__aeabi_uldivmod>:
   da4e4:	b953      	cbnz	r3, da4fc <__aeabi_uldivmod+0x18>
   da4e6:	b94a      	cbnz	r2, da4fc <__aeabi_uldivmod+0x18>
   da4e8:	2900      	cmp	r1, #0
   da4ea:	bf08      	it	eq
   da4ec:	2800      	cmpeq	r0, #0
   da4ee:	bf1c      	itt	ne
   da4f0:	f04f 31ff 	movne.w	r1, #4294967295
   da4f4:	f04f 30ff 	movne.w	r0, #4294967295
   da4f8:	f000 b9a2 	b.w	da840 <__aeabi_idiv0>
   da4fc:	f1ad 0c08 	sub.w	ip, sp, #8
   da500:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   da504:	f000 f82a 	bl	da55c <__udivmoddi4>
   da508:	f8dd e004 	ldr.w	lr, [sp, #4]
   da50c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   da510:	b004      	add	sp, #16
   da512:	4770      	bx	lr

000da514 <__aeabi_d2ulz>:
   da514:	b5d0      	push	{r4, r6, r7, lr}
   da516:	2200      	movs	r2, #0
   da518:	4b0e      	ldr	r3, [pc, #56]	; (da554 <__aeabi_d2ulz+0x40>)
   da51a:	4606      	mov	r6, r0
   da51c:	460f      	mov	r7, r1
   da51e:	f7ff fb3b 	bl	d9b98 <__aeabi_dmul>
   da522:	f7ff fe11 	bl	da148 <__aeabi_d2uiz>
   da526:	4604      	mov	r4, r0
   da528:	f7ff fac0 	bl	d9aac <__aeabi_ui2d>
   da52c:	2200      	movs	r2, #0
   da52e:	4b0a      	ldr	r3, [pc, #40]	; (da558 <__aeabi_d2ulz+0x44>)
   da530:	f7ff fb32 	bl	d9b98 <__aeabi_dmul>
   da534:	4602      	mov	r2, r0
   da536:	460b      	mov	r3, r1
   da538:	4630      	mov	r0, r6
   da53a:	4639      	mov	r1, r7
   da53c:	f7ff f978 	bl	d9830 <__aeabi_dsub>
   da540:	f7ff fe02 	bl	da148 <__aeabi_d2uiz>
   da544:	4623      	mov	r3, r4
   da546:	2200      	movs	r2, #0
   da548:	ea42 0200 	orr.w	r2, r2, r0
   da54c:	4610      	mov	r0, r2
   da54e:	4619      	mov	r1, r3
   da550:	bdd0      	pop	{r4, r6, r7, pc}
   da552:	bf00      	nop
   da554:	3df00000 	.word	0x3df00000
   da558:	41f00000 	.word	0x41f00000

000da55c <__udivmoddi4>:
   da55c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da560:	468c      	mov	ip, r1
   da562:	460e      	mov	r6, r1
   da564:	4604      	mov	r4, r0
   da566:	9d08      	ldr	r5, [sp, #32]
   da568:	2b00      	cmp	r3, #0
   da56a:	d150      	bne.n	da60e <__udivmoddi4+0xb2>
   da56c:	428a      	cmp	r2, r1
   da56e:	4617      	mov	r7, r2
   da570:	d96c      	bls.n	da64c <__udivmoddi4+0xf0>
   da572:	fab2 fe82 	clz	lr, r2
   da576:	f1be 0f00 	cmp.w	lr, #0
   da57a:	d00b      	beq.n	da594 <__udivmoddi4+0x38>
   da57c:	f1ce 0420 	rsb	r4, lr, #32
   da580:	fa20 f404 	lsr.w	r4, r0, r4
   da584:	fa01 f60e 	lsl.w	r6, r1, lr
   da588:	ea44 0c06 	orr.w	ip, r4, r6
   da58c:	fa02 f70e 	lsl.w	r7, r2, lr
   da590:	fa00 f40e 	lsl.w	r4, r0, lr
   da594:	ea4f 4917 	mov.w	r9, r7, lsr #16
   da598:	0c22      	lsrs	r2, r4, #16
   da59a:	fbbc f0f9 	udiv	r0, ip, r9
   da59e:	fa1f f887 	uxth.w	r8, r7
   da5a2:	fb09 c610 	mls	r6, r9, r0, ip
   da5a6:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   da5aa:	fb00 f308 	mul.w	r3, r0, r8
   da5ae:	42b3      	cmp	r3, r6
   da5b0:	d909      	bls.n	da5c6 <__udivmoddi4+0x6a>
   da5b2:	19f6      	adds	r6, r6, r7
   da5b4:	f100 32ff 	add.w	r2, r0, #4294967295
   da5b8:	f080 8122 	bcs.w	da800 <__udivmoddi4+0x2a4>
   da5bc:	42b3      	cmp	r3, r6
   da5be:	f240 811f 	bls.w	da800 <__udivmoddi4+0x2a4>
   da5c2:	3802      	subs	r0, #2
   da5c4:	443e      	add	r6, r7
   da5c6:	1af6      	subs	r6, r6, r3
   da5c8:	b2a2      	uxth	r2, r4
   da5ca:	fbb6 f3f9 	udiv	r3, r6, r9
   da5ce:	fb09 6613 	mls	r6, r9, r3, r6
   da5d2:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   da5d6:	fb03 f808 	mul.w	r8, r3, r8
   da5da:	45a0      	cmp	r8, r4
   da5dc:	d909      	bls.n	da5f2 <__udivmoddi4+0x96>
   da5de:	19e4      	adds	r4, r4, r7
   da5e0:	f103 32ff 	add.w	r2, r3, #4294967295
   da5e4:	f080 810a 	bcs.w	da7fc <__udivmoddi4+0x2a0>
   da5e8:	45a0      	cmp	r8, r4
   da5ea:	f240 8107 	bls.w	da7fc <__udivmoddi4+0x2a0>
   da5ee:	3b02      	subs	r3, #2
   da5f0:	443c      	add	r4, r7
   da5f2:	ebc8 0404 	rsb	r4, r8, r4
   da5f6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   da5fa:	2100      	movs	r1, #0
   da5fc:	2d00      	cmp	r5, #0
   da5fe:	d062      	beq.n	da6c6 <__udivmoddi4+0x16a>
   da600:	fa24 f40e 	lsr.w	r4, r4, lr
   da604:	2300      	movs	r3, #0
   da606:	602c      	str	r4, [r5, #0]
   da608:	606b      	str	r3, [r5, #4]
   da60a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da60e:	428b      	cmp	r3, r1
   da610:	d907      	bls.n	da622 <__udivmoddi4+0xc6>
   da612:	2d00      	cmp	r5, #0
   da614:	d055      	beq.n	da6c2 <__udivmoddi4+0x166>
   da616:	2100      	movs	r1, #0
   da618:	e885 0041 	stmia.w	r5, {r0, r6}
   da61c:	4608      	mov	r0, r1
   da61e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da622:	fab3 f183 	clz	r1, r3
   da626:	2900      	cmp	r1, #0
   da628:	f040 8090 	bne.w	da74c <__udivmoddi4+0x1f0>
   da62c:	42b3      	cmp	r3, r6
   da62e:	d302      	bcc.n	da636 <__udivmoddi4+0xda>
   da630:	4282      	cmp	r2, r0
   da632:	f200 80f8 	bhi.w	da826 <__udivmoddi4+0x2ca>
   da636:	1a84      	subs	r4, r0, r2
   da638:	eb66 0603 	sbc.w	r6, r6, r3
   da63c:	2001      	movs	r0, #1
   da63e:	46b4      	mov	ip, r6
   da640:	2d00      	cmp	r5, #0
   da642:	d040      	beq.n	da6c6 <__udivmoddi4+0x16a>
   da644:	e885 1010 	stmia.w	r5, {r4, ip}
   da648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da64c:	b912      	cbnz	r2, da654 <__udivmoddi4+0xf8>
   da64e:	2701      	movs	r7, #1
   da650:	fbb7 f7f2 	udiv	r7, r7, r2
   da654:	fab7 fe87 	clz	lr, r7
   da658:	f1be 0f00 	cmp.w	lr, #0
   da65c:	d135      	bne.n	da6ca <__udivmoddi4+0x16e>
   da65e:	1bf3      	subs	r3, r6, r7
   da660:	ea4f 4817 	mov.w	r8, r7, lsr #16
   da664:	fa1f fc87 	uxth.w	ip, r7
   da668:	2101      	movs	r1, #1
   da66a:	fbb3 f0f8 	udiv	r0, r3, r8
   da66e:	0c22      	lsrs	r2, r4, #16
   da670:	fb08 3610 	mls	r6, r8, r0, r3
   da674:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   da678:	fb0c f300 	mul.w	r3, ip, r0
   da67c:	42b3      	cmp	r3, r6
   da67e:	d907      	bls.n	da690 <__udivmoddi4+0x134>
   da680:	19f6      	adds	r6, r6, r7
   da682:	f100 32ff 	add.w	r2, r0, #4294967295
   da686:	d202      	bcs.n	da68e <__udivmoddi4+0x132>
   da688:	42b3      	cmp	r3, r6
   da68a:	f200 80ce 	bhi.w	da82a <__udivmoddi4+0x2ce>
   da68e:	4610      	mov	r0, r2
   da690:	1af6      	subs	r6, r6, r3
   da692:	b2a2      	uxth	r2, r4
   da694:	fbb6 f3f8 	udiv	r3, r6, r8
   da698:	fb08 6613 	mls	r6, r8, r3, r6
   da69c:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   da6a0:	fb0c fc03 	mul.w	ip, ip, r3
   da6a4:	45a4      	cmp	ip, r4
   da6a6:	d907      	bls.n	da6b8 <__udivmoddi4+0x15c>
   da6a8:	19e4      	adds	r4, r4, r7
   da6aa:	f103 32ff 	add.w	r2, r3, #4294967295
   da6ae:	d202      	bcs.n	da6b6 <__udivmoddi4+0x15a>
   da6b0:	45a4      	cmp	ip, r4
   da6b2:	f200 80b5 	bhi.w	da820 <__udivmoddi4+0x2c4>
   da6b6:	4613      	mov	r3, r2
   da6b8:	ebcc 0404 	rsb	r4, ip, r4
   da6bc:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   da6c0:	e79c      	b.n	da5fc <__udivmoddi4+0xa0>
   da6c2:	4629      	mov	r1, r5
   da6c4:	4628      	mov	r0, r5
   da6c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da6ca:	f1ce 0120 	rsb	r1, lr, #32
   da6ce:	fa06 f30e 	lsl.w	r3, r6, lr
   da6d2:	fa07 f70e 	lsl.w	r7, r7, lr
   da6d6:	fa20 f901 	lsr.w	r9, r0, r1
   da6da:	ea4f 4817 	mov.w	r8, r7, lsr #16
   da6de:	40ce      	lsrs	r6, r1
   da6e0:	ea49 0903 	orr.w	r9, r9, r3
   da6e4:	fbb6 faf8 	udiv	sl, r6, r8
   da6e8:	ea4f 4419 	mov.w	r4, r9, lsr #16
   da6ec:	fb08 661a 	mls	r6, r8, sl, r6
   da6f0:	fa1f fc87 	uxth.w	ip, r7
   da6f4:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
   da6f8:	fb0a f20c 	mul.w	r2, sl, ip
   da6fc:	429a      	cmp	r2, r3
   da6fe:	fa00 f40e 	lsl.w	r4, r0, lr
   da702:	d90a      	bls.n	da71a <__udivmoddi4+0x1be>
   da704:	19db      	adds	r3, r3, r7
   da706:	f10a 31ff 	add.w	r1, sl, #4294967295
   da70a:	f080 8087 	bcs.w	da81c <__udivmoddi4+0x2c0>
   da70e:	429a      	cmp	r2, r3
   da710:	f240 8084 	bls.w	da81c <__udivmoddi4+0x2c0>
   da714:	f1aa 0a02 	sub.w	sl, sl, #2
   da718:	443b      	add	r3, r7
   da71a:	1a9b      	subs	r3, r3, r2
   da71c:	fa1f f989 	uxth.w	r9, r9
   da720:	fbb3 f1f8 	udiv	r1, r3, r8
   da724:	fb08 3311 	mls	r3, r8, r1, r3
   da728:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
   da72c:	fb01 f60c 	mul.w	r6, r1, ip
   da730:	429e      	cmp	r6, r3
   da732:	d907      	bls.n	da744 <__udivmoddi4+0x1e8>
   da734:	19db      	adds	r3, r3, r7
   da736:	f101 32ff 	add.w	r2, r1, #4294967295
   da73a:	d26b      	bcs.n	da814 <__udivmoddi4+0x2b8>
   da73c:	429e      	cmp	r6, r3
   da73e:	d969      	bls.n	da814 <__udivmoddi4+0x2b8>
   da740:	3902      	subs	r1, #2
   da742:	443b      	add	r3, r7
   da744:	1b9b      	subs	r3, r3, r6
   da746:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   da74a:	e78e      	b.n	da66a <__udivmoddi4+0x10e>
   da74c:	f1c1 0e20 	rsb	lr, r1, #32
   da750:	fa22 f40e 	lsr.w	r4, r2, lr
   da754:	408b      	lsls	r3, r1
   da756:	4323      	orrs	r3, r4
   da758:	fa20 f70e 	lsr.w	r7, r0, lr
   da75c:	fa06 f401 	lsl.w	r4, r6, r1
   da760:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   da764:	fa26 f60e 	lsr.w	r6, r6, lr
   da768:	433c      	orrs	r4, r7
   da76a:	fbb6 f9fc 	udiv	r9, r6, ip
   da76e:	0c27      	lsrs	r7, r4, #16
   da770:	fb0c 6619 	mls	r6, ip, r9, r6
   da774:	fa1f f883 	uxth.w	r8, r3
   da778:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   da77c:	fb09 f708 	mul.w	r7, r9, r8
   da780:	42b7      	cmp	r7, r6
   da782:	fa02 f201 	lsl.w	r2, r2, r1
   da786:	fa00 fa01 	lsl.w	sl, r0, r1
   da78a:	d908      	bls.n	da79e <__udivmoddi4+0x242>
   da78c:	18f6      	adds	r6, r6, r3
   da78e:	f109 30ff 	add.w	r0, r9, #4294967295
   da792:	d241      	bcs.n	da818 <__udivmoddi4+0x2bc>
   da794:	42b7      	cmp	r7, r6
   da796:	d93f      	bls.n	da818 <__udivmoddi4+0x2bc>
   da798:	f1a9 0902 	sub.w	r9, r9, #2
   da79c:	441e      	add	r6, r3
   da79e:	1bf6      	subs	r6, r6, r7
   da7a0:	b2a0      	uxth	r0, r4
   da7a2:	fbb6 f4fc 	udiv	r4, r6, ip
   da7a6:	fb0c 6614 	mls	r6, ip, r4, r6
   da7aa:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
   da7ae:	fb04 f808 	mul.w	r8, r4, r8
   da7b2:	45b8      	cmp	r8, r7
   da7b4:	d907      	bls.n	da7c6 <__udivmoddi4+0x26a>
   da7b6:	18ff      	adds	r7, r7, r3
   da7b8:	f104 30ff 	add.w	r0, r4, #4294967295
   da7bc:	d228      	bcs.n	da810 <__udivmoddi4+0x2b4>
   da7be:	45b8      	cmp	r8, r7
   da7c0:	d926      	bls.n	da810 <__udivmoddi4+0x2b4>
   da7c2:	3c02      	subs	r4, #2
   da7c4:	441f      	add	r7, r3
   da7c6:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
   da7ca:	ebc8 0707 	rsb	r7, r8, r7
   da7ce:	fba0 8902 	umull	r8, r9, r0, r2
   da7d2:	454f      	cmp	r7, r9
   da7d4:	4644      	mov	r4, r8
   da7d6:	464e      	mov	r6, r9
   da7d8:	d314      	bcc.n	da804 <__udivmoddi4+0x2a8>
   da7da:	d029      	beq.n	da830 <__udivmoddi4+0x2d4>
   da7dc:	b365      	cbz	r5, da838 <__udivmoddi4+0x2dc>
   da7de:	ebba 0304 	subs.w	r3, sl, r4
   da7e2:	eb67 0706 	sbc.w	r7, r7, r6
   da7e6:	fa07 fe0e 	lsl.w	lr, r7, lr
   da7ea:	40cb      	lsrs	r3, r1
   da7ec:	40cf      	lsrs	r7, r1
   da7ee:	ea4e 0303 	orr.w	r3, lr, r3
   da7f2:	e885 0088 	stmia.w	r5, {r3, r7}
   da7f6:	2100      	movs	r1, #0
   da7f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da7fc:	4613      	mov	r3, r2
   da7fe:	e6f8      	b.n	da5f2 <__udivmoddi4+0x96>
   da800:	4610      	mov	r0, r2
   da802:	e6e0      	b.n	da5c6 <__udivmoddi4+0x6a>
   da804:	ebb8 0402 	subs.w	r4, r8, r2
   da808:	eb69 0603 	sbc.w	r6, r9, r3
   da80c:	3801      	subs	r0, #1
   da80e:	e7e5      	b.n	da7dc <__udivmoddi4+0x280>
   da810:	4604      	mov	r4, r0
   da812:	e7d8      	b.n	da7c6 <__udivmoddi4+0x26a>
   da814:	4611      	mov	r1, r2
   da816:	e795      	b.n	da744 <__udivmoddi4+0x1e8>
   da818:	4681      	mov	r9, r0
   da81a:	e7c0      	b.n	da79e <__udivmoddi4+0x242>
   da81c:	468a      	mov	sl, r1
   da81e:	e77c      	b.n	da71a <__udivmoddi4+0x1be>
   da820:	3b02      	subs	r3, #2
   da822:	443c      	add	r4, r7
   da824:	e748      	b.n	da6b8 <__udivmoddi4+0x15c>
   da826:	4608      	mov	r0, r1
   da828:	e70a      	b.n	da640 <__udivmoddi4+0xe4>
   da82a:	3802      	subs	r0, #2
   da82c:	443e      	add	r6, r7
   da82e:	e72f      	b.n	da690 <__udivmoddi4+0x134>
   da830:	45c2      	cmp	sl, r8
   da832:	d3e7      	bcc.n	da804 <__udivmoddi4+0x2a8>
   da834:	463e      	mov	r6, r7
   da836:	e7d1      	b.n	da7dc <__udivmoddi4+0x280>
   da838:	4629      	mov	r1, r5
   da83a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da83e:	bf00      	nop

000da840 <__aeabi_idiv0>:
   da840:	4770      	bx	lr
   da842:	bf00      	nop

000da844 <asctime>:
   da844:	4b09      	ldr	r3, [pc, #36]	; (da86c <asctime+0x28>)
   da846:	b570      	push	{r4, r5, r6, lr}
   da848:	681c      	ldr	r4, [r3, #0]
   da84a:	6c25      	ldr	r5, [r4, #64]	; 0x40
   da84c:	4606      	mov	r6, r0
   da84e:	b93d      	cbnz	r5, da860 <asctime+0x1c>
   da850:	201a      	movs	r0, #26
   da852:	f7fb fce5 	bl	d6220 <malloc>
   da856:	221a      	movs	r2, #26
   da858:	6420      	str	r0, [r4, #64]	; 0x40
   da85a:	4629      	mov	r1, r5
   da85c:	f000 f972 	bl	dab44 <memset>
   da860:	6c21      	ldr	r1, [r4, #64]	; 0x40
   da862:	4630      	mov	r0, r6
   da864:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   da868:	f000 b802 	b.w	da870 <asctime_r>
   da86c:	2003e120 	.word	0x2003e120

000da870 <asctime_r>:
   da870:	b510      	push	{r4, lr}
   da872:	460c      	mov	r4, r1
   da874:	6941      	ldr	r1, [r0, #20]
   da876:	6903      	ldr	r3, [r0, #16]
   da878:	6982      	ldr	r2, [r0, #24]
   da87a:	b086      	sub	sp, #24
   da87c:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   da880:	9104      	str	r1, [sp, #16]
   da882:	6801      	ldr	r1, [r0, #0]
   da884:	9103      	str	r1, [sp, #12]
   da886:	6841      	ldr	r1, [r0, #4]
   da888:	9102      	str	r1, [sp, #8]
   da88a:	6881      	ldr	r1, [r0, #8]
   da88c:	9101      	str	r1, [sp, #4]
   da88e:	68c1      	ldr	r1, [r0, #12]
   da890:	9100      	str	r1, [sp, #0]
   da892:	4907      	ldr	r1, [pc, #28]	; (da8b0 <asctime_r+0x40>)
   da894:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   da898:	440b      	add	r3, r1
   da89a:	4906      	ldr	r1, [pc, #24]	; (da8b4 <asctime_r+0x44>)
   da89c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   da8a0:	440a      	add	r2, r1
   da8a2:	4620      	mov	r0, r4
   da8a4:	4904      	ldr	r1, [pc, #16]	; (da8b8 <asctime_r+0x48>)
   da8a6:	f7fb fcdb 	bl	d6260 <siprintf>
   da8aa:	4620      	mov	r0, r4
   da8ac:	b006      	add	sp, #24
   da8ae:	bd10      	pop	{r4, pc}
   da8b0:	000dbe3d 	.word	0x000dbe3d
   da8b4:	000dbe28 	.word	0x000dbe28
   da8b8:	000dbe61 	.word	0x000dbe61

000da8bc <atoi>:
   da8bc:	220a      	movs	r2, #10
   da8be:	2100      	movs	r1, #0
   da8c0:	f000 ba78 	b.w	dadb4 <strtol>

000da8c4 <__cxa_atexit>:
   da8c4:	b510      	push	{r4, lr}
   da8c6:	4c05      	ldr	r4, [pc, #20]	; (da8dc <__cxa_atexit+0x18>)
   da8c8:	4613      	mov	r3, r2
   da8ca:	b12c      	cbz	r4, da8d8 <__cxa_atexit+0x14>
   da8cc:	460a      	mov	r2, r1
   da8ce:	4601      	mov	r1, r0
   da8d0:	2002      	movs	r0, #2
   da8d2:	f3af 8000 	nop.w
   da8d6:	bd10      	pop	{r4, pc}
   da8d8:	4620      	mov	r0, r4
   da8da:	bd10      	pop	{r4, pc}
   da8dc:	00000000 	.word	0x00000000

000da8e0 <localtime>:
   da8e0:	b538      	push	{r3, r4, r5, lr}
   da8e2:	4b07      	ldr	r3, [pc, #28]	; (da900 <localtime+0x20>)
   da8e4:	681c      	ldr	r4, [r3, #0]
   da8e6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   da8e8:	4605      	mov	r5, r0
   da8ea:	b91b      	cbnz	r3, da8f4 <localtime+0x14>
   da8ec:	2024      	movs	r0, #36	; 0x24
   da8ee:	f7fb fc97 	bl	d6220 <malloc>
   da8f2:	63e0      	str	r0, [r4, #60]	; 0x3c
   da8f4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   da8f6:	4628      	mov	r0, r5
   da8f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   da8fc:	f000 b802 	b.w	da904 <localtime_r>
   da900:	2003e120 	.word	0x2003e120

000da904 <localtime_r>:
   da904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da908:	460c      	mov	r4, r1
   da90a:	4680      	mov	r8, r0
   da90c:	f000 fd58 	bl	db3c0 <__gettzinfo>
   da910:	4621      	mov	r1, r4
   da912:	4607      	mov	r7, r0
   da914:	4640      	mov	r0, r8
   da916:	f000 fd57 	bl	db3c8 <gmtime_r>
   da91a:	6946      	ldr	r6, [r0, #20]
   da91c:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   da920:	07b3      	lsls	r3, r6, #30
   da922:	4604      	mov	r4, r0
   da924:	d105      	bne.n	da932 <localtime_r+0x2e>
   da926:	2264      	movs	r2, #100	; 0x64
   da928:	fb96 f3f2 	sdiv	r3, r6, r2
   da92c:	fb02 6313 	mls	r3, r2, r3, r6
   da930:	b94b      	cbnz	r3, da946 <localtime_r+0x42>
   da932:	f44f 75c8 	mov.w	r5, #400	; 0x190
   da936:	fb96 f3f5 	sdiv	r3, r6, r5
   da93a:	fb05 6513 	mls	r5, r5, r3, r6
   da93e:	fab5 f385 	clz	r3, r5
   da942:	095b      	lsrs	r3, r3, #5
   da944:	e000      	b.n	da948 <localtime_r+0x44>
   da946:	2301      	movs	r3, #1
   da948:	4a5f      	ldr	r2, [pc, #380]	; (daac8 <localtime_r+0x1c4>)
   da94a:	2530      	movs	r5, #48	; 0x30
   da94c:	fb05 2503 	mla	r5, r5, r3, r2
   da950:	f000 fb6a 	bl	db028 <__tz_lock>
   da954:	f000 fb6a 	bl	db02c <_tzset_unlocked>
   da958:	4b5c      	ldr	r3, [pc, #368]	; (daacc <localtime_r+0x1c8>)
   da95a:	681b      	ldr	r3, [r3, #0]
   da95c:	b1f3      	cbz	r3, da99c <localtime_r+0x98>
   da95e:	687b      	ldr	r3, [r7, #4]
   da960:	429e      	cmp	r6, r3
   da962:	d105      	bne.n	da970 <localtime_r+0x6c>
   da964:	6839      	ldr	r1, [r7, #0]
   da966:	f8d8 3000 	ldr.w	r3, [r8]
   da96a:	69fa      	ldr	r2, [r7, #28]
   da96c:	b941      	cbnz	r1, da980 <localtime_r+0x7c>
   da96e:	e00a      	b.n	da986 <localtime_r+0x82>
   da970:	4630      	mov	r0, r6
   da972:	f000 fab1 	bl	daed8 <__tzcalc_limits>
   da976:	2800      	cmp	r0, #0
   da978:	d1f4      	bne.n	da964 <localtime_r+0x60>
   da97a:	f04f 33ff 	mov.w	r3, #4294967295
   da97e:	e00d      	b.n	da99c <localtime_r+0x98>
   da980:	4293      	cmp	r3, r2
   da982:	db08      	blt.n	da996 <localtime_r+0x92>
   da984:	e001      	b.n	da98a <localtime_r+0x86>
   da986:	4293      	cmp	r3, r2
   da988:	da07      	bge.n	da99a <localtime_r+0x96>
   da98a:	6bba      	ldr	r2, [r7, #56]	; 0x38
   da98c:	4293      	cmp	r3, r2
   da98e:	bfac      	ite	ge
   da990:	2300      	movge	r3, #0
   da992:	2301      	movlt	r3, #1
   da994:	e002      	b.n	da99c <localtime_r+0x98>
   da996:	2300      	movs	r3, #0
   da998:	e000      	b.n	da99c <localtime_r+0x98>
   da99a:	2301      	movs	r3, #1
   da99c:	6223      	str	r3, [r4, #32]
   da99e:	6a23      	ldr	r3, [r4, #32]
   da9a0:	2b01      	cmp	r3, #1
   da9a2:	bf0c      	ite	eq
   da9a4:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   da9a6:	6a39      	ldrne	r1, [r7, #32]
   da9a8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   da9ac:	203c      	movs	r0, #60	; 0x3c
   da9ae:	fb91 f6f3 	sdiv	r6, r1, r3
   da9b2:	fb03 1316 	mls	r3, r3, r6, r1
   da9b6:	6861      	ldr	r1, [r4, #4]
   da9b8:	fb93 f2f0 	sdiv	r2, r3, r0
   da9bc:	fb00 3012 	mls	r0, r0, r2, r3
   da9c0:	6823      	ldr	r3, [r4, #0]
   da9c2:	1a89      	subs	r1, r1, r2
   da9c4:	68a2      	ldr	r2, [r4, #8]
   da9c6:	6061      	str	r1, [r4, #4]
   da9c8:	1a1b      	subs	r3, r3, r0
   da9ca:	1b92      	subs	r2, r2, r6
   da9cc:	2b3b      	cmp	r3, #59	; 0x3b
   da9ce:	6023      	str	r3, [r4, #0]
   da9d0:	60a2      	str	r2, [r4, #8]
   da9d2:	dd03      	ble.n	da9dc <localtime_r+0xd8>
   da9d4:	3101      	adds	r1, #1
   da9d6:	6061      	str	r1, [r4, #4]
   da9d8:	3b3c      	subs	r3, #60	; 0x3c
   da9da:	e004      	b.n	da9e6 <localtime_r+0xe2>
   da9dc:	2b00      	cmp	r3, #0
   da9de:	da03      	bge.n	da9e8 <localtime_r+0xe4>
   da9e0:	3901      	subs	r1, #1
   da9e2:	6061      	str	r1, [r4, #4]
   da9e4:	333c      	adds	r3, #60	; 0x3c
   da9e6:	6023      	str	r3, [r4, #0]
   da9e8:	6863      	ldr	r3, [r4, #4]
   da9ea:	2b3b      	cmp	r3, #59	; 0x3b
   da9ec:	dd03      	ble.n	da9f6 <localtime_r+0xf2>
   da9ee:	3201      	adds	r2, #1
   da9f0:	60a2      	str	r2, [r4, #8]
   da9f2:	3b3c      	subs	r3, #60	; 0x3c
   da9f4:	e004      	b.n	daa00 <localtime_r+0xfc>
   da9f6:	2b00      	cmp	r3, #0
   da9f8:	da03      	bge.n	daa02 <localtime_r+0xfe>
   da9fa:	3a01      	subs	r2, #1
   da9fc:	60a2      	str	r2, [r4, #8]
   da9fe:	333c      	adds	r3, #60	; 0x3c
   daa00:	6063      	str	r3, [r4, #4]
   daa02:	68a3      	ldr	r3, [r4, #8]
   daa04:	2b17      	cmp	r3, #23
   daa06:	dd22      	ble.n	daa4e <localtime_r+0x14a>
   daa08:	69e2      	ldr	r2, [r4, #28]
   daa0a:	3201      	adds	r2, #1
   daa0c:	61e2      	str	r2, [r4, #28]
   daa0e:	69a2      	ldr	r2, [r4, #24]
   daa10:	3201      	adds	r2, #1
   daa12:	2a06      	cmp	r2, #6
   daa14:	bfc8      	it	gt
   daa16:	2200      	movgt	r2, #0
   daa18:	61a2      	str	r2, [r4, #24]
   daa1a:	68e2      	ldr	r2, [r4, #12]
   daa1c:	3b18      	subs	r3, #24
   daa1e:	3201      	adds	r2, #1
   daa20:	60a3      	str	r3, [r4, #8]
   daa22:	6923      	ldr	r3, [r4, #16]
   daa24:	60e2      	str	r2, [r4, #12]
   daa26:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   daa2a:	428a      	cmp	r2, r1
   daa2c:	dd46      	ble.n	daabc <localtime_r+0x1b8>
   daa2e:	3301      	adds	r3, #1
   daa30:	2b0c      	cmp	r3, #12
   daa32:	bf0c      	ite	eq
   daa34:	6963      	ldreq	r3, [r4, #20]
   daa36:	6123      	strne	r3, [r4, #16]
   daa38:	eba2 0201 	sub.w	r2, r2, r1
   daa3c:	60e2      	str	r2, [r4, #12]
   daa3e:	bf01      	itttt	eq
   daa40:	3301      	addeq	r3, #1
   daa42:	2200      	moveq	r2, #0
   daa44:	6122      	streq	r2, [r4, #16]
   daa46:	6163      	streq	r3, [r4, #20]
   daa48:	bf08      	it	eq
   daa4a:	61e2      	streq	r2, [r4, #28]
   daa4c:	e036      	b.n	daabc <localtime_r+0x1b8>
   daa4e:	2b00      	cmp	r3, #0
   daa50:	da34      	bge.n	daabc <localtime_r+0x1b8>
   daa52:	69e2      	ldr	r2, [r4, #28]
   daa54:	3a01      	subs	r2, #1
   daa56:	61e2      	str	r2, [r4, #28]
   daa58:	69a2      	ldr	r2, [r4, #24]
   daa5a:	3a01      	subs	r2, #1
   daa5c:	bf48      	it	mi
   daa5e:	2206      	movmi	r2, #6
   daa60:	61a2      	str	r2, [r4, #24]
   daa62:	68e2      	ldr	r2, [r4, #12]
   daa64:	3318      	adds	r3, #24
   daa66:	3a01      	subs	r2, #1
   daa68:	60e2      	str	r2, [r4, #12]
   daa6a:	60a3      	str	r3, [r4, #8]
   daa6c:	bb32      	cbnz	r2, daabc <localtime_r+0x1b8>
   daa6e:	6923      	ldr	r3, [r4, #16]
   daa70:	3b01      	subs	r3, #1
   daa72:	d401      	bmi.n	daa78 <localtime_r+0x174>
   daa74:	6123      	str	r3, [r4, #16]
   daa76:	e01d      	b.n	daab4 <localtime_r+0x1b0>
   daa78:	230b      	movs	r3, #11
   daa7a:	6123      	str	r3, [r4, #16]
   daa7c:	6963      	ldr	r3, [r4, #20]
   daa7e:	1e5a      	subs	r2, r3, #1
   daa80:	f012 0f03 	tst.w	r2, #3
   daa84:	6162      	str	r2, [r4, #20]
   daa86:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   daa8a:	d105      	bne.n	daa98 <localtime_r+0x194>
   daa8c:	2164      	movs	r1, #100	; 0x64
   daa8e:	fb93 f2f1 	sdiv	r2, r3, r1
   daa92:	fb01 3212 	mls	r2, r1, r2, r3
   daa96:	b94a      	cbnz	r2, daaac <localtime_r+0x1a8>
   daa98:	f44f 71c8 	mov.w	r1, #400	; 0x190
   daa9c:	fb93 f2f1 	sdiv	r2, r3, r1
   daaa0:	fb01 3312 	mls	r3, r1, r2, r3
   daaa4:	fab3 f383 	clz	r3, r3
   daaa8:	095b      	lsrs	r3, r3, #5
   daaaa:	e000      	b.n	daaae <localtime_r+0x1aa>
   daaac:	2301      	movs	r3, #1
   daaae:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   daab2:	61e3      	str	r3, [r4, #28]
   daab4:	6923      	ldr	r3, [r4, #16]
   daab6:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   daaba:	60e3      	str	r3, [r4, #12]
   daabc:	f000 fab5 	bl	db02a <__tz_unlock>
   daac0:	4620      	mov	r0, r4
   daac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   daac6:	bf00      	nop
   daac8:	000dbfe4 	.word	0x000dbfe4
   daacc:	2003e7e4 	.word	0x2003e7e4

000daad0 <ldiv>:
   daad0:	2900      	cmp	r1, #0
   daad2:	b510      	push	{r4, lr}
   daad4:	fb91 f4f2 	sdiv	r4, r1, r2
   daad8:	fb02 1314 	mls	r3, r2, r4, r1
   daadc:	db04      	blt.n	daae8 <ldiv+0x18>
   daade:	2b00      	cmp	r3, #0
   daae0:	da07      	bge.n	daaf2 <ldiv+0x22>
   daae2:	3401      	adds	r4, #1
   daae4:	1a9b      	subs	r3, r3, r2
   daae6:	e004      	b.n	daaf2 <ldiv+0x22>
   daae8:	2b00      	cmp	r3, #0
   daaea:	bfc4      	itt	gt
   daaec:	f104 34ff 	addgt.w	r4, r4, #4294967295
   daaf0:	189b      	addgt	r3, r3, r2
   daaf2:	6004      	str	r4, [r0, #0]
   daaf4:	6043      	str	r3, [r0, #4]
   daaf6:	bd10      	pop	{r4, pc}

000daaf8 <memcpy>:
   daaf8:	b510      	push	{r4, lr}
   daafa:	1e43      	subs	r3, r0, #1
   daafc:	440a      	add	r2, r1
   daafe:	4291      	cmp	r1, r2
   dab00:	d004      	beq.n	dab0c <memcpy+0x14>
   dab02:	f811 4b01 	ldrb.w	r4, [r1], #1
   dab06:	f803 4f01 	strb.w	r4, [r3, #1]!
   dab0a:	e7f8      	b.n	daafe <memcpy+0x6>
   dab0c:	bd10      	pop	{r4, pc}

000dab0e <memmove>:
   dab0e:	4288      	cmp	r0, r1
   dab10:	b510      	push	{r4, lr}
   dab12:	eb01 0302 	add.w	r3, r1, r2
   dab16:	d801      	bhi.n	dab1c <memmove+0xe>
   dab18:	1e42      	subs	r2, r0, #1
   dab1a:	e00b      	b.n	dab34 <memmove+0x26>
   dab1c:	4298      	cmp	r0, r3
   dab1e:	d2fb      	bcs.n	dab18 <memmove+0xa>
   dab20:	1881      	adds	r1, r0, r2
   dab22:	1ad2      	subs	r2, r2, r3
   dab24:	42d3      	cmn	r3, r2
   dab26:	d004      	beq.n	dab32 <memmove+0x24>
   dab28:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   dab2c:	f801 4d01 	strb.w	r4, [r1, #-1]!
   dab30:	e7f8      	b.n	dab24 <memmove+0x16>
   dab32:	bd10      	pop	{r4, pc}
   dab34:	4299      	cmp	r1, r3
   dab36:	d004      	beq.n	dab42 <memmove+0x34>
   dab38:	f811 4b01 	ldrb.w	r4, [r1], #1
   dab3c:	f802 4f01 	strb.w	r4, [r2, #1]!
   dab40:	e7f8      	b.n	dab34 <memmove+0x26>
   dab42:	bd10      	pop	{r4, pc}

000dab44 <memset>:
   dab44:	4402      	add	r2, r0
   dab46:	4603      	mov	r3, r0
   dab48:	4293      	cmp	r3, r2
   dab4a:	d002      	beq.n	dab52 <memset+0xe>
   dab4c:	f803 1b01 	strb.w	r1, [r3], #1
   dab50:	e7fa      	b.n	dab48 <memset+0x4>
   dab52:	4770      	bx	lr

000dab54 <srand>:
   dab54:	b538      	push	{r3, r4, r5, lr}
   dab56:	4b12      	ldr	r3, [pc, #72]	; (daba0 <srand+0x4c>)
   dab58:	681c      	ldr	r4, [r3, #0]
   dab5a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   dab5c:	4605      	mov	r5, r0
   dab5e:	b9d3      	cbnz	r3, dab96 <srand+0x42>
   dab60:	2018      	movs	r0, #24
   dab62:	f7fb fb5d 	bl	d6220 <malloc>
   dab66:	f243 330e 	movw	r3, #13070	; 0x330e
   dab6a:	63a0      	str	r0, [r4, #56]	; 0x38
   dab6c:	8003      	strh	r3, [r0, #0]
   dab6e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   dab72:	8043      	strh	r3, [r0, #2]
   dab74:	f241 2334 	movw	r3, #4660	; 0x1234
   dab78:	8083      	strh	r3, [r0, #4]
   dab7a:	f24e 636d 	movw	r3, #58989	; 0xe66d
   dab7e:	80c3      	strh	r3, [r0, #6]
   dab80:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   dab84:	8103      	strh	r3, [r0, #8]
   dab86:	2305      	movs	r3, #5
   dab88:	8143      	strh	r3, [r0, #10]
   dab8a:	230b      	movs	r3, #11
   dab8c:	8183      	strh	r3, [r0, #12]
   dab8e:	2201      	movs	r2, #1
   dab90:	2300      	movs	r3, #0
   dab92:	e9c0 2304 	strd	r2, r3, [r0, #16]
   dab96:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   dab98:	2200      	movs	r2, #0
   dab9a:	611d      	str	r5, [r3, #16]
   dab9c:	615a      	str	r2, [r3, #20]
   dab9e:	bd38      	pop	{r3, r4, r5, pc}
   daba0:	2003e120 	.word	0x2003e120

000daba4 <strcmp>:
   daba4:	f810 2b01 	ldrb.w	r2, [r0], #1
   daba8:	f811 3b01 	ldrb.w	r3, [r1], #1
   dabac:	2a01      	cmp	r2, #1
   dabae:	bf28      	it	cs
   dabb0:	429a      	cmpcs	r2, r3
   dabb2:	d0f7      	beq.n	daba4 <strcmp>
   dabb4:	1ad0      	subs	r0, r2, r3
   dabb6:	4770      	bx	lr

000dabb8 <strcpy>:
   dabb8:	4603      	mov	r3, r0
   dabba:	f811 2b01 	ldrb.w	r2, [r1], #1
   dabbe:	f803 2b01 	strb.w	r2, [r3], #1
   dabc2:	2a00      	cmp	r2, #0
   dabc4:	d1f9      	bne.n	dabba <strcpy+0x2>
   dabc6:	4770      	bx	lr

000dabc8 <strdup>:
   dabc8:	4b02      	ldr	r3, [pc, #8]	; (dabd4 <strdup+0xc>)
   dabca:	4601      	mov	r1, r0
   dabcc:	6818      	ldr	r0, [r3, #0]
   dabce:	f000 b803 	b.w	dabd8 <_strdup_r>
   dabd2:	bf00      	nop
   dabd4:	2003e120 	.word	0x2003e120

000dabd8 <_strdup_r>:
   dabd8:	b570      	push	{r4, r5, r6, lr}
   dabda:	4606      	mov	r6, r0
   dabdc:	4608      	mov	r0, r1
   dabde:	460c      	mov	r4, r1
   dabe0:	f000 f80d 	bl	dabfe <strlen>
   dabe4:	1c45      	adds	r5, r0, #1
   dabe6:	4629      	mov	r1, r5
   dabe8:	4630      	mov	r0, r6
   dabea:	f7fb fb59 	bl	d62a0 <_malloc_r>
   dabee:	4606      	mov	r6, r0
   dabf0:	b118      	cbz	r0, dabfa <_strdup_r+0x22>
   dabf2:	462a      	mov	r2, r5
   dabf4:	4621      	mov	r1, r4
   dabf6:	f7ff ff7f 	bl	daaf8 <memcpy>
   dabfa:	4630      	mov	r0, r6
   dabfc:	bd70      	pop	{r4, r5, r6, pc}

000dabfe <strlen>:
   dabfe:	4603      	mov	r3, r0
   dac00:	f813 2b01 	ldrb.w	r2, [r3], #1
   dac04:	2a00      	cmp	r2, #0
   dac06:	d1fb      	bne.n	dac00 <strlen+0x2>
   dac08:	1a18      	subs	r0, r3, r0
   dac0a:	3801      	subs	r0, #1
   dac0c:	4770      	bx	lr
	...

000dac10 <strncasecmp>:
   dac10:	4b10      	ldr	r3, [pc, #64]	; (dac54 <strncasecmp+0x44>)
   dac12:	b570      	push	{r4, r5, r6, lr}
   dac14:	681e      	ldr	r6, [r3, #0]
   dac16:	440a      	add	r2, r1
   dac18:	4291      	cmp	r1, r2
   dac1a:	d017      	beq.n	dac4c <strncasecmp+0x3c>
   dac1c:	f810 3b01 	ldrb.w	r3, [r0], #1
   dac20:	18f4      	adds	r4, r6, r3
   dac22:	7864      	ldrb	r4, [r4, #1]
   dac24:	f004 0403 	and.w	r4, r4, #3
   dac28:	2c01      	cmp	r4, #1
   dac2a:	f811 4b01 	ldrb.w	r4, [r1], #1
   dac2e:	eb06 0504 	add.w	r5, r6, r4
   dac32:	bf08      	it	eq
   dac34:	3320      	addeq	r3, #32
   dac36:	786d      	ldrb	r5, [r5, #1]
   dac38:	f005 0503 	and.w	r5, r5, #3
   dac3c:	2d01      	cmp	r5, #1
   dac3e:	bf08      	it	eq
   dac40:	3420      	addeq	r4, #32
   dac42:	1b1b      	subs	r3, r3, r4
   dac44:	d103      	bne.n	dac4e <strncasecmp+0x3e>
   dac46:	2c00      	cmp	r4, #0
   dac48:	d1e6      	bne.n	dac18 <strncasecmp+0x8>
   dac4a:	e000      	b.n	dac4e <strncasecmp+0x3e>
   dac4c:	2300      	movs	r3, #0
   dac4e:	4618      	mov	r0, r3
   dac50:	bd70      	pop	{r4, r5, r6, pc}
   dac52:	bf00      	nop
   dac54:	2003e0bc 	.word	0x2003e0bc

000dac58 <strncmp>:
   dac58:	b530      	push	{r4, r5, lr}
   dac5a:	b182      	cbz	r2, dac7e <strncmp+0x26>
   dac5c:	1e45      	subs	r5, r0, #1
   dac5e:	3901      	subs	r1, #1
   dac60:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   dac64:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   dac68:	42a3      	cmp	r3, r4
   dac6a:	d106      	bne.n	dac7a <strncmp+0x22>
   dac6c:	43ec      	mvns	r4, r5
   dac6e:	4414      	add	r4, r2
   dac70:	42e0      	cmn	r0, r4
   dac72:	d001      	beq.n	dac78 <strncmp+0x20>
   dac74:	2b00      	cmp	r3, #0
   dac76:	d1f3      	bne.n	dac60 <strncmp+0x8>
   dac78:	461c      	mov	r4, r3
   dac7a:	1b18      	subs	r0, r3, r4
   dac7c:	bd30      	pop	{r4, r5, pc}
   dac7e:	4610      	mov	r0, r2
   dac80:	bd30      	pop	{r4, r5, pc}

000dac82 <strncpy>:
   dac82:	b510      	push	{r4, lr}
   dac84:	4603      	mov	r3, r0
   dac86:	b142      	cbz	r2, dac9a <strncpy+0x18>
   dac88:	f811 4b01 	ldrb.w	r4, [r1], #1
   dac8c:	f803 4b01 	strb.w	r4, [r3], #1
   dac90:	3a01      	subs	r2, #1
   dac92:	2c00      	cmp	r4, #0
   dac94:	d1f7      	bne.n	dac86 <strncpy+0x4>
   dac96:	441a      	add	r2, r3
   dac98:	e000      	b.n	dac9c <strncpy+0x1a>
   dac9a:	bd10      	pop	{r4, pc}
   dac9c:	4293      	cmp	r3, r2
   dac9e:	d002      	beq.n	daca6 <strncpy+0x24>
   daca0:	f803 4b01 	strb.w	r4, [r3], #1
   daca4:	e7fa      	b.n	dac9c <strncpy+0x1a>
   daca6:	bd10      	pop	{r4, pc}

000daca8 <_strtol_r>:
   daca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dacac:	4680      	mov	r8, r0
   dacae:	4840      	ldr	r0, [pc, #256]	; (dadb0 <_strtol_r+0x108>)
   dacb0:	f8d0 9000 	ldr.w	r9, [r0]
   dacb4:	460f      	mov	r7, r1
   dacb6:	463d      	mov	r5, r7
   dacb8:	f815 4b01 	ldrb.w	r4, [r5], #1
   dacbc:	eb09 0004 	add.w	r0, r9, r4
   dacc0:	7840      	ldrb	r0, [r0, #1]
   dacc2:	f000 0008 	and.w	r0, r0, #8
   dacc6:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   dacca:	b108      	cbz	r0, dacd0 <_strtol_r+0x28>
   daccc:	462f      	mov	r7, r5
   dacce:	e7f2      	b.n	dacb6 <_strtol_r+0xe>
   dacd0:	2c2d      	cmp	r4, #45	; 0x2d
   dacd2:	d103      	bne.n	dacdc <_strtol_r+0x34>
   dacd4:	1cbd      	adds	r5, r7, #2
   dacd6:	787c      	ldrb	r4, [r7, #1]
   dacd8:	2601      	movs	r6, #1
   dacda:	e003      	b.n	dace4 <_strtol_r+0x3c>
   dacdc:	2c2b      	cmp	r4, #43	; 0x2b
   dacde:	bf04      	itt	eq
   dace0:	787c      	ldrbeq	r4, [r7, #1]
   dace2:	1cbd      	addeq	r5, r7, #2
   dace4:	b113      	cbz	r3, dacec <_strtol_r+0x44>
   dace6:	2b10      	cmp	r3, #16
   dace8:	d10a      	bne.n	dad00 <_strtol_r+0x58>
   dacea:	e05b      	b.n	dada4 <_strtol_r+0xfc>
   dacec:	2c30      	cmp	r4, #48	; 0x30
   dacee:	d157      	bne.n	dada0 <_strtol_r+0xf8>
   dacf0:	7828      	ldrb	r0, [r5, #0]
   dacf2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   dacf6:	2858      	cmp	r0, #88	; 0x58
   dacf8:	d14d      	bne.n	dad96 <_strtol_r+0xee>
   dacfa:	786c      	ldrb	r4, [r5, #1]
   dacfc:	2310      	movs	r3, #16
   dacfe:	3502      	adds	r5, #2
   dad00:	2e00      	cmp	r6, #0
   dad02:	bf14      	ite	ne
   dad04:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   dad08:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   dad0c:	2700      	movs	r7, #0
   dad0e:	fbbc faf3 	udiv	sl, ip, r3
   dad12:	4638      	mov	r0, r7
   dad14:	fb03 cc1a 	mls	ip, r3, sl, ip
   dad18:	eb09 0e04 	add.w	lr, r9, r4
   dad1c:	f89e e001 	ldrb.w	lr, [lr, #1]
   dad20:	f01e 0f04 	tst.w	lr, #4
   dad24:	d001      	beq.n	dad2a <_strtol_r+0x82>
   dad26:	3c30      	subs	r4, #48	; 0x30
   dad28:	e00b      	b.n	dad42 <_strtol_r+0x9a>
   dad2a:	f01e 0e03 	ands.w	lr, lr, #3
   dad2e:	d01b      	beq.n	dad68 <_strtol_r+0xc0>
   dad30:	f1be 0f01 	cmp.w	lr, #1
   dad34:	bf0c      	ite	eq
   dad36:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   dad3a:	f04f 0e57 	movne.w	lr, #87	; 0x57
   dad3e:	ebce 0404 	rsb	r4, lr, r4
   dad42:	42a3      	cmp	r3, r4
   dad44:	dd10      	ble.n	dad68 <_strtol_r+0xc0>
   dad46:	f1b7 3fff 	cmp.w	r7, #4294967295
   dad4a:	d00a      	beq.n	dad62 <_strtol_r+0xba>
   dad4c:	4550      	cmp	r0, sl
   dad4e:	d806      	bhi.n	dad5e <_strtol_r+0xb6>
   dad50:	d101      	bne.n	dad56 <_strtol_r+0xae>
   dad52:	4564      	cmp	r4, ip
   dad54:	dc03      	bgt.n	dad5e <_strtol_r+0xb6>
   dad56:	fb03 4000 	mla	r0, r3, r0, r4
   dad5a:	2701      	movs	r7, #1
   dad5c:	e001      	b.n	dad62 <_strtol_r+0xba>
   dad5e:	f04f 37ff 	mov.w	r7, #4294967295
   dad62:	f815 4b01 	ldrb.w	r4, [r5], #1
   dad66:	e7d7      	b.n	dad18 <_strtol_r+0x70>
   dad68:	1c7b      	adds	r3, r7, #1
   dad6a:	d10c      	bne.n	dad86 <_strtol_r+0xde>
   dad6c:	2e00      	cmp	r6, #0
   dad6e:	f04f 0322 	mov.w	r3, #34	; 0x22
   dad72:	bf14      	ite	ne
   dad74:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   dad78:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   dad7c:	f8c8 3000 	str.w	r3, [r8]
   dad80:	b92a      	cbnz	r2, dad8e <_strtol_r+0xe6>
   dad82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dad86:	b106      	cbz	r6, dad8a <_strtol_r+0xe2>
   dad88:	4240      	negs	r0, r0
   dad8a:	b172      	cbz	r2, dadaa <_strtol_r+0x102>
   dad8c:	b107      	cbz	r7, dad90 <_strtol_r+0xe8>
   dad8e:	1e69      	subs	r1, r5, #1
   dad90:	6011      	str	r1, [r2, #0]
   dad92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dad96:	2430      	movs	r4, #48	; 0x30
   dad98:	2b00      	cmp	r3, #0
   dad9a:	d1b1      	bne.n	dad00 <_strtol_r+0x58>
   dad9c:	2308      	movs	r3, #8
   dad9e:	e7af      	b.n	dad00 <_strtol_r+0x58>
   dada0:	230a      	movs	r3, #10
   dada2:	e7ad      	b.n	dad00 <_strtol_r+0x58>
   dada4:	2c30      	cmp	r4, #48	; 0x30
   dada6:	d0a3      	beq.n	dacf0 <_strtol_r+0x48>
   dada8:	e7aa      	b.n	dad00 <_strtol_r+0x58>
   dadaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dadae:	bf00      	nop
   dadb0:	2003e0bc 	.word	0x2003e0bc

000dadb4 <strtol>:
   dadb4:	4613      	mov	r3, r2
   dadb6:	460a      	mov	r2, r1
   dadb8:	4601      	mov	r1, r0
   dadba:	4802      	ldr	r0, [pc, #8]	; (dadc4 <strtol+0x10>)
   dadbc:	6800      	ldr	r0, [r0, #0]
   dadbe:	f7ff bf73 	b.w	daca8 <_strtol_r>
   dadc2:	bf00      	nop
   dadc4:	2003e120 	.word	0x2003e120

000dadc8 <_strtoul_r>:
   dadc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dadcc:	4680      	mov	r8, r0
   dadce:	483c      	ldr	r0, [pc, #240]	; (daec0 <_strtoul_r+0xf8>)
   dadd0:	f8d0 9000 	ldr.w	r9, [r0]
   dadd4:	460e      	mov	r6, r1
   dadd6:	4635      	mov	r5, r6
   dadd8:	f815 4b01 	ldrb.w	r4, [r5], #1
   daddc:	eb09 0004 	add.w	r0, r9, r4
   dade0:	7840      	ldrb	r0, [r0, #1]
   dade2:	f000 0008 	and.w	r0, r0, #8
   dade6:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   dadea:	b108      	cbz	r0, dadf0 <_strtoul_r+0x28>
   dadec:	462e      	mov	r6, r5
   dadee:	e7f2      	b.n	dadd6 <_strtoul_r+0xe>
   dadf0:	2c2d      	cmp	r4, #45	; 0x2d
   dadf2:	d103      	bne.n	dadfc <_strtoul_r+0x34>
   dadf4:	1cb5      	adds	r5, r6, #2
   dadf6:	7874      	ldrb	r4, [r6, #1]
   dadf8:	2701      	movs	r7, #1
   dadfa:	e003      	b.n	dae04 <_strtoul_r+0x3c>
   dadfc:	2c2b      	cmp	r4, #43	; 0x2b
   dadfe:	bf04      	itt	eq
   dae00:	7874      	ldrbeq	r4, [r6, #1]
   dae02:	1cb5      	addeq	r5, r6, #2
   dae04:	b113      	cbz	r3, dae0c <_strtoul_r+0x44>
   dae06:	2b10      	cmp	r3, #16
   dae08:	d10a      	bne.n	dae20 <_strtoul_r+0x58>
   dae0a:	e053      	b.n	daeb4 <_strtoul_r+0xec>
   dae0c:	2c30      	cmp	r4, #48	; 0x30
   dae0e:	d14f      	bne.n	daeb0 <_strtoul_r+0xe8>
   dae10:	7828      	ldrb	r0, [r5, #0]
   dae12:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   dae16:	2858      	cmp	r0, #88	; 0x58
   dae18:	d145      	bne.n	daea6 <_strtoul_r+0xde>
   dae1a:	786c      	ldrb	r4, [r5, #1]
   dae1c:	2310      	movs	r3, #16
   dae1e:	3502      	adds	r5, #2
   dae20:	f04f 3cff 	mov.w	ip, #4294967295
   dae24:	2600      	movs	r6, #0
   dae26:	fbbc fcf3 	udiv	ip, ip, r3
   dae2a:	fb03 fa0c 	mul.w	sl, r3, ip
   dae2e:	ea6f 0a0a 	mvn.w	sl, sl
   dae32:	4630      	mov	r0, r6
   dae34:	eb09 0e04 	add.w	lr, r9, r4
   dae38:	f89e e001 	ldrb.w	lr, [lr, #1]
   dae3c:	f01e 0f04 	tst.w	lr, #4
   dae40:	d001      	beq.n	dae46 <_strtoul_r+0x7e>
   dae42:	3c30      	subs	r4, #48	; 0x30
   dae44:	e00b      	b.n	dae5e <_strtoul_r+0x96>
   dae46:	f01e 0e03 	ands.w	lr, lr, #3
   dae4a:	d01a      	beq.n	dae82 <_strtoul_r+0xba>
   dae4c:	f1be 0f01 	cmp.w	lr, #1
   dae50:	bf0c      	ite	eq
   dae52:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   dae56:	f04f 0e57 	movne.w	lr, #87	; 0x57
   dae5a:	ebce 0404 	rsb	r4, lr, r4
   dae5e:	42a3      	cmp	r3, r4
   dae60:	dd0f      	ble.n	dae82 <_strtoul_r+0xba>
   dae62:	2e00      	cmp	r6, #0
   dae64:	db08      	blt.n	dae78 <_strtoul_r+0xb0>
   dae66:	4560      	cmp	r0, ip
   dae68:	d806      	bhi.n	dae78 <_strtoul_r+0xb0>
   dae6a:	d101      	bne.n	dae70 <_strtoul_r+0xa8>
   dae6c:	4554      	cmp	r4, sl
   dae6e:	dc03      	bgt.n	dae78 <_strtoul_r+0xb0>
   dae70:	fb03 4000 	mla	r0, r3, r0, r4
   dae74:	2601      	movs	r6, #1
   dae76:	e001      	b.n	dae7c <_strtoul_r+0xb4>
   dae78:	f04f 36ff 	mov.w	r6, #4294967295
   dae7c:	f815 4b01 	ldrb.w	r4, [r5], #1
   dae80:	e7d8      	b.n	dae34 <_strtoul_r+0x6c>
   dae82:	2e00      	cmp	r6, #0
   dae84:	da07      	bge.n	dae96 <_strtoul_r+0xce>
   dae86:	2322      	movs	r3, #34	; 0x22
   dae88:	f8c8 3000 	str.w	r3, [r8]
   dae8c:	f04f 30ff 	mov.w	r0, #4294967295
   dae90:	b92a      	cbnz	r2, dae9e <_strtoul_r+0xd6>
   dae92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dae96:	b107      	cbz	r7, dae9a <_strtoul_r+0xd2>
   dae98:	4240      	negs	r0, r0
   dae9a:	b172      	cbz	r2, daeba <_strtoul_r+0xf2>
   dae9c:	b106      	cbz	r6, daea0 <_strtoul_r+0xd8>
   dae9e:	1e69      	subs	r1, r5, #1
   daea0:	6011      	str	r1, [r2, #0]
   daea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   daea6:	2430      	movs	r4, #48	; 0x30
   daea8:	2b00      	cmp	r3, #0
   daeaa:	d1b9      	bne.n	dae20 <_strtoul_r+0x58>
   daeac:	2308      	movs	r3, #8
   daeae:	e7b7      	b.n	dae20 <_strtoul_r+0x58>
   daeb0:	230a      	movs	r3, #10
   daeb2:	e7b5      	b.n	dae20 <_strtoul_r+0x58>
   daeb4:	2c30      	cmp	r4, #48	; 0x30
   daeb6:	d0ab      	beq.n	dae10 <_strtoul_r+0x48>
   daeb8:	e7b2      	b.n	dae20 <_strtoul_r+0x58>
   daeba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   daebe:	bf00      	nop
   daec0:	2003e0bc 	.word	0x2003e0bc

000daec4 <strtoul>:
   daec4:	4613      	mov	r3, r2
   daec6:	460a      	mov	r2, r1
   daec8:	4601      	mov	r1, r0
   daeca:	4802      	ldr	r0, [pc, #8]	; (daed4 <strtoul+0x10>)
   daecc:	6800      	ldr	r0, [r0, #0]
   daece:	f7ff bf7b 	b.w	dadc8 <_strtoul_r>
   daed2:	bf00      	nop
   daed4:	2003e120 	.word	0x2003e120

000daed8 <__tzcalc_limits>:
   daed8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   daedc:	4604      	mov	r4, r0
   daede:	f000 fa6f 	bl	db3c0 <__gettzinfo>
   daee2:	f240 73b1 	movw	r3, #1969	; 0x7b1
   daee6:	429c      	cmp	r4, r3
   daee8:	f340 8096 	ble.w	db018 <__tzcalc_limits+0x140>
   daeec:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   daef0:	18e3      	adds	r3, r4, r3
   daef2:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   daef6:	109b      	asrs	r3, r3, #2
   daef8:	f240 156d 	movw	r5, #365	; 0x16d
   daefc:	fb05 3502 	mla	r5, r5, r2, r3
   daf00:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   daf04:	f06f 0363 	mvn.w	r3, #99	; 0x63
   daf08:	fb92 f3f3 	sdiv	r3, r2, r3
   daf0c:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   daf10:	442b      	add	r3, r5
   daf12:	18a5      	adds	r5, r4, r2
   daf14:	f44f 72c8 	mov.w	r2, #400	; 0x190
   daf18:	fb95 f5f2 	sdiv	r5, r5, r2
   daf1c:	441d      	add	r5, r3
   daf1e:	2364      	movs	r3, #100	; 0x64
   daf20:	fb94 f7f2 	sdiv	r7, r4, r2
   daf24:	fb94 f6f3 	sdiv	r6, r4, r3
   daf28:	fb02 4717 	mls	r7, r2, r7, r4
   daf2c:	fb03 4616 	mls	r6, r3, r6, r4
   daf30:	f100 0338 	add.w	r3, r0, #56	; 0x38
   daf34:	fab7 fe87 	clz	lr, r7
   daf38:	9301      	str	r3, [sp, #4]
   daf3a:	f004 0303 	and.w	r3, r4, #3
   daf3e:	6044      	str	r4, [r0, #4]
   daf40:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   daf44:	4601      	mov	r1, r0
   daf46:	9300      	str	r3, [sp, #0]
   daf48:	f04f 0c07 	mov.w	ip, #7
   daf4c:	7a0b      	ldrb	r3, [r1, #8]
   daf4e:	2b4a      	cmp	r3, #74	; 0x4a
   daf50:	d10e      	bne.n	daf70 <__tzcalc_limits+0x98>
   daf52:	694b      	ldr	r3, [r1, #20]
   daf54:	9a00      	ldr	r2, [sp, #0]
   daf56:	18ec      	adds	r4, r5, r3
   daf58:	b902      	cbnz	r2, daf5c <__tzcalc_limits+0x84>
   daf5a:	b906      	cbnz	r6, daf5e <__tzcalc_limits+0x86>
   daf5c:	b927      	cbnz	r7, daf68 <__tzcalc_limits+0x90>
   daf5e:	2b3b      	cmp	r3, #59	; 0x3b
   daf60:	bfd4      	ite	le
   daf62:	2300      	movle	r3, #0
   daf64:	2301      	movgt	r3, #1
   daf66:	e000      	b.n	daf6a <__tzcalc_limits+0x92>
   daf68:	2300      	movs	r3, #0
   daf6a:	4423      	add	r3, r4
   daf6c:	3b01      	subs	r3, #1
   daf6e:	e03f      	b.n	daff0 <__tzcalc_limits+0x118>
   daf70:	2b44      	cmp	r3, #68	; 0x44
   daf72:	d102      	bne.n	daf7a <__tzcalc_limits+0xa2>
   daf74:	694b      	ldr	r3, [r1, #20]
   daf76:	442b      	add	r3, r5
   daf78:	e03a      	b.n	daff0 <__tzcalc_limits+0x118>
   daf7a:	9b00      	ldr	r3, [sp, #0]
   daf7c:	b92b      	cbnz	r3, daf8a <__tzcalc_limits+0xb2>
   daf7e:	2e00      	cmp	r6, #0
   daf80:	bf0c      	ite	eq
   daf82:	46f0      	moveq	r8, lr
   daf84:	f04f 0801 	movne.w	r8, #1
   daf88:	e000      	b.n	daf8c <__tzcalc_limits+0xb4>
   daf8a:	46f0      	mov	r8, lr
   daf8c:	4b24      	ldr	r3, [pc, #144]	; (db020 <__tzcalc_limits+0x148>)
   daf8e:	68cc      	ldr	r4, [r1, #12]
   daf90:	2230      	movs	r2, #48	; 0x30
   daf92:	fb02 3808 	mla	r8, r2, r8, r3
   daf96:	f1a8 0a04 	sub.w	sl, r8, #4
   daf9a:	46a9      	mov	r9, r5
   daf9c:	2301      	movs	r3, #1
   daf9e:	42a3      	cmp	r3, r4
   dafa0:	da04      	bge.n	dafac <__tzcalc_limits+0xd4>
   dafa2:	f85a bf04 	ldr.w	fp, [sl, #4]!
   dafa6:	3301      	adds	r3, #1
   dafa8:	44d9      	add	r9, fp
   dafaa:	e7f8      	b.n	daf9e <__tzcalc_limits+0xc6>
   dafac:	f109 0304 	add.w	r3, r9, #4
   dafb0:	fb93 fbfc 	sdiv	fp, r3, ip
   dafb4:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   dafb8:	2c01      	cmp	r4, #1
   dafba:	ebca 0a03 	rsb	sl, sl, r3
   dafbe:	694b      	ldr	r3, [r1, #20]
   dafc0:	bfb8      	it	lt
   dafc2:	2401      	movlt	r4, #1
   dafc4:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   dafc8:	ebb3 0a0a 	subs.w	sl, r3, sl
   dafcc:	690b      	ldr	r3, [r1, #16]
   dafce:	f104 34ff 	add.w	r4, r4, #4294967295
   dafd2:	f103 33ff 	add.w	r3, r3, #4294967295
   dafd6:	bf48      	it	mi
   dafd8:	f10a 0a07 	addmi.w	sl, sl, #7
   dafdc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   dafe0:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   dafe4:	4453      	add	r3, sl
   dafe6:	42a3      	cmp	r3, r4
   dafe8:	db01      	blt.n	dafee <__tzcalc_limits+0x116>
   dafea:	3b07      	subs	r3, #7
   dafec:	e7fb      	b.n	dafe6 <__tzcalc_limits+0x10e>
   dafee:	444b      	add	r3, r9
   daff0:	698c      	ldr	r4, [r1, #24]
   daff2:	4a0c      	ldr	r2, [pc, #48]	; (db024 <__tzcalc_limits+0x14c>)
   daff4:	fb02 4303 	mla	r3, r2, r3, r4
   daff8:	6a0c      	ldr	r4, [r1, #32]
   daffa:	4423      	add	r3, r4
   daffc:	f841 3f1c 	str.w	r3, [r1, #28]!
   db000:	9b01      	ldr	r3, [sp, #4]
   db002:	4299      	cmp	r1, r3
   db004:	d1a2      	bne.n	daf4c <__tzcalc_limits+0x74>
   db006:	69c3      	ldr	r3, [r0, #28]
   db008:	6b82      	ldr	r2, [r0, #56]	; 0x38
   db00a:	4293      	cmp	r3, r2
   db00c:	bfac      	ite	ge
   db00e:	2300      	movge	r3, #0
   db010:	2301      	movlt	r3, #1
   db012:	6003      	str	r3, [r0, #0]
   db014:	2001      	movs	r0, #1
   db016:	e000      	b.n	db01a <__tzcalc_limits+0x142>
   db018:	2000      	movs	r0, #0
   db01a:	b003      	add	sp, #12
   db01c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db020:	000dbfe4 	.word	0x000dbfe4
   db024:	00015180 	.word	0x00015180

000db028 <__tz_lock>:
   db028:	4770      	bx	lr

000db02a <__tz_unlock>:
   db02a:	4770      	bx	lr

000db02c <_tzset_unlocked>:
   db02c:	4b01      	ldr	r3, [pc, #4]	; (db034 <_tzset_unlocked+0x8>)
   db02e:	6818      	ldr	r0, [r3, #0]
   db030:	f000 b802 	b.w	db038 <_tzset_unlocked_r>
   db034:	2003e120 	.word	0x2003e120

000db038 <_tzset_unlocked_r>:
   db038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db03c:	b08d      	sub	sp, #52	; 0x34
   db03e:	4607      	mov	r7, r0
   db040:	f000 f9be 	bl	db3c0 <__gettzinfo>
   db044:	49b0      	ldr	r1, [pc, #704]	; (db308 <_tzset_unlocked_r+0x2d0>)
   db046:	4eb1      	ldr	r6, [pc, #708]	; (db30c <_tzset_unlocked_r+0x2d4>)
   db048:	4604      	mov	r4, r0
   db04a:	4638      	mov	r0, r7
   db04c:	f000 f9b0 	bl	db3b0 <_getenv_r>
   db050:	4605      	mov	r5, r0
   db052:	b960      	cbnz	r0, db06e <_tzset_unlocked_r+0x36>
   db054:	4bae      	ldr	r3, [pc, #696]	; (db310 <_tzset_unlocked_r+0x2d8>)
   db056:	4aaf      	ldr	r2, [pc, #700]	; (db314 <_tzset_unlocked_r+0x2dc>)
   db058:	6018      	str	r0, [r3, #0]
   db05a:	4baf      	ldr	r3, [pc, #700]	; (db318 <_tzset_unlocked_r+0x2e0>)
   db05c:	6018      	str	r0, [r3, #0]
   db05e:	4baf      	ldr	r3, [pc, #700]	; (db31c <_tzset_unlocked_r+0x2e4>)
   db060:	6830      	ldr	r0, [r6, #0]
   db062:	601a      	str	r2, [r3, #0]
   db064:	605a      	str	r2, [r3, #4]
   db066:	f7fb f8e3 	bl	d6230 <free>
   db06a:	6035      	str	r5, [r6, #0]
   db06c:	e148      	b.n	db300 <_tzset_unlocked_r+0x2c8>
   db06e:	6831      	ldr	r1, [r6, #0]
   db070:	b979      	cbnz	r1, db092 <_tzset_unlocked_r+0x5a>
   db072:	6830      	ldr	r0, [r6, #0]
   db074:	f7fb f8dc 	bl	d6230 <free>
   db078:	4628      	mov	r0, r5
   db07a:	f7ff fdc0 	bl	dabfe <strlen>
   db07e:	1c41      	adds	r1, r0, #1
   db080:	4638      	mov	r0, r7
   db082:	f7fb f90d 	bl	d62a0 <_malloc_r>
   db086:	6030      	str	r0, [r6, #0]
   db088:	b148      	cbz	r0, db09e <_tzset_unlocked_r+0x66>
   db08a:	4629      	mov	r1, r5
   db08c:	f7ff fd94 	bl	dabb8 <strcpy>
   db090:	e005      	b.n	db09e <_tzset_unlocked_r+0x66>
   db092:	f7ff fd87 	bl	daba4 <strcmp>
   db096:	2800      	cmp	r0, #0
   db098:	f000 8132 	beq.w	db300 <_tzset_unlocked_r+0x2c8>
   db09c:	e7e9      	b.n	db072 <_tzset_unlocked_r+0x3a>
   db09e:	782b      	ldrb	r3, [r5, #0]
   db0a0:	4a9f      	ldr	r2, [pc, #636]	; (db320 <_tzset_unlocked_r+0x2e8>)
   db0a2:	49a0      	ldr	r1, [pc, #640]	; (db324 <_tzset_unlocked_r+0x2ec>)
   db0a4:	2b3a      	cmp	r3, #58	; 0x3a
   db0a6:	bf08      	it	eq
   db0a8:	3501      	addeq	r5, #1
   db0aa:	ae0a      	add	r6, sp, #40	; 0x28
   db0ac:	4633      	mov	r3, r6
   db0ae:	4628      	mov	r0, r5
   db0b0:	f7fb f8de 	bl	d6270 <siscanf>
   db0b4:	2800      	cmp	r0, #0
   db0b6:	f340 8123 	ble.w	db300 <_tzset_unlocked_r+0x2c8>
   db0ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   db0bc:	18ef      	adds	r7, r5, r3
   db0be:	5ceb      	ldrb	r3, [r5, r3]
   db0c0:	2b2d      	cmp	r3, #45	; 0x2d
   db0c2:	d103      	bne.n	db0cc <_tzset_unlocked_r+0x94>
   db0c4:	3701      	adds	r7, #1
   db0c6:	f04f 35ff 	mov.w	r5, #4294967295
   db0ca:	e003      	b.n	db0d4 <_tzset_unlocked_r+0x9c>
   db0cc:	2b2b      	cmp	r3, #43	; 0x2b
   db0ce:	bf08      	it	eq
   db0d0:	3701      	addeq	r7, #1
   db0d2:	2501      	movs	r5, #1
   db0d4:	f10d 0a20 	add.w	sl, sp, #32
   db0d8:	f10d 0b1e 	add.w	fp, sp, #30
   db0dc:	f04f 0800 	mov.w	r8, #0
   db0e0:	9603      	str	r6, [sp, #12]
   db0e2:	f8cd a008 	str.w	sl, [sp, #8]
   db0e6:	9601      	str	r6, [sp, #4]
   db0e8:	f8cd b000 	str.w	fp, [sp]
   db0ec:	4633      	mov	r3, r6
   db0ee:	aa07      	add	r2, sp, #28
   db0f0:	498d      	ldr	r1, [pc, #564]	; (db328 <_tzset_unlocked_r+0x2f0>)
   db0f2:	f8ad 801e 	strh.w	r8, [sp, #30]
   db0f6:	4638      	mov	r0, r7
   db0f8:	f8ad 8020 	strh.w	r8, [sp, #32]
   db0fc:	f7fb f8b8 	bl	d6270 <siscanf>
   db100:	4540      	cmp	r0, r8
   db102:	f340 80fd 	ble.w	db300 <_tzset_unlocked_r+0x2c8>
   db106:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   db10a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   db10e:	f8df 9224 	ldr.w	r9, [pc, #548]	; db334 <_tzset_unlocked_r+0x2fc>
   db112:	213c      	movs	r1, #60	; 0x3c
   db114:	fb01 3302 	mla	r3, r1, r2, r3
   db118:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   db11c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   db120:	fb01 3302 	mla	r3, r1, r2, r3
   db124:	435d      	muls	r5, r3
   db126:	6225      	str	r5, [r4, #32]
   db128:	4d7c      	ldr	r5, [pc, #496]	; (db31c <_tzset_unlocked_r+0x2e4>)
   db12a:	4b7d      	ldr	r3, [pc, #500]	; (db320 <_tzset_unlocked_r+0x2e8>)
   db12c:	602b      	str	r3, [r5, #0]
   db12e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   db130:	497c      	ldr	r1, [pc, #496]	; (db324 <_tzset_unlocked_r+0x2ec>)
   db132:	441f      	add	r7, r3
   db134:	464a      	mov	r2, r9
   db136:	4633      	mov	r3, r6
   db138:	4638      	mov	r0, r7
   db13a:	f7fb f899 	bl	d6270 <siscanf>
   db13e:	4540      	cmp	r0, r8
   db140:	dc08      	bgt.n	db154 <_tzset_unlocked_r+0x11c>
   db142:	682b      	ldr	r3, [r5, #0]
   db144:	606b      	str	r3, [r5, #4]
   db146:	4b72      	ldr	r3, [pc, #456]	; (db310 <_tzset_unlocked_r+0x2d8>)
   db148:	6a22      	ldr	r2, [r4, #32]
   db14a:	601a      	str	r2, [r3, #0]
   db14c:	4b72      	ldr	r3, [pc, #456]	; (db318 <_tzset_unlocked_r+0x2e0>)
   db14e:	f8c3 8000 	str.w	r8, [r3]
   db152:	e0d5      	b.n	db300 <_tzset_unlocked_r+0x2c8>
   db154:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   db156:	f8c5 9004 	str.w	r9, [r5, #4]
   db15a:	18fd      	adds	r5, r7, r3
   db15c:	5cfb      	ldrb	r3, [r7, r3]
   db15e:	2b2d      	cmp	r3, #45	; 0x2d
   db160:	d103      	bne.n	db16a <_tzset_unlocked_r+0x132>
   db162:	3501      	adds	r5, #1
   db164:	f04f 37ff 	mov.w	r7, #4294967295
   db168:	e003      	b.n	db172 <_tzset_unlocked_r+0x13a>
   db16a:	2b2b      	cmp	r3, #43	; 0x2b
   db16c:	bf08      	it	eq
   db16e:	3501      	addeq	r5, #1
   db170:	2701      	movs	r7, #1
   db172:	2300      	movs	r3, #0
   db174:	f8ad 301c 	strh.w	r3, [sp, #28]
   db178:	f8ad 301e 	strh.w	r3, [sp, #30]
   db17c:	f8ad 3020 	strh.w	r3, [sp, #32]
   db180:	930a      	str	r3, [sp, #40]	; 0x28
   db182:	9603      	str	r6, [sp, #12]
   db184:	f8cd a008 	str.w	sl, [sp, #8]
   db188:	9601      	str	r6, [sp, #4]
   db18a:	f8cd b000 	str.w	fp, [sp]
   db18e:	4633      	mov	r3, r6
   db190:	aa07      	add	r2, sp, #28
   db192:	4965      	ldr	r1, [pc, #404]	; (db328 <_tzset_unlocked_r+0x2f0>)
   db194:	4628      	mov	r0, r5
   db196:	f7fb f86b 	bl	d6270 <siscanf>
   db19a:	2800      	cmp	r0, #0
   db19c:	dc04      	bgt.n	db1a8 <_tzset_unlocked_r+0x170>
   db19e:	6a23      	ldr	r3, [r4, #32]
   db1a0:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   db1a4:	63e3      	str	r3, [r4, #60]	; 0x3c
   db1a6:	e00e      	b.n	db1c6 <_tzset_unlocked_r+0x18e>
   db1a8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   db1ac:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   db1b0:	213c      	movs	r1, #60	; 0x3c
   db1b2:	fb01 3302 	mla	r3, r1, r2, r3
   db1b6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   db1ba:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   db1be:	fb01 3302 	mla	r3, r1, r2, r3
   db1c2:	435f      	muls	r7, r3
   db1c4:	63e7      	str	r7, [r4, #60]	; 0x3c
   db1c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   db1c8:	4627      	mov	r7, r4
   db1ca:	441d      	add	r5, r3
   db1cc:	f04f 0900 	mov.w	r9, #0
   db1d0:	782b      	ldrb	r3, [r5, #0]
   db1d2:	2b2c      	cmp	r3, #44	; 0x2c
   db1d4:	bf08      	it	eq
   db1d6:	3501      	addeq	r5, #1
   db1d8:	f895 8000 	ldrb.w	r8, [r5]
   db1dc:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   db1e0:	d126      	bne.n	db230 <_tzset_unlocked_r+0x1f8>
   db1e2:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   db1e6:	9302      	str	r3, [sp, #8]
   db1e8:	ab09      	add	r3, sp, #36	; 0x24
   db1ea:	9300      	str	r3, [sp, #0]
   db1ec:	9603      	str	r6, [sp, #12]
   db1ee:	9601      	str	r6, [sp, #4]
   db1f0:	4633      	mov	r3, r6
   db1f2:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   db1f6:	494d      	ldr	r1, [pc, #308]	; (db32c <_tzset_unlocked_r+0x2f4>)
   db1f8:	4628      	mov	r0, r5
   db1fa:	f7fb f839 	bl	d6270 <siscanf>
   db1fe:	2803      	cmp	r0, #3
   db200:	d17e      	bne.n	db300 <_tzset_unlocked_r+0x2c8>
   db202:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   db206:	1e4b      	subs	r3, r1, #1
   db208:	2b0b      	cmp	r3, #11
   db20a:	d879      	bhi.n	db300 <_tzset_unlocked_r+0x2c8>
   db20c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   db210:	1e53      	subs	r3, r2, #1
   db212:	2b04      	cmp	r3, #4
   db214:	d874      	bhi.n	db300 <_tzset_unlocked_r+0x2c8>
   db216:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   db21a:	2b06      	cmp	r3, #6
   db21c:	d870      	bhi.n	db300 <_tzset_unlocked_r+0x2c8>
   db21e:	f887 8008 	strb.w	r8, [r7, #8]
   db222:	60f9      	str	r1, [r7, #12]
   db224:	613a      	str	r2, [r7, #16]
   db226:	617b      	str	r3, [r7, #20]
   db228:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   db22a:	eb05 0803 	add.w	r8, r5, r3
   db22e:	e02a      	b.n	db286 <_tzset_unlocked_r+0x24e>
   db230:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   db234:	bf06      	itte	eq
   db236:	3501      	addeq	r5, #1
   db238:	4643      	moveq	r3, r8
   db23a:	2344      	movne	r3, #68	; 0x44
   db23c:	220a      	movs	r2, #10
   db23e:	a90b      	add	r1, sp, #44	; 0x2c
   db240:	4628      	mov	r0, r5
   db242:	9305      	str	r3, [sp, #20]
   db244:	f7ff fe3e 	bl	daec4 <strtoul>
   db248:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   db24c:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   db250:	4545      	cmp	r5, r8
   db252:	9b05      	ldr	r3, [sp, #20]
   db254:	d114      	bne.n	db280 <_tzset_unlocked_r+0x248>
   db256:	234d      	movs	r3, #77	; 0x4d
   db258:	f1b9 0f00 	cmp.w	r9, #0
   db25c:	d107      	bne.n	db26e <_tzset_unlocked_r+0x236>
   db25e:	7223      	strb	r3, [r4, #8]
   db260:	2303      	movs	r3, #3
   db262:	60e3      	str	r3, [r4, #12]
   db264:	2302      	movs	r3, #2
   db266:	6123      	str	r3, [r4, #16]
   db268:	f8c4 9014 	str.w	r9, [r4, #20]
   db26c:	e00b      	b.n	db286 <_tzset_unlocked_r+0x24e>
   db26e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   db272:	230b      	movs	r3, #11
   db274:	62a3      	str	r3, [r4, #40]	; 0x28
   db276:	2301      	movs	r3, #1
   db278:	62e3      	str	r3, [r4, #44]	; 0x2c
   db27a:	2300      	movs	r3, #0
   db27c:	6323      	str	r3, [r4, #48]	; 0x30
   db27e:	e002      	b.n	db286 <_tzset_unlocked_r+0x24e>
   db280:	b280      	uxth	r0, r0
   db282:	723b      	strb	r3, [r7, #8]
   db284:	6178      	str	r0, [r7, #20]
   db286:	2302      	movs	r3, #2
   db288:	f8ad 301c 	strh.w	r3, [sp, #28]
   db28c:	2300      	movs	r3, #0
   db28e:	f8ad 301e 	strh.w	r3, [sp, #30]
   db292:	f8ad 3020 	strh.w	r3, [sp, #32]
   db296:	930a      	str	r3, [sp, #40]	; 0x28
   db298:	f898 3000 	ldrb.w	r3, [r8]
   db29c:	2b2f      	cmp	r3, #47	; 0x2f
   db29e:	d10b      	bne.n	db2b8 <_tzset_unlocked_r+0x280>
   db2a0:	9603      	str	r6, [sp, #12]
   db2a2:	f8cd a008 	str.w	sl, [sp, #8]
   db2a6:	9601      	str	r6, [sp, #4]
   db2a8:	f8cd b000 	str.w	fp, [sp]
   db2ac:	4633      	mov	r3, r6
   db2ae:	aa07      	add	r2, sp, #28
   db2b0:	491f      	ldr	r1, [pc, #124]	; (db330 <_tzset_unlocked_r+0x2f8>)
   db2b2:	4640      	mov	r0, r8
   db2b4:	f7fa ffdc 	bl	d6270 <siscanf>
   db2b8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   db2bc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   db2c0:	213c      	movs	r1, #60	; 0x3c
   db2c2:	fb01 3302 	mla	r3, r1, r2, r3
   db2c6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   db2ca:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   db2ce:	fb01 3302 	mla	r3, r1, r2, r3
   db2d2:	61bb      	str	r3, [r7, #24]
   db2d4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   db2d6:	f109 0901 	add.w	r9, r9, #1
   db2da:	f1b9 0f02 	cmp.w	r9, #2
   db2de:	4445      	add	r5, r8
   db2e0:	f107 071c 	add.w	r7, r7, #28
   db2e4:	f47f af74 	bne.w	db1d0 <_tzset_unlocked_r+0x198>
   db2e8:	6860      	ldr	r0, [r4, #4]
   db2ea:	f7ff fdf5 	bl	daed8 <__tzcalc_limits>
   db2ee:	4b08      	ldr	r3, [pc, #32]	; (db310 <_tzset_unlocked_r+0x2d8>)
   db2f0:	6a22      	ldr	r2, [r4, #32]
   db2f2:	601a      	str	r2, [r3, #0]
   db2f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   db2f6:	1a9b      	subs	r3, r3, r2
   db2f8:	4a07      	ldr	r2, [pc, #28]	; (db318 <_tzset_unlocked_r+0x2e0>)
   db2fa:	bf18      	it	ne
   db2fc:	2301      	movne	r3, #1
   db2fe:	6013      	str	r3, [r2, #0]
   db300:	b00d      	add	sp, #52	; 0x34
   db302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db306:	bf00      	nop
   db308:	000dc044 	.word	0x000dc044
   db30c:	2003e7e0 	.word	0x2003e7e0
   db310:	2003e7e8 	.word	0x2003e7e8
   db314:	000dc047 	.word	0x000dc047
   db318:	2003e7e4 	.word	0x2003e7e4
   db31c:	2003e124 	.word	0x2003e124
   db320:	2003e7d3 	.word	0x2003e7d3
   db324:	000dc04b 	.word	0x000dc04b
   db328:	000dc06e 	.word	0x000dc06e
   db32c:	000dc05a 	.word	0x000dc05a
   db330:	000dc06d 	.word	0x000dc06d
   db334:	2003e7c8 	.word	0x2003e7c8

000db338 <_findenv_r>:
   db338:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db33c:	4607      	mov	r7, r0
   db33e:	468b      	mov	fp, r1
   db340:	4690      	mov	r8, r2
   db342:	f000 f8d9 	bl	db4f8 <__env_lock>
   db346:	4b19      	ldr	r3, [pc, #100]	; (db3ac <_findenv_r+0x74>)
   db348:	681d      	ldr	r5, [r3, #0]
   db34a:	469a      	mov	sl, r3
   db34c:	b13d      	cbz	r5, db35e <_findenv_r+0x26>
   db34e:	465c      	mov	r4, fp
   db350:	4623      	mov	r3, r4
   db352:	f813 2b01 	ldrb.w	r2, [r3], #1
   db356:	b142      	cbz	r2, db36a <_findenv_r+0x32>
   db358:	2a3d      	cmp	r2, #61	; 0x3d
   db35a:	461c      	mov	r4, r3
   db35c:	d1f8      	bne.n	db350 <_findenv_r+0x18>
   db35e:	4638      	mov	r0, r7
   db360:	f000 f8cb 	bl	db4fa <__env_unlock>
   db364:	2000      	movs	r0, #0
   db366:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db36a:	ebcb 0404 	rsb	r4, fp, r4
   db36e:	46a9      	mov	r9, r5
   db370:	f859 0b04 	ldr.w	r0, [r9], #4
   db374:	2800      	cmp	r0, #0
   db376:	d0f2      	beq.n	db35e <_findenv_r+0x26>
   db378:	4622      	mov	r2, r4
   db37a:	4659      	mov	r1, fp
   db37c:	f7ff fc6c 	bl	dac58 <strncmp>
   db380:	b988      	cbnz	r0, db3a6 <_findenv_r+0x6e>
   db382:	f859 3c04 	ldr.w	r3, [r9, #-4]
   db386:	191e      	adds	r6, r3, r4
   db388:	5d1b      	ldrb	r3, [r3, r4]
   db38a:	2b3d      	cmp	r3, #61	; 0x3d
   db38c:	d10b      	bne.n	db3a6 <_findenv_r+0x6e>
   db38e:	f8da 3000 	ldr.w	r3, [sl]
   db392:	1aed      	subs	r5, r5, r3
   db394:	10ad      	asrs	r5, r5, #2
   db396:	4638      	mov	r0, r7
   db398:	f8c8 5000 	str.w	r5, [r8]
   db39c:	f000 f8ad 	bl	db4fa <__env_unlock>
   db3a0:	1c70      	adds	r0, r6, #1
   db3a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db3a6:	464d      	mov	r5, r9
   db3a8:	e7e1      	b.n	db36e <_findenv_r+0x36>
   db3aa:	bf00      	nop
   db3ac:	2003e16c 	.word	0x2003e16c

000db3b0 <_getenv_r>:
   db3b0:	b507      	push	{r0, r1, r2, lr}
   db3b2:	aa01      	add	r2, sp, #4
   db3b4:	f7ff ffc0 	bl	db338 <_findenv_r>
   db3b8:	b003      	add	sp, #12
   db3ba:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000db3c0 <__gettzinfo>:
   db3c0:	4800      	ldr	r0, [pc, #0]	; (db3c4 <__gettzinfo+0x4>)
   db3c2:	4770      	bx	lr
   db3c4:	2003e12c 	.word	0x2003e12c

000db3c8 <gmtime_r>:
   db3c8:	6802      	ldr	r2, [r0, #0]
   db3ca:	4b47      	ldr	r3, [pc, #284]	; (db4e8 <gmtime_r+0x120>)
   db3cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   db3ce:	fb92 f4f3 	sdiv	r4, r2, r3
   db3d2:	fb03 2214 	mls	r2, r3, r4, r2
   db3d6:	2a00      	cmp	r2, #0
   db3d8:	bfbc      	itt	lt
   db3da:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   db3de:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   db3e2:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   db3e6:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   db3ea:	fb92 f3f0 	sdiv	r3, r2, r0
   db3ee:	fb00 2213 	mls	r2, r0, r3, r2
   db3f2:	f04f 003c 	mov.w	r0, #60	; 0x3c
   db3f6:	bfac      	ite	ge
   db3f8:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   db3fc:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   db400:	608b      	str	r3, [r1, #8]
   db402:	fb92 f3f0 	sdiv	r3, r2, r0
   db406:	fb00 2213 	mls	r2, r0, r3, r2
   db40a:	604b      	str	r3, [r1, #4]
   db40c:	600a      	str	r2, [r1, #0]
   db40e:	2307      	movs	r3, #7
   db410:	1ce2      	adds	r2, r4, #3
   db412:	fb92 f3f3 	sdiv	r3, r2, r3
   db416:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   db41a:	1ad3      	subs	r3, r2, r3
   db41c:	618b      	str	r3, [r1, #24]
   db41e:	4b33      	ldr	r3, [pc, #204]	; (db4ec <gmtime_r+0x124>)
   db420:	4d33      	ldr	r5, [pc, #204]	; (db4f0 <gmtime_r+0x128>)
   db422:	fb94 f5f5 	sdiv	r5, r4, r5
   db426:	fb03 4405 	mla	r4, r3, r5, r4
   db42a:	f648 62ac 	movw	r2, #36524	; 0x8eac
   db42e:	fbb4 f2f2 	udiv	r2, r4, r2
   db432:	4422      	add	r2, r4
   db434:	f240 57b4 	movw	r7, #1460	; 0x5b4
   db438:	fbb4 f3f7 	udiv	r3, r4, r7
   db43c:	1ad2      	subs	r2, r2, r3
   db43e:	482d      	ldr	r0, [pc, #180]	; (db4f4 <gmtime_r+0x12c>)
   db440:	fbb4 f0f0 	udiv	r0, r4, r0
   db444:	f648 6694 	movw	r6, #36500	; 0x8e94
   db448:	1a13      	subs	r3, r2, r0
   db44a:	fbb3 f6f6 	udiv	r6, r3, r6
   db44e:	4434      	add	r4, r6
   db450:	f240 126d 	movw	r2, #365	; 0x16d
   db454:	fbb3 f0f2 	udiv	r0, r3, r2
   db458:	fbb3 f3f7 	udiv	r3, r3, r7
   db45c:	1ae3      	subs	r3, r4, r3
   db45e:	fb02 3310 	mls	r3, r2, r0, r3
   db462:	2499      	movs	r4, #153	; 0x99
   db464:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   db468:	3202      	adds	r2, #2
   db46a:	fbb2 f2f4 	udiv	r2, r2, r4
   db46e:	2a0a      	cmp	r2, #10
   db470:	fb04 f402 	mul.w	r4, r4, r2
   db474:	f104 0602 	add.w	r6, r4, #2
   db478:	f04f 0405 	mov.w	r4, #5
   db47c:	fbb6 f4f4 	udiv	r4, r6, r4
   db480:	bf34      	ite	cc
   db482:	2602      	movcc	r6, #2
   db484:	f06f 0609 	mvncs.w	r6, #9
   db488:	4416      	add	r6, r2
   db48a:	f44f 72c8 	mov.w	r2, #400	; 0x190
   db48e:	fb02 0505 	mla	r5, r2, r5, r0
   db492:	1c5f      	adds	r7, r3, #1
   db494:	2e01      	cmp	r6, #1
   db496:	bf98      	it	ls
   db498:	3501      	addls	r5, #1
   db49a:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   db49e:	eba7 0704 	sub.w	r7, r7, r4
   db4a2:	d302      	bcc.n	db4aa <gmtime_r+0xe2>
   db4a4:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   db4a8:	e014      	b.n	db4d4 <gmtime_r+0x10c>
   db4aa:	0782      	lsls	r2, r0, #30
   db4ac:	d105      	bne.n	db4ba <gmtime_r+0xf2>
   db4ae:	2464      	movs	r4, #100	; 0x64
   db4b0:	fbb0 f2f4 	udiv	r2, r0, r4
   db4b4:	fb04 0212 	mls	r2, r4, r2, r0
   db4b8:	b94a      	cbnz	r2, db4ce <gmtime_r+0x106>
   db4ba:	f44f 72c8 	mov.w	r2, #400	; 0x190
   db4be:	fbb0 f4f2 	udiv	r4, r0, r2
   db4c2:	fb02 0014 	mls	r0, r2, r4, r0
   db4c6:	fab0 f280 	clz	r2, r0
   db4ca:	0952      	lsrs	r2, r2, #5
   db4cc:	e000      	b.n	db4d0 <gmtime_r+0x108>
   db4ce:	2201      	movs	r2, #1
   db4d0:	333b      	adds	r3, #59	; 0x3b
   db4d2:	441a      	add	r2, r3
   db4d4:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   db4d8:	2300      	movs	r3, #0
   db4da:	61ca      	str	r2, [r1, #28]
   db4dc:	614d      	str	r5, [r1, #20]
   db4de:	610e      	str	r6, [r1, #16]
   db4e0:	60cf      	str	r7, [r1, #12]
   db4e2:	620b      	str	r3, [r1, #32]
   db4e4:	4608      	mov	r0, r1
   db4e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   db4e8:	00015180 	.word	0x00015180
   db4ec:	fffdc54f 	.word	0xfffdc54f
   db4f0:	00023ab1 	.word	0x00023ab1
   db4f4:	00023ab0 	.word	0x00023ab0

000db4f8 <__env_lock>:
   db4f8:	4770      	bx	lr

000db4fa <__env_unlock>:
   db4fa:	4770      	bx	lr

000db4fc <dynalib_user>:
   db4fc:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   db50c:	0000 0000                                   ....

000db510 <_ZTV16JsonWriterStaticILj256EE>:
	...
   db518:	40d1 000d 40e5 000d 6c50 6e61 2074 6157     .@...@..Plant Wa
   db528:	6574 6572 0064 4d42 3245 3038 7420 7365     tered.BME280 tes
   db538:	0074 6f43 6c75 2064 6f6e 2074 6966 646e     t.Could not find
   db548:	6120 7620 6c61 6469 4220 454d 3832 2030      a valid BME280 
   db558:	6573 736e 726f 202c 6863 6365 206b 6977     sensor, check wi
   db568:	6972 676e 202c 6461 7264 7365 2c73 7320     ring, address, s
   db578:	6e65 6f73 2072 4449 0021 6553 736e 726f     ensor ID!.Sensor
   db588:	4449 7720 7361 203a 7830 2000 2020 2020     ID was: 0x.     
   db598:	2020 4920 2044 666f 3020 4678 2046 7270        ID of 0xFF pr
   db5a8:	626f 6261 796c 6d20 6165 736e 6120 6220     obably means a b
   db5b8:	6461 6120 6464 6572 7373 202c 2061 4d42     ad address, a BM
   db5c8:	2050 3831 2030 726f 4220 504d 3020 3538     P 180 or BMP 085
   db5d8:	000a 2020 4920 2044 666f 3020 3578 2d36     ..   ID of 0x56-
   db5e8:	7830 3835 7220 7065 6572 6573 746e 2073     0x58 represents 
   db5f8:	2061 4d42 2050 3832 2c30 000a 2020 2020     a BMP 280,..    
   db608:	2020 2020 4449 6f20 2066 7830 3036 7220         ID of 0x60 r
   db618:	7065 6572 6573 746e 2073 2061 4d42 2045     epresents a BME 
   db628:	3832 2e30 000a 2020 2020 2020 2020 4449     280...        ID
   db638:	6f20 2066 7830 3136 7220 7065 6572 6573      of 0x61 represe
   db648:	746e 2073 2061 4d42 2045 3836 2e30 000a     nts a BME 680...
   db658:	6854 2065 6925 3e20 2520 2c69 7420 7275     The %i > %i, tur
   db668:	696e 676e 6f20 206e 7570 706d 5400 6568     ning on pump.The
   db678:	2520 2069 203c 6925 6e20 206f 6177 6574      %i < %i no wate
   db688:	2072 656e 6465 6465 4100 2074 7325 7420     r needed.At %s t
   db698:	6568 6d20 696f 7473 7275 2065 6572 6461     he moisture read
   db6a8:	6e69 2067 7369 2520 2069 000a 6854 2065     ing is %i ..The 
   db6b8:	6974 656d 6920 2073 7325 0a20 5400 6d65     time is %s ..Tem
   db6c8:	6570 6172 7574 6572 3d20 0020 2a20 0043     perature = . *C.
   db6d8:	7250 7365 7573 6572 3d20 0020 6820 6150     Pressure = . hPa
   db6e8:	4100 7070 6f72 2e78 4120 746c 7469 6475     .Approx. Altitud
   db6f8:	2065 203d 2000 006d 7548 696d 6964 7974     e = . m.Humidity
   db708:	3d20 0020 2520 6500 766e 762d 6c61 0073      = . %.env-vals.
   db718:	7542 7474 6e6f 5320 6174 6574 6920 2073     Button State is 
   db728:	6925 0a20 7200 7361 6168 0070 6f69 612e     %i ..rashap.io.a
   db738:	6164 7266 6975 2e74 6f63 006d 3935 3138     dafruit.com.5981
   db748:	3936 6166 6233 3961 3634 3633 3439 6131     69fa3ba94636941a
   db758:	3333 3930 3637 3465 6532 6332 7200 7361     330976e42e2c.ras
   db768:	6168 2f70 6566 6465 2f73 6f48 656d 545f     hap/feeds/Home_T
   db778:	6d65 6570 6172 7574 6572 7200 7361 6168     emperature.rasha
   db788:	2f70 6566 6465 2f73 6f48 656d 4d5f 696f     p/feeds/Home_Moi
   db798:	7473 7275 0065 6172 6873 7061 662f 6565     sture.rashap/fee
   db7a8:	7364 482f 6d6f 5f65 6157 6574 0072 6172     ds/Home_Water.ra
   db7b8:	6873 7061 662f 6565 7364 482f 6d6f 5f65     shap/feeds/Home_
   db7c8:	7250 7365 7573 6572 7200 7361 6168 2f70     Pressure.rashap/
   db7d8:	6566 6465 2f73 6f48 656d 485f 6d75 6469     feeds/Home_Humid
   db7e8:	7469 0079 6172 6873 7061 662f 6565 7364     ity.rashap/feeds
   db7f8:	4c2f 4445 4f5f 006e                         /LED_On.

000db800 <_ZTV10JsonBuffer>:
	...
   db808:	4939 000d 4955 000d                         9I..UI..

000db810 <_ZTV10JsonWriter>:
	...
   db818:	4969 000d 497d 000d 6c25 0075 3025 7834     iI..}I..%lu.%04x
   db828:	5c00 2575 3430 0058 7274 6575 6600 6c61     .\u%04X.true.fal
   db838:	6573 2500 2a2e 0066 6625 2500 2a2e 666c     se.%.*f.%f.%.*lf
   db848:	2500 666c 0000 0000                         .%lf....

000db850 <_ZTVN8particle13__SPISettingsE>:
	...
   db858:	4c21 000d 6564 6166 6c75 2074 4d00 4253     !L..default .MSB
   db868:	4c00 4253 3c00 5053 5349 7465 6974 676e     .LSB.<SPISetting
   db878:	2073 6564 6166 6c75 3e74 3c00 5053 5349     s default>.<SPIS
   db888:	7465 6974 676e 2073 7325 6c25 2075 7325     ettings %s%lu %s
   db898:	4d20 444f 2545 3e64 0000 0000                MODE%d>....

000db8a4 <_ZTV19Adafruit_MQTT_SPARK>:
	...
   db8ac:	40cd 000d 47f5 000d 5571 000d 561d 000d     .@...G..qU...V..
   db8bc:	564f 000d 5585 000d 55c5 000d               OV...U...U..

000db8c8 <_ZTV13Adafruit_MQTT>:
	...
   db8d8:	40a9 000d 40a9 000d 40a9 000d 40a9 000d     .@...@...@...@..
   db8e8:	40a9 000d 5b20 7830 3000 5d00 202c 0a00     .@.. [0x.0.], ..
   db8f8:	0009 7244 706f 6570 2064 2061 6170 6b63     ..Dropped a pack
   db908:	7465 5500 6b6e 6f6e 6e77 6520 7272 726f     et.Unknown error
   db918:	4d00 5451 0054 2525 6425 252e 6664 4600     .MQTT.%%%d.%df.F
   db928:	6961 656c 2064 6f74 7320 6275 6373 6972     ailed to subscri
   db938:	6562 4300 6e6f 656e 7463 6f69 206e 6166     be.Connection fa
   db948:	6c69 6465 5400 6568 5320 7265 6576 2072     iled.The Server 
   db958:	6f64 7365 6e20 746f 7320 7075 6f70 7472     does not support
   db968:	7420 6568 6c20 7665 6c65 6f20 2066 6874      the level of th
   db978:	2065 514d 5454 7020 6f72 6f74 6f63 206c     e MQTT protocol 
   db988:	6572 7571 7365 6574 0064 6854 2065 6c43     requested.The Cl
   db998:	6569 746e 6920 6564 746e 6669 6569 2072     ient identifier 
   db9a8:	7369 6320 726f 6572 7463 5520 4654 382d     is correct UTF-8
   db9b8:	6220 7475 6e20 746f 6120 6c6c 776f 6465      but not allowed
   db9c8:	6220 2079 6874 2065 6553 7672 7265 5400      by the Server.T
   db9d8:	6568 4d20 5451 2054 6573 7672 6369 2065     he MQTT service 
   db9e8:	7369 7520 616e 6176 6c69 6261 656c 5400     is unavailable.T
   db9f8:	6568 6420 7461 2061 6e69 7420 6568 7520     he data in the u
   dba08:	6573 2072 616e 656d 6f20 2072 6170 7373     ser name or pass
   dba18:	6f77 6472 6920 2073 616d 666c 726f 656d     word is malforme
   dba28:	0064 6f4e 2074 7561 6874 726f 7a69 6465     d.Not authorized
   dba38:	7420 206f 6f63 6e6e 6365 0074 7845 6563      to connect.Exce
   dba48:	6465 6465 7220 6365 6e6f 656e 7463 7220     eded reconnect r
   dba58:	7461 2065 696c 696d 2e74 5020 656c 7361     ate limit. Pleas
   dba68:	2065 7274 2079 6761 6961 206e 616c 6574     e try again late
   dba78:	2e72 5900 756f 6820 7661 2065 6562 6e65     r..You have been
   dba88:	6220 6e61 656e 2064 7266 6d6f 6320 6e6f      banned from con
   dba98:	656e 7463 6e69 2e67 5020 656c 7361 2065     necting. Please 
   dbaa8:	6f63 746e 6361 2074 6874 2065 514d 5454     contact the MQTT
   dbab8:	7320 7265 6576 2072 6461 696d 696e 7473      server administ
   dbac8:	6172 6f74 2072 6f66 2072 6f6d 6572 6420     rator for more d
   dbad8:	7465 6961 736c 002e                         etails..

000dbae0 <_ZTVN5spark13EthernetClassE>:
	...
   dbae8:	631f 000d 6315 000d 630b 000d 6301 000d     .c...c...c...c..
   dbaf8:	62f5 000d 62e9 000d 62dd 000d 62d5 000d     .b...b...b...b..
   dbb08:	62cb 000d 62c1 000d 8055 000d               .b...b..U...

000dbb14 <_ZTV8SPIClass>:
	...
   dbb1c:	633d 000d 633f 000d                         =c..?c..

000dbb24 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   dbb24:	0800 1810 2820 3830 616e 006e 766f 0066     .... (08nan.ovf.
   dbb34:	6e69 0066 6162 6475 5300 7265 6169 006c     inf.baud.Serial.
   dbb44:	6553 6972 6c61 0031 7974 6570 7000 7261     Serial1.type.par
   dbb54:	6d61 6300 646d 6900 0064 6e68 0064 7473     am.cmd.id.hnd.st
   dbb64:	6d72 6600 6c69 0074 766c 006c 6461 4864     rm.filt.lvl.addH
   dbb74:	6e61 6c64 7265 7200 6d65 766f 4865 6e61     andler.removeHan
   dbb84:	6c64 7265 6500 756e 486d 6e61 6c64 7265     dler.enumHandler
   dbb94:	0073 534a 4e4f 7453 6572 6d61 6f4c 4867     s.JSONStreamLogH
   dbba4:	6e61 6c64 7265 6100 7070 2500 3130 7530     andler.app.%010u
   dbbb4:	0020 205d 2800 3a29 0020 5b20 6300 646f      .] .(): . [.cod
   dbbc4:	2065 203d 2500 0069 6564 6174 6c69 2073     e = .%i.details 
   dbbd4:	203d 0d00 000a 6e6c 6600 006e 6f63 6564     = ....ln.fn.code
   dbbe4:	6400 7465 6961 006c 6f6e 656e 7400 6172     .detail.none.tra
   dbbf4:	6563 6900 666e 006f 6177 6e72 7000 6e61     ce.info.warn.pan
   dbc04:	6369 6100 6c6c 2500 302b 6433 253a 3230     ic.all.%+03d:%02
   dbc14:	0075 5925 252d 2d6d 6425 2554 3a48 4d25     u.%Y-%m-%dT%H:%M
   dbc24:	253a 2553 007a 7361 7463 6d69 0065 0000     :%S%z.asctime...

000dbc34 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dbc3c:	6e89 000d 6e8f 000d 6ed3 000d 6e9d 000d     .n...n...n...n..
   dbc4c:	6e8b 000d                                   .n..

000dbc50 <_ZTV9IPAddress>:
	...
   dbc58:	7421 000d 7411 000d 7413 000d               !t...t...t..

000dbc64 <_ZTV9USBSerial>:
	...
   dbc6c:	7525 000d 7575 000d 7583 000d 6931 000d     %u..uu...u..1i..
   dbc7c:	7561 000d 7527 000d 753d 000d 756f 000d     au..'u..=u..ou..
   dbc8c:	7553 000d 7521 000d                         Su..!u..

000dbc94 <_ZTV11USARTSerial>:
	...
   dbc9c:	7631 000d 7681 000d 768f 000d 6931 000d     1v...v...v..1i..
   dbcac:	7645 000d 7667 000d 7653 000d 767b 000d     Ev..gv..Sv..{v..
   dbcbc:	7633 000d 7637 000d                         3v..7v..

000dbcc4 <_ZTV7TwoWire>:
	...
   dbccc:	775d 000d 77a7 000d 777f 000d 775f 000d     ]w...w...w.._w..
   dbcdc:	7787 000d 778f 000d 7797 000d 779f 000d     .w...w...w...w..

000dbcec <_ZTVN5spark9MeshClassE>:
	...
   dbcf4:	78c3 000d 78b9 000d 78af 000d 78a5 000d     .x...x...x...x..
   dbd04:	7899 000d 788d 000d 7881 000d 7879 000d     .x...x...x..yx..
   dbd14:	786f 000d 7865 000d 8055 000d               ox..ex..U...

000dbd20 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   dbd28:	7a69 000d 7a6f 000d 7f57 000d 7a7d 000d     iz..oz..W...}z..
   dbd38:	7a6b 000d                                   kz..

000dbd3c <_ZTV9TCPClient>:
	...
   dbd44:	445d 000d 4475 000d 79e1 000d 79fb 000d     ]D..uD...y...y..
   dbd54:	7dfd 000d 7b4f 000d 7b21 000d 7a25 000d     .}..O{..!{..%z..
   dbd64:	7cd9 000d 7bd5 000d 7b83 000d 7dcd 000d     .|...{...{...}..
   dbd74:	7a27 000d 7a5f 000d 7a0d 000d 7a81 000d     'z.._z...z...z..
   dbd84:	7b01 000d 6977 6972 676e 7200 6365 2076     .{..wiring.recv 
   dbd94:	7265 6f72 2072 203d 6425 0000               error = %d..

000dbda0 <_ZTVN5spark9WiFiClassE>:
	...
   dbda8:	7fcd 000d 7fc3 000d 7fb9 000d 7f6f 000d     ............o...
   dbdb8:	7fad 000d 7fa1 000d 7f95 000d 7f8d 000d     ................
   dbdc8:	7f83 000d 7f79 000d 8055 000d               ....y...U...

000dbdd4 <_ZTVN5spark12NetworkClassE>:
	...
   dbddc:	7fed 000d 7ff7 000d 8001 000d 800b 000d     ................
   dbdec:	8015 000d 8021 000d 802d 000d 8039 000d     ....!...-...9...
   dbdfc:	8041 000d 804b 000d 8055 000d               A...K...U...

000dbe08 <_ZSt7nothrow>:
   dbe08:	0000 0000 6f70 0077 0000 0000 0000 0000     ....pow.........

000dbe18 <TWO52>:
   dbe18:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

000dbe28 <day_name.4725>:
   dbe28:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   dbe38:	6972 6153 4a74                                   riSat

000dbe3d <mon_name.4726>:
   dbe3d:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   dbe4d:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   dbe5d:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
   dbe6d:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
   dbe7d:	6425 000a                                   %d..

000dbe81 <_ctype_>:
   dbe81:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   dbe91:	2020 2020 2020 2020 2020 2020 2020 2020                     
   dbea1:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   dbeb1:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   dbec1:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   dbed1:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   dbee1:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   dbef1:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   dbf01:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000dbf84 <__sf_fake_stdin>:
	...

000dbfa4 <__sf_fake_stdout>:
	...

000dbfc4 <__sf_fake_stderr>:
	...

000dbfe4 <__month_lengths>:
   dbfe4:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   dbff4:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   dc004:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   dc014:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   dc024:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   dc034:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   dc044:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
   dc054:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
   dc064:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
   dc074:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

000dc080 <link_const_variable_data_end>:
   dc080:	000d4805 	.word	0x000d4805
   dc084:	000d4c1d 	.word	0x000d4c1d
   dc088:	000d556d 	.word	0x000d556d
   dc08c:	000d56af 	.word	0x000d56af
   dc090:	000d5c73 	.word	0x000d5c73
   dc094:	000d6329 	.word	0x000d6329
   dc098:	000d64f5 	.word	0x000d64f5
   dc09c:	000d6909 	.word	0x000d6909
   dc0a0:	000d6c0d 	.word	0x000d6c0d
   dc0a4:	000d6d05 	.word	0x000d6d05
   dc0a8:	000d6d5d 	.word	0x000d6d5d
   dc0ac:	000d7991 	.word	0x000d7991
   dc0b0:	000d7fd9 	.word	0x000d7fd9
   dc0b4:	000d8121 	.word	0x000d8121
   dc0b8:	000d8329 	.word	0x000d8329
   dc0bc:	000d83ad 	.word	0x000d83ad
   dc0c0:	000d8471 	.word	0x000d8471
   dc0c4:	000d8535 	.word	0x000d8535

000dc0c8 <link_constructors_end>:
	...
