
c:/Users/IoTPa/Documents/jarvis/PlantWater/target/1.5.0/argon/PlantWater.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000082a0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000dc2c0  000dc2c0  0000c2c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000dc2c8  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000cc  2003e0a4  000dc2cc  0001e0a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000680  2003e170  2003e170  0002e170  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000dc398  000dc398  0002c398  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000dc3c0  000dc3c0  0002c3c0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00115e51  00000000  00000000  0002c3c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00015fb5  00000000  00000000  00142215  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0002753a  00000000  00000000  001581ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002fe8  00000000  00000000  0017f704  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00005a08  00000000  00000000  001826ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003d2d8  00000000  00000000  001880f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0003636d  00000000  00000000  001c53cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    001105ee  00000000  00000000  001fb739  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000f50c  00000000  00000000  0030bd28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f006 fe51 	bl	dacd8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f006 fe71 	bl	dad24 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e0a4 	.word	0x2003e0a4
   d404c:	000dc2cc 	.word	0x000dc2cc
   d4050:	2003e170 	.word	0x2003e170
   d4054:	2003e170 	.word	0x2003e170
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f002 ffd5 	bl	d700c <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000dc2c0 	.word	0x000dc2c0
   d4084:	000dc278 	.word	0x000dc278

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b838 	b.w	d40fc <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 fb37 	bl	d4700 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f002 bf7b 	b.w	d6f90 <_post_loop>

000d409a <_Znwj>:
   d409a:	f002 b995 	b.w	d63c8 <malloc>

000d409e <_ZdlPv>:
   d409e:	f002 b99b 	b.w	d63d8 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f002 b999 	b.w	d63d8 <free>
	...

000d40a8 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40aa:	4a03      	ldr	r2, [pc, #12]	; (d40b8 <__cxa_pure_virtual+0x10>)
   d40ac:	2100      	movs	r1, #0
   d40ae:	200c      	movs	r0, #12
   d40b0:	f002 f8ae 	bl	d6210 <panic_>
   d40b4:	e7fe      	b.n	d40b4 <__cxa_pure_virtual+0xc>
   d40b6:	bf00      	nop
   d40b8:	000d5f51 	.word	0x000d5f51

000d40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40bc:	7800      	ldrb	r0, [r0, #0]
   d40be:	fab0 f080 	clz	r0, r0
   d40c2:	0940      	lsrs	r0, r0, #5
   d40c4:	4770      	bx	lr

000d40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c6:	2301      	movs	r3, #1
   d40c8:	7003      	strb	r3, [r0, #0]
   d40ca:	4770      	bx	lr

000d40cc <_ZN19Adafruit_MQTT_SPARKD1Ev>:


// MQTT client implementation for a generic Arduino Client interface.  Can work
// with almost all Arduino network hardware like ethernet shield, wifi shield,
// and even other platforms like ESP8266.
class Adafruit_MQTT_SPARK : public Adafruit_MQTT {
   d40cc:	4770      	bx	lr
	...

000d40d0 <_ZN16JsonWriterStaticILj256EED1Ev>:
 * variable.
 *
 * @param BUFFER_SIZE The size of the buffer to reserve.
 */
template <size_t BUFFER_SIZE>
class JsonWriterStatic : public JsonWriter {
   d40d0:	b510      	push	{r4, lr}
   d40d2:	4b03      	ldr	r3, [pc, #12]	; (d40e0 <_ZN16JsonWriterStaticILj256EED1Ev+0x10>)
   d40d4:	6003      	str	r3, [r0, #0]
   d40d6:	4604      	mov	r4, r0
   d40d8:	f000 fd1e 	bl	d4b18 <_ZN10JsonWriterD1Ev>
   d40dc:	4620      	mov	r0, r4
   d40de:	bd10      	pop	{r4, pc}
   d40e0:	000db6f8 	.word	0x000db6f8

000d40e4 <_ZN16JsonWriterStaticILj256EED0Ev>:
   d40e4:	b510      	push	{r4, lr}
   d40e6:	4604      	mov	r4, r0
   d40e8:	f7ff fff2 	bl	d40d0 <_ZN16JsonWriterStaticILj256EED1Ev>
   d40ec:	4620      	mov	r0, r4
   d40ee:	f44f 7198 	mov.w	r1, #304	; 0x130
   d40f2:	f004 f9f3 	bl	d84dc <_ZdlPvj>
   d40f6:	4620      	mov	r0, r4
   d40f8:	bd10      	pop	{r4, pc}
	...

000d40fc <setup>:
int button;
int i;

int delayStart;

void setup() {
   d40fc:	b510      	push	{r4, lr}
  Serial.begin(9600);
   d40fe:	f003 fb5f 	bl	d77c0 <_Z16_fetch_usbserialv>
   d4102:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4106:	f003 fb4f 	bl	d77a8 <_ZN9USBSerial5beginEl>
  pinMode(soilPin,INPUT);
   d410a:	4b36      	ldr	r3, [pc, #216]	; (d41e4 <setup+0xe8>)
  pinMode(pumpPin,OUTPUT);
   d410c:	4c36      	ldr	r4, [pc, #216]	; (d41e8 <setup+0xec>)

int delayStart;

void setup() {
  Serial.begin(9600);
  pinMode(soilPin,INPUT);
   d410e:	8818      	ldrh	r0, [r3, #0]
   d4110:	2100      	movs	r1, #0
   d4112:	f004 f91f 	bl	d8354 <pinMode>
  pinMode(pumpPin,OUTPUT);
   d4116:	2101      	movs	r1, #1
   d4118:	8820      	ldrh	r0, [r4, #0]
   d411a:	f004 f91b 	bl	d8354 <pinMode>
  pinMode(D7,OUTPUT);
   d411e:	2101      	movs	r1, #1
   d4120:	2007      	movs	r0, #7
   d4122:	f004 f917 	bl	d8354 <pinMode>
  digitalWrite(pumpPin,LOW);
   d4126:	2100      	movs	r1, #0
   d4128:	8820      	ldrh	r0, [r4, #0]
   d412a:	f004 f924 	bl	d8376 <digitalWrite>
  Time.zone(-6); // set timezone to MDT
   d412e:	eeb9 0a08 	vmov.f32	s0, #152	; 0xc0c00000 -6.0
   d4132:	f002 fe6f 	bl	d6e14 <_ZN9TimeClass4zoneEf>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4136:	f002 f91f 	bl	d6378 <spark_cloud_flag_connected>
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
    {
        if (!connected()) {
   d413a:	b110      	cbz	r0, d4142 <setup+0x46>
            return false;
        }
        return spark_sync_time(NULL);
   d413c:	2000      	movs	r0, #0
   d413e:	f002 f92b 	bl	d6398 <spark_sync_time>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d4142:	2300      	movs	r3, #0
   d4144:	2202      	movs	r2, #2
   d4146:	4929      	ldr	r1, [pc, #164]	; (d41ec <setup+0xf0>)
   d4148:	4829      	ldr	r0, [pc, #164]	; (d41f0 <setup+0xf4>)
   d414a:	f002 f905 	bl	d6358 <spark_variable>
   d414e:	2300      	movs	r3, #0
   d4150:	2209      	movs	r2, #9
   d4152:	4928      	ldr	r1, [pc, #160]	; (d41f4 <setup+0xf8>)
   d4154:	4828      	ldr	r0, [pc, #160]	; (d41f8 <setup+0xfc>)
   d4156:	f002 f8ff 	bl	d6358 <spark_variable>
   d415a:	2300      	movs	r3, #0
   d415c:	2202      	movs	r2, #2
   d415e:	4927      	ldr	r1, [pc, #156]	; (d41fc <setup+0x100>)
   d4160:	4827      	ldr	r0, [pc, #156]	; (d4200 <setup+0x104>)
   d4162:	f002 f8f9 	bl	d6358 <spark_variable>
  Particle.variable("Moisture", moist);
  Particle.variable("Temperature", temp);
  Particle.variable("Plant Watered", watered);

    // Setup MQTT subscription for onoff feed.
  mqtt.subscribe(&onoffbutton);
   d4166:	4927      	ldr	r1, [pc, #156]	; (d4204 <setup+0x108>)
   d4168:	4827      	ldr	r0, [pc, #156]	; (d4208 <setup+0x10c>)
   d416a:	f001 fc1b 	bl	d59a4 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe>

// Initialize BME280
    Serial.println(F("BME280 test"));
   d416e:	f003 fb27 	bl	d77c0 <_Z16_fetch_usbserialv>
   d4172:	4926      	ldr	r1, [pc, #152]	; (d420c <setup+0x110>)
   d4174:	f002 fcf3 	bl	d6b5e <_ZN5Print7printlnEPK19__FlashStringHelper>
    
    status = bme.begin(0x76);
   d4178:	2176      	movs	r1, #118	; 0x76
   d417a:	4825      	ldr	r0, [pc, #148]	; (d4210 <setup+0x114>)
   d417c:	f001 f926 	bl	d53cc <_ZN15Adafruit_BME2805beginEh>
   d4180:	4b24      	ldr	r3, [pc, #144]	; (d4214 <setup+0x118>)
   d4182:	6018      	str	r0, [r3, #0]
    if (!status)
   d4184:	bb60      	cbnz	r0, d41e0 <setup+0xe4>
    {
        Serial.println("Could not find a valid BME280 sensor, check wiring, address, sensor ID!");
   d4186:	f003 fb1b 	bl	d77c0 <_Z16_fetch_usbserialv>
   d418a:	4923      	ldr	r1, [pc, #140]	; (d4218 <setup+0x11c>)
   d418c:	f002 fcdd 	bl	d6b4a <_ZN5Print7printlnEPKc>
        Serial.print("SensorID was: 0x");
   d4190:	f003 fb16 	bl	d77c0 <_Z16_fetch_usbserialv>
   d4194:	4921      	ldr	r1, [pc, #132]	; (d421c <setup+0x120>)
   d4196:	f002 fcc5 	bl	d6b24 <_ZN5Print5printEPKc>
        Serial.println(bme.sensorID(), 16);
   d419a:	f003 fb11 	bl	d77c0 <_Z16_fetch_usbserialv>
   d419e:	4604      	mov	r4, r0
   d41a0:	481b      	ldr	r0, [pc, #108]	; (d4210 <setup+0x114>)
   d41a2:	f001 faad 	bl	d5700 <_ZN15Adafruit_BME2808sensorIDEv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d41a6:	2210      	movs	r2, #16
   d41a8:	4601      	mov	r1, r0
   d41aa:	4620      	mov	r0, r4
   d41ac:	f002 fcd9 	bl	d6b62 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d41b0:	4620      	mov	r0, r4
   d41b2:	f002 fcbe 	bl	d6b32 <_ZN5Print7printlnEv>
        Serial.print("        ID of 0xFF probably means a bad address, a BMP 180 or BMP 085\n");
   d41b6:	f003 fb03 	bl	d77c0 <_Z16_fetch_usbserialv>
   d41ba:	4919      	ldr	r1, [pc, #100]	; (d4220 <setup+0x124>)
   d41bc:	f002 fcb2 	bl	d6b24 <_ZN5Print5printEPKc>
        Serial.print("   ID of 0x56-0x58 represents a BMP 280,\n");
   d41c0:	f003 fafe 	bl	d77c0 <_Z16_fetch_usbserialv>
   d41c4:	4917      	ldr	r1, [pc, #92]	; (d4224 <setup+0x128>)
   d41c6:	f002 fcad 	bl	d6b24 <_ZN5Print5printEPKc>
        Serial.print("        ID of 0x60 represents a BME 280.\n");
   d41ca:	f003 faf9 	bl	d77c0 <_Z16_fetch_usbserialv>
   d41ce:	4916      	ldr	r1, [pc, #88]	; (d4228 <setup+0x12c>)
   d41d0:	f002 fca8 	bl	d6b24 <_ZN5Print5printEPKc>
        Serial.print("        ID of 0x61 represents a BME 680.\n");
   d41d4:	f003 faf4 	bl	d77c0 <_Z16_fetch_usbserialv>
   d41d8:	4914      	ldr	r1, [pc, #80]	; (d422c <setup+0x130>)
   d41da:	f002 fca3 	bl	d6b24 <_ZN5Print5printEPKc>
   d41de:	e7fe      	b.n	d41de <setup+0xe2>
   d41e0:	bd10      	pop	{r4, pc}
   d41e2:	bf00      	nop
   d41e4:	2003e0a8 	.word	0x2003e0a8
   d41e8:	2003e0ac 	.word	0x2003e0ac
   d41ec:	2003e374 	.word	0x2003e374
   d41f0:	000db991 	.word	0x000db991
   d41f4:	2003e1b8 	.word	0x2003e1b8
   d41f8:	000db973 	.word	0x000db973
   d41fc:	2003e32c 	.word	0x2003e32c
   d4200:	000db700 	.word	0x000db700
   d4204:	2003e2b8 	.word	0x2003e2b8
   d4208:	2003e1d0 	.word	0x2003e1d0
   d420c:	000db70e 	.word	0x000db70e
   d4210:	2003e330 	.word	0x2003e330
   d4214:	2003e2f0 	.word	0x2003e2f0
   d4218:	000db71a 	.word	0x000db71a
   d421c:	000db762 	.word	0x000db762
   d4220:	000db773 	.word	0x000db773
   d4224:	000db7ba 	.word	0x000db7ba
   d4228:	000db7e4 	.word	0x000db7e4
   d422c:	000db80e 	.word	0x000db80e

000d4230 <_Z10waterPlanti>:
          }
        }
    }    
}

int waterPlant(int moistVal) {
   d4230:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(moistVal > threshold) {
   d4232:	4c16      	ldr	r4, [pc, #88]	; (d428c <_Z10waterPlanti+0x5c>)
   d4234:	4d16      	ldr	r5, [pc, #88]	; (d4290 <_Z10waterPlanti+0x60>)
   d4236:	6823      	ldr	r3, [r4, #0]
   d4238:	4283      	cmp	r3, r0
   d423a:	da1b      	bge.n	d4274 <_Z10waterPlanti+0x44>
    Serial.printlnf("The %i > %i, turning on pump", moist, threshold);
   d423c:	f003 fac0 	bl	d77c0 <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d4240:	6823      	ldr	r3, [r4, #0]
   d4242:	4a14      	ldr	r2, [pc, #80]	; (d4294 <_Z10waterPlanti+0x64>)
   d4244:	9300      	str	r3, [sp, #0]
   d4246:	2101      	movs	r1, #1
   d4248:	682b      	ldr	r3, [r5, #0]
    delay(1000);
    digitalWrite(pumpPin,HIGH);
   d424a:	4c13      	ldr	r4, [pc, #76]	; (d4298 <_Z10waterPlanti+0x68>)
   d424c:	f002 fd91 	bl	d6d72 <_ZN5Print11printf_implEbPKcz>
}

int waterPlant(int moistVal) {
  if(moistVal > threshold) {
    Serial.printlnf("The %i > %i, turning on pump", moist, threshold);
    delay(1000);
   d4250:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4254:	f002 fe4e 	bl	d6ef4 <delay>
    digitalWrite(pumpPin,HIGH);
   d4258:	2101      	movs	r1, #1
   d425a:	8820      	ldrh	r0, [r4, #0]
   d425c:	f004 f88b 	bl	d8376 <digitalWrite>
    delay(waterTime);
   d4260:	4b0e      	ldr	r3, [pc, #56]	; (d429c <_Z10waterPlanti+0x6c>)
   d4262:	6818      	ldr	r0, [r3, #0]
   d4264:	f002 fe46 	bl	d6ef4 <delay>
    digitalWrite(pumpPin,LOW);
   d4268:	8820      	ldrh	r0, [r4, #0]
   d426a:	2100      	movs	r1, #0
   d426c:	f004 f883 	bl	d8376 <digitalWrite>
   d4270:	2001      	movs	r0, #1
   d4272:	e009      	b.n	d4288 <_Z10waterPlanti+0x58>
    return 1;
  }
  else
  {
    Serial.printlnf("The %i < %i no water needed", moist, threshold);
   d4274:	f003 faa4 	bl	d77c0 <_Z16_fetch_usbserialv>
   d4278:	6823      	ldr	r3, [r4, #0]
   d427a:	9300      	str	r3, [sp, #0]
   d427c:	4a08      	ldr	r2, [pc, #32]	; (d42a0 <_Z10waterPlanti+0x70>)
   d427e:	682b      	ldr	r3, [r5, #0]
   d4280:	2101      	movs	r1, #1
   d4282:	f002 fd76 	bl	d6d72 <_ZN5Print11printf_implEbPKcz>
    return 0;
   d4286:	2000      	movs	r0, #0
  }
    
}
   d4288:	b003      	add	sp, #12
   d428a:	bd30      	pop	{r4, r5, pc}
   d428c:	2003e0a4 	.word	0x2003e0a4
   d4290:	2003e374 	.word	0x2003e374
   d4294:	000db838 	.word	0x000db838
   d4298:	2003e0ac 	.word	0x2003e0ac
   d429c:	2003e0b0 	.word	0x2003e0b0
   d42a0:	000db855 	.word	0x000db855

000d42a4 <_Z10printMoisti>:


void printMoist(int moistVal) {
   d42a4:	b570      	push	{r4, r5, r6, lr}
   d42a6:	b086      	sub	sp, #24
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   d42a8:	f002 fe13 	bl	d6ed2 <_ZN9TimeClass3nowEv>
  t = Time.timeStr(); 
   d42ac:	4c1f      	ldr	r4, [pc, #124]	; (d432c <_Z10printMoisti+0x88>)
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d42ae:	4e20      	ldr	r6, [pc, #128]	; (d4330 <_Z10printMoisti+0x8c>)
   d42b0:	4d20      	ldr	r5, [pc, #128]	; (d4334 <_Z10printMoisti+0x90>)
   d42b2:	4601      	mov	r1, r0
   d42b4:	a802      	add	r0, sp, #8
   d42b6:	f002 fdc9 	bl	d6e4c <_ZN9TimeClass7timeStrEl>
   d42ba:	a902      	add	r1, sp, #8
   d42bc:	4620      	mov	r0, r4
   d42be:	f002 fb70 	bl	d69a2 <_ZN6StringaSEOS_>
   d42c2:	a802      	add	r0, sp, #8
   d42c4:	f002 faf6 	bl	d68b4 <_ZN6StringD1Ev>
   d42c8:	4631      	mov	r1, r6
   d42ca:	4620      	mov	r0, r4
   d42cc:	2300      	movs	r3, #0
   d42ce:	2219      	movs	r2, #25
   d42d0:	f002 fba6 	bl	d6a20 <_ZNK6String8getBytesEPhjj>
  t.toCharArray(currentTime,25);
  t2 = t.substring(11,19);
   d42d4:	4621      	mov	r1, r4
   d42d6:	4c18      	ldr	r4, [pc, #96]	; (d4338 <_Z10printMoisti+0x94>)
   d42d8:	2313      	movs	r3, #19
   d42da:	220b      	movs	r2, #11
   d42dc:	a802      	add	r0, sp, #8
   d42de:	f002 fbb7 	bl	d6a50 <_ZNK6String9substringEjj>
   d42e2:	a902      	add	r1, sp, #8
   d42e4:	4620      	mov	r0, r4
   d42e6:	f002 fb5c 	bl	d69a2 <_ZN6StringaSEOS_>
   d42ea:	a802      	add	r0, sp, #8
   d42ec:	f002 fae2 	bl	d68b4 <_ZN6StringD1Ev>
   d42f0:	2300      	movs	r3, #0
   d42f2:	2209      	movs	r2, #9
   d42f4:	4629      	mov	r1, r5
   d42f6:	4620      	mov	r0, r4
   d42f8:	f002 fb92 	bl	d6a20 <_ZNK6String8getBytesEPhjj>
  t2.toCharArray(current,9);
  Serial.println(t2);
   d42fc:	f003 fa60 	bl	d77c0 <_Z16_fetch_usbserialv>
   d4300:	6821      	ldr	r1, [r4, #0]
   d4302:	f002 fc22 	bl	d6b4a <_ZN5Print7printlnEPKc>
  Serial.printf("At %s the moisture reading is %i \n",currentTime,moist);
   d4306:	f003 fa5b 	bl	d77c0 <_Z16_fetch_usbserialv>
   d430a:	4b0c      	ldr	r3, [pc, #48]	; (d433c <_Z10printMoisti+0x98>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d430c:	4a0c      	ldr	r2, [pc, #48]	; (d4340 <_Z10printMoisti+0x9c>)
   d430e:	681b      	ldr	r3, [r3, #0]
   d4310:	9300      	str	r3, [sp, #0]
   d4312:	2100      	movs	r1, #0
   d4314:	4633      	mov	r3, r6
   d4316:	f002 fd2c 	bl	d6d72 <_ZN5Print11printf_implEbPKcz>
  //Serial.printf("At %s the moisture reading is %i \n",Time.timeStr().c_str(),moist);
  Serial.printf("The time is %s \n",current);
   d431a:	f003 fa51 	bl	d77c0 <_Z16_fetch_usbserialv>
   d431e:	462b      	mov	r3, r5
   d4320:	4a08      	ldr	r2, [pc, #32]	; (d4344 <_Z10printMoisti+0xa0>)
   d4322:	2100      	movs	r1, #0
   d4324:	f002 fd25 	bl	d6d72 <_ZN5Print11printf_implEbPKcz>
}
   d4328:	b006      	add	sp, #24
   d432a:	bd70      	pop	{r4, r5, r6, pc}
   d432c:	2003e31c 	.word	0x2003e31c
   d4330:	2003e380 	.word	0x2003e380
   d4334:	2003e174 	.word	0x2003e174
   d4338:	2003e1c0 	.word	0x2003e1c0
   d433c:	2003e374 	.word	0x2003e374
   d4340:	000db871 	.word	0x000db871
   d4344:	000db894 	.word	0x000db894

000d4348 <_Z11printValuesv>:
  }
  Particle.publish("env-vals",jw.getBuffer(), PRIVATE);
}

void printValues()
{
   d4348:	b538      	push	{r3, r4, r5, lr}
    Serial.print("Temperature = ");
   d434a:	f003 fa39 	bl	d77c0 <_Z16_fetch_usbserialv>
   d434e:	492d      	ldr	r1, [pc, #180]	; (d4404 <_Z11printValuesv+0xbc>)
    Serial.print(bme.readTemperature());
   d4350:	4c2d      	ldr	r4, [pc, #180]	; (d4408 <_Z11printValuesv+0xc0>)
  Particle.publish("env-vals",jw.getBuffer(), PRIVATE);
}

void printValues()
{
    Serial.print("Temperature = ");
   d4352:	f002 fbe7 	bl	d6b24 <_ZN5Print5printEPKc>
    Serial.print(bme.readTemperature());
   d4356:	f003 fa33 	bl	d77c0 <_Z16_fetch_usbserialv>
   d435a:	4605      	mov	r5, r0
   d435c:	4620      	mov	r0, r4
   d435e:	f001 f841 	bl	d53e4 <_ZN15Adafruit_BME28015readTemperatureEv>
   d4362:	2102      	movs	r1, #2
   d4364:	4628      	mov	r0, r5
   d4366:	f002 fcdb 	bl	d6d20 <_ZN5Print5printEfi>
    Serial.println(" *C");
   d436a:	f003 fa29 	bl	d77c0 <_Z16_fetch_usbserialv>
   d436e:	4927      	ldr	r1, [pc, #156]	; (d440c <_Z11printValuesv+0xc4>)
   d4370:	f002 fbeb 	bl	d6b4a <_ZN5Print7printlnEPKc>

    Serial.print("Pressure = ");
   d4374:	f003 fa24 	bl	d77c0 <_Z16_fetch_usbserialv>
   d4378:	4925      	ldr	r1, [pc, #148]	; (d4410 <_Z11printValuesv+0xc8>)
   d437a:	f002 fbd3 	bl	d6b24 <_ZN5Print5printEPKc>

    Serial.print(bme.readPressure() / 100.0F);
   d437e:	f003 fa1f 	bl	d77c0 <_Z16_fetch_usbserialv>
   d4382:	4605      	mov	r5, r0
   d4384:	4620      	mov	r0, r4
   d4386:	f001 f85b 	bl	d5440 <_ZN15Adafruit_BME28012readPressureEv>
   d438a:	eddf 7a22 	vldr	s15, [pc, #136]	; d4414 <_Z11printValuesv+0xcc>
   d438e:	2102      	movs	r1, #2
   d4390:	ee80 0a27 	vdiv.f32	s0, s0, s15
   d4394:	4628      	mov	r0, r5
   d4396:	f002 fcc3 	bl	d6d20 <_ZN5Print5printEfi>
    Serial.println(" hPa");
   d439a:	f003 fa11 	bl	d77c0 <_Z16_fetch_usbserialv>
   d439e:	491e      	ldr	r1, [pc, #120]	; (d4418 <_Z11printValuesv+0xd0>)
   d43a0:	f002 fbd3 	bl	d6b4a <_ZN5Print7printlnEPKc>

    Serial.print("Approx. Altitude = ");
   d43a4:	f003 fa0c 	bl	d77c0 <_Z16_fetch_usbserialv>
   d43a8:	491c      	ldr	r1, [pc, #112]	; (d441c <_Z11printValuesv+0xd4>)
   d43aa:	f002 fbbb 	bl	d6b24 <_ZN5Print5printEPKc>
    Serial.print(bme.readAltitude(SEALEVELPRESSURE_HPA));
   d43ae:	f003 fa07 	bl	d77c0 <_Z16_fetch_usbserialv>
   d43b2:	ed9f 0a1b 	vldr	s0, [pc, #108]	; d4420 <_Z11printValuesv+0xd8>
   d43b6:	4605      	mov	r5, r0
   d43b8:	4620      	mov	r0, r4
   d43ba:	f001 f969 	bl	d5690 <_ZN15Adafruit_BME28012readAltitudeEf>
   d43be:	2102      	movs	r1, #2
   d43c0:	4628      	mov	r0, r5
   d43c2:	f002 fcad 	bl	d6d20 <_ZN5Print5printEfi>
    Serial.println(" m");
   d43c6:	f003 f9fb 	bl	d77c0 <_Z16_fetch_usbserialv>
   d43ca:	4916      	ldr	r1, [pc, #88]	; (d4424 <_Z11printValuesv+0xdc>)
   d43cc:	f002 fbbd 	bl	d6b4a <_ZN5Print7printlnEPKc>

    Serial.print("Humidity = ");
   d43d0:	f003 f9f6 	bl	d77c0 <_Z16_fetch_usbserialv>
   d43d4:	4914      	ldr	r1, [pc, #80]	; (d4428 <_Z11printValuesv+0xe0>)
   d43d6:	f002 fba5 	bl	d6b24 <_ZN5Print5printEPKc>
    Serial.print(bme.readHumidity());
   d43da:	f003 f9f1 	bl	d77c0 <_Z16_fetch_usbserialv>
   d43de:	4605      	mov	r5, r0
   d43e0:	4620      	mov	r0, r4
   d43e2:	f001 f90b 	bl	d55fc <_ZN15Adafruit_BME28012readHumidityEv>
   d43e6:	2102      	movs	r1, #2
   d43e8:	4628      	mov	r0, r5
   d43ea:	f002 fc99 	bl	d6d20 <_ZN5Print5printEfi>
    Serial.println(" %");
   d43ee:	f003 f9e7 	bl	d77c0 <_Z16_fetch_usbserialv>
   d43f2:	490e      	ldr	r1, [pc, #56]	; (d442c <_Z11printValuesv+0xe4>)
   d43f4:	f002 fba9 	bl	d6b4a <_ZN5Print7printlnEPKc>

    Serial.println();
   d43f8:	f003 f9e2 	bl	d77c0 <_Z16_fetch_usbserialv>
}
   d43fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

    Serial.print("Humidity = ");
    Serial.print(bme.readHumidity());
    Serial.println(" %");

    Serial.println();
   d4400:	f002 bb97 	b.w	d6b32 <_ZN5Print7printlnEv>
   d4404:	000db8a5 	.word	0x000db8a5
   d4408:	2003e330 	.word	0x2003e330
   d440c:	000db8b4 	.word	0x000db8b4
   d4410:	000db8b8 	.word	0x000db8b8
   d4414:	42c80000 	.word	0x42c80000
   d4418:	000db8c4 	.word	0x000db8c4
   d441c:	000db8c9 	.word	0x000db8c9
   d4420:	447d5000 	.word	0x447d5000
   d4424:	000db8dd 	.word	0x000db8dd
   d4428:	000db8e0 	.word	0x000db8e0
   d442c:	000db8ec 	.word	0x000db8ec

000d4430 <_Z7getDustv>:
}

float getDust() {
   d4430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  unsigned long sampletime_ms = 30000;//sampe 30s ;
  unsigned long lowpulseoccupancy = 0;
  float ratio = 0;
  float concentration = -1;

  pinMode(pinDust,INPUT);
   d4434:	2100      	movs	r1, #0
    Serial.println(" %");

    Serial.println();
}

float getDust() {
   d4436:	ed2d 8b02 	vpush	{d8}
  unsigned long sampletime_ms = 30000;//sampe 30s ;
  unsigned long lowpulseoccupancy = 0;
  float ratio = 0;
  float concentration = -1;

  pinMode(pinDust,INPUT);
   d443a:	2008      	movs	r0, #8
   d443c:	f003 ff8a 	bl	d8354 <pinMode>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4440:	f001 fd8e 	bl	d5f60 <HAL_Timer_Get_Milli_Seconds>
   d4444:	4605      	mov	r5, r0
    Serial.println(" %");

    Serial.println();
}

float getDust() {
   d4446:	2400      	movs	r4, #0

  while(concentration == -1) {
    duration = pulseIn(pinDust, LOW);
    lowpulseoccupancy = lowpulseoccupancy+duration;

    if ((millis()-starttime) > sampletime_ms)//if the sampel time == 30s
   d4448:	f247 5630 	movw	r6, #30000	; 0x7530

  pinMode(pinDust,INPUT);
  starttime = millis();//get the current time;

  while(concentration == -1) {
    duration = pulseIn(pinDust, LOW);
   d444c:	2100      	movs	r1, #0
   d444e:	2008      	movs	r0, #8
   d4450:	f003 ffd4 	bl	d83fc <pulseIn>
    lowpulseoccupancy = lowpulseoccupancy+duration;
   d4454:	4404      	add	r4, r0
   d4456:	f001 fd83 	bl	d5f60 <HAL_Timer_Get_Milli_Seconds>

    if ((millis()-starttime) > sampletime_ms)//if the sampel time == 30s
   d445a:	1b40      	subs	r0, r0, r5
   d445c:	42b0      	cmp	r0, r6
   d445e:	d9f5      	bls.n	d444c <_Z7getDustv+0x1c>
    {
        ratio = lowpulseoccupancy/(sampletime_ms*10.0);  // Integer percentage 0=>100
   d4460:	4620      	mov	r0, r4
   d4462:	f005 fc13 	bl	d9c8c <__aeabi_ui2d>
   d4466:	a340      	add	r3, pc, #256	; (adr r3, d4568 <_Z7getDustv+0x138>)
   d4468:	e9d3 2300 	ldrd	r2, r3, [r3]
   d446c:	f005 fdae 	bl	d9fcc <__aeabi_ddiv>
   d4470:	f005 ff7a 	bl	da368 <__aeabi_d2f>
   d4474:	ee08 0a90 	vmov	s17, r0
        concentration = 1.1*pow(ratio,3)-3.8*pow(ratio,2)+520*ratio+0.62; // using spec sheet curve
   d4478:	f005 fc2a 	bl	d9cd0 <__aeabi_f2d>
   d447c:	4606      	mov	r6, r0
   d447e:	460f      	mov	r7, r1
   d4480:	ed9f 1b33 	vldr	d1, [pc, #204]	; d4550 <_Z7getDustv+0x120>
   d4484:	ec47 6b10 	vmov	d0, r6, r7
   d4488:	f004 f986 	bl	d8798 <pow>
   d448c:	a338      	add	r3, pc, #224	; (adr r3, d4570 <_Z7getDustv+0x140>)
   d448e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4492:	ec51 0b10 	vmov	r0, r1, d0
   d4496:	f005 fc6f 	bl	d9d78 <__aeabi_dmul>
   d449a:	4632      	mov	r2, r6
   d449c:	463b      	mov	r3, r7
   d449e:	4680      	mov	r8, r0
   d44a0:	4689      	mov	r9, r1
   d44a2:	4630      	mov	r0, r6
   d44a4:	4639      	mov	r1, r7
   d44a6:	f005 fc67 	bl	d9d78 <__aeabi_dmul>
   d44aa:	a333      	add	r3, pc, #204	; (adr r3, d4578 <_Z7getDustv+0x148>)
   d44ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   d44b0:	f005 fc62 	bl	d9d78 <__aeabi_dmul>
   d44b4:	4602      	mov	r2, r0
   d44b6:	460b      	mov	r3, r1
   d44b8:	4640      	mov	r0, r8
   d44ba:	4649      	mov	r1, r9
   d44bc:	f005 faa8 	bl	d9a10 <__aeabi_dsub>
   d44c0:	eddf 7a27 	vldr	s15, [pc, #156]	; d4560 <_Z7getDustv+0x130>
   d44c4:	ee68 7aa7 	vmul.f32	s15, s17, s15
   d44c8:	4606      	mov	r6, r0
   d44ca:	ee17 0a90 	vmov	r0, s15
   d44ce:	460f      	mov	r7, r1
   d44d0:	f005 fbfe 	bl	d9cd0 <__aeabi_f2d>
   d44d4:	4602      	mov	r2, r0
   d44d6:	460b      	mov	r3, r1
   d44d8:	4630      	mov	r0, r6
   d44da:	4639      	mov	r1, r7
   d44dc:	f005 fa9a 	bl	d9a14 <__adddf3>
   d44e0:	a31d      	add	r3, pc, #116	; (adr r3, d4558 <_Z7getDustv+0x128>)
   d44e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d44e6:	f005 fa95 	bl	d9a14 <__adddf3>
   d44ea:	f005 ff3d 	bl	da368 <__aeabi_d2f>
   d44ee:	ee08 0a10 	vmov	s16, r0
        Serial.print(lowpulseoccupancy);
   d44f2:	f003 f965 	bl	d77c0 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d44f6:	220a      	movs	r2, #10
   d44f8:	4621      	mov	r1, r4
   d44fa:	f002 fb32 	bl	d6b62 <_ZN5Print11printNumberEmh>
        Serial.print(",");
   d44fe:	f003 f95f 	bl	d77c0 <_Z16_fetch_usbserialv>
   d4502:	4918      	ldr	r1, [pc, #96]	; (d4564 <_Z7getDustv+0x134>)
   d4504:	f002 fb0e 	bl	d6b24 <_ZN5Print5printEPKc>
        Serial.print(ratio);
   d4508:	f003 f95a 	bl	d77c0 <_Z16_fetch_usbserialv>
   d450c:	eeb0 0a68 	vmov.f32	s0, s17
   d4510:	2102      	movs	r1, #2
   d4512:	f002 fc05 	bl	d6d20 <_ZN5Print5printEfi>
        Serial.print(",");
   d4516:	f003 f953 	bl	d77c0 <_Z16_fetch_usbserialv>
   d451a:	4912      	ldr	r1, [pc, #72]	; (d4564 <_Z7getDustv+0x134>)
   d451c:	f002 fb02 	bl	d6b24 <_ZN5Print5printEPKc>
        Serial.println(concentration);
   d4520:	f003 f94e 	bl	d77c0 <_Z16_fetch_usbserialv>
   d4524:	2102      	movs	r1, #2
   d4526:	eeb0 0a48 	vmov.f32	s0, s16
   d452a:	f002 fc13 	bl	d6d54 <_ZN5Print7printlnEfi>
   d452e:	f001 fd17 	bl	d5f60 <HAL_Timer_Get_Milli_Seconds>
  float concentration = -1;

  pinMode(pinDust,INPUT);
  starttime = millis();//get the current time;

  while(concentration == -1) {
   d4532:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   d4536:	eeb4 8a67 	vcmp.f32	s16, s15
   d453a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d453e:	4605      	mov	r5, r0
   d4540:	d081      	beq.n	d4446 <_Z7getDustv+0x16>
        lowpulseoccupancy = 0;
        starttime = millis();
    }
  }
return concentration;
   d4542:	eeb0 0a48 	vmov.f32	s0, s16
   d4546:	ecbd 8b02 	vpop	{d8}
   d454a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d454e:	bf00      	nop
   d4550:	00000000 	.word	0x00000000
   d4554:	40080000 	.word	0x40080000
   d4558:	3d70a3d7 	.word	0x3d70a3d7
   d455c:	3fe3d70a 	.word	0x3fe3d70a
   d4560:	44020000 	.word	0x44020000
   d4564:	000db8ef 	.word	0x000db8ef
   d4568:	00000000 	.word	0x00000000
   d456c:	41124f80 	.word	0x41124f80
   d4570:	9999999a 	.word	0x9999999a
   d4574:	3ff19999 	.word	0x3ff19999
   d4578:	66666666 	.word	0x66666666
   d457c:	400e6666 	.word	0x400e6666

000d4580 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4580:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4582:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4584:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d4586:	b17c      	cbz	r4, d45a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4588:	6863      	ldr	r3, [r4, #4]
   d458a:	3b01      	subs	r3, #1
   d458c:	6063      	str	r3, [r4, #4]
   d458e:	b95b      	cbnz	r3, d45a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d4590:	6823      	ldr	r3, [r4, #0]
   d4592:	4620      	mov	r0, r4
   d4594:	689b      	ldr	r3, [r3, #8]
   d4596:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4598:	68a3      	ldr	r3, [r4, #8]
   d459a:	3b01      	subs	r3, #1
   d459c:	60a3      	str	r3, [r4, #8]
   d459e:	b91b      	cbnz	r3, d45a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d45a0:	6823      	ldr	r3, [r4, #0]
   d45a2:	4620      	mov	r0, r4
   d45a4:	68db      	ldr	r3, [r3, #12]
   d45a6:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d45a8:	4628      	mov	r0, r5
   d45aa:	bd38      	pop	{r3, r4, r5, pc}

000d45ac <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d45ac:	b510      	push	{r4, lr}
   d45ae:	4b04      	ldr	r3, [pc, #16]	; (d45c0 <_ZN9TCPClientD1Ev+0x14>)
   d45b0:	4604      	mov	r4, r0
   d45b2:	f840 3b18 	str.w	r3, [r0], #24
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d45b6:	f7ff ffe3 	bl	d4580 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d45ba:	4620      	mov	r0, r4
   d45bc:	bd10      	pop	{r4, pc}
   d45be:	bf00      	nop
   d45c0:	000dbf40 	.word	0x000dbf40

000d45c4 <_ZN9TCPClientD0Ev>:
   d45c4:	b510      	push	{r4, lr}
   d45c6:	4604      	mov	r4, r0
   d45c8:	f7ff fff0 	bl	d45ac <_ZN9TCPClientD1Ev>
   d45cc:	4620      	mov	r0, r4
   d45ce:	211c      	movs	r1, #28
   d45d0:	f003 ff84 	bl	d84dc <_ZdlPvj>
   d45d4:	4620      	mov	r0, r4
   d45d6:	bd10      	pop	{r4, pc}

000d45d8 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>:
	 *
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
   d45d8:	b570      	push	{r4, r5, r6, lr}
   d45da:	4604      	mov	r4, r0
   d45dc:	460e      	mov	r6, r1
   d45de:	4615      	mov	r5, r2
		insertCheckSeparator();
   d45e0:	f000 fba2 	bl	d4d28 <_ZN10JsonWriter20insertCheckSeparatorEv>
	 * @brief Inserts a quoted string value. This escapes special characters and encodes utf-8.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const char *value) { insertString(value, true); }
   d45e4:	2201      	movs	r2, #1
   d45e6:	4631      	mov	r1, r6
   d45e8:	4620      	mov	r0, r4
   d45ea:	f000 fb11 	bl	d4c10 <_ZN10JsonWriter12insertStringEPKcb>
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
   d45ee:	4620      	mov	r0, r4
   d45f0:	213a      	movs	r1, #58	; 0x3a
   d45f2:	f000 fac1 	bl	d4b78 <_ZN10JsonWriter10insertCharEc>
	 * @brief Inserts an integer value.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separators between items.
	 */
	void insertValue(int value) { insertsprintf("%d", value); }
   d45f6:	462a      	mov	r2, r5
   d45f8:	4620      	mov	r0, r4
   d45fa:	4902      	ldr	r1, [pc, #8]	; (d4604 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_+0x2c>)
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
		insertValue(value);
	}
   d45fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	 * @brief Inserts an integer value.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separators between items.
	 */
	void insertValue(int value) { insertsprintf("%d", value); }
   d4600:	f000 baf9 	b.w	d4bf6 <_ZN10JsonWriter13insertsprintfEPKcz>
   d4604:	000dbf98 	.word	0x000dbf98

000d4608 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>:
	 *
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
   d4608:	b538      	push	{r3, r4, r5, lr}
   d460a:	4604      	mov	r4, r0
   d460c:	ed2d 8b02 	vpush	{d8}
   d4610:	460d      	mov	r5, r1
   d4612:	eeb0 8a40 	vmov.f32	s16, s0
		insertCheckSeparator();
   d4616:	f000 fb87 	bl	d4d28 <_ZN10JsonWriter20insertCheckSeparatorEv>
	 * @brief Inserts a quoted string value. This escapes special characters and encodes utf-8.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const char *value) { insertString(value, true); }
   d461a:	4629      	mov	r1, r5
   d461c:	4620      	mov	r0, r4
   d461e:	2201      	movs	r2, #1
   d4620:	f000 faf6 	bl	d4c10 <_ZN10JsonWriter12insertStringEPKcb>
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
   d4624:	4620      	mov	r0, r4
   d4626:	213a      	movs	r1, #58	; 0x3a
   d4628:	f000 faa6 	bl	d4b78 <_ZN10JsonWriter10insertCharEc>
		insertValue(value);
   d462c:	eeb0 0a48 	vmov.f32	s0, s16
	}
   d4630:	ecbd 8b02 	vpop	{d8}
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
		insertValue(value);
   d4634:	4620      	mov	r0, r4
	}
   d4636:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
		insertValue(value);
   d463a:	f000 bb99 	b.w	d4d70 <_ZN10JsonWriter11insertValueEf>
	...

000d4640 <_Z18createEventPayLoadifffi>:
  Serial.printf("At %s the moisture reading is %i \n",currentTime,moist);
  //Serial.printf("At %s the moisture reading is %i \n",Time.timeStr().c_str(),moist);
  Serial.printf("The time is %s \n",current);
}

void createEventPayLoad(int moistValue, float tempValue, float presValue, float humValue, int waterED) {
   d4640:	b530      	push	{r4, r5, lr}
   d4642:	ed2d 8b04 	vpush	{d8-d9}
   d4646:	b0d3      	sub	sp, #332	; 0x14c
   d4648:	4605      	mov	r5, r0
   d464a:	460c      	mov	r4, r1
 * @param BUFFER_SIZE The size of the buffer to reserve.
 */
template <size_t BUFFER_SIZE>
class JsonWriterStatic : public JsonWriter {
public:
	explicit JsonWriterStatic() : JsonWriter(staticBuffer, BUFFER_SIZE) {};
   d464c:	f44f 7280 	mov.w	r2, #256	; 0x100
   d4650:	a912      	add	r1, sp, #72	; 0x48
   d4652:	a806      	add	r0, sp, #24
   d4654:	eef0 8a60 	vmov.f32	s17, s1
   d4658:	eeb0 8a41 	vmov.f32	s16, s2
   d465c:	eeb0 9a40 	vmov.f32	s18, s0
   d4660:	f000 fa78 	bl	d4b54 <_ZN10JsonWriterC1EPcj>
   d4664:	4b1d      	ldr	r3, [pc, #116]	; (d46dc <_Z18createEventPayLoadifffi+0x9c>)
   d4666:	9306      	str	r3, [sp, #24]
	void init();

	/**
	 * @brief Start a new JSON object. Make sure you finish it with finishObjectOrArray()
	 */
	bool startObject() { return startObjectOrArray('{', '}'); };
   d4668:	227d      	movs	r2, #125	; 0x7d
   d466a:	217b      	movs	r1, #123	; 0x7b
   d466c:	a806      	add	r0, sp, #24
   d466e:	f000 fb66 	bl	d4d3e <_ZN10JsonWriter18startObjectOrArrayEcc>
  JsonWriterStatic<256> jw;
  {
    JsonWriterAutoObject obj(&jw);

    jw.insertKeyValue("Moisture", moistValue);
   d4672:	462a      	mov	r2, r5
   d4674:	a806      	add	r0, sp, #24
   d4676:	491a      	ldr	r1, [pc, #104]	; (d46e0 <_Z18createEventPayLoadifffi+0xa0>)
   d4678:	f7ff ffae 	bl	d45d8 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
    jw.insertKeyValue("Temperature", tempValue);
   d467c:	eeb0 0a49 	vmov.f32	s0, s18
   d4680:	a806      	add	r0, sp, #24
   d4682:	4918      	ldr	r1, [pc, #96]	; (d46e4 <_Z18createEventPayLoadifffi+0xa4>)
   d4684:	f7ff ffc0 	bl	d4608 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
    jw.insertKeyValue("Pressure", presValue);
   d4688:	eeb0 0a68 	vmov.f32	s0, s17
   d468c:	a806      	add	r0, sp, #24
   d468e:	4916      	ldr	r1, [pc, #88]	; (d46e8 <_Z18createEventPayLoadifffi+0xa8>)
   d4690:	f7ff ffba 	bl	d4608 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
    jw.insertKeyValue("Humidity", humValue);
   d4694:	eeb0 0a48 	vmov.f32	s0, s16
   d4698:	a806      	add	r0, sp, #24
   d469a:	4914      	ldr	r1, [pc, #80]	; (d46ec <_Z18createEventPayLoadifffi+0xac>)
   d469c:	f7ff ffb4 	bl	d4608 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
    jw.insertKeyValue("Plant Watered", waterED);
   d46a0:	4622      	mov	r2, r4
   d46a2:	4913      	ldr	r1, [pc, #76]	; (d46f0 <_Z18createEventPayLoadifffi+0xb0>)
   d46a4:	a806      	add	r0, sp, #24
   d46a6:	f7ff ff97 	bl	d45d8 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>

	/**
	 * @brief End the object
	 */
	~JsonWriterAutoObject() {
		jw->finishObjectOrArray();
   d46aa:	a806      	add	r0, sp, #24
   d46ac:	f000 fa72 	bl	d4b94 <_ZN10JsonWriter19finishObjectOrArrayEv>
   d46b0:	9b07      	ldr	r3, [sp, #28]
   d46b2:	9303      	str	r3, [sp, #12]
   d46b4:	4b0f      	ldr	r3, [pc, #60]	; (d46f4 <_Z18createEventPayLoadifffi+0xb4>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d46b6:	9a03      	ldr	r2, [sp, #12]
   d46b8:	781b      	ldrb	r3, [r3, #0]
   d46ba:	490f      	ldr	r1, [pc, #60]	; (d46f8 <_Z18createEventPayLoadifffi+0xb8>)
   d46bc:	f88d 3000 	strb.w	r3, [sp]
   d46c0:	a804      	add	r0, sp, #16
   d46c2:	233c      	movs	r3, #60	; 0x3c
   d46c4:	f002 fe10 	bl	d72e8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d46c8:	a805      	add	r0, sp, #20
   d46ca:	f7ff ff59 	bl	d4580 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  //Serial.printf("At %s the moisture reading is %i \n",Time.timeStr().c_str(),moist);
  Serial.printf("The time is %s \n",current);
}

void createEventPayLoad(int moistValue, float tempValue, float presValue, float humValue, int waterED) {
  JsonWriterStatic<256> jw;
   d46ce:	a806      	add	r0, sp, #24
   d46d0:	f7ff fcfe 	bl	d40d0 <_ZN16JsonWriterStaticILj256EED1Ev>
    jw.insertKeyValue("Pressure", presValue);
    jw.insertKeyValue("Humidity", humValue);
    jw.insertKeyValue("Plant Watered", waterED);
  }
  Particle.publish("env-vals",jw.getBuffer(), PRIVATE);
}
   d46d4:	b053      	add	sp, #332	; 0x14c
   d46d6:	ecbd 8b04 	vpop	{d8-d9}
   d46da:	bd30      	pop	{r4, r5, pc}
   d46dc:	000db6f8 	.word	0x000db6f8
   d46e0:	000db991 	.word	0x000db991
   d46e4:	000db973 	.word	0x000db973
   d46e8:	000db9c4 	.word	0x000db9c4
   d46ec:	000db9df 	.word	0x000db9df
   d46f0:	000db700 	.word	0x000db700
   d46f4:	2003e2f4 	.word	0x2003e2f4
   d46f8:	000db8f1 	.word	0x000db8f1
   d46fc:	00000000 	.word	0x00000000

000d4700 <loop>:
            ;
    }

}

void loop() {
   d4700:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  moist = analogRead(soilPin);
   d4704:	4b8e      	ldr	r3, [pc, #568]	; (d4940 <loop+0x240>)
   d4706:	4c8f      	ldr	r4, [pc, #572]	; (d4944 <loop+0x244>)
   d4708:	8818      	ldrh	r0, [r3, #0]
  watered = waterPlant(moist);
   d470a:	4d8f      	ldr	r5, [pc, #572]	; (d4948 <loop+0x248>)
  temp = (bme.readTemperature()*(9.0/5.0))+32;
   d470c:	4e8f      	ldr	r6, [pc, #572]	; (d494c <loop+0x24c>)
  pres = (bme.readPressure() / 100.0F * 0.02953)+5;
   d470e:	4f90      	ldr	r7, [pc, #576]	; (d4950 <loop+0x250>)
  hum = bme.readHumidity();
  dust = getDust();
   d4710:	f8df 8284 	ldr.w	r8, [pc, #644]	; d4998 <loop+0x298>
            ;
    }

}

void loop() {
   d4714:	b08b      	sub	sp, #44	; 0x2c
  moist = analogRead(soilPin);
   d4716:	f003 fe5a 	bl	d83ce <analogRead>
   d471a:	6020      	str	r0, [r4, #0]
  watered = waterPlant(moist);
   d471c:	f7ff fd88 	bl	d4230 <_Z10waterPlanti>
   d4720:	6028      	str	r0, [r5, #0]
  temp = (bme.readTemperature()*(9.0/5.0))+32;
   d4722:	488c      	ldr	r0, [pc, #560]	; (d4954 <loop+0x254>)
   d4724:	f000 fe5e 	bl	d53e4 <_ZN15Adafruit_BME28015readTemperatureEv>
   d4728:	ee10 0a10 	vmov	r0, s0
   d472c:	f005 fad0 	bl	d9cd0 <__aeabi_f2d>
   d4730:	a37f      	add	r3, pc, #508	; (adr r3, d4930 <loop+0x230>)
   d4732:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4736:	f005 fb1f 	bl	d9d78 <__aeabi_dmul>
   d473a:	2200      	movs	r2, #0
   d473c:	4b86      	ldr	r3, [pc, #536]	; (d4958 <loop+0x258>)
   d473e:	f005 f969 	bl	d9a14 <__adddf3>
   d4742:	e9c6 0100 	strd	r0, r1, [r6]
  pres = (bme.readPressure() / 100.0F * 0.02953)+5;
   d4746:	4883      	ldr	r0, [pc, #524]	; (d4954 <loop+0x254>)
   d4748:	f000 fe7a 	bl	d5440 <_ZN15Adafruit_BME28012readPressureEv>
   d474c:	eddf 7a83 	vldr	s15, [pc, #524]	; d495c <loop+0x25c>
   d4750:	ee80 7a27 	vdiv.f32	s14, s0, s15
   d4754:	ee17 0a10 	vmov	r0, s14
   d4758:	f005 faba 	bl	d9cd0 <__aeabi_f2d>
   d475c:	a376      	add	r3, pc, #472	; (adr r3, d4938 <loop+0x238>)
   d475e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4762:	f005 fb09 	bl	d9d78 <__aeabi_dmul>
   d4766:	2200      	movs	r2, #0
   d4768:	4b7d      	ldr	r3, [pc, #500]	; (d4960 <loop+0x260>)
   d476a:	f005 f953 	bl	d9a14 <__adddf3>
   d476e:	e9c7 0100 	strd	r0, r1, [r7]
  hum = bme.readHumidity();
   d4772:	4878      	ldr	r0, [pc, #480]	; (d4954 <loop+0x254>)
   d4774:	f000 ff42 	bl	d55fc <_ZN15Adafruit_BME28012readHumidityEv>
   d4778:	ee10 0a10 	vmov	r0, s0
   d477c:	f005 faa8 	bl	d9cd0 <__aeabi_f2d>
   d4780:	4b78      	ldr	r3, [pc, #480]	; (d4964 <loop+0x264>)
   d4782:	e9c3 0100 	strd	r0, r1, [r3]
  dust = getDust();
   d4786:	f7ff fe53 	bl	d4430 <_Z7getDustv>
   d478a:	ed88 0a00 	vstr	s0, [r8]
  Serial.printf("Dust Value = %0.2f \n",dust);
   d478e:	f003 f817 	bl	d77c0 <_Z16_fetch_usbserialv>
   d4792:	4681      	mov	r9, r0
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d4794:	f8d8 0000 	ldr.w	r0, [r8]
   d4798:	f005 fa9a 	bl	d9cd0 <__aeabi_f2d>
   d479c:	4a72      	ldr	r2, [pc, #456]	; (d4968 <loop+0x268>)
   d479e:	e9cd 0100 	strd	r0, r1, [sp]
   d47a2:	2100      	movs	r1, #0
   d47a4:	4648      	mov	r0, r9
   d47a6:	f002 fae4 	bl	d6d72 <_ZN5Print11printf_implEbPKcz>
  printMoist(moist);
   d47aa:	6820      	ldr	r0, [r4, #0]
   d47ac:	f7ff fd7a 	bl	d42a4 <_Z10printMoisti>
  printValues();
   d47b0:	f7ff fdca 	bl	d4348 <_Z11printValuesv>

    if(mqtt.Update()) {
   d47b4:	486d      	ldr	r0, [pc, #436]	; (d496c <loop+0x26c>)
   d47b6:	f001 f825 	bl	d5804 <_ZN19Adafruit_MQTT_SPARK6UpdateEv>
   d47ba:	46b8      	mov	r8, r7
   d47bc:	b168      	cbz	r0, d47da <loop+0xda>
       Htemp.publish(temp); 
   d47be:	2102      	movs	r1, #2
   d47c0:	ed96 0b00 	vldr	d0, [r6]
   d47c4:	486a      	ldr	r0, [pc, #424]	; (d4970 <loop+0x270>)
   d47c6:	f001 faf5 	bl	d5db4 <_ZN21Adafruit_MQTT_Publish7publishEdh>
       Hmoist.publish(moist);
   d47ca:	6821      	ldr	r1, [r4, #0]
   d47cc:	4869      	ldr	r0, [pc, #420]	; (d4974 <loop+0x274>)
   d47ce:	f001 faef 	bl	d5db0 <_ZN21Adafruit_MQTT_Publish7publishEi>
       Hwater.publish(watered);
   d47d2:	6829      	ldr	r1, [r5, #0]
   d47d4:	4868      	ldr	r0, [pc, #416]	; (d4978 <loop+0x278>)
   d47d6:	f001 faeb 	bl	d5db0 <_ZN21Adafruit_MQTT_Publish7publishEi>
   d47da:	4f68      	ldr	r7, [pc, #416]	; (d497c <loop+0x27c>)
    } 

  Particle.publish("Moisture", String(moist),PRIVATE);
   d47dc:	6821      	ldr	r1, [r4, #0]

    for(i=0;i<60;i++) {
      Adafruit_MQTT_Subscribe *subscription;
      Serial.printf("x%i ",i);
        while ((subscription = mqtt.readSubscription(10000))) {  // do this loop for 10 seconds
          if (subscription == &onoffbutton) {
   d47de:	f8df 91bc 	ldr.w	r9, [pc, #444]	; d499c <loop+0x29c>
       Htemp.publish(temp); 
       Hmoist.publish(moist);
       Hwater.publish(watered);
    } 

  Particle.publish("Moisture", String(moist),PRIVATE);
   d47e2:	220a      	movs	r2, #10
   d47e4:	a806      	add	r0, sp, #24
   d47e6:	f002 f8f5 	bl	d69d4 <_ZN6StringC1Eih>
   d47ea:	783b      	ldrb	r3, [r7, #0]
   d47ec:	9a06      	ldr	r2, [sp, #24]
   d47ee:	4964      	ldr	r1, [pc, #400]	; (d4980 <loop+0x280>)
   d47f0:	f88d 3000 	strb.w	r3, [sp]
   d47f4:	a804      	add	r0, sp, #16
   d47f6:	233c      	movs	r3, #60	; 0x3c
   d47f8:	f002 fd76 	bl	d72e8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d47fc:	a805      	add	r0, sp, #20
   d47fe:	f7ff febf 	bl	d4580 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4802:	a806      	add	r0, sp, #24
   d4804:	f002 f856 	bl	d68b4 <_ZN6StringD1Ev>
  Particle.publish("Temperature", String(temp),PRIVATE);
   d4808:	ed96 0b00 	vldr	d0, [r6]
   d480c:	2106      	movs	r1, #6
   d480e:	a806      	add	r0, sp, #24
   d4810:	f002 f8f3 	bl	d69fa <_ZN6StringC1Edi>
   d4814:	783b      	ldrb	r3, [r7, #0]
   d4816:	9a06      	ldr	r2, [sp, #24]
   d4818:	495a      	ldr	r1, [pc, #360]	; (d4984 <loop+0x284>)
   d481a:	f88d 3000 	strb.w	r3, [sp]
   d481e:	a804      	add	r0, sp, #16
   d4820:	233c      	movs	r3, #60	; 0x3c
   d4822:	f002 fd61 	bl	d72e8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4826:	a805      	add	r0, sp, #20
   d4828:	f7ff feaa 	bl	d4580 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d482c:	a806      	add	r0, sp, #24
   d482e:	f002 f841 	bl	d68b4 <_ZN6StringD1Ev>
  Particle.publish("Plant Watered", String(watered),PRIVATE);
   d4832:	220a      	movs	r2, #10
   d4834:	6829      	ldr	r1, [r5, #0]
   d4836:	a806      	add	r0, sp, #24
   d4838:	f002 f8cc 	bl	d69d4 <_ZN6StringC1Eih>
   d483c:	783b      	ldrb	r3, [r7, #0]
   d483e:	9a06      	ldr	r2, [sp, #24]
   d4840:	4951      	ldr	r1, [pc, #324]	; (d4988 <loop+0x288>)
   d4842:	f88d 3000 	strb.w	r3, [sp]
   d4846:	a804      	add	r0, sp, #16
   d4848:	233c      	movs	r3, #60	; 0x3c
   d484a:	f002 fd4d 	bl	d72e8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d484e:	a805      	add	r0, sp, #20
   d4850:	f7ff fe96 	bl	d4580 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4854:	a806      	add	r0, sp, #24
   d4856:	f002 f82d 	bl	d68b4 <_ZN6StringD1Ev>
  
  createEventPayLoad(moist,temp,pres,hum,watered);
   d485a:	4b42      	ldr	r3, [pc, #264]	; (d4964 <loop+0x264>)

    for(i=0;i<60;i++) {
   d485c:	4f4b      	ldr	r7, [pc, #300]	; (d498c <loop+0x28c>)

  Particle.publish("Moisture", String(moist),PRIVATE);
  Particle.publish("Temperature", String(temp),PRIVATE);
  Particle.publish("Plant Watered", String(watered),PRIVATE);
  
  createEventPayLoad(moist,temp,pres,hum,watered);
   d485e:	e9d3 0100 	ldrd	r0, r1, [r3]
   d4862:	f005 fd81 	bl	da368 <__aeabi_d2f>
   d4866:	9003      	str	r0, [sp, #12]
   d4868:	e9d8 0100 	ldrd	r0, r1, [r8]
   d486c:	f005 fd7c 	bl	da368 <__aeabi_d2f>
   d4870:	9002      	str	r0, [sp, #8]
   d4872:	e9d6 0100 	ldrd	r0, r1, [r6]
   d4876:	f005 fd77 	bl	da368 <__aeabi_d2f>
   d487a:	6829      	ldr	r1, [r5, #0]
   d487c:	ed9d 1a03 	vldr	s2, [sp, #12]
   d4880:	eddd 0a02 	vldr	s1, [sp, #8]
   d4884:	ee00 0a10 	vmov	s0, r0
   d4888:	6820      	ldr	r0, [r4, #0]
   d488a:	f7ff fed9 	bl	d4640 <_Z18createEventPayLoadifffi>

    for(i=0;i<60;i++) {
   d488e:	2300      	movs	r3, #0
   d4890:	603b      	str	r3, [r7, #0]
   d4892:	683b      	ldr	r3, [r7, #0]
   d4894:	2b3b      	cmp	r3, #59	; 0x3b
   d4896:	dc47      	bgt.n	d4928 <loop+0x228>
      Adafruit_MQTT_Subscribe *subscription;
      Serial.printf("x%i ",i);
   d4898:	f002 ff92 	bl	d77c0 <_Z16_fetch_usbserialv>
   d489c:	4b3b      	ldr	r3, [pc, #236]	; (d498c <loop+0x28c>)
   d489e:	4a3c      	ldr	r2, [pc, #240]	; (d4990 <loop+0x290>)
   d48a0:	681b      	ldr	r3, [r3, #0]
   d48a2:	2100      	movs	r1, #0
   d48a4:	f002 fa65 	bl	d6d72 <_ZN5Print11printf_implEbPKcz>
        while ((subscription = mqtt.readSubscription(10000))) {  // do this loop for 10 seconds
   d48a8:	f242 7110 	movw	r1, #10000	; 0x2710
   d48ac:	482f      	ldr	r0, [pc, #188]	; (d496c <loop+0x26c>)
   d48ae:	f001 f895 	bl	d59dc <_ZN13Adafruit_MQTT16readSubscriptionEs>
   d48b2:	b3a8      	cbz	r0, d4920 <loop+0x220>
          if (subscription == &onoffbutton) {
   d48b4:	4548      	cmp	r0, r9
   d48b6:	d1f7      	bne.n	d48a8 <loop+0x1a8>
            button = atoi((char *)onoffbutton.lastread);   //convert adafruit string to int
   d48b8:	f109 0005 	add.w	r0, r9, #5
   d48bc:	f006 f8ee 	bl	daa9c <atoi>
   d48c0:	f8df 80dc 	ldr.w	r8, [pc, #220]	; d49a0 <loop+0x2a0>
   d48c4:	f8c8 0000 	str.w	r0, [r8]
            Serial.printf("Button State is %i \n",button);
   d48c8:	f002 ff7a 	bl	d77c0 <_Z16_fetch_usbserialv>
   d48cc:	2100      	movs	r1, #0
   d48ce:	f8d8 3000 	ldr.w	r3, [r8]
   d48d2:	4a30      	ldr	r2, [pc, #192]	; (d4994 <loop+0x294>)
   d48d4:	f002 fa4d 	bl	d6d72 <_ZN5Print11printf_implEbPKcz>
            if(button==1) {
   d48d8:	f8d8 1000 	ldr.w	r1, [r8]
   d48dc:	2901      	cmp	r1, #1
   d48de:	d1e3      	bne.n	d48a8 <loop+0x1a8>
              digitalWrite(D7,1);
   d48e0:	2007      	movs	r0, #7
   d48e2:	f003 fd48 	bl	d8376 <digitalWrite>
              watered = waterPlant(3000);
   d48e6:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d48ea:	f7ff fca1 	bl	d4230 <_Z10waterPlanti>
   d48ee:	6028      	str	r0, [r5, #0]
                  if(mqtt.Update()) {
   d48f0:	481e      	ldr	r0, [pc, #120]	; (d496c <loop+0x26c>)
   d48f2:	f000 ff87 	bl	d5804 <_ZN19Adafruit_MQTT_SPARK6UpdateEv>
   d48f6:	b170      	cbz	r0, d4916 <loop+0x216>
                    Htemp.publish(temp); 
   d48f8:	2102      	movs	r1, #2
   d48fa:	ed96 0b00 	vldr	d0, [r6]
   d48fe:	481c      	ldr	r0, [pc, #112]	; (d4970 <loop+0x270>)
   d4900:	f001 fa58 	bl	d5db4 <_ZN21Adafruit_MQTT_Publish7publishEdh>
                    Hmoist.publish(moist);
   d4904:	6821      	ldr	r1, [r4, #0]
   d4906:	481b      	ldr	r0, [pc, #108]	; (d4974 <loop+0x274>)
   d4908:	f001 fa52 	bl	d5db0 <_ZN21Adafruit_MQTT_Publish7publishEi>
                    Hwater.publish(watered);
   d490c:	4b0e      	ldr	r3, [pc, #56]	; (d4948 <loop+0x248>)
   d490e:	481a      	ldr	r0, [pc, #104]	; (d4978 <loop+0x278>)
   d4910:	6819      	ldr	r1, [r3, #0]
   d4912:	f001 fa4d 	bl	d5db0 <_ZN21Adafruit_MQTT_Publish7publishEi>
                  } 
              digitalWrite(D7,0);
   d4916:	2100      	movs	r1, #0
   d4918:	2007      	movs	r0, #7
   d491a:	f003 fd2c 	bl	d8376 <digitalWrite>
   d491e:	e7c3      	b.n	d48a8 <loop+0x1a8>
  Particle.publish("Temperature", String(temp),PRIVATE);
  Particle.publish("Plant Watered", String(watered),PRIVATE);
  
  createEventPayLoad(moist,temp,pres,hum,watered);

    for(i=0;i<60;i++) {
   d4920:	683b      	ldr	r3, [r7, #0]
   d4922:	3301      	adds	r3, #1
   d4924:	603b      	str	r3, [r7, #0]
   d4926:	e7b4      	b.n	d4892 <loop+0x192>
              digitalWrite(D7,0);
            }
          }
        }
    }    
}
   d4928:	b00b      	add	sp, #44	; 0x2c
   d492a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d492e:	bf00      	nop
   d4930:	cccccccd 	.word	0xcccccccd
   d4934:	3ffccccc 	.word	0x3ffccccc
   d4938:	c100e6b0 	.word	0xc100e6b0
   d493c:	3f9e3d1c 	.word	0x3f9e3d1c
   d4940:	2003e0a8 	.word	0x2003e0a8
   d4944:	2003e374 	.word	0x2003e374
   d4948:	2003e32c 	.word	0x2003e32c
   d494c:	2003e1b8 	.word	0x2003e1b8
   d4950:	2003e378 	.word	0x2003e378
   d4954:	2003e330 	.word	0x2003e330
   d4958:	40400000 	.word	0x40400000
   d495c:	42c80000 	.word	0x42c80000
   d4960:	40140000 	.word	0x40140000
   d4964:	2003e2b0 	.word	0x2003e2b0
   d4968:	000db8fa 	.word	0x000db8fa
   d496c:	2003e1d0 	.word	0x2003e1d0
   d4970:	2003e30c 	.word	0x2003e30c
   d4974:	2003e1a8 	.word	0x2003e1a8
   d4978:	2003e180 	.word	0x2003e180
   d497c:	2003e2f4 	.word	0x2003e2f4
   d4980:	000db991 	.word	0x000db991
   d4984:	000db973 	.word	0x000db973
   d4988:	000db700 	.word	0x000db700
   d498c:	2003e2f8 	.word	0x2003e2f8
   d4990:	000db90f 	.word	0x000db90f
   d4994:	000db914 	.word	0x000db914
   d4998:	2003e308 	.word	0x2003e308
   d499c:	2003e2b8 	.word	0x2003e2b8
   d49a0:	2003e318 	.word	0x2003e318

000d49a4 <_ZN19Adafruit_MQTT_SPARKD0Ev>:
   d49a4:	b510      	push	{r4, lr}
   d49a6:	21d4      	movs	r1, #212	; 0xd4
   d49a8:	4604      	mov	r4, r0
   d49aa:	f003 fd97 	bl	d84dc <_ZdlPvj>
   d49ae:	4620      	mov	r0, r4
   d49b0:	bd10      	pop	{r4, pc}
	...

000d49b4 <_GLOBAL__sub_I_TheClient>:
        lowpulseoccupancy = 0;
        starttime = millis();
    }
  }
return concentration;
   d49b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d49b6:	4b31      	ldr	r3, [pc, #196]	; (d4a7c <_GLOBAL__sub_I_TheClient+0xc8>)
#define AIO_USERNAME  "rashap"
#define AIO_KEY       "598169fa3ba94636941a330976e42e2c"


/************ Global State (you don't need to change this!) ***   ***************/ 
TCPClient TheClient; 
   d49b8:	4e31      	ldr	r6, [pc, #196]	; (d4a80 <_GLOBAL__sub_I_TheClient+0xcc>)
   d49ba:	4d32      	ldr	r5, [pc, #200]	; (d4a84 <_GLOBAL__sub_I_TheClient+0xd0>)
  {}

  Adafruit_MQTT_SPARK(TCPClient *client, const char *server, uint16_t port,
                       const char *user="", const char *pass=""):
    Adafruit_MQTT(server, port, user, pass),
    client(client)
   d49bc:	4c32      	ldr	r4, [pc, #200]	; (d4a88 <_GLOBAL__sub_I_TheClient+0xd4>)

unsigned status;

char currentTime[25];
char current[9];
String t;
   d49be:	4f33      	ldr	r7, [pc, #204]	; (d4a8c <_GLOBAL__sub_I_TheClient+0xd8>)
   d49c0:	2201      	movs	r2, #1
   d49c2:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d49c4:	f001 fa34 	bl	d5e30 <HAL_Pin_Map>
#define AIO_USERNAME  "rashap"
#define AIO_KEY       "598169fa3ba94636941a330976e42e2c"


/************ Global State (you don't need to change this!) ***   ***************/ 
TCPClient TheClient; 
   d49c8:	4630      	mov	r0, r6
   d49ca:	f003 fba1 	bl	d8110 <_ZN9TCPClientC1Ev>
   d49ce:	462a      	mov	r2, r5
   d49d0:	492f      	ldr	r1, [pc, #188]	; (d4a90 <_GLOBAL__sub_I_TheClient+0xdc>)
   d49d2:	4630      	mov	r0, r6
   d49d4:	f003 fd74 	bl	d84c0 <__aeabi_atexit>
   d49d8:	4b2e      	ldr	r3, [pc, #184]	; (d4a94 <_GLOBAL__sub_I_TheClient+0xe0>)
   d49da:	9300      	str	r3, [sp, #0]
   d49dc:	f240 725b 	movw	r2, #1883	; 0x75b
   d49e0:	4b2d      	ldr	r3, [pc, #180]	; (d4a98 <_GLOBAL__sub_I_TheClient+0xe4>)
   d49e2:	492e      	ldr	r1, [pc, #184]	; (d4a9c <_GLOBAL__sub_I_TheClient+0xe8>)
   d49e4:	4620      	mov	r0, r4
   d49e6:	f000 ff43 	bl	d5870 <_ZN13Adafruit_MQTTC1EPKctS1_S1_>
   d49ea:	4b2d      	ldr	r3, [pc, #180]	; (d4aa0 <_GLOBAL__sub_I_TheClient+0xec>)

// Setup the MQTT client class by passing in the WiFi client and MQTT server and login details. 
Adafruit_MQTT_SPARK mqtt(&TheClient,AIO_SERVER,AIO_SERVERPORT,AIO_USERNAME,AIO_KEY); 
   d49ec:	492d      	ldr	r1, [pc, #180]	; (d4aa4 <_GLOBAL__sub_I_TheClient+0xf0>)
   d49ee:	6023      	str	r3, [r4, #0]
   d49f0:	462a      	mov	r2, r5
   d49f2:	4620      	mov	r0, r4
   d49f4:	f8c4 60d0 	str.w	r6, [r4, #208]	; 0xd0
   d49f8:	f003 fd62 	bl	d84c0 <__aeabi_atexit>

/****************************** Feeds ***************************************/ 
// Setup a feed called 'voltage' for publishing. 
// Notice MQTT paths for AIO follow the form: <username>/feeds/<feedname> 

Adafruit_MQTT_Publish Htemp = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Home_Temperature");
   d49fc:	4621      	mov	r1, r4
   d49fe:	2300      	movs	r3, #0
   d4a00:	4a29      	ldr	r2, [pc, #164]	; (d4aa8 <_GLOBAL__sub_I_TheClient+0xf4>)
   d4a02:	482a      	ldr	r0, [pc, #168]	; (d4aac <_GLOBAL__sub_I_TheClient+0xf8>)

unsigned status;

char currentTime[25];
char current[9];
String t;
   d4a04:	4e2a      	ldr	r6, [pc, #168]	; (d4ab0 <_GLOBAL__sub_I_TheClient+0xfc>)

/****************************** Feeds ***************************************/ 
// Setup a feed called 'voltage' for publishing. 
// Notice MQTT paths for AIO follow the form: <username>/feeds/<feedname> 

Adafruit_MQTT_Publish Htemp = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Home_Temperature");
   d4a06:	f001 f9bf 	bl	d5d88 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish Hmoist = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Home_Moisture");
   d4a0a:	4621      	mov	r1, r4
   d4a0c:	2300      	movs	r3, #0
   d4a0e:	4a29      	ldr	r2, [pc, #164]	; (d4ab4 <_GLOBAL__sub_I_TheClient+0x100>)
   d4a10:	4829      	ldr	r0, [pc, #164]	; (d4ab8 <_GLOBAL__sub_I_TheClient+0x104>)
   d4a12:	f001 f9b9 	bl	d5d88 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish Hwater = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Home_Water"); 
   d4a16:	4621      	mov	r1, r4
   d4a18:	2300      	movs	r3, #0
   d4a1a:	4a28      	ldr	r2, [pc, #160]	; (d4abc <_GLOBAL__sub_I_TheClient+0x108>)
   d4a1c:	4828      	ldr	r0, [pc, #160]	; (d4ac0 <_GLOBAL__sub_I_TheClient+0x10c>)
   d4a1e:	f001 f9b3 	bl	d5d88 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish Hpres = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Home_Pressure"); 
   d4a22:	4621      	mov	r1, r4
   d4a24:	2300      	movs	r3, #0
   d4a26:	4a27      	ldr	r2, [pc, #156]	; (d4ac4 <_GLOBAL__sub_I_TheClient+0x110>)
   d4a28:	4827      	ldr	r0, [pc, #156]	; (d4ac8 <_GLOBAL__sub_I_TheClient+0x114>)
   d4a2a:	f001 f9ad 	bl	d5d88 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish Hhum = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Home_Humidity"); 
   d4a2e:	4621      	mov	r1, r4
   d4a30:	2300      	movs	r3, #0
   d4a32:	4a26      	ldr	r2, [pc, #152]	; (d4acc <_GLOBAL__sub_I_TheClient+0x118>)
   d4a34:	4826      	ldr	r0, [pc, #152]	; (d4ad0 <_GLOBAL__sub_I_TheClient+0x11c>)
   d4a36:	f001 f9a7 	bl	d5d88 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>

Adafruit_MQTT_Subscribe onoffbutton = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/LED_On"); 
   d4a3a:	2300      	movs	r3, #0
   d4a3c:	4a25      	ldr	r2, [pc, #148]	; (d4ad4 <_GLOBAL__sub_I_TheClient+0x120>)
   d4a3e:	4826      	ldr	r0, [pc, #152]	; (d4ad8 <_GLOBAL__sub_I_TheClient+0x124>)
   d4a40:	4621      	mov	r1, r4

unsigned status;

char currentTime[25];
char current[9];
String t;
   d4a42:	4c26      	ldr	r4, [pc, #152]	; (d4adc <_GLOBAL__sub_I_TheClient+0x128>)
Adafruit_MQTT_Publish Hmoist = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Home_Moisture");
Adafruit_MQTT_Publish Hwater = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Home_Water"); 
Adafruit_MQTT_Publish Hpres = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Home_Pressure"); 
Adafruit_MQTT_Publish Hhum = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Home_Humidity"); 

Adafruit_MQTT_Subscribe onoffbutton = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/LED_On"); 
   d4a44:	f001 f9d4 	bl	d5df0 <_ZN23Adafruit_MQTT_SubscribeC1EP13Adafruit_MQTTPKch>
#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BME280.h>

#define SEALEVELPRESSURE_HPA (1013.25)
Adafruit_BME280 bme; // I2C
   d4a48:	4825      	ldr	r0, [pc, #148]	; (d4ae0 <_GLOBAL__sub_I_TheClient+0x12c>)
   d4a4a:	f000 f9e1 	bl	d4e10 <_ZN15Adafruit_BME280C1Ev>

unsigned status;

char currentTime[25];
char current[9];
String t;
   d4a4e:	4639      	mov	r1, r7
   d4a50:	4620      	mov	r0, r4
   d4a52:	f001 ff76 	bl	d6942 <_ZN6StringC1EPK19__FlashStringHelper>
   d4a56:	4620      	mov	r0, r4
String t2;
   d4a58:	4c22      	ldr	r4, [pc, #136]	; (d4ae4 <_GLOBAL__sub_I_TheClient+0x130>)

unsigned status;

char currentTime[25];
char current[9];
String t;
   d4a5a:	462a      	mov	r2, r5
   d4a5c:	4631      	mov	r1, r6
   d4a5e:	f003 fd2f 	bl	d84c0 <__aeabi_atexit>
String t2;
   d4a62:	4639      	mov	r1, r7
   d4a64:	4620      	mov	r0, r4
   d4a66:	f001 ff6c 	bl	d6942 <_ZN6StringC1EPK19__FlashStringHelper>
   d4a6a:	462a      	mov	r2, r5
   d4a6c:	4631      	mov	r1, r6
   d4a6e:	4620      	mov	r0, r4
        lowpulseoccupancy = 0;
        starttime = millis();
    }
  }
return concentration;
   d4a70:	b003      	add	sp, #12
   d4a72:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
unsigned status;

char currentTime[25];
char current[9];
String t;
String t2;
   d4a76:	f003 bd23 	b.w	d84c0 <__aeabi_atexit>
   d4a7a:	bf00      	nop
   d4a7c:	2003e2f4 	.word	0x2003e2f4
   d4a80:	2003e18c 	.word	0x2003e18c
   d4a84:	2003e170 	.word	0x2003e170
   d4a88:	2003e1d0 	.word	0x2003e1d0
   d4a8c:	000dbaf5 	.word	0x000dbaf5
   d4a90:	000d45ad 	.word	0x000d45ad
   d4a94:	000db940 	.word	0x000db940
   d4a98:	000db929 	.word	0x000db929
   d4a9c:	000db930 	.word	0x000db930
   d4aa0:	000dbaa8 	.word	0x000dbaa8
   d4aa4:	000d40cd 	.word	0x000d40cd
   d4aa8:	000db961 	.word	0x000db961
   d4aac:	2003e30c 	.word	0x2003e30c
   d4ab0:	000d68b5 	.word	0x000d68b5
   d4ab4:	000db97f 	.word	0x000db97f
   d4ab8:	2003e1a8 	.word	0x2003e1a8
   d4abc:	000db99a 	.word	0x000db99a
   d4ac0:	2003e180 	.word	0x2003e180
   d4ac4:	000db9b2 	.word	0x000db9b2
   d4ac8:	2003e2a4 	.word	0x2003e2a4
   d4acc:	000db9cd 	.word	0x000db9cd
   d4ad0:	2003e2fc 	.word	0x2003e2fc
   d4ad4:	000db9e8 	.word	0x000db9e8
   d4ad8:	2003e2b8 	.word	0x2003e2b8
   d4adc:	2003e31c 	.word	0x2003e31c
   d4ae0:	2003e330 	.word	0x2003e330
   d4ae4:	2003e1c0 	.word	0x2003e1c0

000d4ae8 <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d4ae8:	b510      	push	{r4, lr}
   d4aea:	4b05      	ldr	r3, [pc, #20]	; (d4b00 <_ZN10JsonBufferD1Ev+0x18>)
   d4aec:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   d4aee:	7c03      	ldrb	r3, [r0, #16]


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d4af0:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   d4af2:	b91b      	cbnz	r3, d4afc <_ZN10JsonBufferD1Ev+0x14>
   d4af4:	6840      	ldr	r0, [r0, #4]
   d4af6:	b108      	cbz	r0, d4afc <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   d4af8:	f001 fc6e 	bl	d63d8 <free>
	}
}
   d4afc:	4620      	mov	r0, r4
   d4afe:	bd10      	pop	{r4, pc}
   d4b00:	000dba04 	.word	0x000dba04

000d4b04 <_ZN10JsonBufferD0Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d4b04:	b510      	push	{r4, lr}
   d4b06:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}
   d4b08:	f7ff ffee 	bl	d4ae8 <_ZN10JsonBufferD1Ev>
   d4b0c:	4620      	mov	r0, r4
   d4b0e:	2114      	movs	r1, #20
   d4b10:	f003 fce4 	bl	d84dc <_ZdlPvj>
   d4b14:	4620      	mov	r0, r4
   d4b16:	bd10      	pop	{r4, pc}

000d4b18 <_ZN10JsonWriterD1Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
   d4b18:	b510      	push	{r4, lr}
   d4b1a:	4b03      	ldr	r3, [pc, #12]	; (d4b28 <_ZN10JsonWriterD1Ev+0x10>)
   d4b1c:	6003      	str	r3, [r0, #0]
   d4b1e:	4604      	mov	r4, r0
   d4b20:	f7ff ffe2 	bl	d4ae8 <_ZN10JsonBufferD1Ev>

}
   d4b24:	4620      	mov	r0, r4
   d4b26:	bd10      	pop	{r4, pc}
   d4b28:	000dba14 	.word	0x000dba14

000d4b2c <_ZN10JsonWriterD0Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
   d4b2c:	b510      	push	{r4, lr}
   d4b2e:	4604      	mov	r4, r0

}
   d4b30:	f7ff fff2 	bl	d4b18 <_ZN10JsonWriterD1Ev>
   d4b34:	4620      	mov	r0, r4
   d4b36:	2130      	movs	r1, #48	; 0x30
   d4b38:	f003 fcd0 	bl	d84dc <_ZdlPvj>
   d4b3c:	4620      	mov	r0, r4
   d4b3e:	bd10      	pop	{r4, pc}

000d4b40 <_ZN10JsonWriter4initEv>:
	init();
}

void JsonWriter::init() {
	// Save start of insertion point for later
	offset = 0;
   d4b40:	2300      	movs	r3, #0

	contextIndex = 0;
	context[contextIndex].isFirst = true;
   d4b42:	2201      	movs	r2, #1
	init();
}

void JsonWriter::init() {
	// Save start of insertion point for later
	offset = 0;
   d4b44:	60c3      	str	r3, [r0, #12]

	contextIndex = 0;
   d4b46:	6143      	str	r3, [r0, #20]
	context[contextIndex].isFirst = true;
   d4b48:	7602      	strb	r2, [r0, #24]
	context[contextIndex].terminator = 0;
   d4b4a:	7643      	strb	r3, [r0, #25]

	truncated = false;
   d4b4c:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
   d4b50:	4770      	bx	lr
	...

000d4b54 <_ZN10JsonWriterC1EPcj>:
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d4b54:	2300      	movs	r3, #0

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d4b56:	b510      	push	{r4, lr}
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d4b58:	60c3      	str	r3, [r0, #12]
   d4b5a:	2301      	movs	r3, #1
   d4b5c:	7403      	strb	r3, [r0, #16]

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d4b5e:	4b05      	ldr	r3, [pc, #20]	; (d4b74 <_ZN10JsonWriterC1EPcj+0x20>)
   d4b60:	6003      	str	r3, [r0, #0]
   d4b62:	f04f 33ff 	mov.w	r3, #4294967295
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d4b66:	6041      	str	r1, [r0, #4]
   d4b68:	6082      	str	r2, [r0, #8]

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d4b6a:	62c3      	str	r3, [r0, #44]	; 0x2c
	init();
   d4b6c:	f7ff ffe8 	bl	d4b40 <_ZN10JsonWriter4initEv>
}
   d4b70:	bd10      	pop	{r4, pc}
   d4b72:	bf00      	nop
   d4b74:	000dba14 	.word	0x000dba14

000d4b78 <_ZN10JsonWriter10insertCharEc>:
	}
}


void JsonWriter::insertChar(char ch) {
	if (offset < bufferLen) {
   d4b78:	68c3      	ldr	r3, [r0, #12]
   d4b7a:	6882      	ldr	r2, [r0, #8]
		buffer[bufferLen - 1] = 0;
	}
}


void JsonWriter::insertChar(char ch) {
   d4b7c:	b510      	push	{r4, lr}
	if (offset < bufferLen) {
   d4b7e:	4293      	cmp	r3, r2
		buffer[offset++] = ch;
   d4b80:	bf3f      	itttt	cc
   d4b82:	6842      	ldrcc	r2, [r0, #4]
   d4b84:	1c5c      	addcc	r4, r3, #1
   d4b86:	60c4      	strcc	r4, [r0, #12]
   d4b88:	54d1      	strbcc	r1, [r2, r3]
	}
	else {
		truncated = true;
   d4b8a:	bf24      	itt	cs
   d4b8c:	2301      	movcs	r3, #1
   d4b8e:	f880 302a 	strbcs.w	r3, [r0, #42]	; 0x2a
   d4b92:	bd10      	pop	{r4, pc}

000d4b94 <_ZN10JsonWriter19finishObjectOrArrayEv>:
	insertChar(startChar);
	return true;
}


void JsonWriter::finishObjectOrArray() {
   d4b94:	b510      	push	{r4, lr}
	if (contextIndex > 0) {
   d4b96:	6943      	ldr	r3, [r0, #20]
	insertChar(startChar);
	return true;
}


void JsonWriter::finishObjectOrArray() {
   d4b98:	4604      	mov	r4, r0
	if (contextIndex > 0) {
   d4b9a:	b143      	cbz	r3, d4bae <_ZN10JsonWriter19finishObjectOrArrayEv+0x1a>
		if (context[contextIndex].terminator != 0) {
   d4b9c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
   d4ba0:	7e59      	ldrb	r1, [r3, #25]
   d4ba2:	b109      	cbz	r1, d4ba8 <_ZN10JsonWriter19finishObjectOrArrayEv+0x14>
			insertChar(context[contextIndex].terminator);
   d4ba4:	f7ff ffe8 	bl	d4b78 <_ZN10JsonWriter10insertCharEc>
		}
		contextIndex--;
   d4ba8:	6963      	ldr	r3, [r4, #20]
   d4baa:	3b01      	subs	r3, #1
   d4bac:	6163      	str	r3, [r4, #20]
	}
	// Make sure buffer is null terminated
	if (offset < bufferLen) {
   d4bae:	68a3      	ldr	r3, [r4, #8]
   d4bb0:	68e0      	ldr	r0, [r4, #12]
   d4bb2:	6861      	ldr	r1, [r4, #4]
   d4bb4:	4298      	cmp	r0, r3
   d4bb6:	f04f 0200 	mov.w	r2, #0
		buffer[offset] = 0;
	}
	else {
		buffer[bufferLen - 1] = 0;
   d4bba:	bf2a      	itet	cs
   d4bbc:	185b      	addcs	r3, r3, r1
		}
		contextIndex--;
	}
	// Make sure buffer is null terminated
	if (offset < bufferLen) {
		buffer[offset] = 0;
   d4bbe:	540a      	strbcc	r2, [r1, r0]
	}
	else {
		buffer[bufferLen - 1] = 0;
   d4bc0:	f803 2c01 	strbcs.w	r2, [r3, #-1]
   d4bc4:	bd10      	pop	{r4, pc}

000d4bc6 <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>:
	va_start(ap, fmt);
	insertvsprintf(fmt, ap);
	va_end(ap);
}

void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
   d4bc6:	b570      	push	{r4, r5, r6, lr}
   d4bc8:	4604      	mov	r4, r0
	size_t spaceAvailable = bufferLen - offset;
   d4bca:	68c0      	ldr	r0, [r0, #12]
   d4bcc:	68a5      	ldr	r5, [r4, #8]

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   d4bce:	6866      	ldr	r6, [r4, #4]
	insertvsprintf(fmt, ap);
	va_end(ap);
}

void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;
   d4bd0:	1a2d      	subs	r5, r5, r0

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   d4bd2:	4613      	mov	r3, r2
   d4bd4:	4430      	add	r0, r6
   d4bd6:	460a      	mov	r2, r1
   d4bd8:	4629      	mov	r1, r5
   d4bda:	f001 fc25 	bl	d6428 <vsnprintf>
	if (count <= spaceAvailable) {
   d4bde:	4285      	cmp	r5, r0
		offset += count;
   d4be0:	bf2d      	iteet	cs
   d4be2:	68e3      	ldrcs	r3, [r4, #12]
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
   d4be4:	68a3      	ldrcc	r3, [r4, #8]
   d4be6:	60e3      	strcc	r3, [r4, #12]
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
	if (count <= spaceAvailable) {
		offset += count;
   d4be8:	18c0      	addcs	r0, r0, r3
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
		truncated = true;
   d4bea:	bf36      	itet	cc
   d4bec:	2301      	movcc	r3, #1
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
	if (count <= spaceAvailable) {
		offset += count;
   d4bee:	60e0      	strcs	r0, [r4, #12]
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
		truncated = true;
   d4bf0:	f884 302a 	strbcc.w	r3, [r4, #42]	; 0x2a
   d4bf4:	bd70      	pop	{r4, r5, r6, pc}

000d4bf6 <_ZN10JsonWriter13insertsprintfEPKcz>:

}



void JsonWriter::insertsprintf(const char *fmt, ...) {
   d4bf6:	b40e      	push	{r1, r2, r3}
   d4bf8:	b503      	push	{r0, r1, lr}
   d4bfa:	aa03      	add	r2, sp, #12
   d4bfc:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list ap;
	va_start(ap, fmt);
   d4c00:	9201      	str	r2, [sp, #4]
	insertvsprintf(fmt, ap);
   d4c02:	f7ff ffe0 	bl	d4bc6 <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>
	va_end(ap);
}
   d4c06:	b002      	add	sp, #8
   d4c08:	f85d eb04 	ldr.w	lr, [sp], #4
   d4c0c:	b003      	add	sp, #12
   d4c0e:	4770      	bx	lr

000d4c10 <_ZN10JsonWriter12insertStringEPKcb>:
	else {
		truncated = true;
	}
}

void JsonWriter::insertString(const char *s, bool quoted) {
   d4c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4c14:	4604      	mov	r4, r0
   d4c16:	460e      	mov	r6, r1
	// 110xxxxx 10xxxxxx

	// 0x00000800 - 0x0000FFFF:
	// 1110xxxx 10xxxxxx 10xxxxxx

	if (quoted) {
   d4c18:	4617      	mov	r7, r2
   d4c1a:	b112      	cbz	r2, d4c22 <_ZN10JsonWriter12insertStringEPKcb+0x12>
		insertChar('"');
   d4c1c:	2122      	movs	r1, #34	; 0x22
   d4c1e:	f7ff ffab 	bl	d4b78 <_ZN10JsonWriter10insertCharEc>
	else {
		truncated = true;
	}
}

void JsonWriter::insertString(const char *s, bool quoted) {
   d4c22:	2500      	movs	r5, #0

	if (quoted) {
		insertChar('"');
	}

	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   d4c24:	5d71      	ldrb	r1, [r6, r5]
   d4c26:	eb06 0805 	add.w	r8, r6, r5
   d4c2a:	2900      	cmp	r1, #0
   d4c2c:	d071      	beq.n	d4d12 <_ZN10JsonWriter12insertStringEPKcb+0x102>
   d4c2e:	68e2      	ldr	r2, [r4, #12]
   d4c30:	68a3      	ldr	r3, [r4, #8]
   d4c32:	429a      	cmp	r2, r3
   d4c34:	d26d      	bcs.n	d4d12 <_ZN10JsonWriter12insertStringEPKcb+0x102>
		if (s[ii] & 0x80) {
   d4c36:	060b      	lsls	r3, r1, #24
   d4c38:	d533      	bpl.n	d4ca2 <_ZN10JsonWriter12insertStringEPKcb+0x92>
			// High bit set: convert UTF-8 to JSON Unicode escape
			if (((s[ii] & 0b11110000) == 0b11100000) && ((s[ii+1] & 0b11000000) == 0b10000000) && ((s[ii+2] & 0b11000000) == 0b10000000)) {
   d4c3a:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
   d4c3e:	2be0      	cmp	r3, #224	; 0xe0
   d4c40:	d117      	bne.n	d4c72 <_ZN10JsonWriter12insertStringEPKcb+0x62>
   d4c42:	f898 3001 	ldrb.w	r3, [r8, #1]
   d4c46:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   d4c4a:	2a80      	cmp	r2, #128	; 0x80
   d4c4c:	d111      	bne.n	d4c72 <_ZN10JsonWriter12insertStringEPKcb+0x62>
   d4c4e:	f105 0802 	add.w	r8, r5, #2
   d4c52:	f816 2008 	ldrb.w	r2, [r6, r8]
   d4c56:	f002 00c0 	and.w	r0, r2, #192	; 0xc0
   d4c5a:	2880      	cmp	r0, #128	; 0x80
   d4c5c:	d109      	bne.n	d4c72 <_ZN10JsonWriter12insertStringEPKcb+0x62>
				// 3-byte
				uint16_t utf16 = ((s[ii] & 0b1111) << 12) | ((s[ii+1] & 0b111111) << 6) | (s[ii+2] & 0b111111);
				insertsprintf("\\u%04X", utf16);
   d4c5e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   d4c62:	019b      	lsls	r3, r3, #6
   d4c64:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
   d4c68:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
   d4c6c:	431a      	orrs	r2, r3
   d4c6e:	b292      	uxth	r2, r2
   d4c70:	e011      	b.n	d4c96 <_ZN10JsonWriter12insertStringEPKcb+0x86>
				ii += 2; // plus one more in loop increment
			}
			else
			if (((s[ii] & 0b11100000) == 0b11000000) && ((s[ii+1] & 0b11000000) == 0b10000000)) {
   d4c72:	f001 03e0 	and.w	r3, r1, #224	; 0xe0
   d4c76:	2bc0      	cmp	r3, #192	; 0xc0
   d4c78:	d146      	bne.n	d4d08 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
   d4c7a:	f105 0801 	add.w	r8, r5, #1
   d4c7e:	f816 3008 	ldrb.w	r3, [r6, r8]
   d4c82:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   d4c86:	2a80      	cmp	r2, #128	; 0x80
   d4c88:	d13e      	bne.n	d4d08 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				// 2-byte
				uint16_t utf16 = ((s[ii] & 0b11111) << 6) | (s[ii+1] & 0b111111);
				insertsprintf("\\u%04X", utf16);
   d4c8a:	0189      	lsls	r1, r1, #6
   d4c8c:	f401 62f8 	and.w	r2, r1, #1984	; 0x7c0
   d4c90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   d4c94:	431a      	orrs	r2, r3
   d4c96:	4923      	ldr	r1, [pc, #140]	; (d4d24 <_ZN10JsonWriter12insertStringEPKcb+0x114>)
   d4c98:	4620      	mov	r0, r4
   d4c9a:	f7ff ffac 	bl	d4bf6 <_ZN10JsonWriter13insertsprintfEPKcz>
				ii++; // plus one more in loop increment
   d4c9e:	4645      	mov	r5, r8
   d4ca0:	e035      	b.n	d4d0e <_ZN10JsonWriter12insertStringEPKcb+0xfe>
				// Not valid unicode, just pass characters through
				insertChar(s[ii]);
			}
		}
		else {
			switch(s[ii]) {
   d4ca2:	290c      	cmp	r1, #12
   d4ca4:	d018      	beq.n	d4cd8 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
   d4ca6:	d80b      	bhi.n	d4cc0 <_ZN10JsonWriter12insertStringEPKcb+0xb0>
   d4ca8:	2909      	cmp	r1, #9
   d4caa:	d021      	beq.n	d4cf0 <_ZN10JsonWriter12insertStringEPKcb+0xe0>
   d4cac:	290a      	cmp	r1, #10
   d4cae:	d019      	beq.n	d4ce4 <_ZN10JsonWriter12insertStringEPKcb+0xd4>
   d4cb0:	2908      	cmp	r1, #8
   d4cb2:	d129      	bne.n	d4d08 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
			case '\b':
				insertChar('\\');
   d4cb4:	215c      	movs	r1, #92	; 0x5c
   d4cb6:	4620      	mov	r0, r4
   d4cb8:	f7ff ff5e 	bl	d4b78 <_ZN10JsonWriter10insertCharEc>
				insertChar('b');
   d4cbc:	2162      	movs	r1, #98	; 0x62
   d4cbe:	e023      	b.n	d4d08 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				// Not valid unicode, just pass characters through
				insertChar(s[ii]);
			}
		}
		else {
			switch(s[ii]) {
   d4cc0:	2922      	cmp	r1, #34	; 0x22
   d4cc2:	d01b      	beq.n	d4cfc <_ZN10JsonWriter12insertStringEPKcb+0xec>
   d4cc4:	295c      	cmp	r1, #92	; 0x5c
   d4cc6:	d019      	beq.n	d4cfc <_ZN10JsonWriter12insertStringEPKcb+0xec>
   d4cc8:	290d      	cmp	r1, #13
   d4cca:	d11d      	bne.n	d4d08 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('n');
				break;

			case '\r':
				insertChar('\\');
   d4ccc:	215c      	movs	r1, #92	; 0x5c
   d4cce:	4620      	mov	r0, r4
   d4cd0:	f7ff ff52 	bl	d4b78 <_ZN10JsonWriter10insertCharEc>
				insertChar('r');
   d4cd4:	2172      	movs	r1, #114	; 0x72
   d4cd6:	e017      	b.n	d4d08 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('b');
				break;

			case '\f':
				insertChar('\\');
   d4cd8:	215c      	movs	r1, #92	; 0x5c
   d4cda:	4620      	mov	r0, r4
   d4cdc:	f7ff ff4c 	bl	d4b78 <_ZN10JsonWriter10insertCharEc>
				insertChar('f');
   d4ce0:	2166      	movs	r1, #102	; 0x66
   d4ce2:	e011      	b.n	d4d08 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				break;

			case '\n':
				insertChar('\\');
   d4ce4:	215c      	movs	r1, #92	; 0x5c
   d4ce6:	4620      	mov	r0, r4
   d4ce8:	f7ff ff46 	bl	d4b78 <_ZN10JsonWriter10insertCharEc>
				insertChar('n');
   d4cec:	216e      	movs	r1, #110	; 0x6e
   d4cee:	e00b      	b.n	d4d08 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('r');
				break;

			case '\t':
				insertChar('\\');
   d4cf0:	215c      	movs	r1, #92	; 0x5c
   d4cf2:	4620      	mov	r0, r4
   d4cf4:	f7ff ff40 	bl	d4b78 <_ZN10JsonWriter10insertCharEc>
				insertChar('t');
   d4cf8:	2174      	movs	r1, #116	; 0x74
   d4cfa:	e005      	b.n	d4d08 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				break;

			case '"':
			case '\\':
				insertChar('\\');
   d4cfc:	215c      	movs	r1, #92	; 0x5c
   d4cfe:	4620      	mov	r0, r4
   d4d00:	f7ff ff3a 	bl	d4b78 <_ZN10JsonWriter10insertCharEc>
				insertChar(s[ii]);
   d4d04:	f898 1000 	ldrb.w	r1, [r8]
				break;

			default:
				insertChar(s[ii]);
   d4d08:	4620      	mov	r0, r4
   d4d0a:	f7ff ff35 	bl	d4b78 <_ZN10JsonWriter10insertCharEc>

	if (quoted) {
		insertChar('"');
	}

	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   d4d0e:	3501      	adds	r5, #1
   d4d10:	e788      	b.n	d4c24 <_ZN10JsonWriter12insertStringEPKcb+0x14>
				insertChar(s[ii]);
				break;
			}
		}
	}
	if (quoted) {
   d4d12:	b12f      	cbz	r7, d4d20 <_ZN10JsonWriter12insertStringEPKcb+0x110>
		insertChar('"');
   d4d14:	4620      	mov	r0, r4
   d4d16:	2122      	movs	r1, #34	; 0x22
	}

}
   d4d18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				break;
			}
		}
	}
	if (quoted) {
		insertChar('"');
   d4d1c:	f7ff bf2c 	b.w	d4b78 <_ZN10JsonWriter10insertCharEc>
   d4d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4d24:	000dba25 	.word	0x000dba25

000d4d28 <_ZN10JsonWriter20insertCheckSeparatorEv>:
		offset = bufferLen;
		truncated = true;
	}
}

void JsonWriter::insertCheckSeparator() {
   d4d28:	6942      	ldr	r2, [r0, #20]
   d4d2a:	eb00 0342 	add.w	r3, r0, r2, lsl #1
	if (context[contextIndex].isFirst) {
   d4d2e:	7e1a      	ldrb	r2, [r3, #24]
   d4d30:	b112      	cbz	r2, d4d38 <_ZN10JsonWriter20insertCheckSeparatorEv+0x10>
		context[contextIndex].isFirst = false;
   d4d32:	2200      	movs	r2, #0
   d4d34:	761a      	strb	r2, [r3, #24]
   d4d36:	4770      	bx	lr
	}
	else {
		insertChar(',');
   d4d38:	212c      	movs	r1, #44	; 0x2c
   d4d3a:	f7ff bf1d 	b.w	d4b78 <_ZN10JsonWriter10insertCharEc>

000d4d3e <_ZN10JsonWriter18startObjectOrArrayEcc>:

	truncated = false;

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   d4d3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   d4d40:	6943      	ldr	r3, [r0, #20]
   d4d42:	3301      	adds	r3, #1
   d4d44:	2b08      	cmp	r3, #8

	truncated = false;

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   d4d46:	460e      	mov	r6, r1
   d4d48:	4617      	mov	r7, r2
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   d4d4a:	d80e      	bhi.n	d4d6a <_ZN10JsonWriter18startObjectOrArrayEcc+0x2c>
		return false;
	}
	insertCheckSeparator();
   d4d4c:	f7ff ffec 	bl	d4d28 <_ZN10JsonWriter20insertCheckSeparatorEv>

	contextIndex++;
   d4d50:	6943      	ldr	r3, [r0, #20]
   d4d52:	1c5a      	adds	r2, r3, #1
   d4d54:	eb00 0343 	add.w	r3, r0, r3, lsl #1

	context[contextIndex].isFirst = true;
   d4d58:	2401      	movs	r4, #1
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
		return false;
	}
	insertCheckSeparator();

	contextIndex++;
   d4d5a:	6142      	str	r2, [r0, #20]

	context[contextIndex].isFirst = true;
	context[contextIndex].terminator = endChar;

	insertChar(startChar);
   d4d5c:	4631      	mov	r1, r6
	}
	insertCheckSeparator();

	contextIndex++;

	context[contextIndex].isFirst = true;
   d4d5e:	769c      	strb	r4, [r3, #26]
	context[contextIndex].terminator = endChar;
   d4d60:	76df      	strb	r7, [r3, #27]

	insertChar(startChar);
   d4d62:	f7ff ff09 	bl	d4b78 <_ZN10JsonWriter10insertCharEc>
   d4d66:	4620      	mov	r0, r4
   d4d68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
		return false;
   d4d6a:	2000      	movs	r0, #0
	context[contextIndex].isFirst = true;
	context[contextIndex].terminator = endChar;

	insertChar(startChar);
	return true;
}
   d4d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d4d70 <_ZN10JsonWriter11insertValueEf>:
	else {
		insertString("false");
	}
}

void JsonWriter::insertValue(float value) {
   d4d70:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4d72:	4604      	mov	r4, r0
   d4d74:	ee10 0a10 	vmov	r0, s0
	if (floatPlaces >= 0) {
   d4d78:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
   d4d7a:	2d00      	cmp	r5, #0
   d4d7c:	db0a      	blt.n	d4d94 <_ZN10JsonWriter11insertValueEf+0x24>
		insertsprintf("%.*f", floatPlaces, value);
   d4d7e:	f004 ffa7 	bl	d9cd0 <__aeabi_f2d>
   d4d82:	462a      	mov	r2, r5
   d4d84:	e9cd 0100 	strd	r0, r1, [sp]
   d4d88:	4908      	ldr	r1, [pc, #32]	; (d4dac <_ZN10JsonWriter11insertValueEf+0x3c>)
   d4d8a:	4620      	mov	r0, r4
   d4d8c:	f7ff ff33 	bl	d4bf6 <_ZN10JsonWriter13insertsprintfEPKcz>
	}
	else {
		insertsprintf("%f", value);
	}
}
   d4d90:	b003      	add	sp, #12
   d4d92:	bd30      	pop	{r4, r5, pc}
void JsonWriter::insertValue(float value) {
	if (floatPlaces >= 0) {
		insertsprintf("%.*f", floatPlaces, value);
	}
	else {
		insertsprintf("%f", value);
   d4d94:	f004 ff9c 	bl	d9cd0 <__aeabi_f2d>
   d4d98:	460b      	mov	r3, r1
   d4d9a:	4905      	ldr	r1, [pc, #20]	; (d4db0 <_ZN10JsonWriter11insertValueEf+0x40>)
   d4d9c:	4602      	mov	r2, r0
   d4d9e:	4620      	mov	r0, r4
	}
}
   d4da0:	b003      	add	sp, #12
   d4da2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
void JsonWriter::insertValue(float value) {
	if (floatPlaces >= 0) {
		insertsprintf("%.*f", floatPlaces, value);
	}
	else {
		insertsprintf("%f", value);
   d4da6:	f7ff bf26 	b.w	d4bf6 <_ZN10JsonWriter13insertsprintfEPKcz>
   d4daa:	bf00      	nop
   d4dac:	000dba37 	.word	0x000dba37
   d4db0:	000dba3c 	.word	0x000dba3c

000d4db4 <_GLOBAL__sub_I__ZN10JsonBufferC2Ev>:
   d4db4:	f001 b83c 	b.w	d5e30 <HAL_Pin_Map>

000d4db8 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d4db8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d4dba:	4602      	mov	r2, r0
   d4dbc:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d4dbe:	7913      	ldrb	r3, [r2, #4]
   d4dc0:	6895      	ldr	r5, [r2, #8]
   d4dc2:	b133      	cbz	r3, d4dd2 <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d4dc4:	b93d      	cbnz	r5, d4dd6 <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d4dc6:	490c      	ldr	r1, [pc, #48]	; (d4df8 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d4dc8:	b004      	add	sp, #16
   d4dca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d4dce:	f001 bea9 	b.w	d6b24 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d4dd2:	4b0a      	ldr	r3, [pc, #40]	; (d4dfc <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d4dd4:	e000      	b.n	d4dd8 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d4dd6:	4b0a      	ldr	r3, [pc, #40]	; (d4e00 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d4dd8:	7b16      	ldrb	r6, [r2, #12]
   d4dda:	4c0a      	ldr	r4, [pc, #40]	; (d4e04 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d4ddc:	490a      	ldr	r1, [pc, #40]	; (d4e08 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
   d4dde:	7b52      	ldrb	r2, [r2, #13]
   d4de0:	9202      	str	r2, [sp, #8]
   d4de2:	2e01      	cmp	r6, #1
   d4de4:	bf08      	it	eq
   d4de6:	4621      	moveq	r1, r4
   d4de8:	9101      	str	r1, [sp, #4]
   d4dea:	9500      	str	r5, [sp, #0]
   d4dec:	4a07      	ldr	r2, [pc, #28]	; (d4e0c <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d4dee:	2100      	movs	r1, #0
   d4df0:	f001 ffbf 	bl	d6d72 <_ZN5Print11printf_implEbPKcz>
  }
   d4df4:	b004      	add	sp, #16
   d4df6:	bd70      	pop	{r4, r5, r6, pc}
   d4df8:	000dba69 	.word	0x000dba69
   d4dfc:	000dbaf5 	.word	0x000dbaf5
   d4e00:	000dba58 	.word	0x000dba58
   d4e04:	000dba61 	.word	0x000dba61
   d4e08:	000dba65 	.word	0x000dba65
   d4e0c:	000dba7f 	.word	0x000dba7f

000d4e10 <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   d4e10:	22ff      	movs	r2, #255	; 0xff
   d4e12:	7402      	strb	r2, [r0, #16]
   d4e14:	7442      	strb	r2, [r0, #17]
   d4e16:	7482      	strb	r2, [r0, #18]
   d4e18:	74c2      	strb	r2, [r0, #19]
{ }
   d4e1a:	4770      	bx	lr

000d4e1c <_ZN15Adafruit_BME2807spixferEh>:
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d4e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
   d4e20:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4e24:	3301      	adds	r3, #1
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d4e26:	4605      	mov	r5, r0
   d4e28:	460f      	mov	r7, r1
    // hardware SPI
    if (_sck == -1)
   d4e2a:	d106      	bne.n	d4e3a <_ZN15Adafruit_BME2807spixferEh+0x1e>
        return SPI.transfer(x);
   d4e2c:	f003 fae8 	bl	d8400 <_ZN8particle7globals11instanceSpiEv>
   d4e30:	4639      	mov	r1, r7
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   d4e32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
    // hardware SPI
    if (_sck == -1)
        return SPI.transfer(x);
   d4e36:	f001 bc0b 	b.w	d6650 <_ZN8SPIClass8transferEh>
   d4e3a:	2607      	movs	r6, #7
   d4e3c:	2400      	movs	r4, #0
    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
   d4e3e:	f04f 0801 	mov.w	r8, #1

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
        digitalWrite(_sck, LOW);
   d4e42:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d4e46:	2100      	movs	r1, #0
   d4e48:	b280      	uxth	r0, r0
   d4e4a:	f003 fa94 	bl	d8376 <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   d4e4e:	f995 0011 	ldrsb.w	r0, [r5, #17]
   d4e52:	fa08 f106 	lsl.w	r1, r8, r6
   d4e56:	4039      	ands	r1, r7
   d4e58:	b280      	uxth	r0, r0
   d4e5a:	f003 fa8c 	bl	d8376 <digitalWrite>
        digitalWrite(_sck, HIGH);
   d4e5e:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d4e62:	2101      	movs	r1, #1
   d4e64:	b280      	uxth	r0, r0
   d4e66:	f003 fa86 	bl	d8376 <digitalWrite>
        if (digitalRead(_miso))
   d4e6a:	f995 0012 	ldrsb.w	r0, [r5, #18]
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
   d4e6e:	0064      	lsls	r4, r4, #1
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
   d4e70:	b280      	uxth	r0, r0
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
   d4e72:	b2e4      	uxtb	r4, r4
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
   d4e74:	f003 fa98 	bl	d83a8 <digitalRead>
   d4e78:	b108      	cbz	r0, d4e7e <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   d4e7a:	f044 0401 	orr.w	r4, r4, #1
    if (_sck == -1)
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
   d4e7e:	f116 36ff 	adds.w	r6, r6, #4294967295
   d4e82:	d2de      	bcs.n	d4e42 <_ZN15Adafruit_BME2807spixferEh+0x26>
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   d4e84:	4620      	mov	r0, r4
   d4e86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d4e8c <_ZN15Adafruit_BME2806write8Ehh>:
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   d4e8c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   d4e8e:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d4e92:	3301      	adds	r3, #1
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   d4e94:	4604      	mov	r4, r0
   d4e96:	460e      	mov	r6, r1
   d4e98:	4615      	mov	r5, r2
    if (_cs == -1) {
   d4e9a:	d111      	bne.n	d4ec0 <_ZN15Adafruit_BME2806write8Ehh+0x34>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d4e9c:	7901      	ldrb	r1, [r0, #4]
   d4e9e:	6800      	ldr	r0, [r0, #0]
   d4ea0:	f002 fdbf 	bl	d7a22 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4ea4:	6820      	ldr	r0, [r4, #0]
   d4ea6:	6803      	ldr	r3, [r0, #0]
   d4ea8:	4631      	mov	r1, r6
   d4eaa:	689b      	ldr	r3, [r3, #8]
   d4eac:	4798      	blx	r3
        _wire -> write((uint8_t)value);
   d4eae:	6820      	ldr	r0, [r4, #0]
   d4eb0:	6803      	ldr	r3, [r0, #0]
   d4eb2:	4629      	mov	r1, r5
   d4eb4:	689b      	ldr	r3, [r3, #8]
   d4eb6:	4798      	blx	r3
        _wire -> endTransmission();
   d4eb8:	6820      	ldr	r0, [r4, #0]
   d4eba:	f002 fdba 	bl	d7a32 <_ZN7TwoWire15endTransmissionEv>
   d4ebe:	e031      	b.n	d4f24 <_ZN15Adafruit_BME2806write8Ehh+0x98>
    } else {
        if (_sck == -1)
   d4ec0:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4ec4:	3301      	adds	r3, #1
   d4ec6:	d110      	bne.n	d4eea <_ZN15Adafruit_BME2806write8Ehh+0x5e>
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4ec8:	f003 fa9a 	bl	d8400 <_ZN8particle7globals11instanceSpiEv>
public:
  __SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
    : default_{false},
      clock_{clock},
      bitOrder_{bitOrder},
      dataMode_{dataMode}
   d4ecc:	4b16      	ldr	r3, [pc, #88]	; (d4f28 <_ZN15Adafruit_BME2806write8Ehh+0x9c>)
   d4ece:	4a17      	ldr	r2, [pc, #92]	; (d4f2c <_ZN15Adafruit_BME2806write8Ehh+0xa0>)
   d4ed0:	9300      	str	r3, [sp, #0]
   d4ed2:	9202      	str	r2, [sp, #8]
   d4ed4:	2300      	movs	r3, #0
   d4ed6:	2201      	movs	r2, #1
   d4ed8:	4669      	mov	r1, sp
   d4eda:	f88d 3004 	strb.w	r3, [sp, #4]
   d4ede:	f88d 200c 	strb.w	r2, [sp, #12]
   d4ee2:	f88d 300d 	strb.w	r3, [sp, #13]
   d4ee6:	f001 fb43 	bl	d6570 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
        digitalWrite(_cs, LOW);
   d4eea:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4eee:	2100      	movs	r1, #0
   d4ef0:	b280      	uxth	r0, r0
   d4ef2:	f003 fa40 	bl	d8376 <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   d4ef6:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   d4efa:	4620      	mov	r0, r4
   d4efc:	f7ff ff8e 	bl	d4e1c <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   d4f00:	4629      	mov	r1, r5
   d4f02:	4620      	mov	r0, r4
   d4f04:	f7ff ff8a 	bl	d4e1c <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   d4f08:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4f0c:	2101      	movs	r1, #1
   d4f0e:	b280      	uxth	r0, r0
   d4f10:	f003 fa31 	bl	d8376 <digitalWrite>
    if (_sck == -1)
   d4f14:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d4f18:	3301      	adds	r3, #1
   d4f1a:	d103      	bne.n	d4f24 <_ZN15Adafruit_BME2806write8Ehh+0x98>
        SPI.endTransaction(); // release the SPI bus
   d4f1c:	f003 fa70 	bl	d8400 <_ZN8particle7globals11instanceSpiEv>
   d4f20:	f001 fb0d 	bl	d653e <_ZN8SPIClass14endTransactionEv>
    }
}
   d4f24:	b004      	add	sp, #16
   d4f26:	bd70      	pop	{r4, r5, r6, pc}
   d4f28:	000dba54 	.word	0x000dba54
   d4f2c:	0007a120 	.word	0x0007a120

000d4f30 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d4f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.mode     = mode;
   d4f32:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d4f36:	f89d 6018 	ldrb.w	r6, [sp, #24]
   d4f3a:	f89d e01c 	ldrb.w	lr, [sp, #28]
   d4f3e:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _measReg.mode     = mode;
   d4f42:	f361 1587 	bfi	r5, r1, #6, #2
    _measReg.osrs_t   = tempSampling;
   d4f46:	f362 0502 	bfi	r5, r2, #0, #3
    _measReg.osrs_p   = pressSampling;
   d4f4a:	f363 05c5 	bfi	r5, r3, #3, #3
        
    
    _humReg.osrs_h    = humSampling;
   d4f4e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
    _measReg.mode     = mode;
    _measReg.osrs_t   = tempSampling;
    _measReg.osrs_p   = pressSampling;
   d4f52:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
        
    
    _humReg.osrs_h    = humSampling;
   d4f56:	f366 1347 	bfi	r3, r6, #5, #3
   d4f5a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.filter = filter;
   d4f5e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   d4f62:	f36e 03c5 	bfi	r3, lr, #3, #3
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d4f66:	4604      	mov	r4, r0
    _measReg.osrs_p   = pressSampling;
        
    
    _humReg.osrs_h    = humSampling;
    _configReg.filter = filter;
    _configReg.t_sb   = duration;
   d4f68:	f367 0302 	bfi	r3, r7, #0, #3
   d4f6c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    
    // you must make sure to also set REGISTER_CONTROL after setting the
    // CONTROLHUMID register, otherwise the values won't be applied (see DS 5.4.3)
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   d4f70:	f006 0207 	and.w	r2, r6, #7
   d4f74:	21f2      	movs	r1, #242	; 0xf2
   d4f76:	f7ff ff89 	bl	d4e8c <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
   d4f7a:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   d4f7e:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d4f82:	f002 0107 	and.w	r1, r2, #7
   d4f86:	009b      	lsls	r3, r3, #2
   d4f88:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   d4f8c:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   d4f90:	4620      	mov	r0, r4
   d4f92:	21f5      	movs	r1, #245	; 0xf5
   d4f94:	f7ff ff7a 	bl	d4e8c <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
   d4f98:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d4f9c:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d4fa0:	f002 0107 	and.w	r1, r2, #7
   d4fa4:	009b      	lsls	r3, r3, #2
   d4fa6:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   d4faa:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   d4fae:	4620      	mov	r0, r4
   d4fb0:	21f4      	movs	r1, #244	; 0xf4
}
   d4fb2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    
    // you must make sure to also set REGISTER_CONTROL after setting the
    // CONTROLHUMID register, otherwise the values won't be applied (see DS 5.4.3)
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
    write8(BME280_REGISTER_CONFIG, _configReg.get());
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d4fb6:	f7ff bf69 	b.w	d4e8c <_ZN15Adafruit_BME2806write8Ehh>
	...

000d4fbc <_ZN15Adafruit_BME2805read8Eh>:
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   d4fbc:	b530      	push	{r4, r5, lr}
    uint8_t value;
    
    if (_cs == -1) {
   d4fbe:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d4fc2:	3301      	adds	r3, #1
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   d4fc4:	b085      	sub	sp, #20
   d4fc6:	4604      	mov	r4, r0
   d4fc8:	460d      	mov	r5, r1
    uint8_t value;
    
    if (_cs == -1) {
   d4fca:	d116      	bne.n	d4ffa <_ZN15Adafruit_BME2805read8Eh+0x3e>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d4fcc:	7901      	ldrb	r1, [r0, #4]
   d4fce:	6800      	ldr	r0, [r0, #0]
   d4fd0:	f002 fd27 	bl	d7a22 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4fd4:	6820      	ldr	r0, [r4, #0]
   d4fd6:	6803      	ldr	r3, [r0, #0]
   d4fd8:	4629      	mov	r1, r5
   d4fda:	689b      	ldr	r3, [r3, #8]
   d4fdc:	4798      	blx	r3
        _wire -> endTransmission();
   d4fde:	6820      	ldr	r0, [r4, #0]
   d4fe0:	f002 fd27 	bl	d7a32 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
   d4fe4:	2201      	movs	r2, #1
   d4fe6:	7921      	ldrb	r1, [r4, #4]
   d4fe8:	6820      	ldr	r0, [r4, #0]
   d4fea:	f002 fd17 	bl	d7a1c <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   d4fee:	6820      	ldr	r0, [r4, #0]
   d4ff0:	6803      	ldr	r3, [r0, #0]
   d4ff2:	695b      	ldr	r3, [r3, #20]
   d4ff4:	4798      	blx	r3
   d4ff6:	b2c5      	uxtb	r5, r0
   d4ff8:	e032      	b.n	d5060 <_ZN15Adafruit_BME2805read8Eh+0xa4>
    } else {
        if (_sck == -1)
   d4ffa:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4ffe:	3301      	adds	r3, #1
   d5000:	d110      	bne.n	d5024 <_ZN15Adafruit_BME2805read8Eh+0x68>
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d5002:	f003 f9fd 	bl	d8400 <_ZN8particle7globals11instanceSpiEv>
   d5006:	4b18      	ldr	r3, [pc, #96]	; (d5068 <_ZN15Adafruit_BME2805read8Eh+0xac>)
   d5008:	4a18      	ldr	r2, [pc, #96]	; (d506c <_ZN15Adafruit_BME2805read8Eh+0xb0>)
   d500a:	9300      	str	r3, [sp, #0]
   d500c:	9202      	str	r2, [sp, #8]
   d500e:	2300      	movs	r3, #0
   d5010:	2201      	movs	r2, #1
   d5012:	4669      	mov	r1, sp
   d5014:	f88d 3004 	strb.w	r3, [sp, #4]
   d5018:	f88d 200c 	strb.w	r2, [sp, #12]
   d501c:	f88d 300d 	strb.w	r3, [sp, #13]
   d5020:	f001 faa6 	bl	d6570 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
        digitalWrite(_cs, LOW);
   d5024:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5028:	2100      	movs	r1, #0
   d502a:	b280      	uxth	r0, r0
   d502c:	f003 f9a3 	bl	d8376 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d5030:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d5034:	4620      	mov	r0, r4
   d5036:	f7ff fef1 	bl	d4e1c <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   d503a:	2100      	movs	r1, #0
   d503c:	4620      	mov	r0, r4
   d503e:	f7ff feed 	bl	d4e1c <_ZN15Adafruit_BME2807spixferEh>
   d5042:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   d5044:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5048:	2101      	movs	r1, #1
   d504a:	b280      	uxth	r0, r0
   d504c:	f003 f993 	bl	d8376 <digitalWrite>
        if (_sck == -1)
   d5050:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d5054:	3301      	adds	r3, #1
   d5056:	d103      	bne.n	d5060 <_ZN15Adafruit_BME2805read8Eh+0xa4>
            SPI.endTransaction(); // release the SPI bus
   d5058:	f003 f9d2 	bl	d8400 <_ZN8particle7globals11instanceSpiEv>
   d505c:	f001 fa6f 	bl	d653e <_ZN8SPIClass14endTransactionEv>
    }
    return value;
}
   d5060:	4628      	mov	r0, r5
   d5062:	b005      	add	sp, #20
   d5064:	bd30      	pop	{r4, r5, pc}
   d5066:	bf00      	nop
   d5068:	000dba54 	.word	0x000dba54
   d506c:	0007a120 	.word	0x0007a120

000d5070 <_ZN15Adafruit_BME2806read16Eh>:
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
   d5070:	b530      	push	{r4, r5, lr}
    uint16_t value;

    if (_cs == -1) {
   d5072:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d5076:	3301      	adds	r3, #1
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
   d5078:	b085      	sub	sp, #20
   d507a:	4604      	mov	r4, r0
   d507c:	460d      	mov	r5, r1
    uint16_t value;

    if (_cs == -1) {
   d507e:	d11d      	bne.n	d50bc <_ZN15Adafruit_BME2806read16Eh+0x4c>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d5080:	7901      	ldrb	r1, [r0, #4]
   d5082:	6800      	ldr	r0, [r0, #0]
   d5084:	f002 fccd 	bl	d7a22 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d5088:	6820      	ldr	r0, [r4, #0]
   d508a:	6803      	ldr	r3, [r0, #0]
   d508c:	4629      	mov	r1, r5
   d508e:	689b      	ldr	r3, [r3, #8]
   d5090:	4798      	blx	r3
        _wire -> endTransmission();
   d5092:	6820      	ldr	r0, [r4, #0]
   d5094:	f002 fccd 	bl	d7a32 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
   d5098:	2202      	movs	r2, #2
   d509a:	7921      	ldrb	r1, [r4, #4]
   d509c:	6820      	ldr	r0, [r4, #0]
   d509e:	f002 fcbd 	bl	d7a1c <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
   d50a2:	6820      	ldr	r0, [r4, #0]
   d50a4:	6803      	ldr	r3, [r0, #0]
   d50a6:	695b      	ldr	r3, [r3, #20]
   d50a8:	4798      	blx	r3
   d50aa:	4605      	mov	r5, r0
   d50ac:	6820      	ldr	r0, [r4, #0]
   d50ae:	6803      	ldr	r3, [r0, #0]
   d50b0:	695b      	ldr	r3, [r3, #20]
   d50b2:	4798      	blx	r3
   d50b4:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d50b8:	b285      	uxth	r5, r0
   d50ba:	e039      	b.n	d5130 <_ZN15Adafruit_BME2806read16Eh+0xc0>
    } else {
        if (_sck == -1)
   d50bc:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d50c0:	3301      	adds	r3, #1
   d50c2:	d110      	bne.n	d50e6 <_ZN15Adafruit_BME2806read16Eh+0x76>
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d50c4:	f003 f99c 	bl	d8400 <_ZN8particle7globals11instanceSpiEv>
   d50c8:	4b1b      	ldr	r3, [pc, #108]	; (d5138 <_ZN15Adafruit_BME2806read16Eh+0xc8>)
   d50ca:	4a1c      	ldr	r2, [pc, #112]	; (d513c <_ZN15Adafruit_BME2806read16Eh+0xcc>)
   d50cc:	9300      	str	r3, [sp, #0]
   d50ce:	9202      	str	r2, [sp, #8]
   d50d0:	2300      	movs	r3, #0
   d50d2:	2201      	movs	r2, #1
   d50d4:	4669      	mov	r1, sp
   d50d6:	f88d 3004 	strb.w	r3, [sp, #4]
   d50da:	f88d 200c 	strb.w	r2, [sp, #12]
   d50de:	f88d 300d 	strb.w	r3, [sp, #13]
   d50e2:	f001 fa45 	bl	d6570 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
        digitalWrite(_cs, LOW);
   d50e6:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d50ea:	2100      	movs	r1, #0
   d50ec:	b280      	uxth	r0, r0
   d50ee:	f003 f942 	bl	d8376 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d50f2:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d50f6:	4620      	mov	r0, r4
   d50f8:	f7ff fe90 	bl	d4e1c <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   d50fc:	2100      	movs	r1, #0
   d50fe:	4620      	mov	r0, r4
   d5100:	f7ff fe8c 	bl	d4e1c <_ZN15Adafruit_BME2807spixferEh>
   d5104:	2100      	movs	r1, #0
   d5106:	4605      	mov	r5, r0
   d5108:	4620      	mov	r0, r4
   d510a:	f7ff fe87 	bl	d4e1c <_ZN15Adafruit_BME2807spixferEh>
   d510e:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d5112:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   d5114:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5118:	2101      	movs	r1, #1
   d511a:	b280      	uxth	r0, r0
   d511c:	f003 f92b 	bl	d8376 <digitalWrite>
        if (_sck == -1)
   d5120:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d5124:	3301      	adds	r3, #1
   d5126:	d103      	bne.n	d5130 <_ZN15Adafruit_BME2806read16Eh+0xc0>
            SPI.endTransaction(); // release the SPI bus
   d5128:	f003 f96a 	bl	d8400 <_ZN8particle7globals11instanceSpiEv>
   d512c:	f001 fa07 	bl	d653e <_ZN8SPIClass14endTransactionEv>
    }

    return value;
}
   d5130:	4628      	mov	r0, r5
   d5132:	b005      	add	sp, #20
   d5134:	bd30      	pop	{r4, r5, pc}
   d5136:	bf00      	nop
   d5138:	000dba54 	.word	0x000dba54
   d513c:	0007a120 	.word	0x0007a120

000d5140 <_ZN15Adafruit_BME2809read16_LEEh>:
    @brief  Reads a signed 16 bit little endian value over I2C or SPI
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   d5140:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   d5142:	f7ff ff95 	bl	d5070 <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   d5146:	ba40      	rev16	r0, r0
}
   d5148:	b280      	uxth	r0, r0
   d514a:	bd08      	pop	{r3, pc}

000d514c <_ZN15Adafruit_BME2806read24Eh>:
    @param reg the register address to read from
    @returns the 24 bit data value read from the device
*/
/**************************************************************************/
uint32_t Adafruit_BME280::read24(byte reg)
{
   d514c:	b530      	push	{r4, r5, lr}
    uint32_t value;

    if (_cs == -1) {
   d514e:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d5152:	3301      	adds	r3, #1
    @param reg the register address to read from
    @returns the 24 bit data value read from the device
*/
/**************************************************************************/
uint32_t Adafruit_BME280::read24(byte reg)
{
   d5154:	b085      	sub	sp, #20
   d5156:	4604      	mov	r4, r0
   d5158:	460d      	mov	r5, r1
    uint32_t value;

    if (_cs == -1) {
   d515a:	d121      	bne.n	d51a0 <_ZN15Adafruit_BME2806read24Eh+0x54>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d515c:	7901      	ldrb	r1, [r0, #4]
   d515e:	6800      	ldr	r0, [r0, #0]
   d5160:	f002 fc5f 	bl	d7a22 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d5164:	6820      	ldr	r0, [r4, #0]
   d5166:	6803      	ldr	r3, [r0, #0]
   d5168:	4629      	mov	r1, r5
   d516a:	689b      	ldr	r3, [r3, #8]
   d516c:	4798      	blx	r3
        _wire -> endTransmission();
   d516e:	6820      	ldr	r0, [r4, #0]
   d5170:	f002 fc5f 	bl	d7a32 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)3);
   d5174:	2203      	movs	r2, #3
   d5176:	7921      	ldrb	r1, [r4, #4]
   d5178:	6820      	ldr	r0, [r4, #0]
   d517a:	f002 fc4f 	bl	d7a1c <_ZN7TwoWire11requestFromEhj>

        value = _wire -> read();
   d517e:	6820      	ldr	r0, [r4, #0]
   d5180:	6803      	ldr	r3, [r0, #0]
   d5182:	695b      	ldr	r3, [r3, #20]
   d5184:	4798      	blx	r3
        value <<= 8;
   d5186:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d5188:	6820      	ldr	r0, [r4, #0]
   d518a:	6803      	ldr	r3, [r0, #0]
   d518c:	695b      	ldr	r3, [r3, #20]
   d518e:	4798      	blx	r3
   d5190:	4328      	orrs	r0, r5
        value <<= 8;
   d5192:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d5194:	6820      	ldr	r0, [r4, #0]
   d5196:	6803      	ldr	r3, [r0, #0]
   d5198:	695b      	ldr	r3, [r3, #20]
   d519a:	4798      	blx	r3
   d519c:	4305      	orrs	r5, r0
   d519e:	e03d      	b.n	d521c <_ZN15Adafruit_BME2806read24Eh+0xd0>
    } else {
        if (_sck == -1)
   d51a0:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d51a4:	3301      	adds	r3, #1
   d51a6:	d110      	bne.n	d51ca <_ZN15Adafruit_BME2806read24Eh+0x7e>
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d51a8:	f003 f92a 	bl	d8400 <_ZN8particle7globals11instanceSpiEv>
   d51ac:	4b1d      	ldr	r3, [pc, #116]	; (d5224 <_ZN15Adafruit_BME2806read24Eh+0xd8>)
   d51ae:	4a1e      	ldr	r2, [pc, #120]	; (d5228 <_ZN15Adafruit_BME2806read24Eh+0xdc>)
   d51b0:	9300      	str	r3, [sp, #0]
   d51b2:	9202      	str	r2, [sp, #8]
   d51b4:	2300      	movs	r3, #0
   d51b6:	2201      	movs	r2, #1
   d51b8:	4669      	mov	r1, sp
   d51ba:	f88d 3004 	strb.w	r3, [sp, #4]
   d51be:	f88d 200c 	strb.w	r2, [sp, #12]
   d51c2:	f88d 300d 	strb.w	r3, [sp, #13]
   d51c6:	f001 f9d3 	bl	d6570 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
        digitalWrite(_cs, LOW);
   d51ca:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d51ce:	2100      	movs	r1, #0
   d51d0:	b280      	uxth	r0, r0
   d51d2:	f003 f8d0 	bl	d8376 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d51d6:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d51da:	4620      	mov	r0, r4
   d51dc:	f7ff fe1e 	bl	d4e1c <_ZN15Adafruit_BME2807spixferEh>

        value = spixfer(0);
   d51e0:	2100      	movs	r1, #0
   d51e2:	4620      	mov	r0, r4
   d51e4:	f7ff fe1a 	bl	d4e1c <_ZN15Adafruit_BME2807spixferEh>
        value <<= 8;
        value |= spixfer(0);
   d51e8:	2100      	movs	r1, #0
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
        digitalWrite(_cs, LOW);
        spixfer(reg | 0x80); // read, bit 7 high

        value = spixfer(0);
        value <<= 8;
   d51ea:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d51ec:	4620      	mov	r0, r4
   d51ee:	f7ff fe15 	bl	d4e1c <_ZN15Adafruit_BME2807spixferEh>
   d51f2:	4328      	orrs	r0, r5
        value <<= 8;
   d51f4:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d51f6:	2100      	movs	r1, #0
   d51f8:	4620      	mov	r0, r4
   d51fa:	f7ff fe0f 	bl	d4e1c <_ZN15Adafruit_BME2807spixferEh>
   d51fe:	4305      	orrs	r5, r0

        digitalWrite(_cs, HIGH);
   d5200:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5204:	2101      	movs	r1, #1
   d5206:	b280      	uxth	r0, r0
   d5208:	f003 f8b5 	bl	d8376 <digitalWrite>
        if (_sck == -1)
   d520c:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d5210:	3301      	adds	r3, #1
   d5212:	d103      	bne.n	d521c <_ZN15Adafruit_BME2806read24Eh+0xd0>
            SPI.endTransaction(); // release the SPI bus
   d5214:	f003 f8f4 	bl	d8400 <_ZN8particle7globals11instanceSpiEv>
   d5218:	f001 f991 	bl	d653e <_ZN8SPIClass14endTransactionEv>
    }

    return value;
}
   d521c:	4628      	mov	r0, r5
   d521e:	b005      	add	sp, #20
   d5220:	bd30      	pop	{r4, r5, pc}
   d5222:	bf00      	nop
   d5224:	000dba54 	.word	0x000dba54
   d5228:	0007a120 	.word	0x0007a120

000d522c <_ZN15Adafruit_BME28016readCoefficientsEv>:
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
   d522c:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d522e:	2188      	movs	r1, #136	; 0x88
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
   d5230:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d5232:	f7ff ff85 	bl	d5140 <_ZN15Adafruit_BME2809read16_LEEh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d5236:	218a      	movs	r1, #138	; 0x8a
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d5238:	82a0      	strh	r0, [r4, #20]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d523a:	4620      	mov	r0, r4
   d523c:	f7ff ff80 	bl	d5140 <_ZN15Adafruit_BME2809read16_LEEh>
   d5240:	218c      	movs	r1, #140	; 0x8c
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   d5242:	82e0      	strh	r0, [r4, #22]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d5244:	4620      	mov	r0, r4
   d5246:	f7ff ff7b 	bl	d5140 <_ZN15Adafruit_BME2809read16_LEEh>
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d524a:	218e      	movs	r1, #142	; 0x8e
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   d524c:	8320      	strh	r0, [r4, #24]

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d524e:	4620      	mov	r0, r4
   d5250:	f7ff ff76 	bl	d5140 <_ZN15Adafruit_BME2809read16_LEEh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d5254:	2190      	movs	r1, #144	; 0x90
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d5256:	8360      	strh	r0, [r4, #26]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d5258:	4620      	mov	r0, r4
   d525a:	f7ff ff71 	bl	d5140 <_ZN15Adafruit_BME2809read16_LEEh>
   d525e:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   d5260:	83a0      	strh	r0, [r4, #28]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d5262:	4620      	mov	r0, r4
   d5264:	f7ff ff6c 	bl	d5140 <_ZN15Adafruit_BME2809read16_LEEh>
   d5268:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   d526a:	83e0      	strh	r0, [r4, #30]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d526c:	4620      	mov	r0, r4
   d526e:	f7ff ff67 	bl	d5140 <_ZN15Adafruit_BME2809read16_LEEh>
   d5272:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   d5274:	8420      	strh	r0, [r4, #32]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d5276:	4620      	mov	r0, r4
   d5278:	f7ff ff62 	bl	d5140 <_ZN15Adafruit_BME2809read16_LEEh>
   d527c:	2198      	movs	r1, #152	; 0x98

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   d527e:	8460      	strh	r0, [r4, #34]	; 0x22
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d5280:	4620      	mov	r0, r4
   d5282:	f7ff ff5d 	bl	d5140 <_ZN15Adafruit_BME2809read16_LEEh>
   d5286:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   d5288:	84a0      	strh	r0, [r4, #36]	; 0x24
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d528a:	4620      	mov	r0, r4
   d528c:	f7ff ff58 	bl	d5140 <_ZN15Adafruit_BME2809read16_LEEh>
   d5290:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   d5292:	84e0      	strh	r0, [r4, #38]	; 0x26
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d5294:	4620      	mov	r0, r4
   d5296:	f7ff ff53 	bl	d5140 <_ZN15Adafruit_BME2809read16_LEEh>
   d529a:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   d529c:	8520      	strh	r0, [r4, #40]	; 0x28
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d529e:	4620      	mov	r0, r4
   d52a0:	f7ff ff4e 	bl	d5140 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d52a4:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   d52a6:	8560      	strh	r0, [r4, #42]	; 0x2a

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d52a8:	4620      	mov	r0, r4
   d52aa:	f7ff fe87 	bl	d4fbc <_ZN15Adafruit_BME2805read8Eh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d52ae:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d52b0:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d52b4:	4620      	mov	r0, r4
   d52b6:	f7ff ff43 	bl	d5140 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d52ba:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   d52bc:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d52be:	4620      	mov	r0, r4
   d52c0:	f7ff fe7c 	bl	d4fbc <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d52c4:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d52c6:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d52ca:	4620      	mov	r0, r4
   d52cc:	f7ff fe76 	bl	d4fbc <_ZN15Adafruit_BME2805read8Eh>
   d52d0:	21e5      	movs	r1, #229	; 0xe5
   d52d2:	4605      	mov	r5, r0
   d52d4:	4620      	mov	r0, r4
   d52d6:	f7ff fe71 	bl	d4fbc <_ZN15Adafruit_BME2805read8Eh>
   d52da:	f000 000f 	and.w	r0, r0, #15
   d52de:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
   d52e2:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   d52e4:	21e6      	movs	r1, #230	; 0xe6
   d52e6:	4620      	mov	r0, r4
   d52e8:	f7ff fe68 	bl	d4fbc <_ZN15Adafruit_BME2805read8Eh>
   d52ec:	21e5      	movs	r1, #229	; 0xe5
   d52ee:	4605      	mov	r5, r0
   d52f0:	4620      	mov	r0, r4
   d52f2:	f7ff fe63 	bl	d4fbc <_ZN15Adafruit_BME2805read8Eh>
   d52f6:	1100      	asrs	r0, r0, #4
   d52f8:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
   d52fc:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   d52fe:	21e7      	movs	r1, #231	; 0xe7
   d5300:	4620      	mov	r0, r4
   d5302:	f7ff fe5b 	bl	d4fbc <_ZN15Adafruit_BME2805read8Eh>
   d5306:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
   d530a:	bd38      	pop	{r3, r4, r5, pc}

000d530c <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
    @brief return true if chip is busy reading cal data
    @returns true if reading calibration, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::isReadingCalibration(void)
{
   d530c:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   d530e:	21f3      	movs	r1, #243	; 0xf3
   d5310:	f7ff fe54 	bl	d4fbc <_ZN15Adafruit_BME2805read8Eh>

  return (rStatus & (1 << 0)) != 0;
}
   d5314:	f000 0001 	and.w	r0, r0, #1
   d5318:	bd08      	pop	{r3, pc}

000d531a <_ZN15Adafruit_BME2804initEv>:
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::init()
{
   d531a:	b530      	push	{r4, r5, lr}
   d531c:	4604      	mov	r4, r0
    // init I2C or SPI sensor interface
    if (_cs == -1) {
   d531e:	f990 0010 	ldrsb.w	r0, [r0, #16]
   d5322:	1c42      	adds	r2, r0, #1
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::init()
{
   d5324:	b085      	sub	sp, #20
    // init I2C or SPI sensor interface
    if (_cs == -1) {
   d5326:	d103      	bne.n	d5330 <_ZN15Adafruit_BME2804initEv+0x16>
        // I2C
        _wire -> begin();
   d5328:	6820      	ldr	r0, [r4, #0]
   d532a:	f002 fb43 	bl	d79b4 <_ZN7TwoWire5beginEv>
   d532e:	e022      	b.n	d5376 <_ZN15Adafruit_BME2804initEv+0x5c>
    } else {
        digitalWrite(_cs, HIGH);
   d5330:	2101      	movs	r1, #1
   d5332:	b280      	uxth	r0, r0
   d5334:	f003 f81f 	bl	d8376 <digitalWrite>
        pinMode(_cs, OUTPUT);
   d5338:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d533c:	2101      	movs	r1, #1
   d533e:	b280      	uxth	r0, r0
   d5340:	f003 f808 	bl	d8354 <pinMode>
        if (_sck == -1) {
   d5344:	f994 0013 	ldrsb.w	r0, [r4, #19]
   d5348:	1c43      	adds	r3, r0, #1
   d534a:	d104      	bne.n	d5356 <_ZN15Adafruit_BME2804initEv+0x3c>
            // hardware SPI
            SPI.begin();
   d534c:	f003 f858 	bl	d8400 <_ZN8particle7globals11instanceSpiEv>
   d5350:	f001 f8e4 	bl	d651c <_ZN8SPIClass5beginEv>
   d5354:	e00f      	b.n	d5376 <_ZN15Adafruit_BME2804initEv+0x5c>
        } else {
            // software SPI
            pinMode(_sck, OUTPUT);
   d5356:	2101      	movs	r1, #1
   d5358:	b280      	uxth	r0, r0
   d535a:	f002 fffb 	bl	d8354 <pinMode>
            pinMode(_mosi, OUTPUT);
   d535e:	f994 0011 	ldrsb.w	r0, [r4, #17]
   d5362:	2101      	movs	r1, #1
   d5364:	b280      	uxth	r0, r0
   d5366:	f002 fff5 	bl	d8354 <pinMode>
            pinMode(_miso, INPUT);
   d536a:	f994 0012 	ldrsb.w	r0, [r4, #18]
   d536e:	2100      	movs	r1, #0
   d5370:	b280      	uxth	r0, r0
   d5372:	f002 ffef 	bl	d8354 <pinMode>
        }
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d5376:	21d0      	movs	r1, #208	; 0xd0
   d5378:	4620      	mov	r0, r4
   d537a:	f7ff fe1f 	bl	d4fbc <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
   d537e:	2860      	cmp	r0, #96	; 0x60
            pinMode(_miso, INPUT);
        }
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d5380:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
   d5382:	d120      	bne.n	d53c6 <_ZN15Adafruit_BME2804initEv+0xac>
        return false;

    // reset the device using soft-reset
    // this makes sure the IIR is off, etc.
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   d5384:	4620      	mov	r0, r4
   d5386:	22b6      	movs	r2, #182	; 0xb6
   d5388:	21e0      	movs	r1, #224	; 0xe0
   d538a:	f7ff fd7f 	bl	d4e8c <_ZN15Adafruit_BME2806write8Ehh>

    // wait for chip to wake up.
    delay(300);
   d538e:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d5392:	f001 fdaf 	bl	d6ef4 <delay>

    // if chip is still reading calibration, delay
    while (isReadingCalibration())
   d5396:	4620      	mov	r0, r4
   d5398:	f7ff ffb8 	bl	d530c <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   d539c:	4605      	mov	r5, r0
   d539e:	b108      	cbz	r0, d53a4 <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
   d53a0:	2064      	movs	r0, #100	; 0x64
   d53a2:	e7f6      	b.n	d5392 <_ZN15Adafruit_BME2804initEv+0x78>

    readCoefficients(); // read trimming parameters, see DS 4.2.2
   d53a4:	4620      	mov	r0, r4
   d53a6:	f7ff ff41 	bl	d522c <_ZN15Adafruit_BME28016readCoefficientsEv>

    setSampling(); // use defaults
   d53aa:	2305      	movs	r3, #5
   d53ac:	9300      	str	r3, [sp, #0]
   d53ae:	461a      	mov	r2, r3
   d53b0:	2103      	movs	r1, #3
   d53b2:	4620      	mov	r0, r4
   d53b4:	9502      	str	r5, [sp, #8]
   d53b6:	9501      	str	r5, [sp, #4]
   d53b8:	f7ff fdba 	bl	d4f30 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>

    delay(100);
   d53bc:	2064      	movs	r0, #100	; 0x64
   d53be:	f001 fd99 	bl	d6ef4 <delay>

    return true;
   d53c2:	2001      	movs	r0, #1
   d53c4:	e000      	b.n	d53c8 <_ZN15Adafruit_BME2804initEv+0xae>
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
    if (_sensorID != 0x60)
        return false;
   d53c6:	2000      	movs	r0, #0
    setSampling(); // use defaults

    delay(100);

    return true;
}
   d53c8:	b005      	add	sp, #20
   d53ca:	bd30      	pop	{r4, r5, pc}

000d53cc <_ZN15Adafruit_BME2805beginEh>:
    @param addr the I2C address the device can be found on
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::begin(uint8_t addr)
{
   d53cc:	b510      	push	{r4, lr}
	_i2caddr = addr;
   d53ce:	7101      	strb	r1, [r0, #4]
    @param addr the I2C address the device can be found on
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::begin(uint8_t addr)
{
   d53d0:	4604      	mov	r4, r0
	_i2caddr = addr;
	_wire = &Wire;
   d53d2:	f003 f84f 	bl	d8474 <_Z19__fetch_global_Wirev>
   d53d6:	6020      	str	r0, [r4, #0]
	return init();
   d53d8:	4620      	mov	r0, r4
}
   d53da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
/**************************************************************************/
bool Adafruit_BME280::begin(uint8_t addr)
{
	_i2caddr = addr;
	_wire = &Wire;
	return init();
   d53de:	f7ff bf9c 	b.w	d531a <_ZN15Adafruit_BME2804initEv>
	...

000d53e4 <_ZN15Adafruit_BME28015readTemperatureEv>:
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   d53e4:	b510      	push	{r4, lr}
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d53e6:	21fa      	movs	r1, #250	; 0xfa
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   d53e8:	4604      	mov	r4, r0
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d53ea:	f7ff feaf 	bl	d514c <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
   d53ee:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   d53f2:	d01e      	beq.n	d5432 <_ZN15Adafruit_BME28015readTemperatureEv+0x4e>
        return NAN;
    adc_T >>= 4;

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d53f4:	8aa2      	ldrh	r2, [r4, #20]
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   d53f6:	ed9f 7a10 	vldr	s14, [pc, #64]	; d5438 <_ZN15Adafruit_BME28015readTemperatureEv+0x54>

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
             
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
   d53fa:	ebc2 2320 	rsb	r3, r2, r0, asr #8
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;
   d53fe:	0052      	lsls	r2, r2, #1
   d5400:	ebc2 10e0 	rsb	r0, r2, r0, asr #7
   d5404:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
   d5408:	435b      	muls	r3, r3
   d540a:	4350      	muls	r0, r2
   d540c:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
   d5410:	131b      	asrs	r3, r3, #12
   d5412:	4353      	muls	r3, r2
   d5414:	139b      	asrs	r3, r3, #14
   d5416:	eb03 20e0 	add.w	r0, r3, r0, asr #11
   d541a:	60e0      	str	r0, [r4, #12]

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   d541c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   d5420:	3080      	adds	r0, #128	; 0x80
   d5422:	1200      	asrs	r0, r0, #8
   d5424:	ee07 0a90 	vmov	s15, r0
   d5428:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d542c:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d5430:	bd10      	pop	{r4, pc}
{
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
    if (adc_T == 0x800000) // value in case temp measurement was disabled
        return NAN;
   d5432:	ed9f 0a02 	vldr	s0, [pc, #8]	; d543c <_ZN15Adafruit_BME28015readTemperatureEv+0x58>

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
}
   d5436:	bd10      	pop	{r4, pc}
   d5438:	42c80000 	.word	0x42c80000
   d543c:	7fc00000 	.word	0x7fc00000

000d5440 <_ZN15Adafruit_BME28012readPressureEv>:
/*!
    @brief  Returns the pressure from the sensor
    @returns the pressure value (in Pascal) read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readPressure(void) {
   d5440:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5444:	4606      	mov	r6, r0
    int64_t var1, var2, p;

    readTemperature(); // must be done first to get t_fine
   d5446:	f7ff ffcd 	bl	d53e4 <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   d544a:	21f7      	movs	r1, #247	; 0xf7
   d544c:	4630      	mov	r0, r6
   d544e:	f7ff fe7d 	bl	d514c <_ZN15Adafruit_BME2806read24Eh>
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   d5452:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
float Adafruit_BME280::readPressure(void) {
    int64_t var1, var2, p;

    readTemperature(); // must be done first to get t_fine

    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   d5456:	4607      	mov	r7, r0
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   d5458:	f000 80c1 	beq.w	d55de <_ZN15Adafruit_BME28012readPressureEv+0x19e>
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
   d545c:	68f4      	ldr	r4, [r6, #12]
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   d545e:	f9b6 201c 	ldrsh.w	r2, [r6, #28]
    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
   d5462:	17e5      	asrs	r5, r4, #31
   d5464:	f5b4 34fa 	subs.w	r4, r4, #128000	; 0x1f400
   d5468:	f145 35ff 	adc.w	r5, r5, #4294967295
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d546c:	fba4 8904 	umull	r8, r9, r4, r4
   d5470:	fb04 f305 	mul.w	r3, r4, r5
   d5474:	eb09 0943 	add.w	r9, r9, r3, lsl #1
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   d5478:	fb02 f105 	mul.w	r1, r2, r5
   d547c:	17d3      	asrs	r3, r2, #31
   d547e:	fb04 1103 	mla	r1, r4, r3, r1
   d5482:	fba2 2304 	umull	r2, r3, r2, r4
   d5486:	440b      	add	r3, r1
   d5488:	0319      	lsls	r1, r3, #12
   d548a:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
   d548e:	0310      	lsls	r0, r2, #12
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   d5490:	f9b6 201e 	ldrsh.w	r2, [r6, #30]
   d5494:	17d3      	asrs	r3, r2, #31
   d5496:	fb02 fe09 	mul.w	lr, r2, r9
   d549a:	fb08 ee03 	mla	lr, r8, r3, lr
   d549e:	fba2 2308 	umull	r2, r3, r2, r8
   d54a2:	4473      	add	r3, lr
   d54a4:	ea4f 2a12 	mov.w	sl, r2, lsr #8
   d54a8:	ea4a 6a03 	orr.w	sl, sl, r3, lsl #24
   d54ac:	eb1a 0a00 	adds.w	sl, sl, r0
   d54b0:	8b72      	ldrh	r2, [r6, #26]
   d54b2:	ea4f 2b23 	mov.w	fp, r3, asr #8
   d54b6:	eb4b 0b01 	adc.w	fp, fp, r1
   d54ba:	f11a 0000 	adds.w	r0, sl, #0
   d54be:	f54b 4100 	adc.w	r1, fp, #32768	; 0x8000
   d54c2:	fba0 ab02 	umull	sl, fp, r0, r2
   d54c6:	fb02 bb01 	mla	fp, r2, r1, fp
   d54ca:	ea4f 026b 	mov.w	r2, fp, asr #1
   d54ce:	ea4f 73eb 	mov.w	r3, fp, asr #31

    if (var1 == 0) {
   d54d2:	ea52 0103 	orrs.w	r1, r2, r3
   d54d6:	f000 8086 	beq.w	d55e6 <_ZN15Adafruit_BME28012readPressureEv+0x1a6>
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d54da:	f9b6 a024 	ldrsh.w	sl, [r6, #36]	; 0x24
   d54de:	ea4f 7bea 	mov.w	fp, sl, asr #31
   d54e2:	fb0a f109 	mul.w	r1, sl, r9
   d54e6:	fb08 110b 	mla	r1, r8, fp, r1
   d54ea:	fbaa 8908 	umull	r8, r9, sl, r8
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d54ee:	f9b6 a022 	ldrsh.w	sl, [r6, #34]	; 0x22
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d54f2:	4489      	add	r9, r1
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d54f4:	ea4f 7bea 	mov.w	fp, sl, asr #31
   d54f8:	fb0a f105 	mul.w	r1, sl, r5
   d54fc:	fb04 110b 	mla	r1, r4, fp, r1
   d5500:	fbaa 4504 	umull	r4, r5, sl, r4
   d5504:	440d      	add	r5, r1
   d5506:	ea4f 4b45 	mov.w	fp, r5, lsl #17
   d550a:	ea4f 4a44 	mov.w	sl, r4, lsl #17

    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
   d550e:	1138      	asrs	r0, r7, #4
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d5510:	eb1a 0a08 	adds.w	sl, sl, r8

    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
   d5514:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d5518:	ea4b 3bd4 	orr.w	fp, fp, r4, lsr #15
   d551c:	eb4b 0b09 	adc.w	fp, fp, r9

    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
   d5520:	ea4f 79e0 	mov.w	r9, r0, asr #31
   d5524:	ea4f 75c9 	mov.w	r5, r9, lsl #31
   d5528:	ea45 0550 	orr.w	r5, r5, r0, lsr #1
   d552c:	07c4      	lsls	r4, r0, #31
   d552e:	f9b6 0020 	ldrsh.w	r0, [r6, #32]
   d5532:	f04f 0800 	mov.w	r8, #0
   d5536:	eb18 080a 	adds.w	r8, r8, sl
   d553a:	ea4f 09c0 	mov.w	r9, r0, lsl #3
   d553e:	eb49 090b 	adc.w	r9, r9, fp
   d5542:	f640 4735 	movw	r7, #3125	; 0xc35
   d5546:	ebb4 0408 	subs.w	r4, r4, r8
   d554a:	eb65 0509 	sbc.w	r5, r5, r9
   d554e:	fba4 0107 	umull	r0, r1, r4, r7
   d5552:	fb07 1105 	mla	r1, r7, r5, r1
   d5556:	f005 f865 	bl	da624 <__aeabi_ldivmod>
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d555a:	f9b6 202a 	ldrsh.w	r2, [r6, #42]	; 0x2a
    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   d555e:	134c      	asrs	r4, r1, #13
   d5560:	0b45      	lsrs	r5, r0, #13
   d5562:	ea45 45c1 	orr.w	r5, r5, r1, lsl #19
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d5566:	fb02 f704 	mul.w	r7, r2, r4
   d556a:	17d3      	asrs	r3, r2, #31
   d556c:	fb05 7703 	mla	r7, r5, r3, r7
   d5570:	fba2 2305 	umull	r2, r3, r2, r5
   d5574:	443b      	add	r3, r7
   d5576:	4354      	muls	r4, r2
   d5578:	fb05 4403 	mla	r4, r5, r3, r4
   d557c:	fba2 2305 	umull	r2, r3, r2, r5
   d5580:	4423      	add	r3, r4
   d5582:	0e54      	lsrs	r4, r2, #25
   d5584:	ea44 14c3 	orr.w	r4, r4, r3, lsl #7
   d5588:	f9b6 2028 	ldrsh.w	r2, [r6, #40]	; 0x28
   d558c:	1824      	adds	r4, r4, r0
   d558e:	ea4f 6563 	mov.w	r5, r3, asr #25
   d5592:	414d      	adcs	r5, r1
   d5594:	17d3      	asrs	r3, r2, #31
   d5596:	4351      	muls	r1, r2
   d5598:	fb00 1303 	mla	r3, r0, r3, r1
   d559c:	fba2 0100 	umull	r0, r1, r2, r0
   d55a0:	4419      	add	r1, r3
   d55a2:	0cc2      	lsrs	r2, r0, #19
   d55a4:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
   d55a8:	1912      	adds	r2, r2, r4
    return (float)p/256;
   d55aa:	f9b6 4026 	ldrsh.w	r4, [r6, #38]	; 0x26
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d55ae:	ea4f 43e1 	mov.w	r3, r1, asr #19
   d55b2:	416b      	adcs	r3, r5
   d55b4:	0a10      	lsrs	r0, r2, #8
    return (float)p/256;
   d55b6:	17e5      	asrs	r5, r4, #31
   d55b8:	0122      	lsls	r2, r4, #4
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d55ba:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
   d55be:	1219      	asrs	r1, r3, #8
    return (float)p/256;
   d55c0:	012b      	lsls	r3, r5, #4
   d55c2:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
   d55c6:	1880      	adds	r0, r0, r2
   d55c8:	4159      	adcs	r1, r3
   d55ca:	f004 ffed 	bl	da5a8 <__aeabi_l2f>
   d55ce:	ed9f 0a08 	vldr	s0, [pc, #32]	; d55f0 <_ZN15Adafruit_BME28012readPressureEv+0x1b0>
   d55d2:	ee07 0a90 	vmov	s15, r0
   d55d6:	ee27 0a80 	vmul.f32	s0, s15, s0
   d55da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

    readTemperature(); // must be done first to get t_fine

    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
   d55de:	ed9f 0a05 	vldr	s0, [pc, #20]	; d55f4 <_ZN15Adafruit_BME28012readPressureEv+0x1b4>
   d55e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;

    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
   d55e6:	ed9f 0a04 	vldr	s0, [pc, #16]	; d55f8 <_ZN15Adafruit_BME28012readPressureEv+0x1b8>
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
    return (float)p/256;
}
   d55ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d55ee:	bf00      	nop
   d55f0:	3b800000 	.word	0x3b800000
   d55f4:	7fc00000 	.word	0x7fc00000
   d55f8:	00000000 	.word	0x00000000

000d55fc <_ZN15Adafruit_BME28012readHumidityEv>:
/*!
    @brief  Returns the humidity from the sensor
    @returns the humidity value read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readHumidity(void) {
   d55fc:	b510      	push	{r4, lr}
   d55fe:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
   d5600:	f7ff fef0 	bl	d53e4 <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
   d5604:	21fd      	movs	r1, #253	; 0xfd
   d5606:	4620      	mov	r0, r4
   d5608:	f7ff fd32 	bl	d5070 <_ZN15Adafruit_BME2806read16Eh>
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
   d560c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   d5610:	d038      	beq.n	d5684 <_ZN15Adafruit_BME28012readHumidityEv+0x88>
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d5612:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
        return NAN;
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));
   d5616:	68e2      	ldr	r2, [r4, #12]

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d5618:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
   d561c:	051b      	lsls	r3, r3, #20
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
        return NAN;
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));
   d561e:	f5a2 3296 	sub.w	r2, r2, #76800	; 0x12c00

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d5622:	ebc3 3380 	rsb	r3, r3, r0, lsl #14
   d5626:	fb02 3311 	mls	r3, r2, r1, r3
   d562a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   d562e:	13d9      	asrs	r1, r3, #15
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   d5630:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   d5634:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5638:	4353      	muls	r3, r2
   d563a:	12db      	asrs	r3, r3, #11
   d563c:	4342      	muls	r2, r0
   d563e:	1292      	asrs	r2, r2, #10
   d5640:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   d5644:	4353      	muls	r3, r2
   d5646:	129b      	asrs	r3, r3, #10
   d5648:	f9b4 202e 	ldrsh.w	r2, [r4, #46]	; 0x2e
   d564c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   d5650:	4353      	muls	r3, r2
   d5652:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   d5656:	139b      	asrs	r3, r3, #14
   d5658:	434b      	muls	r3, r1

    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   d565a:	13da      	asrs	r2, r3, #15
                               ((int32_t)_bme280_calib.dig_H1)) >> 4));
   d565c:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
   d5660:	4352      	muls	r2, r2
   d5662:	11d2      	asrs	r2, r2, #7
   d5664:	434a      	muls	r2, r1
   d5666:	eba3 1322 	sub.w	r3, r3, r2, asr #4

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
   d566a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
    float h = (v_x1_u32r>>12);
    return  h / 1024.0;
   d566e:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
   d5672:	bfa8      	it	ge
   d5674:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
   d5678:	131b      	asrs	r3, r3, #12
   d567a:	ee00 3a10 	vmov	s0, r3
   d567e:	eeba 0acb 	vcvt.f32.s32	s0, s0, #10
   d5682:	bd10      	pop	{r4, pc}
float Adafruit_BME280::readHumidity(void) {
    readTemperature(); // must be done first to get t_fine

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
        return NAN;
   d5684:	ed9f 0a01 	vldr	s0, [pc, #4]	; d568c <_ZN15Adafruit_BME28012readHumidityEv+0x90>

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
    float h = (v_x1_u32r>>12);
    return  h / 1024.0;
}
   d5688:	bd10      	pop	{r4, pc}
   d568a:	bf00      	nop
   d568c:	7fc00000 	.word	0x7fc00000

000d5690 <_ZN15Adafruit_BME28012readAltitudeEf>:
    @param  seaLevel      Sea-level pressure in hPa
    @returns the altitude value read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readAltitude(float seaLevel)
{
   d5690:	b508      	push	{r3, lr}
   d5692:	ed2d 8b02 	vpush	{d8}
   d5696:	eeb0 8a40 	vmov.f32	s16, s0

    // Note that using the equation from wikipedia can give bad results
    // at high altitude. See this thread for more information:
    //  http://forums.adafruit.com/viewtopic.php?f=22&t=58064

    float atmospheric = readPressure() / 100.0F;
   d569a:	f7ff fed1 	bl	d5440 <_ZN15Adafruit_BME28012readPressureEv>
    return 44330.0 * (1.0 - pow(atmospheric / seaLevel, 0.1903));
   d569e:	eddf 7a16 	vldr	s15, [pc, #88]	; d56f8 <_ZN15Adafruit_BME28012readAltitudeEf+0x68>
   d56a2:	ee80 0a27 	vdiv.f32	s0, s0, s15
   d56a6:	eec0 7a08 	vdiv.f32	s15, s0, s16
   d56aa:	ee17 0a90 	vmov	r0, s15
   d56ae:	f004 fb0f 	bl	d9cd0 <__aeabi_f2d>
   d56b2:	ed9f 1b0d 	vldr	d1, [pc, #52]	; d56e8 <_ZN15Adafruit_BME28012readAltitudeEf+0x58>
   d56b6:	ec41 0b10 	vmov	d0, r0, r1
   d56ba:	f003 f86d 	bl	d8798 <pow>
   d56be:	2000      	movs	r0, #0
   d56c0:	ec53 2b10 	vmov	r2, r3, d0
   d56c4:	490d      	ldr	r1, [pc, #52]	; (d56fc <_ZN15Adafruit_BME28012readAltitudeEf+0x6c>)
   d56c6:	f004 f9a3 	bl	d9a10 <__aeabi_dsub>
   d56ca:	a309      	add	r3, pc, #36	; (adr r3, d56f0 <_ZN15Adafruit_BME28012readAltitudeEf+0x60>)
   d56cc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d56d0:	f004 fb52 	bl	d9d78 <__aeabi_dmul>
   d56d4:	f004 fe48 	bl	da368 <__aeabi_d2f>
}
   d56d8:	ecbd 8b02 	vpop	{d8}
   d56dc:	ee00 0a10 	vmov	s0, r0
   d56e0:	bd08      	pop	{r3, pc}
   d56e2:	bf00      	nop
   d56e4:	f3af 8000 	nop.w
   d56e8:	1a36e2eb 	.word	0x1a36e2eb
   d56ec:	3fc85bc0 	.word	0x3fc85bc0
   d56f0:	00000000 	.word	0x00000000
   d56f4:	40e5a540 	.word	0x40e5a540
   d56f8:	42c80000 	.word	0x42c80000
   d56fc:	3ff00000 	.word	0x3ff00000

000d5700 <_ZN15Adafruit_BME2808sensorIDEv>:
*/
/**************************************************************************/
uint32_t Adafruit_BME280::sensorID(void)
{
	return _sensorID;
   d5700:	6880      	ldr	r0, [r0, #8]
   d5702:	4770      	bx	lr

000d5704 <_GLOBAL__sub_I__ZN15Adafruit_BME280C2Ev>:
   d5704:	f000 bb94 	b.w	d5e30 <HAL_Pin_Map>

000d5708 <_ZN19Adafruit_MQTT_SPARK9connectedEv>:
    client->stop();
  }
  return true;
}

bool Adafruit_MQTT_SPARK::connected() {
   d5708:	b508      	push	{r3, lr}
  // Return true if connected, false if not connected.
  return client->connected();
   d570a:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   d570e:	6803      	ldr	r3, [r0, #0]
   d5710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5712:	4798      	blx	r3
}
   d5714:	3000      	adds	r0, #0
   d5716:	bf18      	it	ne
   d5718:	2001      	movne	r0, #1
   d571a:	bd08      	pop	{r3, pc}

000d571c <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht>:
    delay(MQTT_CLIENT_READINTERVAL_MS);
  }
  return len;
}

bool Adafruit_MQTT_SPARK::sendPacket(uint8_t *buffer, uint16_t len) {
   d571c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d571e:	4606      	mov	r6, r0
   d5720:	460f      	mov	r7, r1
   d5722:	4614      	mov	r4, r2
  uint16_t ret = 0;

  while (len > 0) {
   d5724:	b1c4      	cbz	r4, d5758 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x3c>
    if (client->connected()) {
   d5726:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d572a:	6803      	ldr	r3, [r0, #0]
   d572c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d572e:	4798      	blx	r3
   d5730:	b908      	cbnz	r0, d5736 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x1a>
	DEBUG_PRINTLN("Failed to send packet.");
	return false;
      }
    } else {
      DEBUG_PRINTLN(F("Connection failed!"));
      return false;
   d5732:	2000      	movs	r0, #0
   d5734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (client->connected()) {
      // send 250 bytes at most at a time, can adjust this later based on Client

      uint16_t sendlen = min(len, 250);
      //Serial.print("Sending: "); Serial.println(sendlen);
      ret = client->write(buffer, sendlen);
   d5736:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
max (T a, U b) { return ((a)>(b)?(a):(b)); }

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d573a:	2cfa      	cmp	r4, #250	; 0xfa
   d573c:	6803      	ldr	r3, [r0, #0]
   d573e:	4625      	mov	r5, r4
   d5740:	bfa8      	it	ge
   d5742:	25fa      	movge	r5, #250	; 0xfa
   d5744:	68db      	ldr	r3, [r3, #12]
   d5746:	462a      	mov	r2, r5
   d5748:	4639      	mov	r1, r7
   d574a:	4798      	blx	r3
   d574c:	b280      	uxth	r0, r0
      DEBUG_PRINT(F("Client sendPacket returned: ")); DEBUG_PRINTLN(ret);
      len -= ret;
   d574e:	1a24      	subs	r4, r4, r0

      if (ret != sendlen) {
   d5750:	4285      	cmp	r5, r0

      uint16_t sendlen = min(len, 250);
      //Serial.print("Sending: "); Serial.println(sendlen);
      ret = client->write(buffer, sendlen);
      DEBUG_PRINT(F("Client sendPacket returned: ")); DEBUG_PRINTLN(ret);
      len -= ret;
   d5752:	b2a4      	uxth	r4, r4

      if (ret != sendlen) {
   d5754:	d0e6      	beq.n	d5724 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x8>
   d5756:	e7ec      	b.n	d5732 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x16>
    } else {
      DEBUG_PRINTLN(F("Connection failed!"));
      return false;
    }
  }
  return true;
   d5758:	2001      	movs	r0, #1
}
   d575a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d575c <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts>:
  // Return true if connected, false if not connected.
  return client->connected();
}

uint16_t Adafruit_MQTT_SPARK::readPacket(uint8_t *buffer, uint16_t maxlen,
                                          int16_t timeout) {
   d575c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5760:	4606      	mov	r6, r0
   d5762:	4688      	mov	r8, r1
   d5764:	4691      	mov	r9, r2
   d5766:	461f      	mov	r7, r3
   d5768:	461d      	mov	r5, r3
  /* Read data until either the connection is closed, or the idle timeout is reached. */
  uint16_t len = 0;
   d576a:	2400      	movs	r4, #0
  int16_t t = timeout;

  while (client->connected() && (timeout >= 0)) {
   d576c:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d5770:	6803      	ldr	r3, [r0, #0]
   d5772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5774:	4798      	blx	r3
   d5776:	b1d0      	cbz	r0, d57ae <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
   d5778:	2d00      	cmp	r5, #0
   d577a:	db18      	blt.n	d57ae <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
    //DEBUG_PRINT('.');
    while (client->available()) {
   d577c:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d5780:	6803      	ldr	r3, [r0, #0]
   d5782:	691b      	ldr	r3, [r3, #16]
   d5784:	4798      	blx	r3
   d5786:	b160      	cbz	r0, d57a2 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x46>
      //DEBUG_PRINT('!');
      char c = client->read();
   d5788:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d578c:	6803      	ldr	r3, [r0, #0]
   d578e:	695b      	ldr	r3, [r3, #20]
   d5790:	4798      	blx	r3
      timeout = t;  // reset the timeout
      buffer[len] = c;
   d5792:	f808 0004 	strb.w	r0, [r8, r4]
      //DEBUG_PRINTLN((uint8_t)c, HEX);
      len++;
   d5796:	3401      	adds	r4, #1
   d5798:	b2a4      	uxth	r4, r4
      if (len == maxlen) {  // we read all we want, bail
   d579a:	454c      	cmp	r4, r9
   d579c:	d007      	beq.n	d57ae <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
  while (client->connected() && (timeout >= 0)) {
    //DEBUG_PRINT('.');
    while (client->available()) {
      //DEBUG_PRINT('!');
      char c = client->read();
      timeout = t;  // reset the timeout
   d579e:	463d      	mov	r5, r7
   d57a0:	e7ec      	b.n	d577c <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x20>
        DEBUG_PRINT(F("Read data:\t"));
        DEBUG_PRINTBUFFER(buffer, len);
        return len;
      }
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   d57a2:	3d0a      	subs	r5, #10
    delay(MQTT_CLIENT_READINTERVAL_MS);
   d57a4:	200a      	movs	r0, #10
        DEBUG_PRINT(F("Read data:\t"));
        DEBUG_PRINTBUFFER(buffer, len);
        return len;
      }
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   d57a6:	b22d      	sxth	r5, r5
    delay(MQTT_CLIENT_READINTERVAL_MS);
   d57a8:	f001 fba4 	bl	d6ef4 <delay>
                                          int16_t timeout) {
  /* Read data until either the connection is closed, or the idle timeout is reached. */
  uint16_t len = 0;
  int16_t t = timeout;

  while (client->connected() && (timeout >= 0)) {
   d57ac:	e7de      	b.n	d576c <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x10>
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
    delay(MQTT_CLIENT_READINTERVAL_MS);
  }
  return len;
}
   d57ae:	4620      	mov	r0, r4
   d57b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d57b4 <_ZN19Adafruit_MQTT_SPARK13connectServerEv>:
        }
    }
    return true;
}

bool Adafruit_MQTT_SPARK::connectServer(){
   d57b4:	b570      	push	{r4, r5, r6, lr}
   d57b6:	4604      	mov	r4, r0
  // Grab server name from flash and copy to buffer for name resolution.
  memset(buffer, 0, sizeof(buffer));
   d57b8:	f100 0522 	add.w	r5, r0, #34	; 0x22
   d57bc:	2296      	movs	r2, #150	; 0x96
   d57be:	2100      	movs	r1, #0
   d57c0:	4628      	mov	r0, r5
   d57c2:	f005 faaf 	bl	dad24 <memset>
  strcpy((char *)buffer, servername);
   d57c6:	6861      	ldr	r1, [r4, #4]
   d57c8:	4628      	mov	r0, r5
   d57ca:	f005 fae5 	bl	dad98 <strcpy>
  DEBUG_PRINT(F("Connecting to: ")); DEBUG_PRINTLN((char *)buffer);
  // Connect and check for success (0 result).
  int r = client->connect((char *)buffer, portnum);
   d57ce:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   d57d2:	8922      	ldrh	r2, [r4, #8]
   d57d4:	6803      	ldr	r3, [r0, #0]
   d57d6:	4629      	mov	r1, r5
   d57d8:	6a5e      	ldr	r6, [r3, #36]	; 0x24
   d57da:	2300      	movs	r3, #0
   d57dc:	47b0      	blx	r6
  DEBUG_PRINT(F("Connect result: ")); DEBUG_PRINTLN(r);
  return r != 0;
}
   d57de:	3000      	adds	r0, #0
   d57e0:	bf18      	it	ne
   d57e2:	2001      	movne	r0, #1
   d57e4:	bd70      	pop	{r4, r5, r6, pc}

000d57e6 <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv>:

bool Adafruit_MQTT_SPARK::disconnectServer() {
   d57e6:	b510      	push	{r4, lr}
   d57e8:	4604      	mov	r4, r0
  // Stop connection if connected and return success (stop has no indication of
  // failure).
  if (client->connected()) {
   d57ea:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   d57ee:	6803      	ldr	r3, [r0, #0]
   d57f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d57f2:	4798      	blx	r3
   d57f4:	b120      	cbz	r0, d5800 <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv+0x1a>
    client->stop();
   d57f6:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   d57fa:	6803      	ldr	r3, [r0, #0]
   d57fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d57fe:	4798      	blx	r3
  }
  return true;
}
   d5800:	2001      	movs	r0, #1
   d5802:	bd10      	pop	{r4, pc}

000d5804 <_ZN19Adafruit_MQTT_SPARK6UpdateEv>:
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#include "Adafruit_MQTT_SPARK.h"

bool Adafruit_MQTT_SPARK::Update()
{
   d5804:	b570      	push	{r4, r5, r6, lr}
    // Stop if already connected.
    if (!connected())
   d5806:	6803      	ldr	r3, [r0, #0]
   d5808:	689b      	ldr	r3, [r3, #8]
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#include "Adafruit_MQTT_SPARK.h"

bool Adafruit_MQTT_SPARK::Update()
{
   d580a:	4604      	mov	r4, r0
    // Stop if already connected.
    if (!connected())
   d580c:	4798      	blx	r3
   d580e:	b9c8      	cbnz	r0, d5844 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x40>
    {
        DEBUG_PRINT(F("Connecting to MQTT... "));
        
        uint8_t retries = 0;
        for(int8_t ret = connect() ; ret != 0 && retries < 3 ; ret = connect() , retries++)
   d5810:	4620      	mov	r0, r4
   d5812:	f000 fa60 	bl	d5cd6 <_ZN13Adafruit_MQTT7connectEv>
   d5816:	2504      	movs	r5, #4
   d5818:	b170      	cbz	r0, d5838 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x34>
   d581a:	3d01      	subs	r5, #1
   d581c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d5820:	d00a      	beq.n	d5838 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x34>
        { // connect will return 0 for connected
            DEBUG_PRINT(connectErrorString(ret));
            DEBUG_PRINT(F("Retrying MQTT connection in 5 seconds..."));
            disconnect();
   d5822:	4620      	mov	r0, r4
   d5824:	f000 f8aa 	bl	d597c <_ZN13Adafruit_MQTT10disconnectEv>
            delay(5000);  // wait 5 seconds
   d5828:	f241 3088 	movw	r0, #5000	; 0x1388
   d582c:	f001 fb62 	bl	d6ef4 <delay>
    if (!connected())
    {
        DEBUG_PRINT(F("Connecting to MQTT... "));
        
        uint8_t retries = 0;
        for(int8_t ret = connect() ; ret != 0 && retries < 3 ; ret = connect() , retries++)
   d5830:	4620      	mov	r0, r4
   d5832:	f000 fa50 	bl	d5cd6 <_ZN13Adafruit_MQTT7connectEv>
   d5836:	e7ef      	b.n	d5818 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x14>
            DEBUG_PRINT(F("Retrying MQTT connection in 5 seconds..."));
            disconnect();
            delay(5000);  // wait 5 seconds
        }
      
        if( connected() )
   d5838:	6823      	ldr	r3, [r4, #0]
   d583a:	4620      	mov	r0, r4
   d583c:	689b      	ldr	r3, [r3, #8]
            DEBUG_PRINT(F("Failed to connect"));
            return false;
        }
    }
    return true;
}
   d583e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            DEBUG_PRINT(F("Retrying MQTT connection in 5 seconds..."));
            disconnect();
            delay(5000);  // wait 5 seconds
        }
      
        if( connected() )
   d5842:	4718      	bx	r3
            DEBUG_PRINT(F("Failed to connect"));
            return false;
        }
    }
    return true;
}
   d5844:	bd70      	pop	{r4, r5, r6, pc}

000d5846 <_GLOBAL__sub_I__ZN19Adafruit_MQTT_SPARK6UpdateEv>:
   d5846:	f000 baf3 	b.w	d5e30 <HAL_Pin_Map>

000d584a <_ZL11stringprintPhPKct.constprop.3>:
  memmove(p, s, len);
  return p+len;
}
*/

static uint8_t *stringprint(uint8_t *p, const char *s, uint16_t maxlen=0) {
   d584a:	b570      	push	{r4, r5, r6, lr}
   d584c:	4604      	mov	r4, r0
  // If maxlen is specified (has a non-zero value) then use it as the maximum
  // length of the source string to write to the buffer.  Otherwise write
  // the entire source string.
  uint16_t len = strlen(s);
   d584e:	4608      	mov	r0, r1
  memmove(p, s, len);
  return p+len;
}
*/

static uint8_t *stringprint(uint8_t *p, const char *s, uint16_t maxlen=0) {
   d5850:	460e      	mov	r6, r1
  // If maxlen is specified (has a non-zero value) then use it as the maximum
  // length of the source string to write to the buffer.  Otherwise write
  // the entire source string.
  uint16_t len = strlen(s);
   d5852:	f005 fac4 	bl	dadde <strlen>
  /*
  for (uint8_t i=0; i<len; i++) {
    Serial.write(pgm_read_byte(s+i));
  }
  */
  p[0] = len >> 8; p++;
   d5856:	1203      	asrs	r3, r0, #8
   d5858:	7023      	strb	r3, [r4, #0]
  p[0] = len & 0xFF; p++;
   d585a:	7060      	strb	r0, [r4, #1]
   d585c:	b285      	uxth	r5, r0
   d585e:	3402      	adds	r4, #2
  strncpy((char *)p, s, len);
   d5860:	462a      	mov	r2, r5
   d5862:	4631      	mov	r1, r6
   d5864:	4620      	mov	r0, r4
   d5866:	f005 fafc 	bl	dae62 <strncpy>
  return p+len;
}
   d586a:	1960      	adds	r0, r4, r5
   d586c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5870 <_ZN13Adafruit_MQTTC1EPKctS1_S1_>:
  packet_id_counter = 0;

}


Adafruit_MQTT::Adafruit_MQTT(const char *server,
   d5870:	b530      	push	{r4, r5, lr}
                             const char *user,
                             const char *pass) {
  servername = server;
  portnum = port;
  clientid = "";
  username = user;
   d5872:	6103      	str	r3, [r0, #16]
  password = pass;
   d5874:	9b03      	ldr	r3, [sp, #12]


Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
   d5876:	4d0d      	ldr	r5, [pc, #52]	; (d58ac <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x3c>)
  servername = server;
  portnum = port;
   d5878:	8102      	strh	r2, [r0, #8]
  clientid = "";
  username = user;
  password = pass;
   d587a:	6143      	str	r3, [r0, #20]
                             uint16_t port,
                             const char *user,
                             const char *pass) {
  servername = server;
  portnum = port;
  clientid = "";
   d587c:	4a0c      	ldr	r2, [pc, #48]	; (d58b0 <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x40>)


Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
   d587e:	6005      	str	r5, [r0, #0]
  username = user;
  password = pass;

  // reset subscriptions
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    subscriptions[i] = 0;
   d5880:	2300      	movs	r3, #0

Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
  servername = server;
   d5882:	6041      	str	r1, [r0, #4]
  portnum = port;
  clientid = "";
   d5884:	60c2      	str	r2, [r0, #12]
  username = user;
  password = pass;

  // reset subscriptions
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    subscriptions[i] = 0;
   d5886:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
   d588a:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
   d588e:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
   d5892:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
   d5896:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
  }

  will_topic = 0;
   d589a:	6183      	str	r3, [r0, #24]
  will_payload = 0;
   d589c:	61c3      	str	r3, [r0, #28]
  will_qos = 0;
   d589e:	f880 3020 	strb.w	r3, [r0, #32]
  will_retain = 0;
   d58a2:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

  packet_id_counter = 0;
   d58a6:	f8a0 30b8 	strh.w	r3, [r0, #184]	; 0xb8

}
   d58aa:	bd30      	pop	{r4, r5, pc}
   d58ac:	000dbacc 	.word	0x000dbacc
   d58b0:	000dbaf5 	.word	0x000dbaf5

000d58b4 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>:
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   d58b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   d58b8:	fa0f fa83 	sxth.w	sl, r3
   d58bc:	6803      	ldr	r3, [r0, #0]
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   d58be:	9201      	str	r2, [sp, #4]
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   d58c0:	699d      	ldr	r5, [r3, #24]
   d58c2:	2201      	movs	r2, #1
   d58c4:	4653      	mov	r3, sl
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   d58c6:	4606      	mov	r6, r0
   d58c8:	460c      	mov	r4, r1
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   d58ca:	47a8      	blx	r5
  if (rlen != 1) return 0;
   d58cc:	b2c0      	uxtb	r0, r0
   d58ce:	2801      	cmp	r0, #1
   d58d0:	d001      	beq.n	d58d6 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x22>
   d58d2:	2000      	movs	r0, #0
   d58d4:	e034      	b.n	d5940 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x8c>

  DEBUG_PRINT(F("Packet Type:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);
  pbuff++;
   d58d6:	1c65      	adds	r5, r4, #1
   d58d8:	f104 0b05 	add.w	fp, r4, #5

  uint32_t value = 0;
  uint32_t multiplier = 1;
   d58dc:	4680      	mov	r8, r0
  if (rlen != 1) return 0;

  DEBUG_PRINT(F("Packet Type:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);
  pbuff++;

  uint32_t value = 0;
   d58de:	f04f 0900 	mov.w	r9, #0
  uint32_t multiplier = 1;
  uint8_t encodedByte;

  do {
    rlen = readPacket(pbuff, 1, timeout);
   d58e2:	6833      	ldr	r3, [r6, #0]
   d58e4:	699b      	ldr	r3, [r3, #24]
   d58e6:	2201      	movs	r2, #1
   d58e8:	461f      	mov	r7, r3
   d58ea:	4629      	mov	r1, r5
   d58ec:	4653      	mov	r3, sl
   d58ee:	4630      	mov	r0, r6
   d58f0:	47b8      	blx	r7
    if (rlen != 1) return 0;
   d58f2:	b2c0      	uxtb	r0, r0
   d58f4:	2801      	cmp	r0, #1
   d58f6:	d1ec      	bne.n	d58d2 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x1e>
    encodedByte = pbuff[0]; // save the last read val
   d58f8:	f815 3b01 	ldrb.w	r3, [r5], #1
    pbuff++; // get ready for reading the next byte
    uint32_t intermediate = encodedByte & 0x7F;
   d58fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
    intermediate *= multiplier;
    value += intermediate;
    multiplier *= 128;
    if (multiplier > (128UL*128UL*128UL)) {
   d5900:	455d      	cmp	r5, fp
    if (rlen != 1) return 0;
    encodedByte = pbuff[0]; // save the last read val
    pbuff++; // get ready for reading the next byte
    uint32_t intermediate = encodedByte & 0x7F;
    intermediate *= multiplier;
    value += intermediate;
   d5902:	fb02 9908 	mla	r9, r2, r8, r9
    multiplier *= 128;
   d5906:	ea4f 18c8 	mov.w	r8, r8, lsl #7
    if (multiplier > (128UL*128UL*128UL)) {
   d590a:	d0e2      	beq.n	d58d2 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x1e>

  uint32_t value = 0;
  uint32_t multiplier = 1;
  uint8_t encodedByte;

  do {
   d590c:	061b      	lsls	r3, r3, #24
   d590e:	d4e8      	bmi.n	d58e2 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x2e>
    }
  } while (encodedByte & 0x80);

  DEBUG_PRINT(F("Packet Length:\t")); DEBUG_PRINTLN(value);
  
  if (value > (unsigned)(maxsize - (pbuff-buffer) - 1)) {
   d5910:	9b01      	ldr	r3, [sp, #4]
   d5912:	1b2c      	subs	r4, r5, r4
   d5914:	1b1b      	subs	r3, r3, r4
   d5916:	3b01      	subs	r3, #1
   d5918:	4599      	cmp	r9, r3
   d591a:	6833      	ldr	r3, [r6, #0]
   d591c:	d906      	bls.n	d592c <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x78>
      DEBUG_PRINTLN(F("Packet too big for buffer"));
      rlen = readPacket(pbuff, (maxsize - (pbuff-buffer) - 1), timeout);
   d591e:	9a01      	ldr	r2, [sp, #4]
   d5920:	699f      	ldr	r7, [r3, #24]
   d5922:	3a01      	subs	r2, #1
   d5924:	1b12      	subs	r2, r2, r4
   d5926:	4653      	mov	r3, sl
   d5928:	b292      	uxth	r2, r2
   d592a:	e003      	b.n	d5934 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x80>
  } else {
    rlen = readPacket(pbuff, value, timeout);
   d592c:	699f      	ldr	r7, [r3, #24]
   d592e:	fa1f f289 	uxth.w	r2, r9
   d5932:	4653      	mov	r3, sl
   d5934:	4629      	mov	r1, r5
   d5936:	4630      	mov	r0, r6
   d5938:	47b8      	blx	r7
   d593a:	b2c0      	uxtb	r0, r0
  }
  //DEBUG_PRINT(F("Remaining packet:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);

  return ((pbuff - buffer)+rlen);
   d593c:	4420      	add	r0, r4
   d593e:	b280      	uxth	r0, r0
}
   d5940:	b003      	add	sp, #12
   d5942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000d5948 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>:
  username = user;
  password = pass;
  return connect();
}

uint16_t Adafruit_MQTT::processPacketsUntil(uint8_t *buffer, uint8_t waitforpackettype, uint16_t timeout) {
   d5948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d594a:	4605      	mov	r5, r0
   d594c:	460c      	mov	r4, r1
   d594e:	4616      	mov	r6, r2
   d5950:	461f      	mov	r7, r3
  uint16_t len;
  while ( (len = readFullPacket(buffer, MAXBUFFERSIZE, timeout)) > 0) {
   d5952:	463b      	mov	r3, r7
   d5954:	2296      	movs	r2, #150	; 0x96
   d5956:	4621      	mov	r1, r4
   d5958:	4628      	mov	r0, r5
   d595a:	f7ff ffab 	bl	d58b4 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
   d595e:	b148      	cbz	r0, d5974 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x2c>

    //DEBUG_PRINT("Packet read size: "); DEBUG_PRINTLN(len);
    // TODO: add subscription reading & call back processing here

    if ((buffer[0] >> 4) == waitforpackettype) {
   d5960:	7823      	ldrb	r3, [r4, #0]
   d5962:	ebb6 1f13 	cmp.w	r6, r3, lsr #4
   d5966:	d005      	beq.n	d5974 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x2c>
      //DEBUG_PRINTLN(F("Found right packet")); 
      return len;
    } else {
      ERROR_PRINTLN(F("Dropped a packet"));
   d5968:	f001 ff2a 	bl	d77c0 <_Z16_fetch_usbserialv>
   d596c:	4902      	ldr	r1, [pc, #8]	; (d5978 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x30>)
   d596e:	f001 f8ec 	bl	d6b4a <_ZN5Print7printlnEPKc>
  return connect();
}

uint16_t Adafruit_MQTT::processPacketsUntil(uint8_t *buffer, uint8_t waitforpackettype, uint16_t timeout) {
  uint16_t len;
  while ( (len = readFullPacket(buffer, MAXBUFFERSIZE, timeout)) > 0) {
   d5972:	e7ee      	b.n	d5952 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0xa>
    } else {
      ERROR_PRINTLN(F("Dropped a packet"));
    }
  }
  return 0;
}
   d5974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d5976:	bf00      	nop
   d5978:	000dbaf6 	.word	0x000dbaf6

000d597c <_ZN13Adafruit_MQTT10disconnectEv>:
      case -2: return F("Failed to subscribe");
   }
    return F("Unknown error");
}

bool Adafruit_MQTT::disconnect() {
   d597c:	b510      	push	{r4, lr}
  DEBUG_PRINTBUFFER(buffer, 4);
  return 4;
}

uint8_t Adafruit_MQTT::disconnectPacket(uint8_t *packet) {
  packet[0] = MQTT_CTRL_DISCONNECT << 4;
   d597e:	23e0      	movs	r3, #224	; 0xe0
   d5980:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
  packet[1] = 0;
   d5984:	2300      	movs	r3, #0
   d5986:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23

bool Adafruit_MQTT::disconnect() {

  // Construct and send disconnect packet.
  uint8_t len = disconnectPacket(buffer);
  if (! sendPacket(buffer, len))
   d598a:	6803      	ldr	r3, [r0, #0]
      case -2: return F("Failed to subscribe");
   }
    return F("Unknown error");
}

bool Adafruit_MQTT::disconnect() {
   d598c:	4604      	mov	r4, r0

  // Construct and send disconnect packet.
  uint8_t len = disconnectPacket(buffer);
  if (! sendPacket(buffer, len))
   d598e:	695b      	ldr	r3, [r3, #20]
   d5990:	2202      	movs	r2, #2
   d5992:	f100 0122 	add.w	r1, r0, #34	; 0x22
   d5996:	4798      	blx	r3
    DEBUG_PRINTLN(F("Unable to send disconnect packet"));

  return disconnectServer();
   d5998:	6823      	ldr	r3, [r4, #0]
   d599a:	4620      	mov	r0, r4
   d599c:	691b      	ldr	r3, [r3, #16]

}
   d599e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  // Construct and send disconnect packet.
  uint8_t len = disconnectPacket(buffer);
  if (! sendPacket(buffer, len))
    DEBUG_PRINTLN(F("Unable to send disconnect packet"));

  return disconnectServer();
   d59a2:	4718      	bx	r3

000d59a4 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe>:

  return true;

}

bool Adafruit_MQTT::subscribe(Adafruit_MQTT_Subscribe *sub) {
   d59a4:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
   d59a8:	b530      	push	{r4, r5, lr}
   d59aa:	4613      	mov	r3, r2
   d59ac:	f100 04cc 	add.w	r4, r0, #204	; 0xcc
  uint8_t i;
  // see if we are already subscribed
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
    if (subscriptions[i] == sub) {
   d59b0:	f853 5f04 	ldr.w	r5, [r3, #4]!
   d59b4:	428d      	cmp	r5, r1
   d59b6:	d00f      	beq.n	d59d8 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x34>
}

bool Adafruit_MQTT::subscribe(Adafruit_MQTT_Subscribe *sub) {
  uint8_t i;
  // see if we are already subscribed
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   d59b8:	42a3      	cmp	r3, r4
   d59ba:	d1f9      	bne.n	d59b0 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0xc>
   d59bc:	2300      	movs	r3, #0
      return true;
    }
  }
  if (i==MAXSUBSCRIPTIONS) { // add to subscriptionlist
    for (i=0; i<MAXSUBSCRIPTIONS; i++) {
      if (subscriptions[i] == 0) {
   d59be:	f852 4f04 	ldr.w	r4, [r2, #4]!
   d59c2:	b924      	cbnz	r4, d59ce <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x2a>
        DEBUG_PRINT(F("Added sub ")); DEBUG_PRINTLN(i);
        subscriptions[i] = sub;
   d59c4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   d59c8:	f8c0 10bc 	str.w	r1, [r0, #188]	; 0xbc
   d59cc:	e004      	b.n	d59d8 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x34>
   d59ce:	3301      	adds	r3, #1
      DEBUG_PRINTLN(F("Already subscribed"));
      return true;
    }
  }
  if (i==MAXSUBSCRIPTIONS) { // add to subscriptionlist
    for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   d59d0:	2b05      	cmp	r3, #5
   d59d2:	d1f4      	bne.n	d59be <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x1a>
      }
    }
  }

  DEBUG_PRINTLN(F("no more subscription space :("));
  return false;
   d59d4:	2000      	movs	r0, #0
   d59d6:	bd30      	pop	{r4, r5, pc}
  uint8_t i;
  // see if we are already subscribed
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
    if (subscriptions[i] == sub) {
      DEBUG_PRINTLN(F("Already subscribed"));
      return true;
   d59d8:	2001      	movs	r0, #1
    }
  }

  DEBUG_PRINTLN(F("no more subscription space :("));
  return false;
}
   d59da:	bd30      	pop	{r4, r5, pc}

000d59dc <_ZN13Adafruit_MQTT16readSubscriptionEs>:
    }
    elapsed += (endtime - starttime);
  }
}

Adafruit_MQTT_Subscribe *Adafruit_MQTT::readSubscription(int16_t timeout) {
   d59dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t i, topiclen, datalen;

  // Check if data is available to read.
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
   d59e0:	f100 0922 	add.w	r9, r0, #34	; 0x22
   d59e4:	b28b      	uxth	r3, r1
    }
    elapsed += (endtime - starttime);
  }
}

Adafruit_MQTT_Subscribe *Adafruit_MQTT::readSubscription(int16_t timeout) {
   d59e6:	b087      	sub	sp, #28
  uint16_t i, topiclen, datalen;

  // Check if data is available to read.
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
   d59e8:	2296      	movs	r2, #150	; 0x96
   d59ea:	4649      	mov	r1, r9
    }
    elapsed += (endtime - starttime);
  }
}

Adafruit_MQTT_Subscribe *Adafruit_MQTT::readSubscription(int16_t timeout) {
   d59ec:	4604      	mov	r4, r0
  uint16_t i, topiclen, datalen;

  // Check if data is available to read.
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
   d59ee:	f7ff ff61 	bl	d58b4 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
  if (!len)
   d59f2:	4606      	mov	r6, r0
   d59f4:	b310      	cbz	r0, d5a3c <_ZN13Adafruit_MQTT16readSubscriptionEs+0x60>
    return NULL;  // No data available, just quit.
  DEBUG_PRINT("Packet len: "); DEBUG_PRINTLN(len); 
  DEBUG_PRINTBUFFER(buffer, len);

  // Parse out length of packet.
  topiclen = buffer[3];
   d59f6:	f894 7025 	ldrb.w	r7, [r4, #37]	; 0x25
   d59fa:	b2bb      	uxth	r3, r7
   d59fc:	9301      	str	r3, [sp, #4]
      // received topic name.
      if (strlen(subscriptions[i]->topic) != topiclen)
        continue;
      // Stop if the subscription topic matches the received topic. Be careful
      // to make comparison case insensitive.
      if (strncasecmp((char*)buffer+4, subscriptions[i]->topic, topiclen) == 0) {
   d59fe:	f104 0326 	add.w	r3, r4, #38	; 0x26
   d5a02:	f104 0ab8 	add.w	sl, r4, #184	; 0xb8
    return NULL;  // No data available, just quit.
  DEBUG_PRINT("Packet len: "); DEBUG_PRINTLN(len); 
  DEBUG_PRINTBUFFER(buffer, len);

  // Parse out length of packet.
  topiclen = buffer[3];
   d5a06:	2500      	movs	r5, #0
      // received topic name.
      if (strlen(subscriptions[i]->topic) != topiclen)
        continue;
      // Stop if the subscription topic matches the received topic. Be careful
      // to make comparison case insensitive.
      if (strncasecmp((char*)buffer+4, subscriptions[i]->topic, topiclen) == 0) {
   d5a08:	9302      	str	r3, [sp, #8]
  topiclen = buffer[3];
  DEBUG_PRINT(F("Looking for subscription len ")); DEBUG_PRINTLN(topiclen);

  // Find subscription associated with this packet.
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
    if (subscriptions[i]) {
   d5a0a:	f85a bf04 	ldr.w	fp, [sl, #4]!
   d5a0e:	f1bb 0f00 	cmp.w	fp, #0
   d5a12:	d00e      	beq.n	d5a32 <_ZN13Adafruit_MQTT16readSubscriptionEs+0x56>
      // Skip this subscription if its name length isn't the same as the
      // received topic name.
      if (strlen(subscriptions[i]->topic) != topiclen)
   d5a14:	f8db 1000 	ldr.w	r1, [fp]
   d5a18:	9103      	str	r1, [sp, #12]
   d5a1a:	4608      	mov	r0, r1
   d5a1c:	f005 f9df 	bl	dadde <strlen>
   d5a20:	42b8      	cmp	r0, r7
   d5a22:	4680      	mov	r8, r0
   d5a24:	9903      	ldr	r1, [sp, #12]
   d5a26:	d104      	bne.n	d5a32 <_ZN13Adafruit_MQTT16readSubscriptionEs+0x56>
        continue;
      // Stop if the subscription topic matches the received topic. Be careful
      // to make comparison case insensitive.
      if (strncasecmp((char*)buffer+4, subscriptions[i]->topic, topiclen) == 0) {
   d5a28:	463a      	mov	r2, r7
   d5a2a:	9802      	ldr	r0, [sp, #8]
   d5a2c:	f005 f9e0 	bl	dadf0 <strncasecmp>
   d5a30:	b128      	cbz	r0, d5a3e <_ZN13Adafruit_MQTT16readSubscriptionEs+0x62>
   d5a32:	3501      	adds	r5, #1
  // Parse out length of packet.
  topiclen = buffer[3];
  DEBUG_PRINT(F("Looking for subscription len ")); DEBUG_PRINTLN(topiclen);

  // Find subscription associated with this packet.
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   d5a34:	2d05      	cmp	r5, #5
   d5a36:	d1e8      	bne.n	d5a0a <_ZN13Adafruit_MQTT16readSubscriptionEs+0x2e>
  uint16_t i, topiclen, datalen;

  // Check if data is available to read.
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
  if (!len)
    return NULL;  // No data available, just quit.
   d5a38:	2000      	movs	r0, #0
   d5a3a:	e04a      	b.n	d5ad2 <_ZN13Adafruit_MQTT16readSubscriptionEs+0xf6>
   d5a3c:	e049      	b.n	d5ad2 <_ZN13Adafruit_MQTT16readSubscriptionEs+0xf6>
  if (i==MAXSUBSCRIPTIONS) return NULL; // matching sub not found ???

  uint8_t packet_id_len = 0;
  uint16_t packetid=0;
  // Check if it is QoS 1, TODO: we dont support QoS 2
  if ((buffer[0] & 0x6) == 0x2) {
   d5a3e:	f894 a022 	ldrb.w	sl, [r4, #34]	; 0x22
   d5a42:	f00a 0a06 	and.w	sl, sl, #6
   d5a46:	f1ba 0f02 	cmp.w	sl, #2
   d5a4a:	d13f      	bne.n	d5acc <_ZN13Adafruit_MQTT16readSubscriptionEs+0xf0>
    packet_id_len = 2;
    packetid = buffer[topiclen+4];
   d5a4c:	19e2      	adds	r2, r4, r7
   d5a4e:	f892 7026 	ldrb.w	r7, [r2, #38]	; 0x26
    packetid <<= 8;
    packetid |= buffer[topiclen+5];
   d5a52:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
   d5a56:	ea42 2707 	orr.w	r7, r2, r7, lsl #8
  }

  // zero out the old data
  memset(subscriptions[i]->lastread, 0, SUBSCRIPTIONDATALEN);
   d5a5a:	2214      	movs	r2, #20
   d5a5c:	2100      	movs	r1, #0
   d5a5e:	f10b 0005 	add.w	r0, fp, #5
   d5a62:	f005 f95f 	bl	dad24 <memset>

  datalen = len - topiclen - packet_id_len - 4;
   d5a66:	9b01      	ldr	r3, [sp, #4]
   d5a68:	f5c3 407f 	rsb	r0, r3, #65280	; 0xff00
   d5a6c:	30fc      	adds	r0, #252	; 0xfc
   d5a6e:	4406      	add	r6, r0
   d5a70:	eb04 0585 	add.w	r5, r4, r5, lsl #2
   d5a74:	ebca 0606 	rsb	r6, sl, r6
   d5a78:	b2b6      	uxth	r6, r6
  if (datalen > SUBSCRIPTIONDATALEN) {
    datalen = SUBSCRIPTIONDATALEN-1; // cut it off
   d5a7a:	2e15      	cmp	r6, #21
  }
  // extract out just the data, into the subscription object itself
  memmove(subscriptions[i]->lastread, buffer+4+topiclen+packet_id_len, datalen);
   d5a7c:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
   d5a80:	f108 0104 	add.w	r1, r8, #4
  // zero out the old data
  memset(subscriptions[i]->lastread, 0, SUBSCRIPTIONDATALEN);

  datalen = len - topiclen - packet_id_len - 4;
  if (datalen > SUBSCRIPTIONDATALEN) {
    datalen = SUBSCRIPTIONDATALEN-1; // cut it off
   d5a84:	bf28      	it	cs
   d5a86:	2613      	movcs	r6, #19
  }
  // extract out just the data, into the subscription object itself
  memmove(subscriptions[i]->lastread, buffer+4+topiclen+packet_id_len, datalen);
   d5a88:	4451      	add	r1, sl
   d5a8a:	4632      	mov	r2, r6
   d5a8c:	4449      	add	r1, r9
   d5a8e:	3005      	adds	r0, #5
   d5a90:	f005 f92d 	bl	dacee <memmove>
  subscriptions[i]->datalen = datalen;
   d5a94:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   d5a98:	835e      	strh	r6, [r3, #26]
  DEBUG_PRINT(F("Data len: ")); DEBUG_PRINTLN(datalen);
  DEBUG_PRINT(F("Data: ")); DEBUG_PRINTLN((char *)subscriptions[i]->lastread);

  if ((MQTT_PROTOCOL_LEVEL > 3) &&(buffer[0] & 0x6) == 0x2) {
   d5a9a:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d5a9e:	f003 0306 	and.w	r3, r3, #6
   d5aa2:	2b02      	cmp	r3, #2
   d5aa4:	d10f      	bne.n	d5ac6 <_ZN13Adafruit_MQTT16readSubscriptionEs+0xea>
  return 2;
}

uint8_t Adafruit_MQTT::pubackPacket(uint8_t *packet, uint16_t packetid) {
  packet[0] = MQTT_CTRL_PUBACK << 4;
  packet[1] = 2;
   d5aa6:	f88d 3015 	strb.w	r3, [sp, #21]
  packet[2] = packetid >> 8;
   d5aaa:	123b      	asrs	r3, r7, #8
   d5aac:	f88d 3016 	strb.w	r3, [sp, #22]
  if ((MQTT_PROTOCOL_LEVEL > 3) &&(buffer[0] & 0x6) == 0x2) {
    uint8_t ackpacket[4];
    
    // Construct and send puback packet.
    uint8_t len = pubackPacket(ackpacket, packetid);
    if (!sendPacket(ackpacket, len))
   d5ab0:	6823      	ldr	r3, [r4, #0]

uint8_t Adafruit_MQTT::pubackPacket(uint8_t *packet, uint16_t packetid) {
  packet[0] = MQTT_CTRL_PUBACK << 4;
  packet[1] = 2;
  packet[2] = packetid >> 8;
  packet[3] = packetid;
   d5ab2:	f88d 7017 	strb.w	r7, [sp, #23]
  DEBUG_PRINTBUFFER(buffer, 2);
  return 2;
}

uint8_t Adafruit_MQTT::pubackPacket(uint8_t *packet, uint16_t packetid) {
  packet[0] = MQTT_CTRL_PUBACK << 4;
   d5ab6:	2240      	movs	r2, #64	; 0x40
   d5ab8:	f88d 2014 	strb.w	r2, [sp, #20]
  if ((MQTT_PROTOCOL_LEVEL > 3) &&(buffer[0] & 0x6) == 0x2) {
    uint8_t ackpacket[4];
    
    // Construct and send puback packet.
    uint8_t len = pubackPacket(ackpacket, packetid);
    if (!sendPacket(ackpacket, len))
   d5abc:	695b      	ldr	r3, [r3, #20]
   d5abe:	2204      	movs	r2, #4
   d5ac0:	a905      	add	r1, sp, #20
   d5ac2:	4620      	mov	r0, r4
   d5ac4:	4798      	blx	r3
      DEBUG_PRINT(F("Failed"));
  }

  // return the valid matching subscription
  return subscriptions[i];
   d5ac6:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
   d5aca:	e002      	b.n	d5ad2 <_ZN13Adafruit_MQTT16readSubscriptionEs+0xf6>
    }
  }
  if (i==MAXSUBSCRIPTIONS) return NULL; // matching sub not found ???

  uint8_t packet_id_len = 0;
  uint16_t packetid=0;
   d5acc:	4607      	mov	r7, r0
      }
    }
  }
  if (i==MAXSUBSCRIPTIONS) return NULL; // matching sub not found ???

  uint8_t packet_id_len = 0;
   d5ace:	4682      	mov	sl, r0
   d5ad0:	e7c3      	b.n	d5a5a <_ZN13Adafruit_MQTT16readSubscriptionEs+0x7e>
      DEBUG_PRINT(F("Failed"));
  }

  // return the valid matching subscription
  return subscriptions[i];
}
   d5ad2:	b007      	add	sp, #28
   d5ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5ad8 <_ZN13Adafruit_MQTT13connectPacketEPh>:
// The current MQTT spec is 3.1.1 and available here:
//   http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718028
// However this connect packet and code follows the MQTT 3.1 spec here (some
// small differences in the protocol):
//   http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html#connect
uint8_t Adafruit_MQTT::connectPacket(uint8_t *packet) {
   d5ad8:	b538      	push	{r3, r4, r5, lr}
   d5ada:	4604      	mov	r4, r0
  uint8_t *p = packet;
  uint16_t len;

  // fixed header, connection messsage no flags
  p[0] = (MQTT_CTRL_CONNECT << 4) | 0x0;
   d5adc:	4608      	mov	r0, r1
   d5ade:	2310      	movs	r3, #16
   d5ae0:	f800 3b02 	strb.w	r3, [r0], #2
// The current MQTT spec is 3.1.1 and available here:
//   http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718028
// However this connect packet and code follows the MQTT 3.1 spec here (some
// small differences in the protocol):
//   http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html#connect
uint8_t Adafruit_MQTT::connectPacket(uint8_t *packet) {
   d5ae4:	460d      	mov	r5, r1
  // fill in packet[1] last

#if MQTT_PROTOCOL_LEVEL == 3
    p = stringprint(p, "MQIsdp");
#elif MQTT_PROTOCOL_LEVEL == 4
    p = stringprint(p, "MQTT");
   d5ae6:	4929      	ldr	r1, [pc, #164]	; (d5b8c <_ZN13Adafruit_MQTT13connectPacketEPh+0xb4>)
   d5ae8:	f7ff feaf 	bl	d584a <_ZL11stringprintPhPKct.constprop.3>
#else
    #error "MQTT level not supported"
#endif

  p[0] = MQTT_PROTOCOL_LEVEL;
   d5aec:	2304      	movs	r3, #4
   d5aee:	7003      	strb	r3, [r0, #0]
  p++;

  // always clean the session
  p[0] = MQTT_CONN_CLEANSESSION;
   d5af0:	2302      	movs	r3, #2
   d5af2:	7043      	strb	r3, [r0, #1]

  // set the will flags if needed
  if (will_topic && pgm_read_byte(will_topic) != 0) {
   d5af4:	69a3      	ldr	r3, [r4, #24]
   d5af6:	b1ab      	cbz	r3, d5b24 <_ZN13Adafruit_MQTT13connectPacketEPh+0x4c>
   d5af8:	781b      	ldrb	r3, [r3, #0]
   d5afa:	b19b      	cbz	r3, d5b24 <_ZN13Adafruit_MQTT13connectPacketEPh+0x4c>

    p[0] |= MQTT_CONN_WILLFLAG;
   d5afc:	2306      	movs	r3, #6
   d5afe:	7043      	strb	r3, [r0, #1]

    if(will_qos == 1)
   d5b00:	f894 3020 	ldrb.w	r3, [r4, #32]
   d5b04:	2b01      	cmp	r3, #1
   d5b06:	d101      	bne.n	d5b0c <_ZN13Adafruit_MQTT13connectPacketEPh+0x34>
      p[0] |= MQTT_CONN_WILLQOS_1;
   d5b08:	230e      	movs	r3, #14
   d5b0a:	e002      	b.n	d5b12 <_ZN13Adafruit_MQTT13connectPacketEPh+0x3a>
    else if(will_qos == 2)
   d5b0c:	2b02      	cmp	r3, #2
   d5b0e:	d101      	bne.n	d5b14 <_ZN13Adafruit_MQTT13connectPacketEPh+0x3c>
      p[0] |= MQTT_CONN_WILLQOS_2;
   d5b10:	231e      	movs	r3, #30
   d5b12:	7043      	strb	r3, [r0, #1]

    if(will_retain == 1)
   d5b14:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   d5b18:	2b01      	cmp	r3, #1
      p[0] |= MQTT_CONN_WILLRETAIN;
   d5b1a:	bf02      	ittt	eq
   d5b1c:	7843      	ldrbeq	r3, [r0, #1]
   d5b1e:	f043 0320 	orreq.w	r3, r3, #32
   d5b22:	7043      	strbeq	r3, [r0, #1]

  }

  if (pgm_read_byte(username) != 0)
   d5b24:	6923      	ldr	r3, [r4, #16]
   d5b26:	781b      	ldrb	r3, [r3, #0]
   d5b28:	b11b      	cbz	r3, d5b32 <_ZN13Adafruit_MQTT13connectPacketEPh+0x5a>
    p[0] |= MQTT_CONN_USERNAMEFLAG;
   d5b2a:	7843      	ldrb	r3, [r0, #1]
   d5b2c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d5b30:	7043      	strb	r3, [r0, #1]
  if (pgm_read_byte(password) != 0)
   d5b32:	6963      	ldr	r3, [r4, #20]
   d5b34:	781b      	ldrb	r3, [r3, #0]
   d5b36:	b11b      	cbz	r3, d5b40 <_ZN13Adafruit_MQTT13connectPacketEPh+0x68>
    p[0] |= MQTT_CONN_PASSWORDFLAG;
   d5b38:	7843      	ldrb	r3, [r0, #1]
   d5b3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   d5b3e:	7043      	strb	r3, [r0, #1]
  p++;

  p[0] = MQTT_CONN_KEEPALIVE >> 8;
   d5b40:	2301      	movs	r3, #1
   d5b42:	7083      	strb	r3, [r0, #2]
  p++;
  p[0] = MQTT_CONN_KEEPALIVE & 0xFF;
   d5b44:	232c      	movs	r3, #44	; 0x2c
   d5b46:	70c3      	strb	r3, [r0, #3]
  p++;

  if(MQTT_PROTOCOL_LEVEL == 3) {
    p = stringprint(p, clientid, 23);  // Limit client ID to first 23 characters.
  } else {
    if (pgm_read_byte(clientid) != 0) {
   d5b48:	68e1      	ldr	r1, [r4, #12]
   d5b4a:	780b      	ldrb	r3, [r1, #0]
   d5b4c:	b11b      	cbz	r3, d5b56 <_ZN13Adafruit_MQTT13connectPacketEPh+0x7e>
      p = stringprint(p, clientid);
   d5b4e:	3004      	adds	r0, #4
   d5b50:	f7ff fe7b 	bl	d584a <_ZL11stringprintPhPKct.constprop.3>
   d5b54:	e002      	b.n	d5b5c <_ZN13Adafruit_MQTT13connectPacketEPh+0x84>
    } else {
      p[0] = 0x0;
   d5b56:	7103      	strb	r3, [r0, #4]
      p++;
      p[0] = 0x0;
   d5b58:	7143      	strb	r3, [r0, #5]
      p++;
   d5b5a:	3006      	adds	r0, #6
      DEBUG_PRINTLN(F("SERVER GENERATING CLIENT ID"));
    }
  }

  if (will_topic && pgm_read_byte(will_topic) != 0) {
   d5b5c:	69a1      	ldr	r1, [r4, #24]
   d5b5e:	b131      	cbz	r1, d5b6e <_ZN13Adafruit_MQTT13connectPacketEPh+0x96>
   d5b60:	780b      	ldrb	r3, [r1, #0]
   d5b62:	b123      	cbz	r3, d5b6e <_ZN13Adafruit_MQTT13connectPacketEPh+0x96>
    p = stringprint(p, will_topic);
   d5b64:	f7ff fe71 	bl	d584a <_ZL11stringprintPhPKct.constprop.3>
    p = stringprint(p, will_payload);
   d5b68:	69e1      	ldr	r1, [r4, #28]
   d5b6a:	f7ff fe6e 	bl	d584a <_ZL11stringprintPhPKct.constprop.3>
  }

  if (pgm_read_byte(username) != 0) {
   d5b6e:	6921      	ldr	r1, [r4, #16]
   d5b70:	780b      	ldrb	r3, [r1, #0]
   d5b72:	b10b      	cbz	r3, d5b78 <_ZN13Adafruit_MQTT13connectPacketEPh+0xa0>
    p = stringprint(p, username);
   d5b74:	f7ff fe69 	bl	d584a <_ZL11stringprintPhPKct.constprop.3>
  }
  if (pgm_read_byte(password) != 0) {
   d5b78:	6961      	ldr	r1, [r4, #20]
   d5b7a:	780b      	ldrb	r3, [r1, #0]
   d5b7c:	b10b      	cbz	r3, d5b82 <_ZN13Adafruit_MQTT13connectPacketEPh+0xaa>
    p = stringprint(p, password);
   d5b7e:	f7ff fe64 	bl	d584a <_ZL11stringprintPhPKct.constprop.3>
  }

  len = p - packet;

  packet[1] = len-2;  // don't include the 2 bytes of fixed header data
   d5b82:	1b40      	subs	r0, r0, r5
   d5b84:	b2c0      	uxtb	r0, r0
   d5b86:	1e83      	subs	r3, r0, #2
   d5b88:	706b      	strb	r3, [r5, #1]
  DEBUG_PRINTLN(F("MQTT connect packet:"));
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}
   d5b8a:	bd38      	pop	{r3, r4, r5, pc}
   d5b8c:	000dbb15 	.word	0x000dbb15

000d5b90 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th>:


// as per http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718040
uint16_t Adafruit_MQTT::publishPacket(uint8_t *packet, const char *topic,
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   d5b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5b94:	4605      	mov	r5, r0
  uint8_t *p = packet;
  uint16_t len=0;

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
   d5b96:	4610      	mov	r0, r2
}


// as per http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718040
uint16_t Adafruit_MQTT::publishPacket(uint8_t *packet, const char *topic,
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   d5b98:	460e      	mov	r6, r1
   d5b9a:	4691      	mov	r9, r2
   d5b9c:	461f      	mov	r7, r3
  uint8_t *p = packet;
  uint16_t len=0;

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
   d5b9e:	f005 f91e 	bl	dadde <strlen>
}


// as per http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718040
uint16_t Adafruit_MQTT::publishPacket(uint8_t *packet, const char *topic,
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   d5ba2:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
   d5ba6:	f8bd 4020 	ldrh.w	r4, [sp, #32]
  uint8_t *p = packet;
  uint16_t len=0;

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
   d5baa:	b280      	uxth	r0, r0
  if(qos > 0) { 
   d5bac:	f1b8 0f00 	cmp.w	r8, #0
   d5bb0:	d101      	bne.n	d5bb6 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x26>
  uint8_t *p = packet;
  uint16_t len=0;

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
   d5bb2:	1c83      	adds	r3, r0, #2
   d5bb4:	e000      	b.n	d5bb8 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x28>
  if(qos > 0) { 
    len += 2; // qos packet id
   d5bb6:	1d03      	adds	r3, r0, #4
  }
  len += bLen; // payload length

  // Now you can start generating the packet!
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   d5bb8:	ea4f 0248 	mov.w	r2, r8, lsl #1
   d5bbc:	4630      	mov	r0, r6

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
  if(qos > 0) { 
    len += 2; // qos packet id
   d5bbe:	b29b      	uxth	r3, r3
  }
  len += bLen; // payload length

  // Now you can start generating the packet!
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   d5bc0:	f042 0230 	orr.w	r2, r2, #48	; 0x30
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
  if(qos > 0) { 
    len += 2; // qos packet id
  }
  len += bLen; // payload length
   d5bc4:	4423      	add	r3, r4

  // Now you can start generating the packet!
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   d5bc6:	f800 2b01 	strb.w	r2, [r0], #1
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
  if(qos > 0) { 
    len += 2; // qos packet id
  }
  len += bLen; // payload length
   d5bca:	b29b      	uxth	r3, r3
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
  p++;

  // fill in packet[1] last
  do {
    uint8_t encodedByte = len % 128;
   d5bcc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
    len /= 128;
    // if there are more data to encode, set the top bit of this byte
    if ( len > 0 ) {
   d5bd0:	09db      	lsrs	r3, r3, #7
      encodedByte |= 0x80;
   d5bd2:	bf18      	it	ne
   d5bd4:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
    }
    p[0] = encodedByte;
   d5bd8:	f800 2b01 	strb.w	r2, [r0], #1
    p++;
  } while ( len > 0 );
   d5bdc:	2b00      	cmp	r3, #0
   d5bde:	d1f5      	bne.n	d5bcc <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x3c>

  // topic comes before packet identifier
  p = stringprint(p, topic);
   d5be0:	4649      	mov	r1, r9
   d5be2:	f7ff fe32 	bl	d584a <_ZL11stringprintPhPKct.constprop.3>
   d5be6:	4603      	mov	r3, r0

  // add packet identifier. used for checking PUBACK in QOS > 0
  if(qos > 0) {
   d5be8:	f1b8 0f00 	cmp.w	r8, #0
   d5bec:	d00c      	beq.n	d5c08 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x78>
    p[0] = (packet_id_counter >> 8) & 0xFF;
   d5bee:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   d5bf2:	0a12      	lsrs	r2, r2, #8
   d5bf4:	7002      	strb	r2, [r0, #0]
    p[1] = packet_id_counter & 0xFF;
   d5bf6:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   d5bfa:	7042      	strb	r2, [r0, #1]
    p+=2;

    // increment the packet id
    packet_id_counter++;
   d5bfc:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   d5c00:	3201      	adds	r2, #1

  // add packet identifier. used for checking PUBACK in QOS > 0
  if(qos > 0) {
    p[0] = (packet_id_counter >> 8) & 0xFF;
    p[1] = packet_id_counter & 0xFF;
    p+=2;
   d5c02:	3302      	adds	r3, #2

    // increment the packet id
    packet_id_counter++;
   d5c04:	f8a5 20b8 	strh.w	r2, [r5, #184]	; 0xb8
  }

  memmove(p, data, bLen);
   d5c08:	4622      	mov	r2, r4
   d5c0a:	4639      	mov	r1, r7
   d5c0c:	4618      	mov	r0, r3
   d5c0e:	f005 f86e 	bl	dacee <memmove>
  p+= bLen;
  len = p - packet;
  DEBUG_PRINTLN(F("MQTT publish packet:"));
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
   d5c12:	4420      	add	r0, r4
   d5c14:	1b80      	subs	r0, r0, r6
}
   d5c16:	b280      	uxth	r0, r0
   d5c18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d5c1c <_ZN13Adafruit_MQTT7publishEPKcPhth>:

bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
}

bool Adafruit_MQTT::publish(const char *topic, uint8_t *data, uint16_t bLen, uint8_t qos) {
   d5c1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5c1e:	f89d 6018 	ldrb.w	r6, [sp, #24]
  // Construct and send publish packet.
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   d5c22:	f100 0522 	add.w	r5, r0, #34	; 0x22

bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
}

bool Adafruit_MQTT::publish(const char *topic, uint8_t *data, uint16_t bLen, uint8_t qos) {
   d5c26:	4604      	mov	r4, r0
  // Construct and send publish packet.
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   d5c28:	e88d 0048 	stmia.w	sp, {r3, r6}
   d5c2c:	4613      	mov	r3, r2
   d5c2e:	460a      	mov	r2, r1
   d5c30:	4629      	mov	r1, r5
   d5c32:	f7ff ffad 	bl	d5b90 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th>
  if (!sendPacket(buffer, len))
   d5c36:	6823      	ldr	r3, [r4, #0]
   d5c38:	4602      	mov	r2, r0
   d5c3a:	695b      	ldr	r3, [r3, #20]
   d5c3c:	4629      	mov	r1, r5
   d5c3e:	4620      	mov	r0, r4
   d5c40:	4798      	blx	r3
   d5c42:	b908      	cbnz	r0, d5c48 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x2c>
    return false;
   d5c44:	2000      	movs	r0, #0
   d5c46:	e017      	b.n	d5c78 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x5c>

  // If QOS level is high enough verify the response packet.
  if (qos > 0) {
   d5c48:	b1b6      	cbz	r6, d5c78 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x5c>
    len = readFullPacket(buffer, MAXBUFFERSIZE, PUBLISH_TIMEOUT_MS);
   d5c4a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   d5c4e:	2296      	movs	r2, #150	; 0x96
   d5c50:	4629      	mov	r1, r5
   d5c52:	4620      	mov	r0, r4
   d5c54:	f7ff fe2e 	bl	d58b4 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
    DEBUG_PRINT(F("Publish QOS1+ reply:\t"));
    DEBUG_PRINTBUFFER(buffer, len);
    if (len != 4)
   d5c58:	2804      	cmp	r0, #4
   d5c5a:	d1f3      	bne.n	d5c44 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x28>
      return false;
    if ((buffer[0] >> 4) != MQTT_CTRL_PUBACK)
   d5c5c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d5c60:	111b      	asrs	r3, r3, #4
   d5c62:	2b04      	cmp	r3, #4
   d5c64:	d1ee      	bne.n	d5c44 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x28>
   d5c66:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    packnum <<= 8;
    packnum |= buffer[3];

    // we increment the packet_id_counter right after publishing so inc here too to match
    packnum++;
    if (packnum != packet_id_counter)
   d5c68:	f8b4 00b8 	ldrh.w	r0, [r4, #184]	; 0xb8
   d5c6c:	ba5b      	rev16	r3, r3
   d5c6e:	3301      	adds	r3, #1
   d5c70:	b29b      	uxth	r3, r3
   d5c72:	1ac3      	subs	r3, r0, r3
   d5c74:	4258      	negs	r0, r3
   d5c76:	4158      	adcs	r0, r3
      return false;
  }

  return true;
}
   d5c78:	b002      	add	sp, #8
   d5c7a:	bd70      	pop	{r4, r5, r6, pc}

000d5c7c <_ZN13Adafruit_MQTT7publishEPKcS1_h>:
  return disconnectServer();

}


bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
   d5c7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d5c7e:	4605      	mov	r5, r0
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
   d5c80:	4610      	mov	r0, r2
  return disconnectServer();

}


bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
   d5c82:	461f      	mov	r7, r3
   d5c84:	460e      	mov	r6, r1
   d5c86:	4614      	mov	r4, r2
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
   d5c88:	f005 f8a9 	bl	dadde <strlen>
   d5c8c:	9700      	str	r7, [sp, #0]
   d5c8e:	b283      	uxth	r3, r0
   d5c90:	4622      	mov	r2, r4
   d5c92:	4631      	mov	r1, r6
   d5c94:	4628      	mov	r0, r5
   d5c96:	f7ff ffc1 	bl	d5c1c <_ZN13Adafruit_MQTT7publishEPKcPhth>
}
   d5c9a:	b003      	add	sp, #12
   d5c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5c9e <_ZN13Adafruit_MQTT15subscribePacketEPhPKch>:
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}

uint8_t Adafruit_MQTT::subscribePacket(uint8_t *packet, const char *topic,
                                       uint8_t qos) {
   d5c9e:	b538      	push	{r3, r4, r5, lr}
   d5ca0:	461d      	mov	r5, r3
  uint8_t *p = packet;
  uint16_t len;

  p[0] = MQTT_CTRL_SUBSCRIBE << 4 | MQTT_QOS_1 << 1;
   d5ca2:	2382      	movs	r3, #130	; 0x82
   d5ca4:	700b      	strb	r3, [r1, #0]
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}

uint8_t Adafruit_MQTT::subscribePacket(uint8_t *packet, const char *topic,
                                       uint8_t qos) {
   d5ca6:	460c      	mov	r4, r1
  p[0] = MQTT_CTRL_SUBSCRIBE << 4 | MQTT_QOS_1 << 1;
  // fill in packet[1] last
  p+=2;

  // packet identifier. used for checking SUBACK
  p[0] = (packet_id_counter >> 8) & 0xFF;
   d5ca8:	f8b0 10b8 	ldrh.w	r1, [r0, #184]	; 0xb8
   d5cac:	0a09      	lsrs	r1, r1, #8
   d5cae:	70a1      	strb	r1, [r4, #2]
  p[1] = packet_id_counter & 0xFF;
   d5cb0:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
   d5cb4:	70e3      	strb	r3, [r4, #3]
  p+=2;

  // increment the packet id
  packet_id_counter++;
   d5cb6:	f8b0 10b8 	ldrh.w	r1, [r0, #184]	; 0xb8
   d5cba:	3101      	adds	r1, #1
   d5cbc:	f8a0 10b8 	strh.w	r1, [r0, #184]	; 0xb8

  p = stringprint(p, topic);
   d5cc0:	4611      	mov	r1, r2
   d5cc2:	1d20      	adds	r0, r4, #4
   d5cc4:	f7ff fdc1 	bl	d584a <_ZL11stringprintPhPKct.constprop.3>

  p[0] = qos;
   d5cc8:	f800 5b01 	strb.w	r5, [r0], #1
  p++;

  len = p - packet;
  packet[1] = len-2; // don't include the 2 bytes of fixed header data
   d5ccc:	1b00      	subs	r0, r0, r4
   d5cce:	b2c0      	uxtb	r0, r0
   d5cd0:	1e83      	subs	r3, r0, #2
   d5cd2:	7063      	strb	r3, [r4, #1]
  DEBUG_PRINTLN(F("MQTT subscription packet:"));
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}
   d5cd4:	bd38      	pop	{r3, r4, r5, pc}

000d5cd6 <_ZN13Adafruit_MQTT7connectEv>:

  packet_id_counter = 0;

}

int8_t Adafruit_MQTT::connect() {
   d5cd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // Connect to the server.
  if (!connectServer())
   d5cda:	6803      	ldr	r3, [r0, #0]
   d5cdc:	68db      	ldr	r3, [r3, #12]

  packet_id_counter = 0;

}

int8_t Adafruit_MQTT::connect() {
   d5cde:	4604      	mov	r4, r0
  // Connect to the server.
  if (!connectServer())
   d5ce0:	4798      	blx	r3
   d5ce2:	b918      	cbnz	r0, d5cec <_ZN13Adafruit_MQTT7connectEv+0x16>
    return -1;
   d5ce4:	f04f 30ff 	mov.w	r0, #4294967295
   d5ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  // Construct and send connect packet.
  uint8_t len = connectPacket(buffer);
   d5cec:	f104 0522 	add.w	r5, r4, #34	; 0x22
   d5cf0:	4629      	mov	r1, r5
   d5cf2:	4620      	mov	r0, r4
   d5cf4:	f7ff fef0 	bl	d5ad8 <_ZN13Adafruit_MQTT13connectPacketEPh>
  if (!sendPacket(buffer, len))
   d5cf8:	6823      	ldr	r3, [r4, #0]
   d5cfa:	b282      	uxth	r2, r0
   d5cfc:	695b      	ldr	r3, [r3, #20]
   d5cfe:	4629      	mov	r1, r5
   d5d00:	4620      	mov	r0, r4
   d5d02:	4798      	blx	r3
   d5d04:	2800      	cmp	r0, #0
   d5d06:	d0ed      	beq.n	d5ce4 <_ZN13Adafruit_MQTT7connectEv+0xe>
    return -1;

  // Read connect response packet and verify it
  len = readFullPacket(buffer, MAXBUFFERSIZE, CONNECT_TIMEOUT_MS);
   d5d08:	f241 7370 	movw	r3, #6000	; 0x1770
   d5d0c:	2296      	movs	r2, #150	; 0x96
   d5d0e:	4629      	mov	r1, r5
   d5d10:	4620      	mov	r0, r4
   d5d12:	f7ff fdcf 	bl	d58b4 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
  if (len != 4)
   d5d16:	b2c0      	uxtb	r0, r0
   d5d18:	2804      	cmp	r0, #4
   d5d1a:	d1e3      	bne.n	d5ce4 <_ZN13Adafruit_MQTT7connectEv+0xe>
    return -1;
  if ((buffer[0] != (MQTT_CTRL_CONNECTACK << 4)) || (buffer[1] != 2))
   d5d1c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d5d1e:	f5b3 7f08 	cmp.w	r3, #544	; 0x220
   d5d22:	d1df      	bne.n	d5ce4 <_ZN13Adafruit_MQTT7connectEv+0xe>
    return -1;
  if (buffer[3] != 0)
   d5d24:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
   d5d28:	b110      	cbz	r0, d5d30 <_ZN13Adafruit_MQTT7connectEv+0x5a>
    return buffer[3];
   d5d2a:	b240      	sxtb	r0, r0
   d5d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5d30:	f104 07b8 	add.w	r7, r4, #184	; 0xb8
   d5d34:	f104 08cc 	add.w	r8, r4, #204	; 0xcc

  // Setup subscriptions once connected.
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    // Ignore subscriptions that aren't defined.
    if (subscriptions[i] == 0) continue;
   d5d38:	f857 3f04 	ldr.w	r3, [r7, #4]!
   d5d3c:	b1fb      	cbz	r3, d5d7e <_ZN13Adafruit_MQTT7connectEv+0xa8>
   d5d3e:	2603      	movs	r6, #3

    boolean success = false;
    for (uint8_t retry=0; (retry<3) && !success; retry++) { // retry until we get a suback    
      // Construct and send subscription packet.
      uint8_t len = subscribePacket(buffer, subscriptions[i]->topic, subscriptions[i]->qos);
   d5d40:	683a      	ldr	r2, [r7, #0]
   d5d42:	4629      	mov	r1, r5
   d5d44:	7913      	ldrb	r3, [r2, #4]
   d5d46:	6812      	ldr	r2, [r2, #0]
   d5d48:	4620      	mov	r0, r4
   d5d4a:	f7ff ffa8 	bl	d5c9e <_ZN13Adafruit_MQTT15subscribePacketEPhPKch>
      if (!sendPacket(buffer, len))
   d5d4e:	6823      	ldr	r3, [r4, #0]
   d5d50:	b282      	uxth	r2, r0
   d5d52:	695b      	ldr	r3, [r3, #20]
   d5d54:	4629      	mov	r1, r5
   d5d56:	4620      	mov	r0, r4
   d5d58:	4798      	blx	r3
   d5d5a:	2800      	cmp	r0, #0
   d5d5c:	d0c2      	beq.n	d5ce4 <_ZN13Adafruit_MQTT7connectEv+0xe>
      // Check for SUBACK if using MQTT 3.1.1 or higher
      // TODO: The Server is permitted to start sending PUBLISH packets matching the
      // Subscription before the Server sends the SUBACK Packet. (will really need to use callbacks - ada)

      //Serial.println("\t**looking for suback");
      if (processPacketsUntil(buffer, MQTT_CTRL_SUBACK, SUBACK_TIMEOUT_MS)) {
   d5d5e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   d5d62:	2209      	movs	r2, #9
   d5d64:	4629      	mov	r1, r5
   d5d66:	4620      	mov	r0, r4
   d5d68:	f7ff fdee 	bl	d5948 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>
   d5d6c:	b938      	cbnz	r0, d5d7e <_ZN13Adafruit_MQTT7connectEv+0xa8>
   d5d6e:	3e01      	subs	r6, #1
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    // Ignore subscriptions that aren't defined.
    if (subscriptions[i] == 0) continue;

    boolean success = false;
    for (uint8_t retry=0; (retry<3) && !success; retry++) { // retry until we get a suback    
   d5d70:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   d5d74:	d1e4      	bne.n	d5d40 <_ZN13Adafruit_MQTT7connectEv+0x6a>
	success = true;
	break;
      }
      //Serial.println("\t**failed, retrying!");
    }
    if (! success) return -2; // failed to sub for some reason
   d5d76:	f06f 0001 	mvn.w	r0, #1
  }

  return 0;
}
   d5d7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return -1;
  if (buffer[3] != 0)
    return buffer[3];

  // Setup subscriptions once connected.
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
   d5d7e:	4547      	cmp	r7, r8
   d5d80:	d1da      	bne.n	d5d38 <_ZN13Adafruit_MQTT7connectEv+0x62>
      //Serial.println("\t**failed, retrying!");
    }
    if (! success) return -2; // failed to sub for some reason
  }

  return 0;
   d5d82:	2000      	movs	r0, #0
   d5d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5d88 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>:
  return 2;
}

// Adafruit_MQTT_Publish Definition ////////////////////////////////////////////

Adafruit_MQTT_Publish::Adafruit_MQTT_Publish(Adafruit_MQTT *mqttserver,
   d5d88:	b510      	push	{r4, lr}
                                             const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
   d5d8a:	e880 0006 	stmia.w	r0, {r1, r2}
  qos = q;
   d5d8e:	7203      	strb	r3, [r0, #8]
}
   d5d90:	bd10      	pop	{r4, pc}

000d5d92 <_ZN21Adafruit_MQTT_Publish7publishEl>:
  char payload[12];
  ltoa(i, payload, 10);
  return mqtt->publish(topic, payload, qos);
}

bool Adafruit_MQTT_Publish::publish(int32_t i) {
   d5d92:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d5d94:	4604      	mov	r4, r0
  char payload[12];
  ltoa(i, payload, 10);
   d5d96:	220a      	movs	r2, #10
  char payload[12];
  ltoa(i, payload, 10);
  return mqtt->publish(topic, payload, qos);
}

bool Adafruit_MQTT_Publish::publish(int32_t i) {
   d5d98:	4608      	mov	r0, r1
  char payload[12];
  ltoa(i, payload, 10);
   d5d9a:	a901      	add	r1, sp, #4
   d5d9c:	f000 fca9 	bl	d66f2 <ltoa>
  return mqtt->publish(topic, payload, qos);
   d5da0:	7a23      	ldrb	r3, [r4, #8]
   d5da2:	aa01      	add	r2, sp, #4
   d5da4:	e894 0003 	ldmia.w	r4, {r0, r1}
   d5da8:	f7ff ff68 	bl	d5c7c <_ZN13Adafruit_MQTT7publishEPKcS1_h>
}
   d5dac:	b004      	add	sp, #16
   d5dae:	bd10      	pop	{r4, pc}

000d5db0 <_ZN21Adafruit_MQTT_Publish7publishEi>:
   d5db0:	f7ff bfef 	b.w	d5d92 <_ZN21Adafruit_MQTT_Publish7publishEl>

000d5db4 <_ZN21Adafruit_MQTT_Publish7publishEdh>:
  char payload[11];
  ultoa(i, payload, 10);
  return mqtt->publish(topic, payload, qos);
}

bool Adafruit_MQTT_Publish::publish(double f, uint8_t precision) {
   d5db4:	b510      	push	{r4, lr}
   d5db6:	b092      	sub	sp, #72	; 0x48
   d5db8:	4604      	mov	r4, r0
#include "Adafruit_MQTT.h"

#if defined(ARDUINO_SAMD_ZERO) || defined(ARDUINO_SAMD_MKR1000) || defined(SPARK)
static char *dtostrf (double val, signed char width, unsigned char prec, char *sout) {
  char fmt[20];
  sprintf(fmt, "%%%d.%df", width, prec);
   d5dba:	460b      	mov	r3, r1
   d5dbc:	2200      	movs	r2, #0
   d5dbe:	490b      	ldr	r1, [pc, #44]	; (d5dec <_ZN21Adafruit_MQTT_Publish7publishEdh+0x38>)
   d5dc0:	a802      	add	r0, sp, #8
  char payload[11];
  ultoa(i, payload, 10);
  return mqtt->publish(topic, payload, qos);
}

bool Adafruit_MQTT_Publish::publish(double f, uint8_t precision) {
   d5dc2:	ed8d 0b00 	vstr	d0, [sp]
#include "Adafruit_MQTT.h"

#if defined(ARDUINO_SAMD_ZERO) || defined(ARDUINO_SAMD_MKR1000) || defined(SPARK)
static char *dtostrf (double val, signed char width, unsigned char prec, char *sout) {
  char fmt[20];
  sprintf(fmt, "%%%d.%df", width, prec);
   d5dc6:	f000 fb17 	bl	d63f8 <sprintf>
  sprintf(sout, fmt, val);
   d5dca:	ed9d 0b00 	vldr	d0, [sp]
   d5dce:	a902      	add	r1, sp, #8
   d5dd0:	ec53 2b10 	vmov	r2, r3, d0
   d5dd4:	a807      	add	r0, sp, #28
   d5dd6:	f000 fb0f 	bl	d63f8 <sprintf>
}

bool Adafruit_MQTT_Publish::publish(double f, uint8_t precision) {
  char payload[41];  // Need to technically hold float max, 39 digits and minus sign.
  dtostrf(f, 0, precision, payload);
  return mqtt->publish(topic, payload, qos);
   d5dda:	7a23      	ldrb	r3, [r4, #8]
   d5ddc:	aa07      	add	r2, sp, #28
   d5dde:	e894 0003 	ldmia.w	r4, {r0, r1}
   d5de2:	f7ff ff4b 	bl	d5c7c <_ZN13Adafruit_MQTT7publishEPKcS1_h>
}
   d5de6:	b012      	add	sp, #72	; 0x48
   d5de8:	bd10      	pop	{r4, pc}
   d5dea:	bf00      	nop
   d5dec:	000dbb1a 	.word	0x000dbb1a

000d5df0 <_ZN23Adafruit_MQTT_SubscribeC1EP13Adafruit_MQTTPKch>:
}


// Adafruit_MQTT_Subscribe Definition //////////////////////////////////////////

Adafruit_MQTT_Subscribe::Adafruit_MQTT_Subscribe(Adafruit_MQTT *mqttserver,
   d5df0:	b510      	push	{r4, lr}
                                                 const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
  qos = q;
   d5df2:	7103      	strb	r3, [r0, #4]
  datalen = 0;
   d5df4:	2300      	movs	r3, #0

// Adafruit_MQTT_Subscribe Definition //////////////////////////////////////////

Adafruit_MQTT_Subscribe::Adafruit_MQTT_Subscribe(Adafruit_MQTT *mqttserver,
                                                 const char *feed, uint8_t q) {
  mqtt = mqttserver;
   d5df6:	6341      	str	r1, [r0, #52]	; 0x34
  topic = feed;
   d5df8:	6002      	str	r2, [r0, #0]
  qos = q;
  datalen = 0;
   d5dfa:	8343      	strh	r3, [r0, #26]
  callback_uint32t = 0;
   d5dfc:	61c3      	str	r3, [r0, #28]
  callback_buffer = 0;
   d5dfe:	6243      	str	r3, [r0, #36]	; 0x24
  callback_double = 0;
   d5e00:	6203      	str	r3, [r0, #32]
  callback_io = 0;
   d5e02:	6283      	str	r3, [r0, #40]	; 0x28
   d5e04:	62c3      	str	r3, [r0, #44]	; 0x2c
  io_feed = 0;
   d5e06:	6303      	str	r3, [r0, #48]	; 0x30
}
   d5e08:	bd10      	pop	{r4, pc}

000d5e0a <_GLOBAL__sub_I__Z11printBufferPht>:
   d5e0a:	f000 b811 	b.w	d5e30 <HAL_Pin_Map>
	...

000d5e10 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5e10:	b508      	push	{r3, lr}
   d5e12:	4b02      	ldr	r3, [pc, #8]	; (d5e1c <netdb_freeaddrinfo+0xc>)
   d5e14:	681b      	ldr	r3, [r3, #0]
   d5e16:	689b      	ldr	r3, [r3, #8]
   d5e18:	9301      	str	r3, [sp, #4]
   d5e1a:	bd08      	pop	{r3, pc}
   d5e1c:	00030268 	.word	0x00030268

000d5e20 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5e20:	b508      	push	{r3, lr}
   d5e22:	4b02      	ldr	r3, [pc, #8]	; (d5e2c <netdb_getaddrinfo+0xc>)
   d5e24:	681b      	ldr	r3, [r3, #0]
   d5e26:	68db      	ldr	r3, [r3, #12]
   d5e28:	9301      	str	r3, [sp, #4]
   d5e2a:	bd08      	pop	{r3, pc}
   d5e2c:	00030268 	.word	0x00030268

000d5e30 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d5e30:	b508      	push	{r3, lr}
   d5e32:	4b02      	ldr	r3, [pc, #8]	; (d5e3c <HAL_Pin_Map+0xc>)
   d5e34:	681b      	ldr	r3, [r3, #0]
   d5e36:	681b      	ldr	r3, [r3, #0]
   d5e38:	9301      	str	r3, [sp, #4]
   d5e3a:	bd08      	pop	{r3, pc}
   d5e3c:	0003022c 	.word	0x0003022c

000d5e40 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d5e40:	b508      	push	{r3, lr}
   d5e42:	4b02      	ldr	r3, [pc, #8]	; (d5e4c <HAL_Validate_Pin_Function+0xc>)
   d5e44:	681b      	ldr	r3, [r3, #0]
   d5e46:	685b      	ldr	r3, [r3, #4]
   d5e48:	9301      	str	r3, [sp, #4]
   d5e4a:	bd08      	pop	{r3, pc}
   d5e4c:	0003022c 	.word	0x0003022c

000d5e50 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5e50:	b508      	push	{r3, lr}
   d5e52:	4b02      	ldr	r3, [pc, #8]	; (d5e5c <HAL_Pin_Mode+0xc>)
   d5e54:	681b      	ldr	r3, [r3, #0]
   d5e56:	689b      	ldr	r3, [r3, #8]
   d5e58:	9301      	str	r3, [sp, #4]
   d5e5a:	bd08      	pop	{r3, pc}
   d5e5c:	0003022c 	.word	0x0003022c

000d5e60 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5e60:	b508      	push	{r3, lr}
   d5e62:	4b02      	ldr	r3, [pc, #8]	; (d5e6c <HAL_Get_Pin_Mode+0xc>)
   d5e64:	681b      	ldr	r3, [r3, #0]
   d5e66:	68db      	ldr	r3, [r3, #12]
   d5e68:	9301      	str	r3, [sp, #4]
   d5e6a:	bd08      	pop	{r3, pc}
   d5e6c:	0003022c 	.word	0x0003022c

000d5e70 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5e70:	b508      	push	{r3, lr}
   d5e72:	4b02      	ldr	r3, [pc, #8]	; (d5e7c <HAL_GPIO_Write+0xc>)
   d5e74:	681b      	ldr	r3, [r3, #0]
   d5e76:	691b      	ldr	r3, [r3, #16]
   d5e78:	9301      	str	r3, [sp, #4]
   d5e7a:	bd08      	pop	{r3, pc}
   d5e7c:	0003022c 	.word	0x0003022c

000d5e80 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d5e80:	b508      	push	{r3, lr}
   d5e82:	4b02      	ldr	r3, [pc, #8]	; (d5e8c <HAL_GPIO_Read+0xc>)
   d5e84:	681b      	ldr	r3, [r3, #0]
   d5e86:	695b      	ldr	r3, [r3, #20]
   d5e88:	9301      	str	r3, [sp, #4]
   d5e8a:	bd08      	pop	{r3, pc}
   d5e8c:	0003022c 	.word	0x0003022c

000d5e90 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d5e90:	b508      	push	{r3, lr}
   d5e92:	4b02      	ldr	r3, [pc, #8]	; (d5e9c <HAL_ADC_Read+0xc>)
   d5e94:	681b      	ldr	r3, [r3, #0]
   d5e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5e98:	9301      	str	r3, [sp, #4]
   d5e9a:	bd08      	pop	{r3, pc}
   d5e9c:	0003022c 	.word	0x0003022c

000d5ea0 <HAL_Pulse_In>:

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
DYNALIB_FN(17, hal_gpio, HAL_Get_System_Interrupt_Handler, uint8_t(hal_irq_t, HAL_InterruptCallback*, void*))
DYNALIB_FN(18, hal_gpio, HAL_System_Interrupt_Trigger, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, HAL_Pulse_In, uint32_t(pin_t, uint16_t))
   d5ea0:	b508      	push	{r3, lr}
   d5ea2:	4b02      	ldr	r3, [pc, #8]	; (d5eac <HAL_Pulse_In+0xc>)
   d5ea4:	681b      	ldr	r3, [r3, #0]
   d5ea6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5ea8:	9301      	str	r3, [sp, #4]
   d5eaa:	bd08      	pop	{r3, pc}
   d5eac:	0003022c 	.word	0x0003022c

000d5eb0 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d5eb0:	b508      	push	{r3, lr}
   d5eb2:	4b02      	ldr	r3, [pc, #8]	; (d5ebc <HAL_SPI_Begin+0xc>)
   d5eb4:	681b      	ldr	r3, [r3, #0]
   d5eb6:	681b      	ldr	r3, [r3, #0]
   d5eb8:	9301      	str	r3, [sp, #4]
   d5eba:	bd08      	pop	{r3, pc}
   d5ebc:	00030230 	.word	0x00030230

000d5ec0 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d5ec0:	b508      	push	{r3, lr}
   d5ec2:	4b02      	ldr	r3, [pc, #8]	; (d5ecc <HAL_SPI_Send_Receive_Data+0xc>)
   d5ec4:	681b      	ldr	r3, [r3, #0]
   d5ec6:	695b      	ldr	r3, [r3, #20]
   d5ec8:	9301      	str	r3, [sp, #4]
   d5eca:	bd08      	pop	{r3, pc}
   d5ecc:	00030230 	.word	0x00030230

000d5ed0 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d5ed0:	b508      	push	{r3, lr}
   d5ed2:	4b02      	ldr	r3, [pc, #8]	; (d5edc <HAL_SPI_Init+0xc>)
   d5ed4:	681b      	ldr	r3, [r3, #0]
   d5ed6:	69db      	ldr	r3, [r3, #28]
   d5ed8:	9301      	str	r3, [sp, #4]
   d5eda:	bd08      	pop	{r3, pc}
   d5edc:	00030230 	.word	0x00030230

000d5ee0 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d5ee0:	b508      	push	{r3, lr}
   d5ee2:	4b02      	ldr	r3, [pc, #8]	; (d5eec <HAL_SPI_Is_Enabled+0xc>)
   d5ee4:	681b      	ldr	r3, [r3, #0]
   d5ee6:	6a1b      	ldr	r3, [r3, #32]
   d5ee8:	9301      	str	r3, [sp, #4]
   d5eea:	bd08      	pop	{r3, pc}
   d5eec:	00030230 	.word	0x00030230

000d5ef0 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d5ef0:	b508      	push	{r3, lr}
   d5ef2:	4b02      	ldr	r3, [pc, #8]	; (d5efc <HAL_SPI_Info+0xc>)
   d5ef4:	681b      	ldr	r3, [r3, #0]
   d5ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5ef8:	9301      	str	r3, [sp, #4]
   d5efa:	bd08      	pop	{r3, pc}
   d5efc:	00030230 	.word	0x00030230

000d5f00 <HAL_SPI_Set_Settings>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d5f00:	b508      	push	{r3, lr}
   d5f02:	4b02      	ldr	r3, [pc, #8]	; (d5f0c <HAL_SPI_Set_Settings+0xc>)
   d5f04:	681b      	ldr	r3, [r3, #0]
   d5f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5f08:	9301      	str	r3, [sp, #4]
   d5f0a:	bd08      	pop	{r3, pc}
   d5f0c:	00030230 	.word	0x00030230

000d5f10 <HAL_SPI_Acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d5f10:	b508      	push	{r3, lr}
   d5f12:	4b02      	ldr	r3, [pc, #8]	; (d5f1c <HAL_SPI_Acquire+0xc>)
   d5f14:	681b      	ldr	r3, [r3, #0]
   d5f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5f18:	9301      	str	r3, [sp, #4]
   d5f1a:	bd08      	pop	{r3, pc}
   d5f1c:	00030230 	.word	0x00030230

000d5f20 <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d5f20:	b508      	push	{r3, lr}
   d5f22:	4b02      	ldr	r3, [pc, #8]	; (d5f2c <HAL_SPI_Release+0xc>)
   d5f24:	681b      	ldr	r3, [r3, #0]
   d5f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5f28:	9301      	str	r3, [sp, #4]
   d5f2a:	bd08      	pop	{r3, pc}
   d5f2c:	00030230 	.word	0x00030230

000d5f30 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d5f30:	b508      	push	{r3, lr}
   d5f32:	4b02      	ldr	r3, [pc, #8]	; (d5f3c <if_index_to_name+0xc>)
   d5f34:	681b      	ldr	r3, [r3, #0]
   d5f36:	695b      	ldr	r3, [r3, #20]
   d5f38:	9301      	str	r3, [sp, #4]
   d5f3a:	bd08      	pop	{r3, pc}
   d5f3c:	0003026c 	.word	0x0003026c

000d5f40 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5f40:	b508      	push	{r3, lr}
   d5f42:	4b02      	ldr	r3, [pc, #8]	; (d5f4c <HAL_RNG_GetRandomNumber+0xc>)
   d5f44:	681b      	ldr	r3, [r3, #0]
   d5f46:	685b      	ldr	r3, [r3, #4]
   d5f48:	9301      	str	r3, [sp, #4]
   d5f4a:	bd08      	pop	{r3, pc}
   d5f4c:	00030218 	.word	0x00030218

000d5f50 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d5f50:	b508      	push	{r3, lr}
   d5f52:	4b02      	ldr	r3, [pc, #8]	; (d5f5c <HAL_Delay_Microseconds+0xc>)
   d5f54:	681b      	ldr	r3, [r3, #0]
   d5f56:	68db      	ldr	r3, [r3, #12]
   d5f58:	9301      	str	r3, [sp, #4]
   d5f5a:	bd08      	pop	{r3, pc}
   d5f5c:	00030218 	.word	0x00030218

000d5f60 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5f60:	b508      	push	{r3, lr}
   d5f62:	4b02      	ldr	r3, [pc, #8]	; (d5f6c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5f64:	681b      	ldr	r3, [r3, #0]
   d5f66:	695b      	ldr	r3, [r3, #20]
   d5f68:	9301      	str	r3, [sp, #4]
   d5f6a:	bd08      	pop	{r3, pc}
   d5f6c:	00030218 	.word	0x00030218

000d5f70 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d5f70:	b508      	push	{r3, lr}
   d5f72:	4b02      	ldr	r3, [pc, #8]	; (d5f7c <HAL_RTC_Get_UnixTime+0xc>)
   d5f74:	681b      	ldr	r3, [r3, #0]
   d5f76:	69db      	ldr	r3, [r3, #28]
   d5f78:	9301      	str	r3, [sp, #4]
   d5f7a:	bd08      	pop	{r3, pc}
   d5f7c:	00030218 	.word	0x00030218

000d5f80 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d5f80:	b508      	push	{r3, lr}
   d5f82:	4b02      	ldr	r3, [pc, #8]	; (d5f8c <HAL_RTC_Time_Is_Valid+0xc>)
   d5f84:	681b      	ldr	r3, [r3, #0]
   d5f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5f88:	9301      	str	r3, [sp, #4]
   d5f8a:	bd08      	pop	{r3, pc}
   d5f8c:	00030218 	.word	0x00030218

000d5f90 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d5f90:	b508      	push	{r3, lr}
   d5f92:	4b02      	ldr	r3, [pc, #8]	; (d5f9c <os_thread_is_current+0xc>)
   d5f94:	681b      	ldr	r3, [r3, #0]
   d5f96:	689b      	ldr	r3, [r3, #8]
   d5f98:	9301      	str	r3, [sp, #4]
   d5f9a:	bd08      	pop	{r3, pc}
   d5f9c:	00030248 	.word	0x00030248

000d5fa0 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d5fa0:	b508      	push	{r3, lr}
   d5fa2:	4b02      	ldr	r3, [pc, #8]	; (d5fac <os_thread_join+0xc>)
   d5fa4:	681b      	ldr	r3, [r3, #0]
   d5fa6:	691b      	ldr	r3, [r3, #16]
   d5fa8:	9301      	str	r3, [sp, #4]
   d5faa:	bd08      	pop	{r3, pc}
   d5fac:	00030248 	.word	0x00030248

000d5fb0 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d5fb0:	b508      	push	{r3, lr}
   d5fb2:	4b02      	ldr	r3, [pc, #8]	; (d5fbc <os_thread_cleanup+0xc>)
   d5fb4:	681b      	ldr	r3, [r3, #0]
   d5fb6:	695b      	ldr	r3, [r3, #20]
   d5fb8:	9301      	str	r3, [sp, #4]
   d5fba:	bd08      	pop	{r3, pc}
   d5fbc:	00030248 	.word	0x00030248

000d5fc0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5fc0:	b508      	push	{r3, lr}
   d5fc2:	4b02      	ldr	r3, [pc, #8]	; (d5fcc <os_mutex_recursive_create+0xc>)
   d5fc4:	681b      	ldr	r3, [r3, #0]
   d5fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5fc8:	9301      	str	r3, [sp, #4]
   d5fca:	bd08      	pop	{r3, pc}
   d5fcc:	00030248 	.word	0x00030248

000d5fd0 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5fd0:	b508      	push	{r3, lr}
   d5fd2:	4b02      	ldr	r3, [pc, #8]	; (d5fdc <os_mutex_recursive_destroy+0xc>)
   d5fd4:	681b      	ldr	r3, [r3, #0]
   d5fd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5fd8:	9301      	str	r3, [sp, #4]
   d5fda:	bd08      	pop	{r3, pc}
   d5fdc:	00030248 	.word	0x00030248

000d5fe0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5fe0:	b508      	push	{r3, lr}
   d5fe2:	4b02      	ldr	r3, [pc, #8]	; (d5fec <inet_inet_ntop+0xc>)
   d5fe4:	681b      	ldr	r3, [r3, #0]
   d5fe6:	695b      	ldr	r3, [r3, #20]
   d5fe8:	9301      	str	r3, [sp, #4]
   d5fea:	bd08      	pop	{r3, pc}
   d5fec:	00030264 	.word	0x00030264

000d5ff0 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d5ff0:	b508      	push	{r3, lr}
   d5ff2:	4b02      	ldr	r3, [pc, #8]	; (d5ffc <inet_htonl+0xc>)
   d5ff4:	681b      	ldr	r3, [r3, #0]
   d5ff6:	6a1b      	ldr	r3, [r3, #32]
   d5ff8:	9301      	str	r3, [sp, #4]
   d5ffa:	bd08      	pop	{r3, pc}
   d5ffc:	00030264 	.word	0x00030264

000d6000 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d6000:	b508      	push	{r3, lr}
   d6002:	4b02      	ldr	r3, [pc, #8]	; (d600c <inet_htons+0xc>)
   d6004:	681b      	ldr	r3, [r3, #0]
   d6006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6008:	9301      	str	r3, [sp, #4]
   d600a:	bd08      	pop	{r3, pc}
   d600c:	00030264 	.word	0x00030264

000d6010 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d6010:	b508      	push	{r3, lr}
   d6012:	4b02      	ldr	r3, [pc, #8]	; (d601c <HAL_USART_Init+0xc>)
   d6014:	681b      	ldr	r3, [r3, #0]
   d6016:	681b      	ldr	r3, [r3, #0]
   d6018:	9301      	str	r3, [sp, #4]
   d601a:	bd08      	pop	{r3, pc}
   d601c:	0003023c 	.word	0x0003023c

000d6020 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d6020:	b508      	push	{r3, lr}
   d6022:	4b02      	ldr	r3, [pc, #8]	; (d602c <HAL_USART_Write_Data+0xc>)
   d6024:	681b      	ldr	r3, [r3, #0]
   d6026:	68db      	ldr	r3, [r3, #12]
   d6028:	9301      	str	r3, [sp, #4]
   d602a:	bd08      	pop	{r3, pc}
   d602c:	0003023c 	.word	0x0003023c

000d6030 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d6030:	b508      	push	{r3, lr}
   d6032:	4b02      	ldr	r3, [pc, #8]	; (d603c <HAL_USART_Available_Data+0xc>)
   d6034:	681b      	ldr	r3, [r3, #0]
   d6036:	691b      	ldr	r3, [r3, #16]
   d6038:	9301      	str	r3, [sp, #4]
   d603a:	bd08      	pop	{r3, pc}
   d603c:	0003023c 	.word	0x0003023c

000d6040 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d6040:	b508      	push	{r3, lr}
   d6042:	4b02      	ldr	r3, [pc, #8]	; (d604c <HAL_USART_Read_Data+0xc>)
   d6044:	681b      	ldr	r3, [r3, #0]
   d6046:	695b      	ldr	r3, [r3, #20]
   d6048:	9301      	str	r3, [sp, #4]
   d604a:	bd08      	pop	{r3, pc}
   d604c:	0003023c 	.word	0x0003023c

000d6050 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d6050:	b508      	push	{r3, lr}
   d6052:	4b02      	ldr	r3, [pc, #8]	; (d605c <HAL_USART_Peek_Data+0xc>)
   d6054:	681b      	ldr	r3, [r3, #0]
   d6056:	699b      	ldr	r3, [r3, #24]
   d6058:	9301      	str	r3, [sp, #4]
   d605a:	bd08      	pop	{r3, pc}
   d605c:	0003023c 	.word	0x0003023c

000d6060 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d6060:	b508      	push	{r3, lr}
   d6062:	4b02      	ldr	r3, [pc, #8]	; (d606c <HAL_USART_Flush_Data+0xc>)
   d6064:	681b      	ldr	r3, [r3, #0]
   d6066:	69db      	ldr	r3, [r3, #28]
   d6068:	9301      	str	r3, [sp, #4]
   d606a:	bd08      	pop	{r3, pc}
   d606c:	0003023c 	.word	0x0003023c

000d6070 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d6070:	b508      	push	{r3, lr}
   d6072:	4b02      	ldr	r3, [pc, #8]	; (d607c <HAL_USART_Is_Enabled+0xc>)
   d6074:	681b      	ldr	r3, [r3, #0]
   d6076:	6a1b      	ldr	r3, [r3, #32]
   d6078:	9301      	str	r3, [sp, #4]
   d607a:	bd08      	pop	{r3, pc}
   d607c:	0003023c 	.word	0x0003023c

000d6080 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d6080:	b508      	push	{r3, lr}
   d6082:	4b02      	ldr	r3, [pc, #8]	; (d608c <HAL_USART_Available_Data_For_Write+0xc>)
   d6084:	681b      	ldr	r3, [r3, #0]
   d6086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6088:	9301      	str	r3, [sp, #4]
   d608a:	bd08      	pop	{r3, pc}
   d608c:	0003023c 	.word	0x0003023c

000d6090 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d6090:	b508      	push	{r3, lr}
   d6092:	4b02      	ldr	r3, [pc, #8]	; (d609c <HAL_I2C_Begin+0xc>)
   d6094:	681b      	ldr	r3, [r3, #0]
   d6096:	68db      	ldr	r3, [r3, #12]
   d6098:	9301      	str	r3, [sp, #4]
   d609a:	bd08      	pop	{r3, pc}
   d609c:	00030228 	.word	0x00030228

000d60a0 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d60a0:	b508      	push	{r3, lr}
   d60a2:	4b02      	ldr	r3, [pc, #8]	; (d60ac <HAL_I2C_Begin_Transmission+0xc>)
   d60a4:	681b      	ldr	r3, [r3, #0]
   d60a6:	699b      	ldr	r3, [r3, #24]
   d60a8:	9301      	str	r3, [sp, #4]
   d60aa:	bd08      	pop	{r3, pc}
   d60ac:	00030228 	.word	0x00030228

000d60b0 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d60b0:	b508      	push	{r3, lr}
   d60b2:	4b02      	ldr	r3, [pc, #8]	; (d60bc <HAL_I2C_End_Transmission+0xc>)
   d60b4:	681b      	ldr	r3, [r3, #0]
   d60b6:	69db      	ldr	r3, [r3, #28]
   d60b8:	9301      	str	r3, [sp, #4]
   d60ba:	bd08      	pop	{r3, pc}
   d60bc:	00030228 	.word	0x00030228

000d60c0 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d60c0:	b508      	push	{r3, lr}
   d60c2:	4b02      	ldr	r3, [pc, #8]	; (d60cc <HAL_I2C_Write_Data+0xc>)
   d60c4:	681b      	ldr	r3, [r3, #0]
   d60c6:	6a1b      	ldr	r3, [r3, #32]
   d60c8:	9301      	str	r3, [sp, #4]
   d60ca:	bd08      	pop	{r3, pc}
   d60cc:	00030228 	.word	0x00030228

000d60d0 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d60d0:	b508      	push	{r3, lr}
   d60d2:	4b02      	ldr	r3, [pc, #8]	; (d60dc <HAL_I2C_Available_Data+0xc>)
   d60d4:	681b      	ldr	r3, [r3, #0]
   d60d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d60d8:	9301      	str	r3, [sp, #4]
   d60da:	bd08      	pop	{r3, pc}
   d60dc:	00030228 	.word	0x00030228

000d60e0 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d60e0:	b508      	push	{r3, lr}
   d60e2:	4b02      	ldr	r3, [pc, #8]	; (d60ec <HAL_I2C_Read_Data+0xc>)
   d60e4:	681b      	ldr	r3, [r3, #0]
   d60e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d60e8:	9301      	str	r3, [sp, #4]
   d60ea:	bd08      	pop	{r3, pc}
   d60ec:	00030228 	.word	0x00030228

000d60f0 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d60f0:	b508      	push	{r3, lr}
   d60f2:	4b02      	ldr	r3, [pc, #8]	; (d60fc <HAL_I2C_Peek_Data+0xc>)
   d60f4:	681b      	ldr	r3, [r3, #0]
   d60f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d60f8:	9301      	str	r3, [sp, #4]
   d60fa:	bd08      	pop	{r3, pc}
   d60fc:	00030228 	.word	0x00030228

000d6100 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d6100:	b508      	push	{r3, lr}
   d6102:	4b02      	ldr	r3, [pc, #8]	; (d610c <HAL_I2C_Flush_Data+0xc>)
   d6104:	681b      	ldr	r3, [r3, #0]
   d6106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6108:	9301      	str	r3, [sp, #4]
   d610a:	bd08      	pop	{r3, pc}
   d610c:	00030228 	.word	0x00030228

000d6110 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d6110:	b508      	push	{r3, lr}
   d6112:	4b02      	ldr	r3, [pc, #8]	; (d611c <HAL_I2C_Is_Enabled+0xc>)
   d6114:	681b      	ldr	r3, [r3, #0]
   d6116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6118:	9301      	str	r3, [sp, #4]
   d611a:	bd08      	pop	{r3, pc}
   d611c:	00030228 	.word	0x00030228

000d6120 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d6120:	b508      	push	{r3, lr}
   d6122:	4b02      	ldr	r3, [pc, #8]	; (d612c <HAL_I2C_Init+0xc>)
   d6124:	681b      	ldr	r3, [r3, #0]
   d6126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6128:	9301      	str	r3, [sp, #4]
   d612a:	bd08      	pop	{r3, pc}
   d612c:	00030228 	.word	0x00030228

000d6130 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d6130:	b508      	push	{r3, lr}
   d6132:	4b02      	ldr	r3, [pc, #8]	; (d613c <HAL_I2C_Request_Data_Ex+0xc>)
   d6134:	681b      	ldr	r3, [r3, #0]
   d6136:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6138:	9301      	str	r3, [sp, #4]
   d613a:	bd08      	pop	{r3, pc}
   d613c:	00030228 	.word	0x00030228

000d6140 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d6140:	b508      	push	{r3, lr}
   d6142:	4b02      	ldr	r3, [pc, #8]	; (d614c <sock_setsockopt+0xc>)
   d6144:	681b      	ldr	r3, [r3, #0]
   d6146:	699b      	ldr	r3, [r3, #24]
   d6148:	9301      	str	r3, [sp, #4]
   d614a:	bd08      	pop	{r3, pc}
   d614c:	00030238 	.word	0x00030238

000d6150 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d6150:	b508      	push	{r3, lr}
   d6152:	4b02      	ldr	r3, [pc, #8]	; (d615c <sock_close+0xc>)
   d6154:	681b      	ldr	r3, [r3, #0]
   d6156:	69db      	ldr	r3, [r3, #28]
   d6158:	9301      	str	r3, [sp, #4]
   d615a:	bd08      	pop	{r3, pc}
   d615c:	00030238 	.word	0x00030238

000d6160 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d6160:	b508      	push	{r3, lr}
   d6162:	4b02      	ldr	r3, [pc, #8]	; (d616c <sock_connect+0xc>)
   d6164:	681b      	ldr	r3, [r3, #0]
   d6166:	6a1b      	ldr	r3, [r3, #32]
   d6168:	9301      	str	r3, [sp, #4]
   d616a:	bd08      	pop	{r3, pc}
   d616c:	00030238 	.word	0x00030238

000d6170 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d6170:	b508      	push	{r3, lr}
   d6172:	4b02      	ldr	r3, [pc, #8]	; (d617c <sock_recv+0xc>)
   d6174:	681b      	ldr	r3, [r3, #0]
   d6176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6178:	9301      	str	r3, [sp, #4]
   d617a:	bd08      	pop	{r3, pc}
   d617c:	00030238 	.word	0x00030238

000d6180 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d6180:	b508      	push	{r3, lr}
   d6182:	4b02      	ldr	r3, [pc, #8]	; (d618c <sock_send+0xc>)
   d6184:	681b      	ldr	r3, [r3, #0]
   d6186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6188:	9301      	str	r3, [sp, #4]
   d618a:	bd08      	pop	{r3, pc}
   d618c:	00030238 	.word	0x00030238

000d6190 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d6190:	b508      	push	{r3, lr}
   d6192:	4b02      	ldr	r3, [pc, #8]	; (d619c <sock_socket+0xc>)
   d6194:	681b      	ldr	r3, [r3, #0]
   d6196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d6198:	9301      	str	r3, [sp, #4]
   d619a:	bd08      	pop	{r3, pc}
   d619c:	00030238 	.word	0x00030238

000d61a0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d61a0:	b508      	push	{r3, lr}
   d61a2:	4b02      	ldr	r3, [pc, #8]	; (d61ac <HAL_USB_USART_Init+0xc>)
   d61a4:	681b      	ldr	r3, [r3, #0]
   d61a6:	681b      	ldr	r3, [r3, #0]
   d61a8:	9301      	str	r3, [sp, #4]
   d61aa:	bd08      	pop	{r3, pc}
   d61ac:	0003024c 	.word	0x0003024c

000d61b0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d61b0:	b508      	push	{r3, lr}
   d61b2:	4b02      	ldr	r3, [pc, #8]	; (d61bc <HAL_USB_USART_Begin+0xc>)
   d61b4:	681b      	ldr	r3, [r3, #0]
   d61b6:	685b      	ldr	r3, [r3, #4]
   d61b8:	9301      	str	r3, [sp, #4]
   d61ba:	bd08      	pop	{r3, pc}
   d61bc:	0003024c 	.word	0x0003024c

000d61c0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d61c0:	b508      	push	{r3, lr}
   d61c2:	4b02      	ldr	r3, [pc, #8]	; (d61cc <HAL_USB_USART_Available_Data+0xc>)
   d61c4:	681b      	ldr	r3, [r3, #0]
   d61c6:	691b      	ldr	r3, [r3, #16]
   d61c8:	9301      	str	r3, [sp, #4]
   d61ca:	bd08      	pop	{r3, pc}
   d61cc:	0003024c 	.word	0x0003024c

000d61d0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d61d0:	b508      	push	{r3, lr}
   d61d2:	4b02      	ldr	r3, [pc, #8]	; (d61dc <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d61d4:	681b      	ldr	r3, [r3, #0]
   d61d6:	695b      	ldr	r3, [r3, #20]
   d61d8:	9301      	str	r3, [sp, #4]
   d61da:	bd08      	pop	{r3, pc}
   d61dc:	0003024c 	.word	0x0003024c

000d61e0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d61e0:	b508      	push	{r3, lr}
   d61e2:	4b02      	ldr	r3, [pc, #8]	; (d61ec <HAL_USB_USART_Receive_Data+0xc>)
   d61e4:	681b      	ldr	r3, [r3, #0]
   d61e6:	699b      	ldr	r3, [r3, #24]
   d61e8:	9301      	str	r3, [sp, #4]
   d61ea:	bd08      	pop	{r3, pc}
   d61ec:	0003024c 	.word	0x0003024c

000d61f0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d61f0:	b508      	push	{r3, lr}
   d61f2:	4b02      	ldr	r3, [pc, #8]	; (d61fc <HAL_USB_USART_Send_Data+0xc>)
   d61f4:	681b      	ldr	r3, [r3, #0]
   d61f6:	69db      	ldr	r3, [r3, #28]
   d61f8:	9301      	str	r3, [sp, #4]
   d61fa:	bd08      	pop	{r3, pc}
   d61fc:	0003024c 	.word	0x0003024c

000d6200 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d6200:	b508      	push	{r3, lr}
   d6202:	4b02      	ldr	r3, [pc, #8]	; (d620c <HAL_USB_USART_Flush_Data+0xc>)
   d6204:	681b      	ldr	r3, [r3, #0]
   d6206:	6a1b      	ldr	r3, [r3, #32]
   d6208:	9301      	str	r3, [sp, #4]
   d620a:	bd08      	pop	{r3, pc}
   d620c:	0003024c 	.word	0x0003024c

000d6210 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d6210:	b508      	push	{r3, lr}
   d6212:	4b02      	ldr	r3, [pc, #8]	; (d621c <panic_+0xc>)
   d6214:	681b      	ldr	r3, [r3, #0]
   d6216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6218:	9301      	str	r3, [sp, #4]
   d621a:	bd08      	pop	{r3, pc}
   d621c:	00030260 	.word	0x00030260

000d6220 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d6220:	b508      	push	{r3, lr}
   d6222:	4b02      	ldr	r3, [pc, #8]	; (d622c <log_message+0xc>)
   d6224:	681b      	ldr	r3, [r3, #0]
   d6226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6228:	9301      	str	r3, [sp, #4]
   d622a:	bd08      	pop	{r3, pc}
   d622c:	00030260 	.word	0x00030260

000d6230 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d6230:	b508      	push	{r3, lr}
   d6232:	4b02      	ldr	r3, [pc, #8]	; (d623c <system_mode+0xc>)
   d6234:	681b      	ldr	r3, [r3, #0]
   d6236:	681b      	ldr	r3, [r3, #0]
   d6238:	9301      	str	r3, [sp, #4]
   d623a:	bd08      	pop	{r3, pc}
   d623c:	00030220 	.word	0x00030220

000d6240 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d6240:	b508      	push	{r3, lr}
   d6242:	4b02      	ldr	r3, [pc, #8]	; (d624c <set_system_mode+0xc>)
   d6244:	681b      	ldr	r3, [r3, #0]
   d6246:	685b      	ldr	r3, [r3, #4]
   d6248:	9301      	str	r3, [sp, #4]
   d624a:	bd08      	pop	{r3, pc}
   d624c:	00030220 	.word	0x00030220

000d6250 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d6250:	b508      	push	{r3, lr}
   d6252:	4b02      	ldr	r3, [pc, #8]	; (d625c <system_delay_ms+0xc>)
   d6254:	681b      	ldr	r3, [r3, #0]
   d6256:	695b      	ldr	r3, [r3, #20]
   d6258:	9301      	str	r3, [sp, #4]
   d625a:	bd08      	pop	{r3, pc}
   d625c:	00030220 	.word	0x00030220

000d6260 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d6260:	b508      	push	{r3, lr}
   d6262:	4b02      	ldr	r3, [pc, #8]	; (d626c <application_thread_current+0xc>)
   d6264:	681b      	ldr	r3, [r3, #0]
   d6266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d6268:	9301      	str	r3, [sp, #4]
   d626a:	bd08      	pop	{r3, pc}
   d626c:	00030220 	.word	0x00030220

000d6270 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d6270:	b508      	push	{r3, lr}
   d6272:	4b02      	ldr	r3, [pc, #8]	; (d627c <application_thread_invoke+0xc>)
   d6274:	681b      	ldr	r3, [r3, #0]
   d6276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d6278:	9301      	str	r3, [sp, #4]
   d627a:	bd08      	pop	{r3, pc}
   d627c:	00030220 	.word	0x00030220

000d6280 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d6280:	b508      	push	{r3, lr}
   d6282:	4b02      	ldr	r3, [pc, #8]	; (d628c <system_thread_get_state+0xc>)
   d6284:	681b      	ldr	r3, [r3, #0]
   d6286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d6288:	9301      	str	r3, [sp, #4]
   d628a:	bd08      	pop	{r3, pc}
   d628c:	00030220 	.word	0x00030220

000d6290 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d6290:	b508      	push	{r3, lr}
   d6292:	4b03      	ldr	r3, [pc, #12]	; (d62a0 <system_ctrl_set_app_request_handler+0x10>)
   d6294:	681b      	ldr	r3, [r3, #0]
   d6296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d629a:	9301      	str	r3, [sp, #4]
   d629c:	bd08      	pop	{r3, pc}
   d629e:	0000      	.short	0x0000
   d62a0:	00030220 	.word	0x00030220

000d62a4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d62a4:	b508      	push	{r3, lr}
   d62a6:	4b03      	ldr	r3, [pc, #12]	; (d62b4 <system_ctrl_set_result+0x10>)
   d62a8:	681b      	ldr	r3, [r3, #0]
   d62aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d62ae:	9301      	str	r3, [sp, #4]
   d62b0:	bd08      	pop	{r3, pc}
   d62b2:	0000      	.short	0x0000
   d62b4:	00030220 	.word	0x00030220

000d62b8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d62b8:	b508      	push	{r3, lr}
   d62ba:	4b02      	ldr	r3, [pc, #8]	; (d62c4 <network_connect+0xc>)
   d62bc:	681b      	ldr	r3, [r3, #0]
   d62be:	685b      	ldr	r3, [r3, #4]
   d62c0:	9301      	str	r3, [sp, #4]
   d62c2:	bd08      	pop	{r3, pc}
   d62c4:	00030240 	.word	0x00030240

000d62c8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d62c8:	b508      	push	{r3, lr}
   d62ca:	4b02      	ldr	r3, [pc, #8]	; (d62d4 <network_connecting+0xc>)
   d62cc:	681b      	ldr	r3, [r3, #0]
   d62ce:	689b      	ldr	r3, [r3, #8]
   d62d0:	9301      	str	r3, [sp, #4]
   d62d2:	bd08      	pop	{r3, pc}
   d62d4:	00030240 	.word	0x00030240

000d62d8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d62d8:	b508      	push	{r3, lr}
   d62da:	4b02      	ldr	r3, [pc, #8]	; (d62e4 <network_disconnect+0xc>)
   d62dc:	681b      	ldr	r3, [r3, #0]
   d62de:	68db      	ldr	r3, [r3, #12]
   d62e0:	9301      	str	r3, [sp, #4]
   d62e2:	bd08      	pop	{r3, pc}
   d62e4:	00030240 	.word	0x00030240

000d62e8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d62e8:	b508      	push	{r3, lr}
   d62ea:	4b02      	ldr	r3, [pc, #8]	; (d62f4 <network_ready+0xc>)
   d62ec:	681b      	ldr	r3, [r3, #0]
   d62ee:	691b      	ldr	r3, [r3, #16]
   d62f0:	9301      	str	r3, [sp, #4]
   d62f2:	bd08      	pop	{r3, pc}
   d62f4:	00030240 	.word	0x00030240

000d62f8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d62f8:	b508      	push	{r3, lr}
   d62fa:	4b02      	ldr	r3, [pc, #8]	; (d6304 <network_on+0xc>)
   d62fc:	681b      	ldr	r3, [r3, #0]
   d62fe:	695b      	ldr	r3, [r3, #20]
   d6300:	9301      	str	r3, [sp, #4]
   d6302:	bd08      	pop	{r3, pc}
   d6304:	00030240 	.word	0x00030240

000d6308 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d6308:	b508      	push	{r3, lr}
   d630a:	4b02      	ldr	r3, [pc, #8]	; (d6314 <network_off+0xc>)
   d630c:	681b      	ldr	r3, [r3, #0]
   d630e:	699b      	ldr	r3, [r3, #24]
   d6310:	9301      	str	r3, [sp, #4]
   d6312:	bd08      	pop	{r3, pc}
   d6314:	00030240 	.word	0x00030240

000d6318 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d6318:	b508      	push	{r3, lr}
   d631a:	4b02      	ldr	r3, [pc, #8]	; (d6324 <network_listen+0xc>)
   d631c:	681b      	ldr	r3, [r3, #0]
   d631e:	69db      	ldr	r3, [r3, #28]
   d6320:	9301      	str	r3, [sp, #4]
   d6322:	bd08      	pop	{r3, pc}
   d6324:	00030240 	.word	0x00030240

000d6328 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d6328:	b508      	push	{r3, lr}
   d632a:	4b02      	ldr	r3, [pc, #8]	; (d6334 <network_listening+0xc>)
   d632c:	681b      	ldr	r3, [r3, #0]
   d632e:	6a1b      	ldr	r3, [r3, #32]
   d6330:	9301      	str	r3, [sp, #4]
   d6332:	bd08      	pop	{r3, pc}
   d6334:	00030240 	.word	0x00030240

000d6338 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d6338:	b508      	push	{r3, lr}
   d633a:	4b02      	ldr	r3, [pc, #8]	; (d6344 <network_set_listen_timeout+0xc>)
   d633c:	681b      	ldr	r3, [r3, #0]
   d633e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6340:	9301      	str	r3, [sp, #4]
   d6342:	bd08      	pop	{r3, pc}
   d6344:	00030240 	.word	0x00030240

000d6348 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d6348:	b508      	push	{r3, lr}
   d634a:	4b02      	ldr	r3, [pc, #8]	; (d6354 <network_get_listen_timeout+0xc>)
   d634c:	681b      	ldr	r3, [r3, #0]
   d634e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6350:	9301      	str	r3, [sp, #4]
   d6352:	bd08      	pop	{r3, pc}
   d6354:	00030240 	.word	0x00030240

000d6358 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d6358:	b508      	push	{r3, lr}
   d635a:	4b02      	ldr	r3, [pc, #8]	; (d6364 <spark_variable+0xc>)
   d635c:	681b      	ldr	r3, [r3, #0]
   d635e:	681b      	ldr	r3, [r3, #0]
   d6360:	9301      	str	r3, [sp, #4]
   d6362:	bd08      	pop	{r3, pc}
   d6364:	00030244 	.word	0x00030244

000d6368 <spark_process>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d6368:	b508      	push	{r3, lr}
   d636a:	4b02      	ldr	r3, [pc, #8]	; (d6374 <spark_process+0xc>)
   d636c:	681b      	ldr	r3, [r3, #0]
   d636e:	689b      	ldr	r3, [r3, #8]
   d6370:	9301      	str	r3, [sp, #4]
   d6372:	bd08      	pop	{r3, pc}
   d6374:	00030244 	.word	0x00030244

000d6378 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d6378:	b508      	push	{r3, lr}
   d637a:	4b02      	ldr	r3, [pc, #8]	; (d6384 <spark_cloud_flag_connected+0xc>)
   d637c:	681b      	ldr	r3, [r3, #0]
   d637e:	695b      	ldr	r3, [r3, #20]
   d6380:	9301      	str	r3, [sp, #4]
   d6382:	bd08      	pop	{r3, pc}
   d6384:	00030244 	.word	0x00030244

000d6388 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d6388:	b508      	push	{r3, lr}
   d638a:	4b02      	ldr	r3, [pc, #8]	; (d6394 <spark_send_event+0xc>)
   d638c:	681b      	ldr	r3, [r3, #0]
   d638e:	6a1b      	ldr	r3, [r3, #32]
   d6390:	9301      	str	r3, [sp, #4]
   d6392:	bd08      	pop	{r3, pc}
   d6394:	00030244 	.word	0x00030244

000d6398 <spark_sync_time>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d6398:	b508      	push	{r3, lr}
   d639a:	4b02      	ldr	r3, [pc, #8]	; (d63a4 <spark_sync_time+0xc>)
   d639c:	681b      	ldr	r3, [r3, #0]
   d639e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d63a0:	9301      	str	r3, [sp, #4]
   d63a2:	bd08      	pop	{r3, pc}
   d63a4:	00030244 	.word	0x00030244

000d63a8 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d63a8:	b508      	push	{r3, lr}
   d63aa:	4b02      	ldr	r3, [pc, #8]	; (d63b4 <spark_sync_time_pending+0xc>)
   d63ac:	681b      	ldr	r3, [r3, #0]
   d63ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d63b0:	9301      	str	r3, [sp, #4]
   d63b2:	bd08      	pop	{r3, pc}
   d63b4:	00030244 	.word	0x00030244

000d63b8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d63b8:	b508      	push	{r3, lr}
   d63ba:	4b02      	ldr	r3, [pc, #8]	; (d63c4 <spark_set_random_seed_from_cloud_handler+0xc>)
   d63bc:	681b      	ldr	r3, [r3, #0]
   d63be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d63c0:	9301      	str	r3, [sp, #4]
   d63c2:	bd08      	pop	{r3, pc}
   d63c4:	00030244 	.word	0x00030244

000d63c8 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d63c8:	b508      	push	{r3, lr}
   d63ca:	4b02      	ldr	r3, [pc, #8]	; (d63d4 <malloc+0xc>)
   d63cc:	681b      	ldr	r3, [r3, #0]
   d63ce:	681b      	ldr	r3, [r3, #0]
   d63d0:	9301      	str	r3, [sp, #4]
   d63d2:	bd08      	pop	{r3, pc}
   d63d4:	0003021c 	.word	0x0003021c

000d63d8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d63d8:	b508      	push	{r3, lr}
   d63da:	4b02      	ldr	r3, [pc, #8]	; (d63e4 <free+0xc>)
   d63dc:	681b      	ldr	r3, [r3, #0]
   d63de:	685b      	ldr	r3, [r3, #4]
   d63e0:	9301      	str	r3, [sp, #4]
   d63e2:	bd08      	pop	{r3, pc}
   d63e4:	0003021c 	.word	0x0003021c

000d63e8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d63e8:	b508      	push	{r3, lr}
   d63ea:	4b02      	ldr	r3, [pc, #8]	; (d63f4 <realloc+0xc>)
   d63ec:	681b      	ldr	r3, [r3, #0]
   d63ee:	689b      	ldr	r3, [r3, #8]
   d63f0:	9301      	str	r3, [sp, #4]
   d63f2:	bd08      	pop	{r3, pc}
   d63f4:	0003021c 	.word	0x0003021c

000d63f8 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d63f8:	b508      	push	{r3, lr}
   d63fa:	4b02      	ldr	r3, [pc, #8]	; (d6404 <sprintf+0xc>)
   d63fc:	681b      	ldr	r3, [r3, #0]
   d63fe:	68db      	ldr	r3, [r3, #12]
   d6400:	9301      	str	r3, [sp, #4]
   d6402:	bd08      	pop	{r3, pc}
   d6404:	0003021c 	.word	0x0003021c

000d6408 <siprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d6408:	b508      	push	{r3, lr}
   d640a:	4b02      	ldr	r3, [pc, #8]	; (d6414 <siprintf+0xc>)
   d640c:	681b      	ldr	r3, [r3, #0]
   d640e:	691b      	ldr	r3, [r3, #16]
   d6410:	9301      	str	r3, [sp, #4]
   d6412:	bd08      	pop	{r3, pc}
   d6414:	0003021c 	.word	0x0003021c

000d6418 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d6418:	b508      	push	{r3, lr}
   d641a:	4b02      	ldr	r3, [pc, #8]	; (d6424 <siscanf+0xc>)
   d641c:	681b      	ldr	r3, [r3, #0]
   d641e:	699b      	ldr	r3, [r3, #24]
   d6420:	9301      	str	r3, [sp, #4]
   d6422:	bd08      	pop	{r3, pc}
   d6424:	0003021c 	.word	0x0003021c

000d6428 <vsnprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d6428:	b508      	push	{r3, lr}
   d642a:	4b02      	ldr	r3, [pc, #8]	; (d6434 <vsnprintf+0xc>)
   d642c:	681b      	ldr	r3, [r3, #0]
   d642e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6430:	9301      	str	r3, [sp, #4]
   d6432:	bd08      	pop	{r3, pc}
   d6434:	0003021c 	.word	0x0003021c

000d6438 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d6438:	b508      	push	{r3, lr}
   d643a:	4b02      	ldr	r3, [pc, #8]	; (d6444 <abort+0xc>)
   d643c:	681b      	ldr	r3, [r3, #0]
   d643e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6440:	9301      	str	r3, [sp, #4]
   d6442:	bd08      	pop	{r3, pc}
   d6444:	0003021c 	.word	0x0003021c

000d6448 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d6448:	b508      	push	{r3, lr}
   d644a:	4b02      	ldr	r3, [pc, #8]	; (d6454 <_malloc_r+0xc>)
   d644c:	681b      	ldr	r3, [r3, #0]
   d644e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6450:	9301      	str	r3, [sp, #4]
   d6452:	bd08      	pop	{r3, pc}
   d6454:	0003021c 	.word	0x0003021c

000d6458 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d6458:	b508      	push	{r3, lr}
   d645a:	4b02      	ldr	r3, [pc, #8]	; (d6464 <__errno+0xc>)
   d645c:	681b      	ldr	r3, [r3, #0]
   d645e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6460:	9301      	str	r3, [sp, #4]
   d6462:	bd08      	pop	{r3, pc}
   d6464:	0003021c 	.word	0x0003021c

000d6468 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6468:	2200      	movs	r2, #0
   d646a:	4611      	mov	r1, r2
   d646c:	6840      	ldr	r0, [r0, #4]
   d646e:	f7ff bf5b 	b.w	d6328 <network_listening>

000d6472 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6472:	2200      	movs	r2, #0
   d6474:	4611      	mov	r1, r2
   d6476:	6840      	ldr	r0, [r0, #4]
   d6478:	f7ff bf66 	b.w	d6348 <network_get_listen_timeout>

000d647c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d647c:	2200      	movs	r2, #0
   d647e:	6840      	ldr	r0, [r0, #4]
   d6480:	f7ff bf5a 	b.w	d6338 <network_set_listen_timeout>

000d6484 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6484:	2200      	movs	r2, #0
   d6486:	f081 0101 	eor.w	r1, r1, #1
   d648a:	6840      	ldr	r0, [r0, #4]
   d648c:	f7ff bf44 	b.w	d6318 <network_listen>

000d6490 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d6490:	2300      	movs	r3, #0
   d6492:	461a      	mov	r2, r3
   d6494:	4619      	mov	r1, r3
   d6496:	6840      	ldr	r0, [r0, #4]
   d6498:	f7ff bf36 	b.w	d6308 <network_off>

000d649c <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d649c:	2300      	movs	r3, #0
   d649e:	461a      	mov	r2, r3
   d64a0:	4619      	mov	r1, r3
   d64a2:	6840      	ldr	r0, [r0, #4]
   d64a4:	f7ff bf28 	b.w	d62f8 <network_on>

000d64a8 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d64a8:	2200      	movs	r2, #0
   d64aa:	4611      	mov	r1, r2
   d64ac:	6840      	ldr	r0, [r0, #4]
   d64ae:	f7ff bf1b 	b.w	d62e8 <network_ready>

000d64b2 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d64b2:	2200      	movs	r2, #0
   d64b4:	4611      	mov	r1, r2
   d64b6:	6840      	ldr	r0, [r0, #4]
   d64b8:	f7ff bf06 	b.w	d62c8 <network_connecting>

000d64bc <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d64bc:	2200      	movs	r2, #0
   d64be:	2102      	movs	r1, #2
   d64c0:	6840      	ldr	r0, [r0, #4]
   d64c2:	f7ff bf09 	b.w	d62d8 <network_disconnect>

000d64c6 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d64c6:	2300      	movs	r3, #0
   d64c8:	461a      	mov	r2, r3
   d64ca:	6840      	ldr	r0, [r0, #4]
   d64cc:	f7ff bef4 	b.w	d62b8 <network_connect>

000d64d0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d64d0:	4b02      	ldr	r3, [pc, #8]	; (d64dc <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d64d2:	2203      	movs	r2, #3
   d64d4:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d64d6:	4a02      	ldr	r2, [pc, #8]	; (d64e0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d64d8:	601a      	str	r2, [r3, #0]
   d64da:	4770      	bx	lr
   d64dc:	2003e39c 	.word	0x2003e39c
   d64e0:	000dbce4 	.word	0x000dbce4

000d64e4 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d64e4:	4770      	bx	lr

000d64e6 <_ZN8SPIClassD0Ev>:
   d64e6:	b510      	push	{r4, lr}
   d64e8:	210c      	movs	r1, #12
   d64ea:	4604      	mov	r4, r0
   d64ec:	f001 fff6 	bl	d84dc <_ZdlPvj>
   d64f0:	4620      	mov	r0, r4
   d64f2:	bd10      	pop	{r4, pc}

000d64f4 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d64f4:	2100      	movs	r1, #0
   d64f6:	f7ff bd0b 	b.w	d5f10 <HAL_SPI_Acquire>

000d64fa <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d64fa:	2100      	movs	r1, #0
   d64fc:	f7ff bd10 	b.w	d5f20 <HAL_SPI_Release>

000d6500 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d6500:	b510      	push	{r4, lr}
   d6502:	4b05      	ldr	r3, [pc, #20]	; (d6518 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x18>)
   d6504:	6003      	str	r3, [r0, #0]
   d6506:	4604      	mov	r4, r0
{
    _spi = spi;
   d6508:	7101      	strb	r1, [r0, #4]
    HAL_SPI_Init(_spi);
   d650a:	4608      	mov	r0, r1
   d650c:	f7ff fce0 	bl	d5ed0 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d6510:	2300      	movs	r3, #0
   d6512:	60a3      	str	r3, [r4, #8]
}
   d6514:	4620      	mov	r0, r4
   d6516:	bd10      	pop	{r4, pc}
   d6518:	000dbd18 	.word	0x000dbd18

000d651c <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d651c:	b510      	push	{r4, lr}
   d651e:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d6520:	7900      	ldrb	r0, [r0, #4]
   d6522:	f7ff ffe7 	bl	d64f4 <_ZN8SPIClass4lockEv.isra.0>
   d6526:	b948      	cbnz	r0, d653c <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d6528:	7920      	ldrb	r0, [r4, #4]
   d652a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d652e:	f7ff fcbf 	bl	d5eb0 <HAL_SPI_Begin>
        unlock();
   d6532:	7920      	ldrb	r0, [r4, #4]
    }
}
   d6534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d6538:	f7ff bfdf 	b.w	d64fa <_ZN8SPIClass6unlockEv.isra.1>
   d653c:	bd10      	pop	{r4, pc}

000d653e <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d653e:	7900      	ldrb	r0, [r0, #4]
   d6540:	f7ff bfdb 	b.w	d64fa <_ZN8SPIClass6unlockEv.isra.1>

000d6544 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d6544:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d6546:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d6548:	6018      	str	r0, [r3, #0]
   d654a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d654c:	6818      	ldr	r0, [r3, #0]
   d654e:	4288      	cmp	r0, r1
   d6550:	b2e5      	uxtb	r5, r4
   d6552:	d906      	bls.n	d6562 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d6554:	3401      	adds	r4, #1
   d6556:	2c08      	cmp	r4, #8
   d6558:	d002      	beq.n	d6560 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d655a:	0840      	lsrs	r0, r0, #1
   d655c:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d655e:	e7f5      	b.n	d654c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d6560:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d6562:	4b02      	ldr	r3, [pc, #8]	; (d656c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d6564:	5d5b      	ldrb	r3, [r3, r5]
   d6566:	7013      	strb	r3, [r2, #0]
   d6568:	bd30      	pop	{r4, r5, pc}
   d656a:	bf00      	nop
   d656c:	000dbd20 	.word	0x000dbd20

000d6570 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d6570:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6574:	4607      	mov	r7, r0
   d6576:	b08f      	sub	sp, #60	; 0x3c
    // Lock peripheral
    CHECK(lock());
   d6578:	7900      	ldrb	r0, [r0, #4]
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d657a:	460e      	mov	r6, r1
    // Lock peripheral
    CHECK(lock());
   d657c:	f7ff ffba 	bl	d64f4 <_ZN8SPIClass4lockEv.isra.0>
   d6580:	2800      	cmp	r0, #0
   d6582:	db62      	blt.n	d664a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
   d6584:	793c      	ldrb	r4, [r7, #4]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d6586:	2214      	movs	r2, #20
   d6588:	2100      	movs	r1, #0
   d658a:	a809      	add	r0, sp, #36	; 0x24
   d658c:	f004 fbca 	bl	dad24 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d6590:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d6592:	4620      	mov	r0, r4
   d6594:	2200      	movs	r2, #0
   d6596:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d6598:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
   d659c:	f7ff fca8 	bl	d5ef0 <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
   d65a0:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d65a4:	b154      	cbz	r4, d65bc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4c>
   d65a6:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d65aa:	b935      	cbnz	r5, d65ba <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4a>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d65ac:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d65b0:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d65b4:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d65b8:	e003      	b.n	d65c2 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x52>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d65ba:	2400      	movs	r4, #0
   d65bc:	46a1      	mov	r9, r4
   d65be:	46a0      	mov	r8, r4
   d65c0:	2501      	movs	r5, #1
   d65c2:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d65c4:	b105      	cbz	r5, d65c8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x58>
   d65c6:	b9bb      	cbnz	r3, d65f8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
      return true;

    if (default_ == other.default_ &&
   d65c8:	429d      	cmp	r5, r3
   d65ca:	d10b      	bne.n	d65e4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
   d65cc:	68b2      	ldr	r2, [r6, #8]
   d65ce:	4542      	cmp	r2, r8
   d65d0:	d108      	bne.n	d65e4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d65d2:	f88d 9020 	strb.w	r9, [sp, #32]
   d65d6:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d65da:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d65de:	89b2      	ldrh	r2, [r6, #12]
   d65e0:	4291      	cmp	r1, r2
   d65e2:	d009      	beq.n	d65f8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
   d65e4:	b153      	cbz	r3, d65fc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d65e6:	2400      	movs	r4, #0
   d65e8:	7938      	ldrb	r0, [r7, #4]
   d65ea:	9401      	str	r4, [sp, #4]
   d65ec:	9400      	str	r4, [sp, #0]
   d65ee:	4623      	mov	r3, r4
   d65f0:	4622      	mov	r2, r4
   d65f2:	2101      	movs	r1, #1

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d65f4:	f7ff fc84 	bl	d5f00 <HAL_SPI_Set_Settings>
            }
        }
    }

    return 0;
   d65f8:	2000      	movs	r0, #0
   d65fa:	e026      	b.n	d664a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
   d65fc:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
   d6600:	68b1      	ldr	r1, [r6, #8]
   d6602:	980a      	ldr	r0, [sp, #40]	; 0x28
   d6604:	ab04      	add	r3, sp, #16
   d6606:	f10d 020f 	add.w	r2, sp, #15
   d660a:	f7ff ff9b 	bl	d6544 <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d660e:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d6610:	b105      	cbz	r5, d6614 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>
   d6612:	b9b1      	cbnz	r1, d6642 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d6614:	42a9      	cmp	r1, r5
   d6616:	d008      	beq.n	d662a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xba>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d6618:	2400      	movs	r4, #0
   d661a:	7938      	ldrb	r0, [r7, #4]
   d661c:	9401      	str	r4, [sp, #4]
   d661e:	7b74      	ldrb	r4, [r6, #13]
   d6620:	7b33      	ldrb	r3, [r6, #12]
   d6622:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d6626:	9400      	str	r4, [sp, #0]
   d6628:	e7e4      	b.n	d65f4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
   d662a:	68b3      	ldr	r3, [r6, #8]
   d662c:	4543      	cmp	r3, r8
   d662e:	d3f3      	bcc.n	d6618 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d6630:	f88d 9020 	strb.w	r9, [sp, #32]
   d6634:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d6638:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d663c:	89b3      	ldrh	r3, [r6, #12]
   d663e:	429a      	cmp	r2, r3
   d6640:	d1ea      	bne.n	d6618 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d6642:	9b04      	ldr	r3, [sp, #16]
   d6644:	4543      	cmp	r3, r8
   d6646:	d1e7      	bne.n	d6618 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
   d6648:	e7d6      	b.n	d65f8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
            }
        }
    }

    return 0;
}
   d664a:	b00f      	add	sp, #60	; 0x3c
   d664c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6650 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d6650:	b538      	push	{r3, r4, r5, lr}
   d6652:	4604      	mov	r4, r0
    uint16_t result = 0;
    if (!lock())
   d6654:	7900      	ldrb	r0, [r0, #4]

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d6656:	460d      	mov	r5, r1
    uint16_t result = 0;
    if (!lock())
   d6658:	f7ff ff4c 	bl	d64f4 <_ZN8SPIClass4lockEv.isra.0>
   d665c:	b940      	cbnz	r0, d6670 <_ZN8SPIClass8transferEh+0x20>
    {
        result = HAL_SPI_Send_Receive_Data(_spi, _data);
   d665e:	4629      	mov	r1, r5
   d6660:	7920      	ldrb	r0, [r4, #4]
   d6662:	f7ff fc2d 	bl	d5ec0 <HAL_SPI_Send_Receive_Data>
   d6666:	4605      	mov	r5, r0
        unlock();
   d6668:	7920      	ldrb	r0, [r4, #4]
   d666a:	f7ff ff46 	bl	d64fa <_ZN8SPIClass6unlockEv.isra.1>
   d666e:	e000      	b.n	d6672 <_ZN8SPIClass8transferEh+0x22>
    return clock;
}

byte SPIClass::transfer(byte _data)
{
    uint16_t result = 0;
   d6670:	2500      	movs	r5, #0
    {
        result = HAL_SPI_Send_Receive_Data(_spi, _data);
        unlock();
    }
    return static_cast<byte>(result);
}
   d6672:	b2e8      	uxtb	r0, r5
   d6674:	bd38      	pop	{r3, r4, r5, pc}

000d6676 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d6676:	7900      	ldrb	r0, [r0, #4]
   d6678:	f7ff bc32 	b.w	d5ee0 <HAL_SPI_Is_Enabled>

000d667c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d667c:	b510      	push	{r4, lr}
   d667e:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d6680:	6800      	ldr	r0, [r0, #0]
   d6682:	b118      	cbz	r0, d668c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d6684:	f7ff fea8 	bl	d63d8 <free>
            wakeupSource_ = nullptr;
   d6688:	2300      	movs	r3, #0
   d668a:	6023      	str	r3, [r4, #0]
   d668c:	bd10      	pop	{r4, pc}

000d668e <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d668e:	b510      	push	{r4, lr}
   d6690:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d6692:	f7ff fff3 	bl	d667c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d6696:	4620      	mov	r0, r4
   d6698:	bd10      	pop	{r4, pc}
	...

000d669c <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d669c:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d669e:	4c09      	ldr	r4, [pc, #36]	; (d66c4 <_GLOBAL__sub_I_System+0x28>)
   d66a0:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d66a2:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d66a6:	6020      	str	r0, [r4, #0]
   d66a8:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d66aa:	71a0      	strb	r0, [r4, #6]
   d66ac:	8120      	strh	r0, [r4, #8]
   d66ae:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d66b0:	f7ff fdc6 	bl	d6240 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d66b4:	4620      	mov	r0, r4
   d66b6:	4a04      	ldr	r2, [pc, #16]	; (d66c8 <_GLOBAL__sub_I_System+0x2c>)
   d66b8:	4904      	ldr	r1, [pc, #16]	; (d66cc <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d66ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d66be:	f001 beff 	b.w	d84c0 <__aeabi_atexit>
   d66c2:	bf00      	nop
   d66c4:	2003e3a4 	.word	0x2003e3a4
   d66c8:	2003e170 	.word	0x2003e170
   d66cc:	000d668f 	.word	0x000d668f

000d66d0 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d66d0:	b510      	push	{r4, lr}
   d66d2:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d66d4:	f004 fb83 	bl	dadde <strlen>
   d66d8:	3801      	subs	r0, #1
   d66da:	1823      	adds	r3, r4, r0
   d66dc:	4620      	mov	r0, r4
	while(i<j){
   d66de:	4298      	cmp	r0, r3
   d66e0:	d206      	bcs.n	d66f0 <_Z11str_reversePc+0x20>
		c = *i;
   d66e2:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d66e4:	7819      	ldrb	r1, [r3, #0]
   d66e6:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d66ea:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   d66ee:	e7f6      	b.n	d66de <_Z11str_reversePc+0xe>
   d66f0:	bd10      	pop	{r4, pc}

000d66f2 <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d66f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   d66f6:	1e93      	subs	r3, r2, #2
            base = 10;                    /* can only use 0-9, A-Z        */
   d66f8:	2b23      	cmp	r3, #35	; 0x23



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d66fa:	4615      	mov	r5, r2
   d66fc:	b08c      	sub	sp, #48	; 0x30
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
   d66fe:	bf34      	ite	cc
   d6700:	4615      	movcc	r5, r2
   d6702:	250a      	movcs	r5, #10
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   d6704:	2300      	movs	r3, #0

      if (10 == base && N < 0L)
   d6706:	2d0a      	cmp	r5, #10



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d6708:	460c      	mov	r4, r1
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   d670a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c

      if (10 == base && N < 0L)
   d670e:	d107      	bne.n	d6720 <ltoa+0x2e>
   d6710:	4298      	cmp	r0, r3
   d6712:	da05      	bge.n	d6720 <ltoa+0x2e>
      {
            *head++ = '-';
   d6714:	232d      	movs	r3, #45	; 0x2d
   d6716:	f101 0801 	add.w	r8, r1, #1
   d671a:	700b      	strb	r3, [r1, #0]
            uarg    = -N;
   d671c:	4240      	negs	r0, r0
   d671e:	e001      	b.n	d6724 <ltoa+0x32>
      }
      else  uarg = N;

      if (uarg)
   d6720:	b1b0      	cbz	r0, d6750 <ltoa+0x5e>
   d6722:	46a0      	mov	r8, r4
   d6724:	f10d 062b 	add.w	r6, sp, #43	; 0x2b
   d6728:	2701      	movs	r7, #1
      {
            for (i = 1; uarg; ++i)
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   d672a:	462a      	mov	r2, r5
   d672c:	4601      	mov	r1, r0
   d672e:	a801      	add	r0, sp, #4
   d6730:	f004 fabe 	bl	dacb0 <ldiv>
   d6734:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   d6736:	9801      	ldr	r0, [sp, #4]
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
   d6738:	2b09      	cmp	r3, #9
   d673a:	bfcc      	ite	gt
   d673c:	2237      	movgt	r2, #55	; 0x37
   d673e:	2230      	movle	r2, #48	; 0x30
   d6740:	fa52 f383 	uxtab	r3, r2, r3
   d6744:	f806 3901 	strb.w	r3, [r6], #-1
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   d6748:	3701      	adds	r7, #1
   d674a:	2800      	cmp	r0, #0
   d674c:	d1ed      	bne.n	d672a <ltoa+0x38>
   d674e:	e006      	b.n	d675e <ltoa+0x6c>
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
            }
      }
      else  *tail-- = '0';
   d6750:	2330      	movs	r3, #48	; 0x30
   d6752:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   d6756:	46a0      	mov	r8, r4
   d6758:	f10d 062a 	add.w	r6, sp, #42	; 0x2a


//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
      int i = 2;
   d675c:	2702      	movs	r7, #2
                  uarg    = r.quot;
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   d675e:	463a      	mov	r2, r7
   d6760:	1c71      	adds	r1, r6, #1
   d6762:	4640      	mov	r0, r8
   d6764:	f004 fab8 	bl	dacd8 <memcpy>
      return str;
}
   d6768:	4620      	mov	r0, r4
   d676a:	b00c      	add	sp, #48	; 0x30
   d676c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6770 <ultoa>:

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d6770:	b570      	push	{r4, r5, r6, lr}
   d6772:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d6774:	1e91      	subs	r1, r2, #2
   d6776:	2922      	cmp	r1, #34	; 0x22
   d6778:	d820      	bhi.n	d67bc <ultoa+0x4c>
   d677a:	4625      	mov	r5, r4
   d677c:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d677e:	b910      	cbnz	r0, d6786 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d6780:	4423      	add	r3, r4
            *ptr++ = '0';
   d6782:	2230      	movs	r2, #48	; 0x30
   d6784:	e00e      	b.n	d67a4 <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d6786:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   d678a:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   d678e:	b2c1      	uxtb	r1, r0
   d6790:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   d6794:	2809      	cmp	r0, #9
                *ptr += '0';
   d6796:	bf94      	ite	ls
   d6798:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d679a:	3157      	addhi	r1, #87	; 0x57
   d679c:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   d67a0:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d67a2:	e7eb      	b.n	d677c <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d67a4:	4299      	cmp	r1, r3
   d67a6:	d202      	bcs.n	d67ae <ultoa+0x3e>
            *ptr++ = '0';
   d67a8:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d67ac:	e7fa      	b.n	d67a4 <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   d67ae:	2300      	movs	r3, #0
	str_reverse(buffer);
   d67b0:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   d67b2:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   d67b4:	f7ff ff8c 	bl	d66d0 <_Z11str_reversePc>
	return buffer;
   d67b8:	4620      	mov	r0, r4
   d67ba:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   d67bc:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   d67be:	bd70      	pop	{r4, r5, r6, pc}

000d67c0 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d67c0:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d67c2:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d67c4:	460c      	mov	r4, r1
   d67c6:	4615      	mov	r5, r2
	if(a<0){
   d67c8:	da0b      	bge.n	d67e2 <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d67ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d67ce:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d67d2:	bf14      	ite	ne
   d67d4:	4258      	negne	r0, r3
   d67d6:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d67d8:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d67da:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
   d67dc:	462a      	mov	r2, r5
   d67de:	4419      	add	r1, r3
   d67e0:	e000      	b.n	d67e4 <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
   d67e2:	2301      	movs	r3, #1
   d67e4:	f7ff ffc4 	bl	d6770 <ultoa>
	}
	return buffer;
}
   d67e8:	4620      	mov	r0, r4
   d67ea:	bd38      	pop	{r3, r4, r5, pc}

000d67ec <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   d67ec:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d67f0:	ec59 8b10 	vmov	r8, r9, d0
   d67f4:	4607      	mov	r7, r0
   d67f6:	460e      	mov	r6, r1
    bool negative = val<0;
    if (negative) {
   d67f8:	2200      	movs	r2, #0
   d67fa:	2300      	movs	r3, #0
   d67fc:	ee10 0a10 	vmov	r0, s0
   d6800:	4649      	mov	r1, r9
   d6802:	f003 fd2b 	bl	da25c <__aeabi_dcmplt>
   d6806:	b128      	cbz	r0, d6814 <_Z4dtoadhPc+0x28>
        val = -val;
   d6808:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   d680c:	4699      	mov	r9, r3
        *sout++ = '-';
   d680e:	232d      	movs	r3, #45	; 0x2d
   d6810:	7033      	strb	r3, [r6, #0]
   d6812:	3601      	adds	r6, #1
   d6814:	2300      	movs	r3, #0
    }
    long scale = 1;
   d6816:	2401      	movs	r4, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   d6818:	220a      	movs	r2, #10
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
   d681a:	b2d9      	uxtb	r1, r3
   d681c:	428f      	cmp	r7, r1
   d681e:	d902      	bls.n	d6826 <_Z4dtoadhPc+0x3a>
        scale *= 10;
   d6820:	4354      	muls	r4, r2
   d6822:	3301      	adds	r3, #1
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
   d6824:	e7f9      	b.n	d681a <_Z4dtoadhPc+0x2e>
        scale *= 10;
    val *= scale;   // capture all the significant digits
   d6826:	4620      	mov	r0, r4
   d6828:	f003 fa40 	bl	d9cac <__aeabi_i2d>
   d682c:	4642      	mov	r2, r8
   d682e:	464b      	mov	r3, r9
   d6830:	f003 faa2 	bl	d9d78 <__aeabi_dmul>
   d6834:	4682      	mov	sl, r0
   d6836:	468b      	mov	fp, r1
    uint64_t fixed = uint64_t(val);
   d6838:	f003 ff5c 	bl	da6f4 <__aeabi_d2ulz>
   d683c:	4680      	mov	r8, r0
   d683e:	4689      	mov	r9, r1
    if ((val-fixed)>=0.5)    // round last digit
   d6840:	f003 fa64 	bl	d9d0c <__aeabi_ul2d>
   d6844:	4602      	mov	r2, r0
   d6846:	460b      	mov	r3, r1
   d6848:	4650      	mov	r0, sl
   d684a:	4659      	mov	r1, fp
   d684c:	f003 f8e0 	bl	d9a10 <__aeabi_dsub>
   d6850:	2200      	movs	r2, #0
   d6852:	4b17      	ldr	r3, [pc, #92]	; (d68b0 <_Z4dtoadhPc+0xc4>)
   d6854:	f003 fd16 	bl	da284 <__aeabi_dcmpge>
   d6858:	b118      	cbz	r0, d6862 <_Z4dtoadhPc+0x76>
        fixed++;
   d685a:	f118 0801 	adds.w	r8, r8, #1
   d685e:	f149 0900 	adc.w	r9, r9, #0

    unsigned long first = (unsigned long)(fixed / scale);
   d6862:	17e5      	asrs	r5, r4, #31
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   d6864:	4622      	mov	r2, r4
   d6866:	462b      	mov	r3, r5
   d6868:	4640      	mov	r0, r8
   d686a:	4649      	mov	r1, r9
   d686c:	f003 ff2a 	bl	da6c4 <__aeabi_uldivmod>
   d6870:	2301      	movs	r3, #1
   d6872:	220a      	movs	r2, #10
   d6874:	4631      	mov	r1, r6
   d6876:	f7ff ff7b 	bl	d6770 <ultoa>
    if (prec) {
   d687a:	b1af      	cbz	r7, d68a8 <_Z4dtoadhPc+0xbc>
        sout += strlen(sout);
   d687c:	4630      	mov	r0, r6
   d687e:	f004 faae 	bl	dadde <strlen>
        *sout++ = '.';
   d6882:	232e      	movs	r3, #46	; 0x2e
   d6884:	5433      	strb	r3, [r6, r0]
        ultoa(second, sout, 10, prec);
   d6886:	3001      	adds	r0, #1
   d6888:	4406      	add	r6, r0
   d688a:	4622      	mov	r2, r4
   d688c:	462b      	mov	r3, r5
   d688e:	4640      	mov	r0, r8
   d6890:	4649      	mov	r1, r9
   d6892:	f003 ff17 	bl	da6c4 <__aeabi_uldivmod>
   d6896:	463b      	mov	r3, r7
   d6898:	4610      	mov	r0, r2
   d689a:	4631      	mov	r1, r6
   d689c:	220a      	movs	r2, #10
    }
}
   d689e:	b001      	add	sp, #4
   d68a0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    ultoa(first, sout, 10, 1);
    if (prec) {
        sout += strlen(sout);
        *sout++ = '.';
        ultoa(second, sout, 10, prec);
   d68a4:	f7ff bf64 	b.w	d6770 <ultoa>
    }
}
   d68a8:	b001      	add	sp, #4
   d68aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d68ae:	bf00      	nop
   d68b0:	3fe00000 	.word	0x3fe00000

000d68b4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d68b4:	b510      	push	{r4, lr}
   d68b6:	4604      	mov	r4, r0
{
	free(buffer);
   d68b8:	6800      	ldr	r0, [r0, #0]
   d68ba:	f7ff fd8d 	bl	d63d8 <free>
}
   d68be:	4620      	mov	r0, r4
   d68c0:	bd10      	pop	{r4, pc}

000d68c2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d68c2:	b510      	push	{r4, lr}
   d68c4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d68c6:	6800      	ldr	r0, [r0, #0]
   d68c8:	b108      	cbz	r0, d68ce <_ZN6String10invalidateEv+0xc>
   d68ca:	f7ff fd85 	bl	d63d8 <free>
	buffer = NULL;
   d68ce:	2300      	movs	r3, #0
   d68d0:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d68d2:	60a3      	str	r3, [r4, #8]
   d68d4:	6063      	str	r3, [r4, #4]
   d68d6:	bd10      	pop	{r4, pc}

000d68d8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d68d8:	b538      	push	{r3, r4, r5, lr}
   d68da:	4604      	mov	r4, r0
   d68dc:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d68de:	6800      	ldr	r0, [r0, #0]
   d68e0:	3101      	adds	r1, #1
   d68e2:	f7ff fd81 	bl	d63e8 <realloc>
	if (newbuffer) {
   d68e6:	b110      	cbz	r0, d68ee <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d68e8:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d68ec:	2001      	movs	r0, #1
	}
	return 0;
}
   d68ee:	bd38      	pop	{r3, r4, r5, pc}

000d68f0 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d68f0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d68f2:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d68f4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d68f6:	b113      	cbz	r3, d68fe <_ZN6String7reserveEj+0xe>
   d68f8:	6843      	ldr	r3, [r0, #4]
   d68fa:	428b      	cmp	r3, r1
   d68fc:	d207      	bcs.n	d690e <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d68fe:	4620      	mov	r0, r4
   d6900:	f7ff ffea 	bl	d68d8 <_ZN6String12changeBufferEj>
   d6904:	b120      	cbz	r0, d6910 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d6906:	68a3      	ldr	r3, [r4, #8]
   d6908:	b90b      	cbnz	r3, d690e <_ZN6String7reserveEj+0x1e>
   d690a:	6822      	ldr	r2, [r4, #0]
   d690c:	7013      	strb	r3, [r2, #0]
   d690e:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d6910:	bd10      	pop	{r4, pc}

000d6912 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6912:	b570      	push	{r4, r5, r6, lr}
   d6914:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d6916:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6918:	4604      	mov	r4, r0
   d691a:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d691c:	f7ff ffe8 	bl	d68f0 <_ZN6String7reserveEj>
   d6920:	b918      	cbnz	r0, d692a <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d6922:	4620      	mov	r0, r4
   d6924:	f7ff ffcd 	bl	d68c2 <_ZN6String10invalidateEv>
		return *this;
   d6928:	e009      	b.n	d693e <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d692a:	462a      	mov	r2, r5
   d692c:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d692e:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d6930:	6820      	ldr	r0, [r4, #0]
   d6932:	f004 f9d1 	bl	dacd8 <memcpy>
	buffer[len] = 0;
   d6936:	6822      	ldr	r2, [r4, #0]
   d6938:	68a3      	ldr	r3, [r4, #8]
   d693a:	2100      	movs	r1, #0
   d693c:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d693e:	4620      	mov	r0, r4
   d6940:	bd70      	pop	{r4, r5, r6, pc}

000d6942 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d6942:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6944:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d6946:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6948:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d694a:	6043      	str	r3, [r0, #4]
	len = 0;
   d694c:	6083      	str	r3, [r0, #8]
	flags = 0;
   d694e:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d6950:	460d      	mov	r5, r1
   d6952:	b139      	cbz	r1, d6964 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d6954:	4608      	mov	r0, r1
   d6956:	f004 fa42 	bl	dadde <strlen>
   d695a:	4629      	mov	r1, r5
   d695c:	4602      	mov	r2, r0
   d695e:	4620      	mov	r0, r4
   d6960:	f7ff ffd7 	bl	d6912 <_ZN6String4copyEPKcj>
}
   d6964:	4620      	mov	r0, r4
   d6966:	bd38      	pop	{r3, r4, r5, pc}

000d6968 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d6968:	b538      	push	{r3, r4, r5, lr}
   d696a:	4605      	mov	r5, r0
	if (buffer) {
   d696c:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d696e:	460c      	mov	r4, r1
	if (buffer) {
   d6970:	b160      	cbz	r0, d698c <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
   d6972:	686a      	ldr	r2, [r5, #4]
   d6974:	688b      	ldr	r3, [r1, #8]
   d6976:	429a      	cmp	r2, r3
   d6978:	d306      	bcc.n	d6988 <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
   d697a:	6809      	ldr	r1, [r1, #0]
   d697c:	f004 fa0c 	bl	dad98 <strcpy>
			len = rhs.len;
   d6980:	68a3      	ldr	r3, [r4, #8]
   d6982:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d6984:	2300      	movs	r3, #0
   d6986:	e00a      	b.n	d699e <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
   d6988:	f7ff fd26 	bl	d63d8 <free>
		}
	}
	buffer = rhs.buffer;
   d698c:	6823      	ldr	r3, [r4, #0]
   d698e:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d6990:	6863      	ldr	r3, [r4, #4]
   d6992:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d6994:	68a3      	ldr	r3, [r4, #8]
   d6996:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d6998:	2300      	movs	r3, #0
   d699a:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
   d699c:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
   d699e:	60a3      	str	r3, [r4, #8]
   d69a0:	bd38      	pop	{r3, r4, r5, pc}

000d69a2 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d69a2:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
   d69a4:	b510      	push	{r4, lr}
   d69a6:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d69a8:	d001      	beq.n	d69ae <_ZN6StringaSEOS_+0xc>
   d69aa:	f7ff ffdd 	bl	d6968 <_ZN6String4moveERS_>
	return *this;
}
   d69ae:	4620      	mov	r0, r4
   d69b0:	bd10      	pop	{r4, pc}

000d69b2 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d69b2:	b538      	push	{r3, r4, r5, lr}
   d69b4:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d69b6:	460c      	mov	r4, r1
   d69b8:	b141      	cbz	r1, d69cc <_ZN6StringaSEPKc+0x1a>
   d69ba:	4608      	mov	r0, r1
   d69bc:	f004 fa0f 	bl	dadde <strlen>
   d69c0:	4621      	mov	r1, r4
   d69c2:	4602      	mov	r2, r0
   d69c4:	4628      	mov	r0, r5
   d69c6:	f7ff ffa4 	bl	d6912 <_ZN6String4copyEPKcj>
   d69ca:	e001      	b.n	d69d0 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d69cc:	f7ff ff79 	bl	d68c2 <_ZN6String10invalidateEv>

	return *this;
}
   d69d0:	4628      	mov	r0, r5
   d69d2:	bd38      	pop	{r3, r4, r5, pc}

000d69d4 <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d69d4:	b510      	push	{r4, lr}
   d69d6:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d69d8:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d69da:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d69dc:	6023      	str	r3, [r4, #0]
	capacity = 0;
   d69de:	6063      	str	r3, [r4, #4]
	len = 0;
   d69e0:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d69e2:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d69e4:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
   d69e6:	a901      	add	r1, sp, #4
   d69e8:	f7ff feea 	bl	d67c0 <itoa>
	*this = buf;
   d69ec:	a901      	add	r1, sp, #4
   d69ee:	4620      	mov	r0, r4
   d69f0:	f7ff ffdf 	bl	d69b2 <_ZN6StringaSEPKc>
}
   d69f4:	4620      	mov	r0, r4
   d69f6:	b00a      	add	sp, #40	; 0x28
   d69f8:	bd10      	pop	{r4, pc}

000d69fa <_ZN6StringC1Edi>:
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}

String::String(double value, int decimalPlaces)
   d69fa:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d69fc:	2300      	movs	r3, #0
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}

String::String(double value, int decimalPlaces)
   d69fe:	b08a      	sub	sp, #40	; 0x28
   d6a00:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6a02:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d6a04:	6043      	str	r3, [r0, #4]
	len = 0;
   d6a06:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6a08:	7303      	strb	r3, [r0, #12]

String::String(double value, int decimalPlaces)
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
   d6a0a:	b2c8      	uxtb	r0, r1
   d6a0c:	a901      	add	r1, sp, #4
   d6a0e:	f7ff feed 	bl	d67ec <_Z4dtoadhPc>
        *this = buf;
   d6a12:	a901      	add	r1, sp, #4
   d6a14:	4620      	mov	r0, r4
   d6a16:	f7ff ffcc 	bl	d69b2 <_ZN6StringaSEPKc>
}
   d6a1a:	4620      	mov	r0, r4
   d6a1c:	b00a      	add	sp, #40	; 0x28
   d6a1e:	bd10      	pop	{r4, pc}

000d6a20 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d6a20:	b570      	push	{r4, r5, r6, lr}
   d6a22:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d6a24:	b19a      	cbz	r2, d6a4e <_ZNK6String8getBytesEPhjj+0x2e>
   d6a26:	b191      	cbz	r1, d6a4e <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
   d6a28:	6885      	ldr	r5, [r0, #8]
   d6a2a:	429d      	cmp	r5, r3
   d6a2c:	d802      	bhi.n	d6a34 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d6a2e:	2300      	movs	r3, #0
   d6a30:	700b      	strb	r3, [r1, #0]
		return;
   d6a32:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
   d6a34:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
   d6a36:	1aed      	subs	r5, r5, r3
	strncpy((char *)buf, buffer + index, n);
   d6a38:	6801      	ldr	r1, [r0, #0]
   d6a3a:	42ac      	cmp	r4, r5
   d6a3c:	bf28      	it	cs
   d6a3e:	462c      	movcs	r4, r5
   d6a40:	4419      	add	r1, r3
   d6a42:	4622      	mov	r2, r4
   d6a44:	4630      	mov	r0, r6
   d6a46:	f004 fa0c 	bl	dae62 <strncpy>
	buf[n] = 0;
   d6a4a:	2300      	movs	r3, #0
   d6a4c:	5533      	strb	r3, [r6, r4]
   d6a4e:	bd70      	pop	{r4, r5, r6, pc}

000d6a50 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d6a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   d6a52:	429a      	cmp	r2, r3
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d6a54:	460f      	mov	r7, r1
   d6a56:	461d      	mov	r5, r3
	if (left > right) {
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d6a58:	490c      	ldr	r1, [pc, #48]	; (d6a8c <_ZNK6String9substringEjj+0x3c>)
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
   d6a5a:	bf88      	it	hi
   d6a5c:	4613      	movhi	r3, r2
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d6a5e:	4614      	mov	r4, r2
   d6a60:	4606      	mov	r6, r0
	if (left > right) {
   d6a62:	bf84      	itt	hi
   d6a64:	462c      	movhi	r4, r5
   d6a66:	461d      	movhi	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d6a68:	f7ff ff6b 	bl	d6942 <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   d6a6c:	68ba      	ldr	r2, [r7, #8]
   d6a6e:	4294      	cmp	r4, r2
   d6a70:	d80a      	bhi.n	d6a88 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   d6a72:	6839      	ldr	r1, [r7, #0]
   d6a74:	4295      	cmp	r5, r2
   d6a76:	bf94      	ite	ls
   d6a78:	ebc4 0205 	rsbls	r2, r4, r5
   d6a7c:	ebc4 0202 	rsbhi	r2, r4, r2
   d6a80:	4421      	add	r1, r4
   d6a82:	4630      	mov	r0, r6
   d6a84:	f7ff ff45 	bl	d6912 <_ZN6String4copyEPKcj>
	return out;
}
   d6a88:	4630      	mov	r0, r6
   d6a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d6a8c:	000dbaf5 	.word	0x000dbaf5

000d6a90 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d6a90:	b510      	push	{r4, lr}
   d6a92:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6a94:	6800      	ldr	r0, [r0, #0]
   d6a96:	b108      	cbz	r0, d6a9c <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d6a98:	f7ff fa9a 	bl	d5fd0 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d6a9c:	4620      	mov	r0, r4
   d6a9e:	bd10      	pop	{r4, pc}

000d6aa0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d6aa0:	680b      	ldr	r3, [r1, #0]
   d6aa2:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d6aa4:	b113      	cbz	r3, d6aac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d6aa6:	685a      	ldr	r2, [r3, #4]
   d6aa8:	3201      	adds	r2, #1
   d6aaa:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d6aac:	4770      	bx	lr
	...

000d6ab0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d6ab0:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6ab2:	4c06      	ldr	r4, [pc, #24]	; (d6acc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d6ab4:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d6ab6:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6ab8:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d6aba:	f7ff fa81 	bl	d5fc0 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d6abe:	4620      	mov	r0, r4
   d6ac0:	4a03      	ldr	r2, [pc, #12]	; (d6ad0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d6ac2:	4904      	ldr	r1, [pc, #16]	; (d6ad4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d6ac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d6ac8:	f001 bcfa 	b.w	d84c0 <__aeabi_atexit>
   d6acc:	2003e3b0 	.word	0x2003e3b0
   d6ad0:	2003e170 	.word	0x2003e170
   d6ad4:	000d6a91 	.word	0x000d6a91

000d6ad8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6ada:	4606      	mov	r6, r0
   d6adc:	460d      	mov	r5, r1
   d6ade:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d6ae0:	2400      	movs	r4, #0
  while (size--) {
   d6ae2:	42bd      	cmp	r5, r7
   d6ae4:	d00c      	beq.n	d6b00 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d6ae6:	6833      	ldr	r3, [r6, #0]
   d6ae8:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6aec:	689b      	ldr	r3, [r3, #8]
   d6aee:	4630      	mov	r0, r6
   d6af0:	4798      	blx	r3
     if (chunk>=0)
   d6af2:	2800      	cmp	r0, #0
   d6af4:	db01      	blt.n	d6afa <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d6af6:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d6af8:	e7f3      	b.n	d6ae2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d6afa:	2c00      	cmp	r4, #0
   d6afc:	bf08      	it	eq
   d6afe:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d6b00:	4620      	mov	r0, r4
   d6b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6b04 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d6b04:	b570      	push	{r4, r5, r6, lr}
   d6b06:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d6b08:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d6b0a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d6b0c:	b149      	cbz	r1, d6b22 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d6b0e:	f004 f966 	bl	dadde <strlen>
   d6b12:	682b      	ldr	r3, [r5, #0]
   d6b14:	4602      	mov	r2, r0
   d6b16:	4621      	mov	r1, r4
   d6b18:	4628      	mov	r0, r5
   d6b1a:	68db      	ldr	r3, [r3, #12]
    }
   d6b1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6b20:	4718      	bx	r3
    }
   d6b22:	bd70      	pop	{r4, r5, r6, pc}

000d6b24 <_ZN5Print5printEPKc>:
   d6b24:	b508      	push	{r3, lr}
   d6b26:	f7ff ffed 	bl	d6b04 <_ZN5Print5writeEPKc>
   d6b2a:	bd08      	pop	{r3, pc}

000d6b2c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6b2c:	6803      	ldr	r3, [r0, #0]
   d6b2e:	689b      	ldr	r3, [r3, #8]
   d6b30:	4718      	bx	r3

000d6b32 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6b32:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6b34:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6b36:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6b38:	f7ff fff8 	bl	d6b2c <_ZN5Print5printEc>
  n += print('\n');
   d6b3c:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d6b3e:	4604      	mov	r4, r0
  n += print('\n');
   d6b40:	4628      	mov	r0, r5
   d6b42:	f7ff fff3 	bl	d6b2c <_ZN5Print5printEc>
  return n;
}
   d6b46:	4420      	add	r0, r4
   d6b48:	bd38      	pop	{r3, r4, r5, pc}

000d6b4a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d6b4a:	b538      	push	{r3, r4, r5, lr}
   d6b4c:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6b4e:	f7ff ffd9 	bl	d6b04 <_ZN5Print5writeEPKc>
   d6b52:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d6b54:	4628      	mov	r0, r5
   d6b56:	f7ff ffec 	bl	d6b32 <_ZN5Print7printlnEv>
  return n;
}
   d6b5a:	4420      	add	r0, r4
   d6b5c:	bd38      	pop	{r3, r4, r5, pc}

000d6b5e <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
   d6b5e:	f7ff bff4 	b.w	d6b4a <_ZN5Print7printlnEPKc>

000d6b62 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d6b62:	b530      	push	{r4, r5, lr}
   d6b64:	b08b      	sub	sp, #44	; 0x2c
   d6b66:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d6b68:	2100      	movs	r1, #0
   d6b6a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d6b6e:	2a01      	cmp	r2, #1
   d6b70:	bf98      	it	ls
   d6b72:	220a      	movls	r2, #10
   d6b74:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d6b78:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d6b7c:	fb05 3312 	mls	r3, r5, r2, r3
   d6b80:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6b84:	2b09      	cmp	r3, #9
   d6b86:	bf94      	ite	ls
   d6b88:	3330      	addls	r3, #48	; 0x30
   d6b8a:	3337      	addhi	r3, #55	; 0x37
   d6b8c:	b2db      	uxtb	r3, r3
   d6b8e:	4621      	mov	r1, r4
   d6b90:	f804 3901 	strb.w	r3, [r4], #-1
   d6b94:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d6b96:	2d00      	cmp	r5, #0
   d6b98:	d1ee      	bne.n	d6b78 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d6b9a:	f7ff ffb3 	bl	d6b04 <_ZN5Print5writeEPKc>
}
   d6b9e:	b00b      	add	sp, #44	; 0x2c
   d6ba0:	bd30      	pop	{r4, r5, pc}
	...

000d6ba4 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d6ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6ba8:	ec57 6b10 	vmov	r6, r7, d0
   d6bac:	4682      	mov	sl, r0
   d6bae:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d6bb0:	ee10 2a10 	vmov	r2, s0
   d6bb4:	463b      	mov	r3, r7
   d6bb6:	ee10 0a10 	vmov	r0, s0
   d6bba:	4639      	mov	r1, r7
   d6bbc:	f003 fb76 	bl	da2ac <__aeabi_dcmpun>
   d6bc0:	b108      	cbz	r0, d6bc6 <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6bc2:	494e      	ldr	r1, [pc, #312]	; (d6cfc <_ZN5Print10printFloatEdh+0x158>)
   d6bc4:	e012      	b.n	d6bec <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d6bc6:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d6bca:	f04f 32ff 	mov.w	r2, #4294967295
   d6bce:	4b4c      	ldr	r3, [pc, #304]	; (d6d00 <_ZN5Print10printFloatEdh+0x15c>)
   d6bd0:	4630      	mov	r0, r6
   d6bd2:	4649      	mov	r1, r9
   d6bd4:	f003 fb6a 	bl	da2ac <__aeabi_dcmpun>
   d6bd8:	b968      	cbnz	r0, d6bf6 <_ZN5Print10printFloatEdh+0x52>
   d6bda:	f04f 32ff 	mov.w	r2, #4294967295
   d6bde:	4b48      	ldr	r3, [pc, #288]	; (d6d00 <_ZN5Print10printFloatEdh+0x15c>)
   d6be0:	4630      	mov	r0, r6
   d6be2:	4649      	mov	r1, r9
   d6be4:	f003 fb44 	bl	da270 <__aeabi_dcmple>
   d6be8:	b928      	cbnz	r0, d6bf6 <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6bea:	4946      	ldr	r1, [pc, #280]	; (d6d04 <_ZN5Print10printFloatEdh+0x160>)
   d6bec:	4650      	mov	r0, sl
   d6bee:	f7ff ff89 	bl	d6b04 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d6bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d6bf6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d6bfa:	4b43      	ldr	r3, [pc, #268]	; (d6d08 <_ZN5Print10printFloatEdh+0x164>)
   d6bfc:	4630      	mov	r0, r6
   d6bfe:	4639      	mov	r1, r7
   d6c00:	f003 fb4a 	bl	da298 <__aeabi_dcmpgt>
   d6c04:	b108      	cbz	r0, d6c0a <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6c06:	4941      	ldr	r1, [pc, #260]	; (d6d0c <_ZN5Print10printFloatEdh+0x168>)
   d6c08:	e7f0      	b.n	d6bec <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d6c0a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d6c0e:	4b40      	ldr	r3, [pc, #256]	; (d6d10 <_ZN5Print10printFloatEdh+0x16c>)
   d6c10:	4630      	mov	r0, r6
   d6c12:	4639      	mov	r1, r7
   d6c14:	f003 fb22 	bl	da25c <__aeabi_dcmplt>
   d6c18:	2800      	cmp	r0, #0
   d6c1a:	d1f4      	bne.n	d6c06 <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d6c1c:	2200      	movs	r2, #0
   d6c1e:	2300      	movs	r3, #0
   d6c20:	4630      	mov	r0, r6
   d6c22:	4639      	mov	r1, r7
   d6c24:	f003 fb1a 	bl	da25c <__aeabi_dcmplt>
   d6c28:	b140      	cbz	r0, d6c3c <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d6c2a:	212d      	movs	r1, #45	; 0x2d
   d6c2c:	4650      	mov	r0, sl
   d6c2e:	f7ff ff7d 	bl	d6b2c <_ZN5Print5printEc>
     number = -number;
   d6c32:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d6c36:	4604      	mov	r4, r0
     number = -number;
   d6c38:	461f      	mov	r7, r3
   d6c3a:	e000      	b.n	d6c3e <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d6c3c:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d6c3e:	4935      	ldr	r1, [pc, #212]	; (d6d14 <_ZN5Print10printFloatEdh+0x170>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d6c40:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d6c44:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d6c46:	fa5f f388 	uxtb.w	r3, r8
   d6c4a:	429d      	cmp	r5, r3
   d6c4c:	d906      	bls.n	d6c5c <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d6c4e:	2200      	movs	r2, #0
   d6c50:	4b31      	ldr	r3, [pc, #196]	; (d6d18 <_ZN5Print10printFloatEdh+0x174>)
   d6c52:	f003 f9bb 	bl	d9fcc <__aeabi_ddiv>
   d6c56:	f108 0801 	add.w	r8, r8, #1
   d6c5a:	e7f4      	b.n	d6c46 <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d6c5c:	4632      	mov	r2, r6
   d6c5e:	463b      	mov	r3, r7
   d6c60:	f002 fed8 	bl	d9a14 <__adddf3>
   d6c64:	460f      	mov	r7, r1
   d6c66:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d6c68:	f003 fb5e 	bl	da328 <__aeabi_d2uiz>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d6c6c:	220a      	movs	r2, #10
   d6c6e:	4601      	mov	r1, r0
   d6c70:	4680      	mov	r8, r0
   d6c72:	4650      	mov	r0, sl
   d6c74:	f7ff ff75 	bl	d6b62 <_ZN5Print11printNumberEmh>
  double remainder = number - (double)int_part;
  n += print(int_part);
   d6c78:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d6c7a:	b3e5      	cbz	r5, d6cf6 <_ZN5Print10printFloatEdh+0x152>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d6c7c:	4640      	mov	r0, r8
   d6c7e:	f003 f805 	bl	d9c8c <__aeabi_ui2d>
   d6c82:	4602      	mov	r2, r0
   d6c84:	460b      	mov	r3, r1
   d6c86:	4630      	mov	r0, r6
   d6c88:	4639      	mov	r1, r7
   d6c8a:	f002 fec1 	bl	d9a10 <__aeabi_dsub>
   d6c8e:	4606      	mov	r6, r0
   d6c90:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6c92:	4650      	mov	r0, sl
   d6c94:	4921      	ldr	r1, [pc, #132]	; (d6d1c <_ZN5Print10printFloatEdh+0x178>)
   d6c96:	f7ff ff35 	bl	d6b04 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d6c9a:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d6c9c:	2200      	movs	r2, #0
   d6c9e:	4b1e      	ldr	r3, [pc, #120]	; (d6d18 <_ZN5Print10printFloatEdh+0x174>)
   d6ca0:	4630      	mov	r0, r6
   d6ca2:	4639      	mov	r1, r7
   d6ca4:	f003 f868 	bl	d9d78 <__aeabi_dmul>
   d6ca8:	4606      	mov	r6, r0
   d6caa:	460f      	mov	r7, r1
    int toPrint = int(remainder);
   d6cac:	f003 fb14 	bl	da2d8 <__aeabi_d2iz>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d6cb0:	f1b0 0900 	subs.w	r9, r0, #0
   d6cb4:	da07      	bge.n	d6cc6 <_ZN5Print10printFloatEdh+0x122>
            t = print('-');
   d6cb6:	212d      	movs	r1, #45	; 0x2d
   d6cb8:	4650      	mov	r0, sl
   d6cba:	f7ff ff37 	bl	d6b2c <_ZN5Print5printEc>
            val = -n;
   d6cbe:	f1c9 0100 	rsb	r1, r9, #0
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d6cc2:	4680      	mov	r8, r0
   d6cc4:	e002      	b.n	d6ccc <_ZN5Print10printFloatEdh+0x128>
            val = -n;
        } else {
            val = n;
   d6cc6:	4649      	mov	r1, r9
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d6cc8:	f04f 0800 	mov.w	r8, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d6ccc:	220a      	movs	r2, #10
   d6cce:	4650      	mov	r0, sl
   d6cd0:	f7ff ff47 	bl	d6b62 <_ZN5Print11printNumberEmh>
    n += print(toPrint);
   d6cd4:	4440      	add	r0, r8
   d6cd6:	4404      	add	r4, r0
    remainder -= toPrint;
   d6cd8:	4648      	mov	r0, r9
   d6cda:	f002 ffe7 	bl	d9cac <__aeabi_i2d>
   d6cde:	4602      	mov	r2, r0
   d6ce0:	460b      	mov	r3, r1
   d6ce2:	4630      	mov	r0, r6
   d6ce4:	4639      	mov	r1, r7
   d6ce6:	f002 fe93 	bl	d9a10 <__aeabi_dsub>
   d6cea:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d6cec:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d6cf0:	4606      	mov	r6, r0
   d6cf2:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d6cf4:	d1d2      	bne.n	d6c9c <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d6cf6:	4620      	mov	r0, r4
   d6cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6cfc:	000dbd28 	.word	0x000dbd28
   d6d00:	7fefffff 	.word	0x7fefffff
   d6d04:	000dbd30 	.word	0x000dbd30
   d6d08:	41efffff 	.word	0x41efffff
   d6d0c:	000dbd2c 	.word	0x000dbd2c
   d6d10:	c1efffff 	.word	0xc1efffff
   d6d14:	3fe00000 	.word	0x3fe00000
   d6d18:	40240000 	.word	0x40240000
   d6d1c:	000dbc75 	.word	0x000dbc75

000d6d20 <_ZN5Print5printEfi>:
{
  return write(c);
}

size_t Print::print(float n, int digits)
{
   d6d20:	b538      	push	{r3, r4, r5, lr}
   d6d22:	4604      	mov	r4, r0
  return printFloat((double)n, digits);
   d6d24:	ee10 0a10 	vmov	r0, s0
   d6d28:	b2cd      	uxtb	r5, r1
   d6d2a:	f002 ffd1 	bl	d9cd0 <__aeabi_f2d>
   d6d2e:	ec41 0b10 	vmov	d0, r0, r1
   d6d32:	4629      	mov	r1, r5
   d6d34:	4620      	mov	r0, r4
}
   d6d36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return write(c);
}

size_t Print::print(float n, int digits)
{
  return printFloat((double)n, digits);
   d6d3a:	f7ff bf33 	b.w	d6ba4 <_ZN5Print10printFloatEdh>

000d6d3e <_ZN5Print7printlnEdi>:
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
   d6d3e:	b538      	push	{r3, r4, r5, lr}
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d6d40:	b2c9      	uxtb	r1, r1
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
   d6d42:	4605      	mov	r5, r0
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d6d44:	f7ff ff2e 	bl	d6ba4 <_ZN5Print10printFloatEdh>
   d6d48:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
   d6d4a:	4628      	mov	r0, r5
   d6d4c:	f7ff fef1 	bl	d6b32 <_ZN5Print7printlnEv>
  return n;
}
   d6d50:	4420      	add	r0, r4
   d6d52:	bd38      	pop	{r3, r4, r5, pc}

000d6d54 <_ZN5Print7printlnEfi>:
  n += println();
  return n;
}

size_t Print::println(float num, int digits)
{
   d6d54:	b538      	push	{r3, r4, r5, lr}
   d6d56:	4604      	mov	r4, r0
    return println((double)num, digits);
   d6d58:	ee10 0a10 	vmov	r0, s0
  n += println();
  return n;
}

size_t Print::println(float num, int digits)
{
   d6d5c:	460d      	mov	r5, r1
    return println((double)num, digits);
   d6d5e:	f002 ffb7 	bl	d9cd0 <__aeabi_f2d>
   d6d62:	ec41 0b10 	vmov	d0, r0, r1
   d6d66:	4629      	mov	r1, r5
   d6d68:	4620      	mov	r0, r4
}
   d6d6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return n;
}

size_t Print::println(float num, int digits)
{
    return println((double)num, digits);
   d6d6e:	f7ff bfe6 	b.w	d6d3e <_ZN5Print7printlnEdi>

000d6d72 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d6d72:	b40c      	push	{r2, r3}
   d6d74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6d78:	b087      	sub	sp, #28
   d6d7a:	af00      	add	r7, sp, #0
   d6d7c:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d6d80:	4605      	mov	r5, r0
   d6d82:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d6d86:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d6d88:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d6d8a:	4623      	mov	r3, r4
   d6d8c:	464a      	mov	r2, r9
   d6d8e:	2114      	movs	r1, #20
   d6d90:	1d38      	adds	r0, r7, #4
   d6d92:	f7ff fb49 	bl	d6428 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d6d96:	2813      	cmp	r0, #19
   d6d98:	d805      	bhi.n	d6da6 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6d9a:	1d39      	adds	r1, r7, #4
   d6d9c:	4628      	mov	r0, r5
   d6d9e:	f7ff feb1 	bl	d6b04 <_ZN5Print5writeEPKc>
   d6da2:	4604      	mov	r4, r0
   d6da4:	e013      	b.n	d6dce <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d6da6:	f100 0308 	add.w	r3, r0, #8
   d6daa:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d6dae:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d6db0:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d6db4:	1c41      	adds	r1, r0, #1
   d6db6:	4623      	mov	r3, r4
   d6db8:	464a      	mov	r2, r9
   d6dba:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d6dbc:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d6dbe:	f7ff fb33 	bl	d6428 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6dc2:	4669      	mov	r1, sp
   d6dc4:	4628      	mov	r0, r5
   d6dc6:	f7ff fe9d 	bl	d6b04 <_ZN5Print5writeEPKc>
   d6dca:	4604      	mov	r4, r0
   d6dcc:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d6dce:	b11e      	cbz	r6, d6dd8 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d6dd0:	4628      	mov	r0, r5
   d6dd2:	f7ff feae 	bl	d6b32 <_ZN5Print7printlnEv>
   d6dd6:	4404      	add	r4, r0
    return n;
}
   d6dd8:	4620      	mov	r0, r4
   d6dda:	371c      	adds	r7, #28
   d6ddc:	46bd      	mov	sp, r7
   d6dde:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6de2:	b002      	add	sp, #8
   d6de4:	4770      	bx	lr
	...

000d6de8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d6de8:	4b01      	ldr	r3, [pc, #4]	; (d6df0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d6dea:	4a02      	ldr	r2, [pc, #8]	; (d6df4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d6dec:	601a      	str	r2, [r3, #0]
   d6dee:	4770      	bx	lr
   d6df0:	2003e3b4 	.word	0x2003e3b4
   d6df4:	000dbda7 	.word	0x000dbda7

000d6df8 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d6df8:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d6dfa:	2000      	movs	r0, #0
   d6dfc:	f7ff fad4 	bl	d63a8 <spark_sync_time_pending>
   d6e00:	b128      	cbz	r0, d6e0e <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6e02:	f7ff fab9 	bl	d6378 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d6e06:	f080 0001 	eor.w	r0, r0, #1
   d6e0a:	b2c0      	uxtb	r0, r0
   d6e0c:	bd08      	pop	{r3, pc}
   d6e0e:	2001      	movs	r0, #1
    }
   d6e10:	bd08      	pop	{r3, pc}
	...

000d6e14 <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d6e14:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   d6e18:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d6e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d6e20:	d40f      	bmi.n	d6e42 <_ZN9TimeClass4zoneEf+0x2e>
   d6e22:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   d6e26:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d6e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d6e2e:	dc08      	bgt.n	d6e42 <_ZN9TimeClass4zoneEf+0x2e>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   d6e30:	eddf 7a04 	vldr	s15, [pc, #16]	; d6e44 <_ZN9TimeClass4zoneEf+0x30>
   d6e34:	4b04      	ldr	r3, [pc, #16]	; (d6e48 <_ZN9TimeClass4zoneEf+0x34>)
   d6e36:	ee20 0a27 	vmul.f32	s0, s0, s15
   d6e3a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d6e3e:	ed83 0a00 	vstr	s0, [r3]
   d6e42:	4770      	bx	lr
   d6e44:	45610000 	.word	0x45610000
   d6e48:	2003e3c0 	.word	0x2003e3c0

000d6e4c <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d6e4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
   d6e4e:	4b0e      	ldr	r3, [pc, #56]	; (d6e88 <_ZN9TimeClass7timeStrEl+0x3c>)
   d6e50:	681b      	ldr	r3, [r3, #0]
   d6e52:	4419      	add	r1, r3
   d6e54:	4b0d      	ldr	r3, [pc, #52]	; (d6e8c <_ZN9TimeClass7timeStrEl+0x40>)
   d6e56:	681b      	ldr	r3, [r3, #0]
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d6e58:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
   d6e5a:	a802      	add	r0, sp, #8
   d6e5c:	4419      	add	r1, r3
   d6e5e:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
   d6e62:	f003 fe2d 	bl	daac0 <localtime>
        char* ascstr = asctime(calendar_time);
   d6e66:	f003 fddd 	bl	daa24 <asctime>
   d6e6a:	4605      	mov	r5, r0
        int len = strlen(ascstr);
   d6e6c:	f003 ffb7 	bl	dadde <strlen>
        ascstr[len-1] = 0; // remove final newline
   d6e70:	4428      	add	r0, r5
   d6e72:	2300      	movs	r3, #0
   d6e74:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
   d6e78:	4629      	mov	r1, r5
   d6e7a:	4620      	mov	r0, r4
   d6e7c:	f7ff fd61 	bl	d6942 <_ZN6StringC1EPK19__FlashStringHelper>
}
   d6e80:	4620      	mov	r0, r4
   d6e82:	b003      	add	sp, #12
   d6e84:	bd30      	pop	{r4, r5, pc}
   d6e86:	bf00      	nop
   d6e88:	2003e3c0 	.word	0x2003e3c0
   d6e8c:	2003e3bc 	.word	0x2003e3bc

000d6e90 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d6e90:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d6e92:	2000      	movs	r0, #0
   d6e94:	f7ff f874 	bl	d5f80 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d6e98:	4604      	mov	r4, r0
   d6e9a:	b968      	cbnz	r0, d6eb8 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d6e9c:	f7ff f9c8 	bl	d6230 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d6ea0:	2801      	cmp	r0, #1
   d6ea2:	d10b      	bne.n	d6ebc <_ZN9TimeClass7isValidEv+0x2c>
   d6ea4:	4620      	mov	r0, r4
   d6ea6:	f7ff f9eb 	bl	d6280 <system_thread_get_state>
   d6eaa:	b938      	cbnz	r0, d6ebc <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d6eac:	f7ff ffa4 	bl	d6df8 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d6eb0:	b930      	cbnz	r0, d6ec0 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d6eb2:	f7ff fa59 	bl	d6368 <spark_process>
   d6eb6:	e7f9      	b.n	d6eac <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d6eb8:	2001      	movs	r0, #1
   d6eba:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d6ebc:	2000      	movs	r0, #0
   d6ebe:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d6ec0:	f7ff ff9a 	bl	d6df8 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d6ec4:	2000      	movs	r0, #0
   d6ec6:	f7ff f85b 	bl	d5f80 <HAL_RTC_Time_Is_Valid>
   d6eca:	3000      	adds	r0, #0
   d6ecc:	bf18      	it	ne
   d6ece:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d6ed0:	bd10      	pop	{r4, pc}

000d6ed2 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d6ed2:	b508      	push	{r3, lr}
    (void)isValid();
   d6ed4:	f7ff ffdc 	bl	d6e90 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d6ed8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d6edc:	f7ff b848 	b.w	d5f70 <HAL_RTC_Get_UnixTime>

000d6ee0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6ee0:	4b02      	ldr	r3, [pc, #8]	; (d6eec <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d6ee2:	681a      	ldr	r2, [r3, #0]
   d6ee4:	4b02      	ldr	r3, [pc, #8]	; (d6ef0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d6ee6:	601a      	str	r2, [r3, #0]
   d6ee8:	4770      	bx	lr
   d6eea:	bf00      	nop
   d6eec:	2003e0b4 	.word	0x2003e0b4
   d6ef0:	2003e3b8 	.word	0x2003e3b8

000d6ef4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d6ef4:	2100      	movs	r1, #0
   d6ef6:	f7ff b9ab 	b.w	d6250 <system_delay_ms>

000d6efa <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d6efa:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d6efc:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d6efe:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d6f00:	b113      	cbz	r3, d6f08 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6f02:	2203      	movs	r2, #3
   d6f04:	4601      	mov	r1, r0
   d6f06:	4798      	blx	r3
    }
   d6f08:	4620      	mov	r0, r4
   d6f0a:	bd10      	pop	{r4, pc}

000d6f0c <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d6f0c:	b510      	push	{r4, lr}
   d6f0e:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6f10:	f7ff fff3 	bl	d6efa <_ZNSt14_Function_baseD1Ev>
   d6f14:	4620      	mov	r0, r4
   d6f16:	bd10      	pop	{r4, pc}

000d6f18 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d6f18:	b513      	push	{r0, r1, r4, lr}
   d6f1a:	460b      	mov	r3, r1
   d6f1c:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6f1e:	c803      	ldmia	r0, {r0, r1}
   d6f20:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d6f24:	e893 0003 	ldmia.w	r3, {r0, r1}
   d6f28:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d6f2c:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d6f30:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d6f34:	b002      	add	sp, #8
   d6f36:	bd10      	pop	{r4, pc}

000d6f38 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6f38:	4803      	ldr	r0, [pc, #12]	; (d6f48 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d6f3a:	4a04      	ldr	r2, [pc, #16]	; (d6f4c <_GLOBAL__sub_I_RGB+0x14>)
   d6f3c:	4904      	ldr	r1, [pc, #16]	; (d6f50 <_GLOBAL__sub_I_RGB+0x18>)
   d6f3e:	2300      	movs	r3, #0
   d6f40:	6083      	str	r3, [r0, #8]
   d6f42:	f001 babd 	b.w	d84c0 <__aeabi_atexit>
   d6f46:	bf00      	nop
   d6f48:	2003e3c4 	.word	0x2003e3c4
   d6f4c:	2003e170 	.word	0x2003e170
   d6f50:	000d6f0d 	.word	0x000d6f0d

000d6f54 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d6f54:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d6f56:	4b0c      	ldr	r3, [pc, #48]	; (d6f88 <serialEventRun+0x34>)
   d6f58:	b133      	cbz	r3, d6f68 <serialEventRun+0x14>
   d6f5a:	f000 fc31 	bl	d77c0 <_Z16_fetch_usbserialv>
   d6f5e:	6803      	ldr	r3, [r0, #0]
   d6f60:	691b      	ldr	r3, [r3, #16]
   d6f62:	4798      	blx	r3
   d6f64:	2800      	cmp	r0, #0
   d6f66:	dc09      	bgt.n	d6f7c <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d6f68:	4b08      	ldr	r3, [pc, #32]	; (d6f8c <serialEventRun+0x38>)
   d6f6a:	b163      	cbz	r3, d6f86 <serialEventRun+0x32>
   d6f6c:	f000 fcaa 	bl	d78c4 <_Z22__fetch_global_Serial1v>
   d6f70:	6803      	ldr	r3, [r0, #0]
   d6f72:	691b      	ldr	r3, [r3, #16]
   d6f74:	4798      	blx	r3
   d6f76:	2800      	cmp	r0, #0
   d6f78:	dc03      	bgt.n	d6f82 <serialEventRun+0x2e>
   d6f7a:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d6f7c:	f3af 8000 	nop.w
   d6f80:	e7f2      	b.n	d6f68 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d6f82:	f3af 8000 	nop.w
   d6f86:	bd08      	pop	{r3, pc}
	...

000d6f90 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d6f90:	b508      	push	{r3, lr}
	serialEventRun();
   d6f92:	f7ff ffdf 	bl	d6f54 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6f96:	f7fe ffe3 	bl	d5f60 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6f9a:	4b01      	ldr	r3, [pc, #4]	; (d6fa0 <_post_loop+0x10>)
   d6f9c:	6018      	str	r0, [r3, #0]
   d6f9e:	bd08      	pop	{r3, pc}
   d6fa0:	2003e708 	.word	0x2003e708

000d6fa4 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d6fa4:	4802      	ldr	r0, [pc, #8]	; (d6fb0 <_Z33system_initialize_user_backup_ramv+0xc>)
   d6fa6:	4a03      	ldr	r2, [pc, #12]	; (d6fb4 <_Z33system_initialize_user_backup_ramv+0x10>)
   d6fa8:	4903      	ldr	r1, [pc, #12]	; (d6fb8 <_Z33system_initialize_user_backup_ramv+0x14>)
   d6faa:	1a12      	subs	r2, r2, r0
   d6fac:	f003 be94 	b.w	dacd8 <memcpy>
   d6fb0:	2003f400 	.word	0x2003f400
   d6fb4:	2003f404 	.word	0x2003f404
   d6fb8:	000dc2c8 	.word	0x000dc2c8

000d6fbc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6fbc:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6fbe:	2300      	movs	r3, #0
   d6fc0:	9300      	str	r3, [sp, #0]
   d6fc2:	461a      	mov	r2, r3
   d6fc4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6fc8:	f7ff f96c 	bl	d62a4 <system_ctrl_set_result>
}
   d6fcc:	b003      	add	sp, #12
   d6fce:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6fd4 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d6fd4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6fd6:	8843      	ldrh	r3, [r0, #2]
   d6fd8:	2b0a      	cmp	r3, #10
   d6fda:	d008      	beq.n	d6fee <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6fdc:	2b50      	cmp	r3, #80	; 0x50
   d6fde:	d109      	bne.n	d6ff4 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d6fe0:	4b09      	ldr	r3, [pc, #36]	; (d7008 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6fe2:	681b      	ldr	r3, [r3, #0]
   d6fe4:	b13b      	cbz	r3, d6ff6 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d6fe6:	b003      	add	sp, #12
   d6fe8:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d6fec:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d6fee:	f7ff ffe5 	bl	d6fbc <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d6ff2:	e006      	b.n	d7002 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6ff4:	2300      	movs	r3, #0
   d6ff6:	9300      	str	r3, [sp, #0]
   d6ff8:	461a      	mov	r2, r3
   d6ffa:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6ffe:	f7ff f951 	bl	d62a4 <system_ctrl_set_result>
        break;
    }
}
   d7002:	b003      	add	sp, #12
   d7004:	f85d fb04 	ldr.w	pc, [sp], #4
   d7008:	2003e3d4 	.word	0x2003e3d4

000d700c <module_user_init_hook>:

void module_user_init_hook()
{
   d700c:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d700e:	4c10      	ldr	r4, [pc, #64]	; (d7050 <module_user_init_hook+0x44>)
   d7010:	4d10      	ldr	r5, [pc, #64]	; (d7054 <module_user_init_hook+0x48>)
   d7012:	6823      	ldr	r3, [r4, #0]
   d7014:	42ab      	cmp	r3, r5
   d7016:	4b10      	ldr	r3, [pc, #64]	; (d7058 <module_user_init_hook+0x4c>)
   d7018:	bf0c      	ite	eq
   d701a:	2201      	moveq	r2, #1
   d701c:	2200      	movne	r2, #0
   d701e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d7020:	d002      	beq.n	d7028 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d7022:	f7ff ffbf 	bl	d6fa4 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d7026:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d7028:	f7fe ff8a 	bl	d5f40 <HAL_RNG_GetRandomNumber>
   d702c:	4604      	mov	r4, r0
    srand(seed);
   d702e:	f003 fe81 	bl	dad34 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d7032:	4b0a      	ldr	r3, [pc, #40]	; (d705c <module_user_init_hook+0x50>)
   d7034:	b113      	cbz	r3, d703c <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d7036:	4620      	mov	r0, r4
   d7038:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d703c:	2100      	movs	r1, #0
   d703e:	4807      	ldr	r0, [pc, #28]	; (d705c <module_user_init_hook+0x50>)
   d7040:	f7ff f9ba 	bl	d63b8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7044:	2100      	movs	r1, #0
   d7046:	4806      	ldr	r0, [pc, #24]	; (d7060 <module_user_init_hook+0x54>)
}
   d7048:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d704c:	f7ff b920 	b.w	d6290 <system_ctrl_set_app_request_handler>
   d7050:	2003f400 	.word	0x2003f400
   d7054:	9a271c1e 	.word	0x9a271c1e
   d7058:	2003e3d8 	.word	0x2003e3d8
   d705c:	00000000 	.word	0x00000000
   d7060:	000d6fd5 	.word	0x000d6fd5

000d7064 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d7064:	4770      	bx	lr

000d7066 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d7066:	2000      	movs	r0, #0
   d7068:	4770      	bx	lr

000d706a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d706a:	b510      	push	{r4, lr}
   d706c:	2110      	movs	r1, #16
   d706e:	4604      	mov	r4, r0
   d7070:	f001 fa34 	bl	d84dc <_ZdlPvj>
   d7074:	4620      	mov	r0, r4
   d7076:	bd10      	pop	{r4, pc}

000d7078 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d7078:	b508      	push	{r3, lr}
      { delete this; }
   d707a:	b108      	cbz	r0, d7080 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d707c:	f7ff fff5 	bl	d706a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d7080:	bd08      	pop	{r3, pc}

000d7082 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d7082:	2200      	movs	r2, #0
   d7084:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d7086:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d7088:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d708c:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d708e:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d7092:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d7094:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7096:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d7098:	680c      	ldr	r4, [r1, #0]
   d709a:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d709c:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d709e:	bd10      	pop	{r4, pc}

000d70a0 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d70a0:	b510      	push	{r4, lr}
   d70a2:	4604      	mov	r4, r0
    free((void*)msg_);
   d70a4:	6800      	ldr	r0, [r0, #0]
   d70a6:	f7ff f997 	bl	d63d8 <free>
}
   d70aa:	4620      	mov	r0, r4
   d70ac:	bd10      	pop	{r4, pc}

000d70ae <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d70ae:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d70b0:	68c4      	ldr	r4, [r0, #12]
   d70b2:	b1f4      	cbz	r4, d70f2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d70b4:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d70b6:	2b02      	cmp	r3, #2
   d70b8:	d103      	bne.n	d70c2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d70ba:	f104 000c 	add.w	r0, r4, #12
   d70be:	f7ff ffef 	bl	d70a0 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d70c2:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d70c4:	b135      	cbz	r5, d70d4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d70c6:	4628      	mov	r0, r5
   d70c8:	f7ff ff17 	bl	d6efa <_ZNSt14_Function_baseD1Ev>
   d70cc:	2110      	movs	r1, #16
   d70ce:	4628      	mov	r0, r5
   d70d0:	f001 fa04 	bl	d84dc <_ZdlPvj>
   d70d4:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d70d6:	b135      	cbz	r5, d70e6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d70d8:	4628      	mov	r0, r5
   d70da:	f7ff ff0e 	bl	d6efa <_ZNSt14_Function_baseD1Ev>
   d70de:	2110      	movs	r1, #16
   d70e0:	4628      	mov	r0, r5
   d70e2:	f001 f9fb 	bl	d84dc <_ZdlPvj>
   d70e6:	4620      	mov	r0, r4
   d70e8:	2114      	movs	r1, #20
   d70ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d70ee:	f001 b9f5 	b.w	d84dc <_ZdlPvj>
   d70f2:	bd38      	pop	{r3, r4, r5, pc}

000d70f4 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d70f4:	b513      	push	{r0, r1, r4, lr}
   d70f6:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d70f8:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d70fc:	2300      	movs	r3, #0
   d70fe:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d7100:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d7102:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d7104:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7106:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d7108:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d710a:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d710c:	f7fd fa38 	bl	d4580 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7110:	4620      	mov	r0, r4
   d7112:	b002      	add	sp, #8
   d7114:	bd10      	pop	{r4, pc}

000d7116 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d7116:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7118:	460c      	mov	r4, r1
   d711a:	ad02      	add	r5, sp, #8
   d711c:	f854 3b04 	ldr.w	r3, [r4], #4
   d7120:	f845 3d08 	str.w	r3, [r5, #-8]!
   d7124:	4606      	mov	r6, r0
   d7126:	460f      	mov	r7, r1
   d7128:	a801      	add	r0, sp, #4
   d712a:	4621      	mov	r1, r4
   d712c:	f7ff fcb8 	bl	d6aa0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d7130:	4629      	mov	r1, r5
   d7132:	4630      	mov	r0, r6
   d7134:	f7ff ffde 	bl	d70f4 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7138:	a801      	add	r0, sp, #4
   d713a:	f7fd fa21 	bl	d4580 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d713e:	4620      	mov	r0, r4
   d7140:	f7fd fa1e 	bl	d4580 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d7144:	4638      	mov	r0, r7
   d7146:	2108      	movs	r1, #8
   d7148:	f001 f9c8 	bl	d84dc <_ZdlPvj>
        return p;
    }
   d714c:	4630      	mov	r0, r6
   d714e:	b003      	add	sp, #12
   d7150:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d7154 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d7154:	b538      	push	{r3, r4, r5, lr}
   d7156:	2300      	movs	r3, #0
   d7158:	4604      	mov	r4, r0
   d715a:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d715c:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d715e:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7160:	f7fc ff9b 	bl	d409a <_Znwj>
   d7164:	b128      	cbz	r0, d7172 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d7166:	2301      	movs	r3, #1
   d7168:	6043      	str	r3, [r0, #4]
   d716a:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d716c:	4b02      	ldr	r3, [pc, #8]	; (d7178 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d716e:	6003      	str	r3, [r0, #0]
   d7170:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7172:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d7174:	4620      	mov	r0, r4
   d7176:	bd38      	pop	{r3, r4, r5, pc}
   d7178:	000dbe38 	.word	0x000dbe38

000d717c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d717c:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d717e:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7180:	b90a      	cbnz	r2, d7186 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d7182:	f001 f9be 	bl	d8502 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7186:	68c3      	ldr	r3, [r0, #12]
    }
   d7188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d718c:	4718      	bx	r3

000d718e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d718e:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d7190:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d7192:	f100 0110 	add.w	r1, r0, #16
   d7196:	f7ff fff1 	bl	d717c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d719a:	bd08      	pop	{r3, pc}

000d719c <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d719c:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d719e:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d71a0:	b90a      	cbnz	r2, d71a6 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d71a2:	f001 f9ae 	bl	d8502 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d71a6:	68c3      	ldr	r3, [r0, #12]
    }
   d71a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d71ac:	4718      	bx	r3

000d71ae <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d71ae:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d71b0:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d71b2:	f100 0110 	add.w	r1, r0, #16
   d71b6:	f7ff fff1 	bl	d719c <_ZNKSt8functionIFvRKbEEclES1_>
   d71ba:	bd08      	pop	{r3, pc}

000d71bc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d71bc:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d71be:	2300      	movs	r3, #0
   d71c0:	6083      	str	r3, [r0, #8]
   d71c2:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d71c4:	4604      	mov	r4, r0
   d71c6:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d71c8:	b12b      	cbz	r3, d71d6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d71ca:	2202      	movs	r2, #2
   d71cc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d71ce:	68eb      	ldr	r3, [r5, #12]
   d71d0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d71d2:	68ab      	ldr	r3, [r5, #8]
   d71d4:	60a3      	str	r3, [r4, #8]
	}
    }
   d71d6:	4620      	mov	r0, r4
   d71d8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d71dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d71dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d71de:	b089      	sub	sp, #36	; 0x24
   d71e0:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d71e2:	4668      	mov	r0, sp
   d71e4:	f7ff ff4d 	bl	d7082 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d71e8:	2300      	movs	r3, #0
   d71ea:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d71ee:	f04f 0202 	mov.w	r2, #2
   d71f2:	e8d4 3f4f 	ldrexb	r3, [r4]
   d71f6:	2b00      	cmp	r3, #0
   d71f8:	d103      	bne.n	d7202 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d71fa:	e8c4 2f41 	strexb	r1, r2, [r4]
   d71fe:	2900      	cmp	r1, #0
   d7200:	d1f7      	bne.n	d71f2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d7202:	d002      	beq.n	d720a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d7204:	f88d 3008 	strb.w	r3, [sp, #8]
   d7208:	e063      	b.n	d72d2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d720a:	f114 050c 	adds.w	r5, r4, #12
   d720e:	d003      	beq.n	d7218 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d7210:	4669      	mov	r1, sp
   d7212:	4628      	mov	r0, r5
   d7214:	f7ff ff35 	bl	d7082 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d7218:	f3bf 8f5f 	dmb	sy
   d721c:	2301      	movs	r3, #1
   d721e:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d7220:	2000      	movs	r0, #0
   d7222:	f104 0308 	add.w	r3, r4, #8
   d7226:	f3bf 8f5f 	dmb	sy
   d722a:	e853 6f00 	ldrex	r6, [r3]
   d722e:	e843 0200 	strex	r2, r0, [r3]
   d7232:	2a00      	cmp	r2, #0
   d7234:	d1f9      	bne.n	d722a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d7236:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d723a:	2e00      	cmp	r6, #0
   d723c:	d049      	beq.n	d72d2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d723e:	f7ff f80f 	bl	d6260 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d7242:	b120      	cbz	r0, d724e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d7244:	4629      	mov	r1, r5
   d7246:	4630      	mov	r0, r6
   d7248:	f7ff ff98 	bl	d717c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d724c:	e03a      	b.n	d72c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d724e:	4631      	mov	r1, r6
   d7250:	a802      	add	r0, sp, #8
   d7252:	f7ff ffb3 	bl	d71bc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d7256:	68e0      	ldr	r0, [r4, #12]
   d7258:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d725c:	b108      	cbz	r0, d7262 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d725e:	f003 fda3 	bl	dada8 <strdup>
   d7262:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d7264:	2010      	movs	r0, #16
   d7266:	f8ad 501c 	strh.w	r5, [sp, #28]
   d726a:	f7fc ff16 	bl	d409a <_Znwj>
   d726e:	4605      	mov	r5, r0
   d7270:	b1e8      	cbz	r0, d72ae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7272:	2700      	movs	r7, #0
   d7274:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7276:	2018      	movs	r0, #24
   d7278:	f7fc ff0f 	bl	d409a <_Znwj>
   d727c:	4604      	mov	r4, r0
   d727e:	b188      	cbz	r0, d72a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d7280:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7282:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d7284:	a802      	add	r0, sp, #8
   d7286:	f7ff fe47 	bl	d6f18 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d728a:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d728c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d728e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7290:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d7292:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d7294:	a906      	add	r1, sp, #24
   d7296:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d7298:	60e3      	str	r3, [r4, #12]
   d729a:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d729e:	9205      	str	r2, [sp, #20]
   d72a0:	f7ff feef 	bl	d7082 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d72a4:	4b0d      	ldr	r3, [pc, #52]	; (d72dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d72a6:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d72a8:	4b0d      	ldr	r3, [pc, #52]	; (d72e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d72aa:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d72ac:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d72ae:	a806      	add	r0, sp, #24
   d72b0:	f7ff fef6 	bl	d70a0 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d72b4:	a802      	add	r0, sp, #8
   d72b6:	f7ff fe20 	bl	d6efa <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d72ba:	2200      	movs	r2, #0
   d72bc:	4629      	mov	r1, r5
   d72be:	4809      	ldr	r0, [pc, #36]	; (d72e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d72c0:	f7fe ffd6 	bl	d6270 <application_thread_invoke>
   d72c4:	4630      	mov	r0, r6
   d72c6:	f7ff fe18 	bl	d6efa <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d72ca:	2110      	movs	r1, #16
   d72cc:	4630      	mov	r0, r6
   d72ce:	f001 f905 	bl	d84dc <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d72d2:	4668      	mov	r0, sp
   d72d4:	f7ff fee4 	bl	d70a0 <_ZN8particle5ErrorD1Ev>
    }
   d72d8:	b009      	add	sp, #36	; 0x24
   d72da:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d72dc:	000d718f 	.word	0x000d718f
   d72e0:	000d7405 	.word	0x000d7405
   d72e4:	000d7911 	.word	0x000d7911

000d72e8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d72e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d72ec:	b08b      	sub	sp, #44	; 0x2c
   d72ee:	4606      	mov	r6, r0
   d72f0:	460f      	mov	r7, r1
   d72f2:	4690      	mov	r8, r2
   d72f4:	4699      	mov	r9, r3
   d72f6:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d72fa:	f7ff f83d 	bl	d6378 <spark_cloud_flag_connected>
   d72fe:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d7300:	4683      	mov	fp, r0
   d7302:	bb30      	cbnz	r0, d7352 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d7304:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d7308:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d730a:	a905      	add	r1, sp, #20
   d730c:	4628      	mov	r0, r5
   d730e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d7312:	f7ff feb6 	bl	d7082 <_ZN8particle5ErrorC1EOS0_>
   d7316:	2014      	movs	r0, #20
   d7318:	f7fc febf 	bl	d409a <_Znwj>
   d731c:	4604      	mov	r4, r0
   d731e:	b158      	cbz	r0, d7338 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d7320:	2302      	movs	r3, #2
   d7322:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7324:	2301      	movs	r3, #1
   d7326:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d7328:	f8c0 b004 	str.w	fp, [r0, #4]
   d732c:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d7330:	4629      	mov	r1, r5
   d7332:	300c      	adds	r0, #12
   d7334:	f7ff fea5 	bl	d7082 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d7338:	4630      	mov	r0, r6
   d733a:	4621      	mov	r1, r4
   d733c:	f840 4b04 	str.w	r4, [r0], #4
   d7340:	f7ff ff08 	bl	d7154 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d7344:	4628      	mov	r0, r5
   d7346:	f7ff feab 	bl	d70a0 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d734a:	a805      	add	r0, sp, #20
   d734c:	f7ff fea8 	bl	d70a0 <_ZN8particle5ErrorD1Ev>
   d7350:	e052      	b.n	d73f8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d7352:	2400      	movs	r4, #0
   d7354:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d7356:	2014      	movs	r0, #20
   d7358:	606c      	str	r4, [r5, #4]
   d735a:	60ac      	str	r4, [r5, #8]
   d735c:	9307      	str	r3, [sp, #28]
   d735e:	f7fc fe9c 	bl	d409a <_Znwj>
   d7362:	4601      	mov	r1, r0
   d7364:	b118      	cbz	r0, d736e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d7366:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7368:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d736a:	6044      	str	r4, [r0, #4]
   d736c:	6084      	str	r4, [r0, #8]
   d736e:	a804      	add	r0, sp, #16
   d7370:	9103      	str	r1, [sp, #12]
   d7372:	f7ff feef 	bl	d7154 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d7376:	4b22      	ldr	r3, [pc, #136]	; (d7400 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d7378:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d737a:	2008      	movs	r0, #8
   d737c:	f7fc fe8d 	bl	d409a <_Znwj>
   d7380:	4604      	mov	r4, r0
   d7382:	b128      	cbz	r0, d7390 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7384:	9b03      	ldr	r3, [sp, #12]
   d7386:	f840 3b04 	str.w	r3, [r0], #4
   d738a:	a904      	add	r1, sp, #16
   d738c:	f7ff fb88 	bl	d6aa0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d7390:	9500      	str	r5, [sp, #0]
   d7392:	fa5f f38a 	uxtb.w	r3, sl
   d7396:	464a      	mov	r2, r9
   d7398:	4641      	mov	r1, r8
   d739a:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d739c:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d739e:	f7fe fff3 	bl	d6388 <spark_send_event>
   d73a2:	b920      	cbnz	r0, d73ae <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d73a4:	9b03      	ldr	r3, [sp, #12]
   d73a6:	785b      	ldrb	r3, [r3, #1]
   d73a8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d73ac:	b183      	cbz	r3, d73d0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d73ae:	9b03      	ldr	r3, [sp, #12]
   d73b0:	9305      	str	r3, [sp, #20]
   d73b2:	a904      	add	r1, sp, #16
   d73b4:	a806      	add	r0, sp, #24
   d73b6:	f7ff fb73 	bl	d6aa0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d73ba:	a905      	add	r1, sp, #20
   d73bc:	4630      	mov	r0, r6
   d73be:	f7ff fe99 	bl	d70f4 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d73c2:	a806      	add	r0, sp, #24
   d73c4:	f7fd f8dc 	bl	d4580 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d73c8:	a804      	add	r0, sp, #16
   d73ca:	f7fd f8d9 	bl	d4580 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d73ce:	e013      	b.n	d73f8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d73d0:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d73d4:	a905      	add	r1, sp, #20
   d73d6:	a803      	add	r0, sp, #12
   d73d8:	9205      	str	r2, [sp, #20]
   d73da:	f8ad 3018 	strh.w	r3, [sp, #24]
   d73de:	f7ff fefd 	bl	d71dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d73e2:	a805      	add	r0, sp, #20
   d73e4:	f7ff fe5c 	bl	d70a0 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d73e8:	a805      	add	r0, sp, #20
   d73ea:	9909      	ldr	r1, [sp, #36]	; 0x24
   d73ec:	f7ff fe93 	bl	d7116 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d73f0:	a806      	add	r0, sp, #24
   d73f2:	f7fd f8c5 	bl	d4580 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d73f6:	e7da      	b.n	d73ae <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d73f8:	4630      	mov	r0, r6
   d73fa:	b00b      	add	sp, #44	; 0x2c
   d73fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7400:	000d7575 	.word	0x000d7575

000d7404 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d7404:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d7406:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7408:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d740a:	d006      	beq.n	d741a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d740c:	2a03      	cmp	r2, #3
   d740e:	d017      	beq.n	d7440 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d7410:	2a01      	cmp	r2, #1
   d7412:	d122      	bne.n	d745a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d7414:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d7416:	6003      	str	r3, [r0, #0]
	      break;
   d7418:	e01f      	b.n	d745a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d741a:	2018      	movs	r0, #24
   d741c:	680e      	ldr	r6, [r1, #0]
   d741e:	f7fc fe3c 	bl	d409a <_Znwj>
   d7422:	4605      	mov	r5, r0
   d7424:	b150      	cbz	r0, d743c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d7426:	4631      	mov	r1, r6
   d7428:	f7ff fec8 	bl	d71bc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d742c:	6930      	ldr	r0, [r6, #16]
   d742e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d7432:	b108      	cbz	r0, d7438 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d7434:	f003 fcb8 	bl	dada8 <strdup>
   d7438:	6128      	str	r0, [r5, #16]
   d743a:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d743c:	6025      	str	r5, [r4, #0]
   d743e:	e00c      	b.n	d745a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d7440:	6804      	ldr	r4, [r0, #0]
   d7442:	b154      	cbz	r4, d745a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d7444:	f104 0010 	add.w	r0, r4, #16
   d7448:	f7ff fe2a 	bl	d70a0 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d744c:	4620      	mov	r0, r4
   d744e:	f7ff fd54 	bl	d6efa <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d7452:	2118      	movs	r1, #24
   d7454:	4620      	mov	r0, r4
   d7456:	f001 f841 	bl	d84dc <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d745a:	2000      	movs	r0, #0
   d745c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d745e <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d745e:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7460:	2300      	movs	r3, #0
   d7462:	6083      	str	r3, [r0, #8]
   d7464:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d7466:	4604      	mov	r4, r0
   d7468:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d746a:	b12b      	cbz	r3, d7478 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d746c:	2202      	movs	r2, #2
   d746e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d7470:	68eb      	ldr	r3, [r5, #12]
   d7472:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d7474:	68ab      	ldr	r3, [r5, #8]
   d7476:	60a3      	str	r3, [r4, #8]
	}
    }
   d7478:	4620      	mov	r0, r4
   d747a:	bd38      	pop	{r3, r4, r5, pc}

000d747c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d747c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d747e:	b570      	push	{r4, r5, r6, lr}
   d7480:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d7482:	d006      	beq.n	d7492 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d7484:	2a03      	cmp	r2, #3
   d7486:	d011      	beq.n	d74ac <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d7488:	2a01      	cmp	r2, #1
   d748a:	d118      	bne.n	d74be <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d748c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d748e:	6003      	str	r3, [r0, #0]
	      break;
   d7490:	e015      	b.n	d74be <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d7492:	2014      	movs	r0, #20
   d7494:	680e      	ldr	r6, [r1, #0]
   d7496:	f7fc fe00 	bl	d409a <_Znwj>
   d749a:	4605      	mov	r5, r0
   d749c:	b120      	cbz	r0, d74a8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d749e:	4631      	mov	r1, r6
   d74a0:	f7ff ffdd 	bl	d745e <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d74a4:	7c33      	ldrb	r3, [r6, #16]
   d74a6:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d74a8:	6025      	str	r5, [r4, #0]
   d74aa:	e008      	b.n	d74be <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d74ac:	6804      	ldr	r4, [r0, #0]
   d74ae:	b134      	cbz	r4, d74be <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d74b0:	4620      	mov	r0, r4
   d74b2:	f7ff fd22 	bl	d6efa <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d74b6:	2114      	movs	r1, #20
   d74b8:	4620      	mov	r0, r4
   d74ba:	f001 f80f 	bl	d84dc <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d74be:	2000      	movs	r0, #0
   d74c0:	bd70      	pop	{r4, r5, r6, pc}
	...

000d74c4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d74c4:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d74c6:	2300      	movs	r3, #0
   d74c8:	b087      	sub	sp, #28
   d74ca:	460c      	mov	r4, r1
   d74cc:	f3bf 8f5f 	dmb	sy
   d74d0:	e850 6f00 	ldrex	r6, [r0]
   d74d4:	e840 3200 	strex	r2, r3, [r0]
   d74d8:	2a00      	cmp	r2, #0
   d74da:	d1f9      	bne.n	d74d0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d74dc:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d74e0:	2e00      	cmp	r6, #0
   d74e2:	d03f      	beq.n	d7564 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d74e4:	4618      	mov	r0, r3
   d74e6:	f7fe febb 	bl	d6260 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d74ea:	4607      	mov	r7, r0
   d74ec:	b120      	cbz	r0, d74f8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d74ee:	4621      	mov	r1, r4
   d74f0:	4630      	mov	r0, r6
   d74f2:	f7ff fe53 	bl	d719c <_ZNKSt8functionIFvRKbEEclES1_>
   d74f6:	e02e      	b.n	d7556 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d74f8:	4631      	mov	r1, r6
   d74fa:	a801      	add	r0, sp, #4
   d74fc:	f7ff ffaf 	bl	d745e <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d7500:	7823      	ldrb	r3, [r4, #0]
   d7502:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d7506:	2010      	movs	r0, #16
   d7508:	f7fc fdc7 	bl	d409a <_Znwj>
   d750c:	4605      	mov	r5, r0
   d750e:	b1d0      	cbz	r0, d7546 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7510:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7512:	2014      	movs	r0, #20
   d7514:	f7fc fdc1 	bl	d409a <_Znwj>
   d7518:	4604      	mov	r4, r0
   d751a:	b178      	cbz	r0, d753c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d751c:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d751e:	4601      	mov	r1, r0
   d7520:	a801      	add	r0, sp, #4
   d7522:	f7ff fcf9 	bl	d6f18 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7526:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d7528:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d752a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d752c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d752e:	9203      	str	r2, [sp, #12]
   d7530:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d7532:	60e3      	str	r3, [r4, #12]
   d7534:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d7538:	9204      	str	r2, [sp, #16]
   d753a:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d753c:	4b0a      	ldr	r3, [pc, #40]	; (d7568 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d753e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d7540:	4b0a      	ldr	r3, [pc, #40]	; (d756c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7542:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d7544:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7546:	a801      	add	r0, sp, #4
   d7548:	f7ff fcd7 	bl	d6efa <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d754c:	2200      	movs	r2, #0
   d754e:	4629      	mov	r1, r5
   d7550:	4807      	ldr	r0, [pc, #28]	; (d7570 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d7552:	f7fe fe8d 	bl	d6270 <application_thread_invoke>
   d7556:	4630      	mov	r0, r6
   d7558:	f7ff fccf 	bl	d6efa <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d755c:	2110      	movs	r1, #16
   d755e:	4630      	mov	r0, r6
   d7560:	f000 ffbc 	bl	d84dc <_ZdlPvj>
        }
    }
   d7564:	b007      	add	sp, #28
   d7566:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7568:	000d71af 	.word	0x000d71af
   d756c:	000d747d 	.word	0x000d747d
   d7570:	000d7911 	.word	0x000d7911

000d7574 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d7574:	b530      	push	{r4, r5, lr}
   d7576:	b085      	sub	sp, #20
   d7578:	4604      	mov	r4, r0
   d757a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d757c:	4668      	mov	r0, sp
   d757e:	4611      	mov	r1, r2
   d7580:	f7ff fdc9 	bl	d7116 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d7584:	b17c      	cbz	r4, d75a6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d7586:	b224      	sxth	r4, r4
   d7588:	4628      	mov	r0, r5
   d758a:	b10d      	cbz	r5, d7590 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d758c:	f003 fc0c 	bl	dada8 <strdup>
   d7590:	9002      	str	r0, [sp, #8]
   d7592:	a902      	add	r1, sp, #8
   d7594:	4668      	mov	r0, sp
   d7596:	f8ad 400c 	strh.w	r4, [sp, #12]
   d759a:	f7ff fe1f 	bl	d71dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d759e:	a802      	add	r0, sp, #8
   d75a0:	f7ff fd7e 	bl	d70a0 <_ZN8particle5ErrorD1Ev>
   d75a4:	e01d      	b.n	d75e2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d75a6:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d75a8:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d75ac:	f04f 0201 	mov.w	r2, #1
   d75b0:	e8d0 3f4f 	ldrexb	r3, [r0]
   d75b4:	42a3      	cmp	r3, r4
   d75b6:	d103      	bne.n	d75c0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d75b8:	e8c0 2f41 	strexb	r1, r2, [r0]
   d75bc:	2900      	cmp	r1, #0
   d75be:	d1f7      	bne.n	d75b0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d75c0:	d002      	beq.n	d75c8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d75c2:	f88d 3008 	strb.w	r3, [sp, #8]
   d75c6:	e00c      	b.n	d75e2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d75c8:	f110 010c 	adds.w	r1, r0, #12
   d75cc:	f04f 0301 	mov.w	r3, #1
   d75d0:	bf18      	it	ne
   d75d2:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d75d4:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d75d8:	3004      	adds	r0, #4
   d75da:	f800 3c03 	strb.w	r3, [r0, #-3]
   d75de:	f7ff ff71 	bl	d74c4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d75e2:	a801      	add	r0, sp, #4
   d75e4:	f7fc ffcc 	bl	d4580 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d75e8:	b005      	add	sp, #20
   d75ea:	bd30      	pop	{r4, r5, pc}

000d75ec <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d75ec:	4770      	bx	lr

000d75ee <_ZN9IPAddressD0Ev>:
   d75ee:	b510      	push	{r4, lr}
   d75f0:	2118      	movs	r1, #24
   d75f2:	4604      	mov	r4, r0
   d75f4:	f000 ff72 	bl	d84dc <_ZdlPvj>
   d75f8:	4620      	mov	r0, r4
   d75fa:	bd10      	pop	{r4, pc}

000d75fc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d75fc:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d75fe:	7d03      	ldrb	r3, [r0, #20]
   d7600:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7602:	b08d      	sub	sp, #52	; 0x34
   d7604:	460e      	mov	r6, r1
   d7606:	f100 0704 	add.w	r7, r0, #4
   d760a:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d760e:	d002      	beq.n	d7616 <_ZNK9IPAddress7printToER5Print+0x1a>
   d7610:	f100 0508 	add.w	r5, r0, #8
   d7614:	e018      	b.n	d7648 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d7616:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7618:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d761a:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d761e:	232f      	movs	r3, #47	; 0x2f
   d7620:	462a      	mov	r2, r5
   d7622:	200a      	movs	r0, #10
   d7624:	f7fe fcdc 	bl	d5fe0 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d7628:	4628      	mov	r0, r5
   d762a:	f003 fbd8 	bl	dadde <strlen>
   d762e:	6833      	ldr	r3, [r6, #0]
   d7630:	4602      	mov	r2, r0
   d7632:	68db      	ldr	r3, [r3, #12]
   d7634:	4629      	mov	r1, r5
   d7636:	4630      	mov	r0, r6
   d7638:	4798      	blx	r3
   d763a:	e00f      	b.n	d765c <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d763c:	b124      	cbz	r4, d7648 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d763e:	212e      	movs	r1, #46	; 0x2e
   d7640:	4630      	mov	r0, r6
   d7642:	f7ff fa73 	bl	d6b2c <_ZN5Print5printEc>
   d7646:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d7648:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d764c:	220a      	movs	r2, #10
   d764e:	4630      	mov	r0, r6
   d7650:	f7ff fa87 	bl	d6b62 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d7654:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d7656:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d7658:	d1f0      	bne.n	d763c <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d765a:	4620      	mov	r0, r4
    }
    return n;
}
   d765c:	b00d      	add	sp, #52	; 0x34
   d765e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7660 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d7660:	b510      	push	{r4, lr}
   d7662:	4b05      	ldr	r3, [pc, #20]	; (d7678 <_ZN9IPAddressC1Ev+0x18>)
   d7664:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d7666:	2211      	movs	r2, #17
   d7668:	f840 3b04 	str.w	r3, [r0], #4
   d766c:	2100      	movs	r1, #0
   d766e:	f003 fb59 	bl	dad24 <memset>
{
    clear();
}
   d7672:	4620      	mov	r0, r4
   d7674:	bd10      	pop	{r4, pc}
   d7676:	bf00      	nop
   d7678:	000dbe54 	.word	0x000dbe54

000d767c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d767c:	4603      	mov	r3, r0
   d767e:	4a07      	ldr	r2, [pc, #28]	; (d769c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d7680:	b510      	push	{r4, lr}
   d7682:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d7686:	f101 0210 	add.w	r2, r1, #16
   d768a:	f851 4b04 	ldr.w	r4, [r1], #4
   d768e:	f843 4b04 	str.w	r4, [r3], #4
   d7692:	4291      	cmp	r1, r2
   d7694:	d1f9      	bne.n	d768a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d7696:	780a      	ldrb	r2, [r1, #0]
   d7698:	701a      	strb	r2, [r3, #0]
}
   d769a:	bd10      	pop	{r4, pc}
   d769c:	000dbe54 	.word	0x000dbe54

000d76a0 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d76a0:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d76a2:	2b04      	cmp	r3, #4
   d76a4:	d101      	bne.n	d76aa <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d76a6:	6840      	ldr	r0, [r0, #4]
   d76a8:	e008      	b.n	d76bc <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d76aa:	2b06      	cmp	r3, #6
   d76ac:	d10a      	bne.n	d76c4 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d76ae:	6843      	ldr	r3, [r0, #4]
   d76b0:	b953      	cbnz	r3, d76c8 <_ZNK9IPAddresscvbEv+0x28>
   d76b2:	6883      	ldr	r3, [r0, #8]
   d76b4:	b943      	cbnz	r3, d76c8 <_ZNK9IPAddresscvbEv+0x28>
   d76b6:	68c3      	ldr	r3, [r0, #12]
   d76b8:	b933      	cbnz	r3, d76c8 <_ZNK9IPAddresscvbEv+0x28>
   d76ba:	6900      	ldr	r0, [r0, #16]
   d76bc:	3000      	adds	r0, #0
   d76be:	bf18      	it	ne
   d76c0:	2001      	movne	r0, #1
   d76c2:	4770      	bx	lr
    } else {
        return false;
   d76c4:	2000      	movs	r0, #0
   d76c6:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d76c8:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d76ca:	4770      	bx	lr

000d76cc <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d76cc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d76ce:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d76d2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d76d6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d76da:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d76de:	2304      	movs	r3, #4
   d76e0:	6041      	str	r1, [r0, #4]
   d76e2:	7503      	strb	r3, [r0, #20]
   d76e4:	bd10      	pop	{r4, pc}

000d76e6 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d76e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d76e8:	780d      	ldrb	r5, [r1, #0]
   d76ea:	788b      	ldrb	r3, [r1, #2]
   d76ec:	784a      	ldrb	r2, [r1, #1]
   d76ee:	78c9      	ldrb	r1, [r1, #3]
   d76f0:	9100      	str	r1, [sp, #0]
   d76f2:	4629      	mov	r1, r5
   d76f4:	f7ff ffea 	bl	d76cc <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d76f8:	b003      	add	sp, #12
   d76fa:	bd30      	pop	{r4, r5, pc}

000d76fc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d76fc:	7441      	strb	r1, [r0, #17]
   d76fe:	4770      	bx	lr

000d7700 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d7700:	4770      	bx	lr

000d7702 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d7702:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d7704:	2100      	movs	r1, #0
   d7706:	7c00      	ldrb	r0, [r0, #16]
   d7708:	f7fe fd6a 	bl	d61e0 <HAL_USB_USART_Receive_Data>
}
   d770c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7710:	bf28      	it	cs
   d7712:	f04f 30ff 	movcs.w	r0, #4294967295
   d7716:	bd08      	pop	{r3, pc}

000d7718 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d7718:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d771a:	2101      	movs	r1, #1
   d771c:	7c00      	ldrb	r0, [r0, #16]
   d771e:	f7fe fd5f 	bl	d61e0 <HAL_USB_USART_Receive_Data>
}
   d7722:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7726:	bf28      	it	cs
   d7728:	f04f 30ff 	movcs.w	r0, #4294967295
   d772c:	bd08      	pop	{r3, pc}

000d772e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d772e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d7730:	7c00      	ldrb	r0, [r0, #16]
   d7732:	f7fe fd4d 	bl	d61d0 <HAL_USB_USART_Available_Data_For_Write>
}
   d7736:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d773a:	bd08      	pop	{r3, pc}

000d773c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d773c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d773e:	7c00      	ldrb	r0, [r0, #16]
   d7740:	f7fe fd3e 	bl	d61c0 <HAL_USB_USART_Available_Data>
}
   d7744:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7748:	bd08      	pop	{r3, pc}

000d774a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d774a:	7c00      	ldrb	r0, [r0, #16]
   d774c:	f7fe bd58 	b.w	d6200 <HAL_USB_USART_Flush_Data>

000d7750 <_ZN9USBSerialD0Ev>:
   d7750:	b510      	push	{r4, lr}
   d7752:	2114      	movs	r1, #20
   d7754:	4604      	mov	r4, r0
   d7756:	f000 fec1 	bl	d84dc <_ZdlPvj>
   d775a:	4620      	mov	r0, r4
   d775c:	bd10      	pop	{r4, pc}

000d775e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d775e:	b538      	push	{r3, r4, r5, lr}
   d7760:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7762:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d7764:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7766:	f7fe fd33 	bl	d61d0 <HAL_USB_USART_Available_Data_For_Write>
   d776a:	2800      	cmp	r0, #0
   d776c:	dc01      	bgt.n	d7772 <_ZN9USBSerial5writeEh+0x14>
   d776e:	7c60      	ldrb	r0, [r4, #17]
   d7770:	b128      	cbz	r0, d777e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d7772:	4629      	mov	r1, r5
   d7774:	7c20      	ldrb	r0, [r4, #16]
   d7776:	f7fe fd3b 	bl	d61f0 <HAL_USB_USART_Send_Data>
   d777a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d777e:	bd38      	pop	{r3, r4, r5, pc}

000d7780 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7780:	b510      	push	{r4, lr}
   d7782:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d7784:	2300      	movs	r3, #0
   d7786:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d7788:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d778c:	60a3      	str	r3, [r4, #8]
   d778e:	4b05      	ldr	r3, [pc, #20]	; (d77a4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d7790:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d7792:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7794:	4608      	mov	r0, r1
{
  _serial = serial;
   d7796:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d7798:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d779a:	4611      	mov	r1, r2
   d779c:	f7fe fd00 	bl	d61a0 <HAL_USB_USART_Init>
}
   d77a0:	4620      	mov	r0, r4
   d77a2:	bd10      	pop	{r4, pc}
   d77a4:	000dbe68 	.word	0x000dbe68

000d77a8 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d77a8:	2200      	movs	r2, #0
   d77aa:	7c00      	ldrb	r0, [r0, #16]
   d77ac:	f7fe bd00 	b.w	d61b0 <HAL_USB_USART_Begin>

000d77b0 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d77b0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d77b2:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d77b4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d77b6:	2100      	movs	r1, #0
   d77b8:	f003 fab4 	bl	dad24 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d77bc:	4620      	mov	r0, r4
   d77be:	bd10      	pop	{r4, pc}

000d77c0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d77c0:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d77c2:	4d0e      	ldr	r5, [pc, #56]	; (d77fc <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d77c4:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d77c6:	a801      	add	r0, sp, #4
   d77c8:	f7ff fff2 	bl	d77b0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d77cc:	6829      	ldr	r1, [r5, #0]
   d77ce:	f011 0401 	ands.w	r4, r1, #1
   d77d2:	d110      	bne.n	d77f6 <_Z16_fetch_usbserialv+0x36>
   d77d4:	4628      	mov	r0, r5
   d77d6:	f7fc fc71 	bl	d40bc <__cxa_guard_acquire>
   d77da:	b160      	cbz	r0, d77f6 <_Z16_fetch_usbserialv+0x36>
   d77dc:	aa01      	add	r2, sp, #4
   d77de:	4621      	mov	r1, r4
   d77e0:	4807      	ldr	r0, [pc, #28]	; (d7800 <_Z16_fetch_usbserialv+0x40>)
   d77e2:	f7ff ffcd 	bl	d7780 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d77e6:	4628      	mov	r0, r5
   d77e8:	f7fc fc6d 	bl	d40c6 <__cxa_guard_release>
   d77ec:	4a05      	ldr	r2, [pc, #20]	; (d7804 <_Z16_fetch_usbserialv+0x44>)
   d77ee:	4906      	ldr	r1, [pc, #24]	; (d7808 <_Z16_fetch_usbserialv+0x48>)
   d77f0:	4803      	ldr	r0, [pc, #12]	; (d7800 <_Z16_fetch_usbserialv+0x40>)
   d77f2:	f000 fe65 	bl	d84c0 <__aeabi_atexit>
	return _usbserial;
}
   d77f6:	4802      	ldr	r0, [pc, #8]	; (d7800 <_Z16_fetch_usbserialv+0x40>)
   d77f8:	b007      	add	sp, #28
   d77fa:	bd30      	pop	{r4, r5, pc}
   d77fc:	2003e3dc 	.word	0x2003e3dc
   d7800:	2003e3e0 	.word	0x2003e3e0
   d7804:	2003e170 	.word	0x2003e170
   d7808:	000d7701 	.word	0x000d7701

000d780c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d780c:	4770      	bx	lr

000d780e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d780e:	7441      	strb	r1, [r0, #17]
   d7810:	4770      	bx	lr

000d7812 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d7812:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d7814:	7c00      	ldrb	r0, [r0, #16]
   d7816:	f7fe fc33 	bl	d6080 <HAL_USART_Available_Data_For_Write>
}
   d781a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d781e:	bd08      	pop	{r3, pc}

000d7820 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d7820:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d7822:	7c00      	ldrb	r0, [r0, #16]
   d7824:	f7fe fc04 	bl	d6030 <HAL_USART_Available_Data>
}
   d7828:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d782c:	bd08      	pop	{r3, pc}

000d782e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d782e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d7830:	7c00      	ldrb	r0, [r0, #16]
   d7832:	f7fe fc0d 	bl	d6050 <HAL_USART_Peek_Data>
}
   d7836:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d783a:	bf28      	it	cs
   d783c:	f04f 30ff 	movcs.w	r0, #4294967295
   d7840:	bd08      	pop	{r3, pc}

000d7842 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d7842:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d7844:	7c00      	ldrb	r0, [r0, #16]
   d7846:	f7fe fbfb 	bl	d6040 <HAL_USART_Read_Data>
}
   d784a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d784e:	bf28      	it	cs
   d7850:	f04f 30ff 	movcs.w	r0, #4294967295
   d7854:	bd08      	pop	{r3, pc}

000d7856 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d7856:	7c00      	ldrb	r0, [r0, #16]
   d7858:	f7fe bc02 	b.w	d6060 <HAL_USART_Flush_Data>

000d785c <_ZN11USARTSerialD0Ev>:
   d785c:	b510      	push	{r4, lr}
   d785e:	2114      	movs	r1, #20
   d7860:	4604      	mov	r4, r0
   d7862:	f000 fe3b 	bl	d84dc <_ZdlPvj>
   d7866:	4620      	mov	r0, r4
   d7868:	bd10      	pop	{r4, pc}

000d786a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d786a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d786c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d786e:	4604      	mov	r4, r0
   d7870:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7872:	b925      	cbnz	r5, d787e <_ZN11USARTSerial5writeEh+0x14>
   d7874:	7c00      	ldrb	r0, [r0, #16]
   d7876:	f7fe fc03 	bl	d6080 <HAL_USART_Available_Data_For_Write>
   d787a:	2800      	cmp	r0, #0
   d787c:	dd05      	ble.n	d788a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d787e:	4631      	mov	r1, r6
   d7880:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d7882:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7886:	f7fe bbcb 	b.w	d6020 <HAL_USART_Write_Data>
  }
  return 0;
}
   d788a:	4628      	mov	r0, r5
   d788c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d7890 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d7890:	b510      	push	{r4, lr}
   d7892:	4604      	mov	r4, r0
   d7894:	4608      	mov	r0, r1
   d7896:	4611      	mov	r1, r2
   d7898:	2200      	movs	r2, #0
   d789a:	6062      	str	r2, [r4, #4]
   d789c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d78a0:	60a2      	str	r2, [r4, #8]
   d78a2:	4a05      	ldr	r2, [pc, #20]	; (d78b8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d78a4:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d78a6:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d78a8:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d78aa:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d78ac:	461a      	mov	r2, r3
   d78ae:	f7fe fbaf 	bl	d6010 <HAL_USART_Init>
}
   d78b2:	4620      	mov	r0, r4
   d78b4:	bd10      	pop	{r4, pc}
   d78b6:	bf00      	nop
   d78b8:	000dbe98 	.word	0x000dbe98

000d78bc <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d78bc:	7c00      	ldrb	r0, [r0, #16]
   d78be:	f7fe bbd7 	b.w	d6070 <HAL_USART_Is_Enabled>
	...

000d78c4 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d78c4:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d78c6:	4d0c      	ldr	r5, [pc, #48]	; (d78f8 <_Z22__fetch_global_Serial1v+0x34>)
   d78c8:	6829      	ldr	r1, [r5, #0]
   d78ca:	f011 0401 	ands.w	r4, r1, #1
   d78ce:	d111      	bne.n	d78f4 <_Z22__fetch_global_Serial1v+0x30>
   d78d0:	4628      	mov	r0, r5
   d78d2:	f7fc fbf3 	bl	d40bc <__cxa_guard_acquire>
   d78d6:	b168      	cbz	r0, d78f4 <_Z22__fetch_global_Serial1v+0x30>
   d78d8:	4a08      	ldr	r2, [pc, #32]	; (d78fc <_Z22__fetch_global_Serial1v+0x38>)
   d78da:	4b09      	ldr	r3, [pc, #36]	; (d7900 <_Z22__fetch_global_Serial1v+0x3c>)
   d78dc:	4809      	ldr	r0, [pc, #36]	; (d7904 <_Z22__fetch_global_Serial1v+0x40>)
   d78de:	4621      	mov	r1, r4
   d78e0:	f7ff ffd6 	bl	d7890 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d78e4:	4628      	mov	r0, r5
   d78e6:	f7fc fbee 	bl	d40c6 <__cxa_guard_release>
   d78ea:	4a07      	ldr	r2, [pc, #28]	; (d7908 <_Z22__fetch_global_Serial1v+0x44>)
   d78ec:	4907      	ldr	r1, [pc, #28]	; (d790c <_Z22__fetch_global_Serial1v+0x48>)
   d78ee:	4805      	ldr	r0, [pc, #20]	; (d7904 <_Z22__fetch_global_Serial1v+0x40>)
   d78f0:	f000 fde6 	bl	d84c0 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d78f4:	4803      	ldr	r0, [pc, #12]	; (d7904 <_Z22__fetch_global_Serial1v+0x40>)
   d78f6:	bd38      	pop	{r3, r4, r5, pc}
   d78f8:	2003e48c 	.word	0x2003e48c
   d78fc:	2003e490 	.word	0x2003e490
   d7900:	2003e408 	.word	0x2003e408
   d7904:	2003e3f4 	.word	0x2003e3f4
   d7908:	2003e170 	.word	0x2003e170
   d790c:	000d780d 	.word	0x000d780d

000d7910 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d7910:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7912:	6883      	ldr	r3, [r0, #8]
   d7914:	4604      	mov	r4, r0
   d7916:	b90b      	cbnz	r3, d791c <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d7918:	f000 fdf3 	bl	d8502 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d791c:	68c3      	ldr	r3, [r0, #12]
   d791e:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d7920:	68a3      	ldr	r3, [r4, #8]
   d7922:	b11b      	cbz	r3, d792c <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7924:	2203      	movs	r2, #3
   d7926:	4621      	mov	r1, r4
   d7928:	4620      	mov	r0, r4
   d792a:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d792c:	4620      	mov	r0, r4
   d792e:	2110      	movs	r1, #16
}
   d7930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d7934:	f000 bdd2 	b.w	d84dc <_ZdlPvj>

000d7938 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d7938:	4770      	bx	lr

000d793a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d793a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d793c:	4606      	mov	r6, r0
   d793e:	4615      	mov	r5, r2
   d7940:	460c      	mov	r4, r1
   d7942:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7944:	42bc      	cmp	r4, r7
   d7946:	d006      	beq.n	d7956 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d7948:	6833      	ldr	r3, [r6, #0]
   d794a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d794e:	689b      	ldr	r3, [r3, #8]
   d7950:	4630      	mov	r0, r6
   d7952:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7954:	e7f6      	b.n	d7944 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d7956:	4628      	mov	r0, r5
   d7958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d795a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d795a:	2200      	movs	r2, #0
   d795c:	7c00      	ldrb	r0, [r0, #16]
   d795e:	f7fe bbaf 	b.w	d60c0 <HAL_I2C_Write_Data>

000d7962 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d7962:	2100      	movs	r1, #0
   d7964:	7c00      	ldrb	r0, [r0, #16]
   d7966:	f7fe bbb3 	b.w	d60d0 <HAL_I2C_Available_Data>

000d796a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d796a:	2100      	movs	r1, #0
   d796c:	7c00      	ldrb	r0, [r0, #16]
   d796e:	f7fe bbb7 	b.w	d60e0 <HAL_I2C_Read_Data>

000d7972 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d7972:	2100      	movs	r1, #0
   d7974:	7c00      	ldrb	r0, [r0, #16]
   d7976:	f7fe bbbb 	b.w	d60f0 <HAL_I2C_Peek_Data>

000d797a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d797a:	2100      	movs	r1, #0
   d797c:	7c00      	ldrb	r0, [r0, #16]
   d797e:	f7fe bbbf 	b.w	d6100 <HAL_I2C_Flush_Data>

000d7982 <_ZN7TwoWireD0Ev>:
   d7982:	b510      	push	{r4, lr}
   d7984:	2114      	movs	r1, #20
   d7986:	4604      	mov	r4, r0
   d7988:	f000 fda8 	bl	d84dc <_ZdlPvj>
   d798c:	4620      	mov	r0, r4
   d798e:	bd10      	pop	{r4, pc}

000d7990 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d7990:	b510      	push	{r4, lr}
   d7992:	4604      	mov	r4, r0
   d7994:	2300      	movs	r3, #0
   d7996:	6063      	str	r3, [r4, #4]
   d7998:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d799c:	60a3      	str	r3, [r4, #8]
   d799e:	4b04      	ldr	r3, [pc, #16]	; (d79b0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d79a0:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d79a2:	4608      	mov	r0, r1
   d79a4:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d79a6:	4611      	mov	r1, r2
   d79a8:	f7fe fbba 	bl	d6120 <HAL_I2C_Init>
}
   d79ac:	4620      	mov	r0, r4
   d79ae:	bd10      	pop	{r4, pc}
   d79b0:	000dbec8 	.word	0x000dbec8

000d79b4 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d79b4:	2300      	movs	r3, #0
   d79b6:	461a      	mov	r2, r3
   d79b8:	4619      	mov	r1, r3
   d79ba:	7c00      	ldrb	r0, [r0, #16]
   d79bc:	f7fe bb68 	b.w	d6090 <HAL_I2C_Begin>

000d79c0 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d79c0:	b570      	push	{r4, r5, r6, lr}
   d79c2:	460c      	mov	r4, r1
   d79c4:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d79c6:	2514      	movs	r5, #20
   d79c8:	4606      	mov	r6, r0
   d79ca:	462a      	mov	r2, r5
   d79cc:	2100      	movs	r1, #0
   d79ce:	a801      	add	r0, sp, #4
   d79d0:	f003 f9a8 	bl	dad24 <memset>
   d79d4:	7823      	ldrb	r3, [r4, #0]
   d79d6:	f88d 3008 	strb.w	r3, [sp, #8]
   d79da:	6863      	ldr	r3, [r4, #4]
   d79dc:	9303      	str	r3, [sp, #12]
   d79de:	68e3      	ldr	r3, [r4, #12]
   d79e0:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d79e2:	2200      	movs	r2, #0
   d79e4:	7a23      	ldrb	r3, [r4, #8]
   d79e6:	7c30      	ldrb	r0, [r6, #16]
   d79e8:	f8ad 5004 	strh.w	r5, [sp, #4]
   d79ec:	a901      	add	r1, sp, #4
   d79ee:	9305      	str	r3, [sp, #20]
   d79f0:	f7fe fb9e 	bl	d6130 <HAL_I2C_Request_Data_Ex>
}
   d79f4:	b006      	add	sp, #24
   d79f6:	bd70      	pop	{r4, r5, r6, pc}

000d79f8 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d79f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d79fa:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d79fc:	f88d 1000 	strb.w	r1, [sp]
   d7a00:	f04f 0164 	mov.w	r1, #100	; 0x64
   d7a04:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d7a06:	bf18      	it	ne
   d7a08:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d7a0a:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d7a0c:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d7a0e:	f88d 3008 	strb.w	r3, [sp, #8]
   d7a12:	f7ff ffd5 	bl	d79c0 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d7a16:	b005      	add	sp, #20
   d7a18:	f85d fb04 	ldr.w	pc, [sp], #4

000d7a1c <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   d7a1c:	2301      	movs	r3, #1
   d7a1e:	f7ff bfeb 	b.w	d79f8 <_ZN7TwoWire11requestFromEhjh>

000d7a22 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d7a22:	2200      	movs	r2, #0
   d7a24:	7c00      	ldrb	r0, [r0, #16]
   d7a26:	f7fe bb3b 	b.w	d60a0 <HAL_I2C_Begin_Transmission>

000d7a2a <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d7a2a:	2200      	movs	r2, #0
   d7a2c:	7c00      	ldrb	r0, [r0, #16]
   d7a2e:	f7fe bb3f 	b.w	d60b0 <HAL_I2C_End_Transmission>

000d7a32 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d7a32:	2101      	movs	r1, #1
   d7a34:	f7ff bff9 	b.w	d7a2a <_ZN7TwoWire15endTransmissionEh>

000d7a38 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d7a38:	2100      	movs	r1, #0
   d7a3a:	7c00      	ldrb	r0, [r0, #16]
   d7a3c:	f7fe bb68 	b.w	d6110 <HAL_I2C_Is_Enabled>

000d7a40 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7a40:	2200      	movs	r2, #0
   d7a42:	4611      	mov	r1, r2
   d7a44:	6840      	ldr	r0, [r0, #4]
   d7a46:	f7fe bc6f 	b.w	d6328 <network_listening>

000d7a4a <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d7a4a:	2200      	movs	r2, #0
   d7a4c:	4611      	mov	r1, r2
   d7a4e:	6840      	ldr	r0, [r0, #4]
   d7a50:	f7fe bc7a 	b.w	d6348 <network_get_listen_timeout>

000d7a54 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d7a54:	2200      	movs	r2, #0
   d7a56:	6840      	ldr	r0, [r0, #4]
   d7a58:	f7fe bc6e 	b.w	d6338 <network_set_listen_timeout>

000d7a5c <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7a5c:	2200      	movs	r2, #0
   d7a5e:	f081 0101 	eor.w	r1, r1, #1
   d7a62:	6840      	ldr	r0, [r0, #4]
   d7a64:	f7fe bc58 	b.w	d6318 <network_listen>

000d7a68 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d7a68:	2300      	movs	r3, #0
   d7a6a:	461a      	mov	r2, r3
   d7a6c:	2101      	movs	r1, #1
   d7a6e:	6840      	ldr	r0, [r0, #4]
   d7a70:	f7fe bc4a 	b.w	d6308 <network_off>

000d7a74 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d7a74:	2300      	movs	r3, #0
   d7a76:	461a      	mov	r2, r3
   d7a78:	4619      	mov	r1, r3
   d7a7a:	6840      	ldr	r0, [r0, #4]
   d7a7c:	f7fe bc3c 	b.w	d62f8 <network_on>

000d7a80 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d7a80:	2200      	movs	r2, #0
   d7a82:	4611      	mov	r1, r2
   d7a84:	6840      	ldr	r0, [r0, #4]
   d7a86:	f7fe bc2f 	b.w	d62e8 <network_ready>

000d7a8a <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7a8a:	2200      	movs	r2, #0
   d7a8c:	4611      	mov	r1, r2
   d7a8e:	6840      	ldr	r0, [r0, #4]
   d7a90:	f7fe bc1a 	b.w	d62c8 <network_connecting>

000d7a94 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7a94:	2200      	movs	r2, #0
   d7a96:	2102      	movs	r1, #2
   d7a98:	6840      	ldr	r0, [r0, #4]
   d7a9a:	f7fe bc1d 	b.w	d62d8 <network_disconnect>

000d7a9e <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7a9e:	2300      	movs	r3, #0
   d7aa0:	461a      	mov	r2, r3
   d7aa2:	6840      	ldr	r0, [r0, #4]
   d7aa4:	f7fe bc08 	b.w	d62b8 <network_connect>

000d7aa8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d7aa8:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7aaa:	4605      	mov	r5, r0
   d7aac:	b188      	cbz	r0, d7ad2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7aae:	6804      	ldr	r4, [r0, #0]
   d7ab0:	b14c      	cbz	r4, d7ac6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d7ab2:	68a3      	ldr	r3, [r4, #8]
   d7ab4:	b11b      	cbz	r3, d7abe <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7ab6:	2203      	movs	r2, #3
   d7ab8:	4621      	mov	r1, r4
   d7aba:	4620      	mov	r0, r4
   d7abc:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7abe:	2110      	movs	r1, #16
   d7ac0:	4620      	mov	r0, r4
   d7ac2:	f000 fd0b 	bl	d84dc <_ZdlPvj>
   d7ac6:	4628      	mov	r0, r5
   d7ac8:	2114      	movs	r1, #20
      }
   d7aca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7ace:	f000 bd05 	b.w	d84dc <_ZdlPvj>
   d7ad2:	bd38      	pop	{r3, r4, r5, pc}

000d7ad4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d7ad4:	b110      	cbz	r0, d7adc <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d7ad6:	6803      	ldr	r3, [r0, #0]
   d7ad8:	685b      	ldr	r3, [r3, #4]
   d7ada:	4718      	bx	r3
   d7adc:	4770      	bx	lr

000d7ade <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d7ade:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d7ae0:	6803      	ldr	r3, [r0, #0]
   d7ae2:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d7ae4:	b1bb      	cbz	r3, d7b16 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d7ae6:	6858      	ldr	r0, [r3, #4]
   d7ae8:	f7fe fa52 	bl	d5f90 <os_thread_is_current>
   d7aec:	b978      	cbnz	r0, d7b0e <_ZN6ThreadD1Ev+0x30>
   d7aee:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d7af0:	7c5a      	ldrb	r2, [r3, #17]
   d7af2:	b912      	cbnz	r2, d7afa <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d7af4:	6858      	ldr	r0, [r3, #4]
   d7af6:	f7fe fa53 	bl	d5fa0 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d7afa:	6823      	ldr	r3, [r4, #0]
   d7afc:	6858      	ldr	r0, [r3, #4]
   d7afe:	f7fe fa57 	bl	d5fb0 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7b02:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d7b04:	2300      	movs	r3, #0
   d7b06:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d7b08:	b128      	cbz	r0, d7b16 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d7b0a:	f7ff ffcd 	bl	d7aa8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7b0e:	6820      	ldr	r0, [r4, #0]
   d7b10:	b108      	cbz	r0, d7b16 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d7b12:	f7ff ffc9 	bl	d7aa8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d7b16:	4620      	mov	r0, r4
   d7b18:	bd10      	pop	{r4, pc}

000d7b1a <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d7b1a:	b538      	push	{r3, r4, r5, lr}
   d7b1c:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7b1e:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d7b22:	b108      	cbz	r0, d7b28 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d7b24:	f7fc fabd 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d7b28:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d7b2c:	b108      	cbz	r0, d7b32 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d7b2e:	f7fe fa4f 	bl	d5fd0 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7b32:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d7b36:	b135      	cbz	r5, d7b46 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7b38:	4628      	mov	r0, r5
   d7b3a:	f7ff ffd0 	bl	d7ade <_ZN6ThreadD1Ev>
   d7b3e:	2104      	movs	r1, #4
   d7b40:	4628      	mov	r0, r5
   d7b42:	f000 fccb 	bl	d84dc <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7b46:	6820      	ldr	r0, [r4, #0]
   d7b48:	b108      	cbz	r0, d7b4e <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d7b4a:	f7ff ffc3 	bl	d7ad4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d7b4e:	4620      	mov	r0, r4
   d7b50:	bd38      	pop	{r3, r4, r5, pc}
	...

000d7b54 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d7b54:	b510      	push	{r4, lr}
   d7b56:	4b04      	ldr	r3, [pc, #16]	; (d7b68 <_ZN5spark9MeshClassD1Ev+0x14>)
   d7b58:	4604      	mov	r4, r0
   d7b5a:	f840 3b08 	str.w	r3, [r0], #8
   d7b5e:	f7ff ffdc 	bl	d7b1a <_ZN5spark11MeshPublishD1Ev>
   d7b62:	4620      	mov	r0, r4
   d7b64:	bd10      	pop	{r4, pc}
   d7b66:	bf00      	nop
   d7b68:	000dbef0 	.word	0x000dbef0

000d7b6c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d7b6c:	b538      	push	{r3, r4, r5, lr}
   d7b6e:	4c0e      	ldr	r4, [pc, #56]	; (d7ba8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d7b70:	4b0e      	ldr	r3, [pc, #56]	; (d7bac <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d7b72:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d7b74:	2500      	movs	r5, #0
   d7b76:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d7b78:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d7b7c:	6063      	str	r3, [r4, #4]
   d7b7e:	60a5      	str	r5, [r4, #8]
   d7b80:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7b84:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d7b88:	f7fe fa1a 	bl	d5fc0 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d7b8c:	4b08      	ldr	r3, [pc, #32]	; (d7bb0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d7b8e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7b92:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d7b96:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d7b98:	4620      	mov	r0, r4
   d7b9a:	4a06      	ldr	r2, [pc, #24]	; (d7bb4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d7b9c:	4906      	ldr	r1, [pc, #24]	; (d7bb8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d7b9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d7ba2:	f000 bc8d 	b.w	d84c0 <__aeabi_atexit>
   d7ba6:	bf00      	nop
   d7ba8:	2003e514 	.word	0x2003e514
   d7bac:	000dbfd8 	.word	0x000dbfd8
   d7bb0:	000dbef0 	.word	0x000dbef0
   d7bb4:	2003e170 	.word	0x2003e170
   d7bb8:	000d7b55 	.word	0x000d7b55

000d7bbc <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d7bbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7bbe:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d7bc0:	6803      	ldr	r3, [r0, #0]
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d7bc2:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d7bc6:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d7bc8:	2201      	movs	r2, #1
   d7bca:	f04f 33ff 	mov.w	r3, #4294967295
   d7bce:	4621      	mov	r1, r4
   d7bd0:	47a8      	blx	r5
}
   d7bd2:	b003      	add	sp, #12
   d7bd4:	bd30      	pop	{r4, r5, pc}

000d7bd6 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d7bd6:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d7bd8:	6803      	ldr	r3, [r0, #0]
   d7bda:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d7bdc:	f04f 33ff 	mov.w	r3, #4294967295
   d7be0:	46a4      	mov	ip, r4
}
   d7be2:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d7be6:	4760      	bx	ip

000d7be8 <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d7be8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7bea:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   d7bec:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d7bee:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   d7bf2:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d7bf4:	4621      	mov	r1, r4
   d7bf6:	4613      	mov	r3, r2
   d7bf8:	2201      	movs	r2, #1
   d7bfa:	47a8      	blx	r5
}
   d7bfc:	b003      	add	sp, #12
   d7bfe:	bd30      	pop	{r4, r5, pc}

000d7c00 <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   d7c00:	4770      	bx	lr

000d7c02 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d7c02:	b538      	push	{r3, r4, r5, lr}
   d7c04:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d7c06:	681a      	ldr	r2, [r3, #0]
   d7c08:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d7c0a:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   d7c0c:	da05      	bge.n	d7c1a <_ZN9TCPClient9connectedEv+0x18>
   d7c0e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7c12:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7c16:	429a      	cmp	r2, r3
   d7c18:	d001      	beq.n	d7c1e <_ZN9TCPClient9connectedEv+0x1c>
   d7c1a:	2501      	movs	r5, #1
   d7c1c:	e00b      	b.n	d7c36 <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   d7c1e:	6803      	ldr	r3, [r0, #0]
   d7c20:	691b      	ldr	r3, [r3, #16]
   d7c22:	4798      	blx	r3
   d7c24:	2800      	cmp	r0, #0
   d7c26:	bf14      	ite	ne
   d7c28:	2501      	movne	r5, #1
   d7c2a:	2500      	moveq	r5, #0
        if (!rv) {
   d7c2c:	d103      	bne.n	d7c36 <_ZN9TCPClient9connectedEv+0x34>
            stop();
   d7c2e:	6823      	ldr	r3, [r4, #0]
   d7c30:	4620      	mov	r0, r4
   d7c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7c34:	4798      	blx	r3
        }
    }
    return rv;
}
   d7c36:	4628      	mov	r0, r5
   d7c38:	bd38      	pop	{r3, r4, r5, pc}

000d7c3a <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d7c3a:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   d7c3c:	6818      	ldr	r0, [r3, #0]
}
   d7c3e:	43c0      	mvns	r0, r0
   d7c40:	0fc0      	lsrs	r0, r0, #31
   d7c42:	4770      	bx	lr

000d7c44 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d7c44:	4770      	bx	lr

000d7c46 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d7c46:	2000      	movs	r0, #0
   d7c48:	4770      	bx	lr

000d7c4a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d7c4a:	b510      	push	{r4, lr}
   d7c4c:	2114      	movs	r1, #20
   d7c4e:	4604      	mov	r4, r0
   d7c50:	f000 fc44 	bl	d84dc <_ZdlPvj>
   d7c54:	4620      	mov	r0, r4
   d7c56:	bd10      	pop	{r4, pc}

000d7c58 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d7c58:	f7fc ba21 	b.w	d409e <_ZdlPv>

000d7c5c <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d7c5c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d7c5e:	4616      	mov	r6, r2

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   d7c60:	2200      	movs	r2, #0
   d7c62:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   d7c64:	9202      	str	r2, [sp, #8]
   d7c66:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   d7c68:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d7c6a:	4604      	mov	r4, r0
   d7c6c:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   d7c6e:	d008      	beq.n	d7c82 <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   d7c70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7c74:	fbb3 f1f2 	udiv	r1, r3, r2
   d7c78:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d7c7a:	fb02 3111 	mls	r1, r2, r1, r3
   d7c7e:	434a      	muls	r2, r1
   d7c80:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d7c82:	6960      	ldr	r0, [r4, #20]
   d7c84:	2308      	movs	r3, #8
   d7c86:	9300      	str	r3, [sp, #0]
   d7c88:	f241 0205 	movw	r2, #4101	; 0x1005
   d7c8c:	446b      	add	r3, sp
   d7c8e:	f640 71ff 	movw	r1, #4095	; 0xfff
   d7c92:	6800      	ldr	r0, [r0, #0]
   d7c94:	f7fe fa54 	bl	d6140 <sock_setsockopt>
    if (ret < 0) {
   d7c98:	2800      	cmp	r0, #0
   d7c9a:	db08      	blt.n	d7cae <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   d7c9c:	6960      	ldr	r0, [r4, #20]
   d7c9e:	2300      	movs	r3, #0
   d7ca0:	4632      	mov	r2, r6
   d7ca2:	4629      	mov	r1, r5
   d7ca4:	6800      	ldr	r0, [r0, #0]
   d7ca6:	f7fe fa6b 	bl	d6180 <sock_send>
    if (ret < 0) {
   d7caa:	2800      	cmp	r0, #0
   d7cac:	da04      	bge.n	d7cb8 <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   d7cae:	f7fe fbd3 	bl	d6458 <__errno>
   d7cb2:	6803      	ldr	r3, [r0, #0]
   d7cb4:	6063      	str	r3, [r4, #4]
   d7cb6:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   d7cb8:	b004      	add	sp, #16
   d7cba:	bd70      	pop	{r4, r5, r6, pc}

000d7cbc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d7cbc:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d7cbe:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d7cc0:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d7cc2:	689b      	ldr	r3, [r3, #8]
   d7cc4:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d7cc6:	68a3      	ldr	r3, [r4, #8]
   d7cc8:	3b01      	subs	r3, #1
   d7cca:	60a3      	str	r3, [r4, #8]
   d7ccc:	b92b      	cbnz	r3, d7cda <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   d7cce:	6823      	ldr	r3, [r4, #0]
   d7cd0:	4620      	mov	r0, r4
   d7cd2:	68db      	ldr	r3, [r3, #12]
        }
    }
   d7cd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d7cd8:	4718      	bx	r3
   d7cda:	bd10      	pop	{r4, pc}

000d7cdc <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   d7cdc:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d7cde:	4604      	mov	r4, r0
   d7ce0:	694d      	ldr	r5, [r1, #20]
   d7ce2:	4b05      	ldr	r3, [pc, #20]	; (d7cf8 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d7ce4:	f844 3b04 	str.w	r3, [r4], #4
   d7ce8:	358c      	adds	r5, #140	; 0x8c
   d7cea:	4606      	mov	r6, r0
   d7cec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7cee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7cf0:	682b      	ldr	r3, [r5, #0]
   d7cf2:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d7cf4:	4630      	mov	r0, r6
   d7cf6:	bd70      	pop	{r4, r5, r6, pc}
   d7cf8:	000dbe54 	.word	0x000dbe54

000d7cfc <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d7cfc:	b510      	push	{r4, lr}
   d7cfe:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d7d00:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7d04:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7d08:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d7d0a:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d7d0c:	d005      	beq.n	d7d1a <_ZN9TCPClient4peekEv+0x1e>
   d7d0e:	6962      	ldr	r2, [r4, #20]
   d7d10:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d7d14:	4413      	add	r3, r2
   d7d16:	7918      	ldrb	r0, [r3, #4]
   d7d18:	bd10      	pop	{r4, pc}
   d7d1a:	6803      	ldr	r3, [r0, #0]
   d7d1c:	691b      	ldr	r3, [r3, #16]
   d7d1e:	4798      	blx	r3
   d7d20:	2800      	cmp	r0, #0
   d7d22:	d1f4      	bne.n	d7d0e <_ZN9TCPClient4peekEv+0x12>
   d7d24:	f04f 30ff 	mov.w	r0, #4294967295
}
   d7d28:	bd10      	pop	{r4, pc}

000d7d2a <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d7d2a:	b510      	push	{r4, lr}
   d7d2c:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d7d2e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7d32:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7d36:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d7d38:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d7d3a:	d008      	beq.n	d7d4e <_ZN9TCPClient4readEv+0x24>
   d7d3c:	6962      	ldr	r2, [r4, #20]
   d7d3e:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d7d42:	1c59      	adds	r1, r3, #1
   d7d44:	4413      	add	r3, r2
   d7d46:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   d7d4a:	7918      	ldrb	r0, [r3, #4]
   d7d4c:	bd10      	pop	{r4, pc}
   d7d4e:	6803      	ldr	r3, [r0, #0]
   d7d50:	691b      	ldr	r3, [r3, #16]
   d7d52:	4798      	blx	r3
   d7d54:	2800      	cmp	r0, #0
   d7d56:	d1f1      	bne.n	d7d3c <_ZN9TCPClient4readEv+0x12>
   d7d58:	f04f 30ff 	mov.w	r0, #4294967295
}
   d7d5c:	bd10      	pop	{r4, pc}

000d7d5e <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   d7d5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7d60:	6943      	ldr	r3, [r0, #20]
   d7d62:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   d7d64:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7d68:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7d6c:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   d7d6e:	4605      	mov	r5, r0
   d7d70:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   d7d72:	d106      	bne.n	d7d82 <_ZN9TCPClient4readEPhj+0x24>
   d7d74:	6803      	ldr	r3, [r0, #0]
   d7d76:	691b      	ldr	r3, [r3, #16]
   d7d78:	4798      	blx	r3
   d7d7a:	b910      	cbnz	r0, d7d82 <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   d7d7c:	f04f 34ff 	mov.w	r4, #4294967295
   d7d80:	e014      	b.n	d7dac <_ZN9TCPClient4readEPhj+0x4e>
   d7d82:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   d7d84:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d7d88:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d7d8c:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d7d8e:	42bc      	cmp	r4, r7
   d7d90:	bf28      	it	cs
   d7d92:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d7d94:	4419      	add	r1, r3
   d7d96:	4622      	mov	r2, r4
   d7d98:	3104      	adds	r1, #4
   d7d9a:	4630      	mov	r0, r6
   d7d9c:	f002 ff9c 	bl	dacd8 <memcpy>
   d7da0:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d7da2:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d7da6:	4423      	add	r3, r4
   d7da8:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   d7dac:	4620      	mov	r0, r4
   d7dae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7db0 <_ZN9TCPClient7connectEPKctm>:
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d7db0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7db4:	4698      	mov	r8, r3
    stop();
   d7db6:	6803      	ldr	r3, [r0, #0]
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d7db8:	b093      	sub	sp, #76	; 0x4c
    stop();
   d7dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d7dbc:	460d      	mov	r5, r1
   d7dbe:	4606      	mov	r6, r0
   d7dc0:	4617      	mov	r7, r2
    stop();
   d7dc2:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   d7dc4:	ab12      	add	r3, sp, #72	; 0x48
   d7dc6:	2400      	movs	r4, #0
   d7dc8:	f843 4d48 	str.w	r4, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d7dcc:	4622      	mov	r2, r4
   d7dce:	4621      	mov	r1, r4
   d7dd0:	4628      	mov	r0, r5
   d7dd2:	f7fe f825 	bl	d5e20 <netdb_getaddrinfo>
   d7dd6:	4681      	mov	r9, r0
   d7dd8:	2800      	cmp	r0, #0
   d7dda:	d13d      	bne.n	d7e58 <_ZN9TCPClient7connectEPKctm+0xa8>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d7ddc:	9b00      	ldr	r3, [sp, #0]
   d7dde:	2b00      	cmp	r3, #0
   d7de0:	d056      	beq.n	d7e90 <_ZN9TCPClient7connectEPKctm+0xe0>
   d7de2:	695b      	ldr	r3, [r3, #20]
   d7de4:	2b00      	cmp	r3, #0
   d7de6:	d053      	beq.n	d7e90 <_ZN9TCPClient7connectEPKctm+0xe0>
        IPAddress addr;
   d7de8:	a806      	add	r0, sp, #24
   d7dea:	f7ff fc39 	bl	d7660 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d7dee:	9b00      	ldr	r3, [sp, #0]
   d7df0:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d7df2:	7863      	ldrb	r3, [r4, #1]
   d7df4:	2b02      	cmp	r3, #2
   d7df6:	d101      	bne.n	d7dfc <_ZN9TCPClient7connectEPKctm+0x4c>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d7df8:	1d21      	adds	r1, r4, #4
   d7dfa:	e013      	b.n	d7e24 <_ZN9TCPClient7connectEPKctm+0x74>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d7dfc:	2b0a      	cmp	r3, #10
   d7dfe:	d114      	bne.n	d7e2a <_ZN9TCPClient7connectEPKctm+0x7a>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d7e00:	2211      	movs	r2, #17
   d7e02:	4649      	mov	r1, r9
   d7e04:	a801      	add	r0, sp, #4
   d7e06:	f002 ff8d 	bl	dad24 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d7e0a:	68a3      	ldr	r3, [r4, #8]
   d7e0c:	bb33      	cbnz	r3, d7e5c <_ZN9TCPClient7connectEPKctm+0xac>
   d7e0e:	68e3      	ldr	r3, [r4, #12]
   d7e10:	bb23      	cbnz	r3, d7e5c <_ZN9TCPClient7connectEPKctm+0xac>
   d7e12:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d7e16:	6925      	ldr	r5, [r4, #16]
   d7e18:	f7fe f8ea 	bl	d5ff0 <inet_htonl>
   d7e1c:	4285      	cmp	r5, r0
   d7e1e:	d11d      	bne.n	d7e5c <_ZN9TCPClient7connectEPKctm+0xac>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d7e20:	f104 0114 	add.w	r1, r4, #20
   d7e24:	a806      	add	r0, sp, #24
   d7e26:	f7ff fc5e 	bl	d76e6 <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d7e2a:	a806      	add	r0, sp, #24
   d7e2c:	f7ff fc38 	bl	d76a0 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d7e30:	2800      	cmp	r0, #0
   d7e32:	d02d      	beq.n	d7e90 <_ZN9TCPClient7connectEPKctm+0xe0>
            return connect(addr, port, nif);
   d7e34:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d7e36:	ad07      	add	r5, sp, #28
   d7e38:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d7e3c:	4b18      	ldr	r3, [pc, #96]	; (d7ea0 <_ZN9TCPClient7connectEPKctm+0xf0>)
   d7e3e:	930c      	str	r3, [sp, #48]	; 0x30
   d7e40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7e42:	ac0d      	add	r4, sp, #52	; 0x34
   d7e44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7e46:	682b      	ldr	r3, [r5, #0]
   d7e48:	7023      	strb	r3, [r4, #0]
   d7e4a:	463a      	mov	r2, r7
   d7e4c:	4643      	mov	r3, r8
   d7e4e:	a90c      	add	r1, sp, #48	; 0x30
   d7e50:	4630      	mov	r0, r6
   d7e52:	47c8      	blx	r9
   d7e54:	4681      	mov	r9, r0
   d7e56:	e01b      	b.n	d7e90 <_ZN9TCPClient7connectEPKctm+0xe0>

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d7e58:	46a1      	mov	r9, r4
   d7e5a:	e019      	b.n	d7e90 <_ZN9TCPClient7connectEPKctm+0xe0>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7e5c:	f104 0308 	add.w	r3, r4, #8
   d7e60:	ad01      	add	r5, sp, #4
   d7e62:	3418      	adds	r4, #24
   d7e64:	6818      	ldr	r0, [r3, #0]
   d7e66:	6859      	ldr	r1, [r3, #4]
   d7e68:	462a      	mov	r2, r5
   d7e6a:	c203      	stmia	r2!, {r0, r1}
   d7e6c:	3308      	adds	r3, #8
   d7e6e:	42a3      	cmp	r3, r4
   d7e70:	4615      	mov	r5, r2
   d7e72:	d1f7      	bne.n	d7e64 <_ZN9TCPClient7connectEPKctm+0xb4>
            a.v = 6;
   d7e74:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d7e76:	a901      	add	r1, sp, #4
   d7e78:	a80c      	add	r0, sp, #48	; 0x30
   d7e7a:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d7e7c:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d7e80:	f7ff fbfc 	bl	d767c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7e84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7e86:	ac07      	add	r4, sp, #28
   d7e88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7e8a:	682b      	ldr	r3, [r5, #0]
   d7e8c:	7023      	strb	r3, [r4, #0]
   d7e8e:	e7cc      	b.n	d7e2a <_ZN9TCPClient7connectEPKctm+0x7a>
// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d7e90:	9800      	ldr	r0, [sp, #0]
   d7e92:	f7fd ffbd 	bl	d5e10 <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return 0; // error, could not connect
}
   d7e96:	4648      	mov	r0, r9
   d7e98:	b013      	add	sp, #76	; 0x4c
   d7e9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d7e9e:	bf00      	nop
   d7ea0:	000dbe54 	.word	0x000dbe54

000d7ea4 <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   d7ea4:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d7ea6:	2300      	movs	r3, #0
   d7ea8:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d7eac:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d7eae:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   d7eb2:	4770      	bx	lr

000d7eb4 <_ZN9TCPClient7connectE9IPAddresstm>:

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d7eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7eb8:	461e      	mov	r6, r3
    stop();
   d7eba:	6803      	ldr	r3, [r0, #0]

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d7ebc:	460c      	mov	r4, r1
   d7ebe:	b08a      	sub	sp, #40	; 0x28
    stop();
   d7ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d7ec2:	4605      	mov	r5, r0
   d7ec4:	4617      	mov	r7, r2
    stop();
   d7ec6:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d7ec8:	7d23      	ldrb	r3, [r4, #20]
   d7eca:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d7ece:	2b04      	cmp	r3, #4
   d7ed0:	bf0c      	ite	eq
   d7ed2:	2002      	moveq	r0, #2
   d7ed4:	200a      	movne	r0, #10
   d7ed6:	2206      	movs	r2, #6
   d7ed8:	2101      	movs	r1, #1
   d7eda:	f7fe f959 	bl	d6190 <sock_socket>
   d7ede:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d7ee2:	696b      	ldr	r3, [r5, #20]
   d7ee4:	681b      	ldr	r3, [r3, #0]
   d7ee6:	2b00      	cmp	r3, #0
   d7ee8:	db18      	blt.n	d7f1c <_ZN9TCPClient7connectE9IPAddresstm+0x68>

    flush_buffer();
   d7eea:	4628      	mov	r0, r5
   d7eec:	f7ff ffda 	bl	d7ea4 <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d7ef0:	b1d6      	cbz	r6, d7f28 <_ZN9TCPClient7connectE9IPAddresstm+0x74>
        struct ifreq ifr = {};
   d7ef2:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d7ef4:	a903      	add	r1, sp, #12
   d7ef6:	b2f0      	uxtb	r0, r6
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   d7ef8:	9303      	str	r3, [sp, #12]
   d7efa:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d7efe:	f7fe f817 	bl	d5f30 <if_index_to_name>
   d7f02:	b958      	cbnz	r0, d7f1c <_ZN9TCPClient7connectE9IPAddresstm+0x68>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d7f04:	6968      	ldr	r0, [r5, #20]
   d7f06:	2306      	movs	r3, #6
   d7f08:	9300      	str	r3, [sp, #0]
   d7f0a:	f241 020b 	movw	r2, #4107	; 0x100b
   d7f0e:	ab03      	add	r3, sp, #12
   d7f10:	f640 71ff 	movw	r1, #4095	; 0xfff
   d7f14:	6800      	ldr	r0, [r0, #0]
   d7f16:	f7fe f913 	bl	d6140 <sock_setsockopt>
   d7f1a:	b128      	cbz	r0, d7f28 <_ZN9TCPClient7connectE9IPAddresstm+0x74>

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d7f1c:	682b      	ldr	r3, [r5, #0]
   d7f1e:	4628      	mov	r0, r5
   d7f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d7f22:	2400      	movs	r4, #0

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d7f24:	4798      	blx	r3
   d7f26:	e03b      	b.n	d7fa0 <_ZN9TCPClient7connectE9IPAddresstm+0xec>
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   d7f28:	261c      	movs	r6, #28
   d7f2a:	4632      	mov	r2, r6
   d7f2c:	2100      	movs	r1, #0
   d7f2e:	a803      	add	r0, sp, #12
   d7f30:	f002 fef8 	bl	dad24 <memset>
    if (ip.version() == 4) {
   d7f34:	7d23      	ldrb	r3, [r4, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   d7f36:	f88d 600c 	strb.w	r6, [sp, #12]
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   d7f3a:	2b04      	cmp	r3, #4
   d7f3c:	d10c      	bne.n	d7f58 <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d7f3e:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   d7f40:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d7f42:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   d7f46:	f7fe f85b 	bl	d6000 <inet_htons>
   d7f4a:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d7f4e:	6860      	ldr	r0, [r4, #4]
   d7f50:	f7fe f84e 	bl	d5ff0 <inet_htonl>
   d7f54:	9004      	str	r0, [sp, #16]
   d7f56:	e013      	b.n	d7f80 <_ZN9TCPClient7connectE9IPAddresstm+0xcc>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d7f58:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   d7f5a:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d7f5c:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   d7f60:	f7fe f84e 	bl	d6000 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d7f64:	ae05      	add	r6, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   d7f66:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d7f6a:	1d23      	adds	r3, r4, #4
   d7f6c:	f104 0714 	add.w	r7, r4, #20
   d7f70:	6818      	ldr	r0, [r3, #0]
   d7f72:	6859      	ldr	r1, [r3, #4]
   d7f74:	4632      	mov	r2, r6
   d7f76:	c203      	stmia	r2!, {r0, r1}
   d7f78:	3308      	adds	r3, #8
   d7f7a:	42bb      	cmp	r3, r7
   d7f7c:	4616      	mov	r6, r2
   d7f7e:	d1f7      	bne.n	d7f70 <_ZN9TCPClient7connectE9IPAddresstm+0xbc>
    }

    // FIXME: timeout?
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d7f80:	696b      	ldr	r3, [r5, #20]
   d7f82:	221c      	movs	r2, #28
   d7f84:	a903      	add	r1, sp, #12
   d7f86:	6818      	ldr	r0, [r3, #0]
   d7f88:	f7fe f8ea 	bl	d6160 <sock_connect>
   d7f8c:	2800      	cmp	r0, #0
   d7f8e:	d1c5      	bne.n	d7f1c <_ZN9TCPClient7connectE9IPAddresstm+0x68>
   d7f90:	3404      	adds	r4, #4
   d7f92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7f94:	696d      	ldr	r5, [r5, #20]
   d7f96:	358c      	adds	r5, #140	; 0x8c
   d7f98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d7f9a:	6823      	ldr	r3, [r4, #0]
   d7f9c:	702b      	strb	r3, [r5, #0]

    d_->remoteIP = ip;

    done.dismiss();

    return 1; // success
   d7f9e:	2401      	movs	r4, #1
}
   d7fa0:	4620      	mov	r0, r4
   d7fa2:	b00a      	add	sp, #40	; 0x28
   d7fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7fa8 <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d7fa8:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d7faa:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d7fac:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d7fae:	6818      	ldr	r0, [r3, #0]
   d7fb0:	2800      	cmp	r0, #0
   d7fb2:	db01      	blt.n	d7fb8 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d7fb4:	f7fe f8cc 	bl	d6150 <sock_close>
   d7fb8:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   d7fba:	f04f 32ff 	mov.w	r2, #4294967295
   d7fbe:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d7fc0:	6960      	ldr	r0, [r4, #20]
   d7fc2:	2211      	movs	r2, #17
   d7fc4:	2100      	movs	r1, #0
   d7fc6:	308c      	adds	r0, #140	; 0x8c
   d7fc8:	f002 feac 	bl	dad24 <memset>
    d_->remoteIP.clear();
    flush_buffer();
   d7fcc:	4620      	mov	r0, r4
}
   d7fce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   d7fd2:	f7ff bf67 	b.w	d7ea4 <_ZN9TCPClient12flush_bufferEv>
	...

000d7fd8 <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d7fd8:	b530      	push	{r4, r5, lr}
   d7fda:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d7fdc:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d7fe0:	b08b      	sub	sp, #44	; 0x2c
   d7fe2:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d7fe4:	b11b      	cbz	r3, d7fee <_ZN9TCPClient9availableEv+0x16>
   d7fe6:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d7fea:	429a      	cmp	r2, r3
   d7fec:	d040      	beq.n	d8070 <_ZN9TCPClient9availableEv+0x98>
   d7fee:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   d7ff0:	6818      	ldr	r0, [r3, #0]
   d7ff2:	2800      	cmp	r0, #0
   d7ff4:	db3f      	blt.n	d8076 <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   d7ff6:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   d7ffa:	2d7f      	cmp	r5, #127	; 0x7f
   d7ffc:	d83b      	bhi.n	d8076 <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d7ffe:	1d19      	adds	r1, r3, #4
   d8000:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d8004:	2308      	movs	r3, #8
   d8006:	4429      	add	r1, r5
   d8008:	f7fe f8b2 	bl	d6170 <sock_recv>
            if (ret > 0) {
   d800c:	2800      	cmp	r0, #0
   d800e:	dd0c      	ble.n	d802a <_ZN9TCPClient9availableEv+0x52>
   d8010:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d8012:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d8016:	b90a      	cbnz	r2, d801c <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   d8018:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d801c:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   d801e:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d8022:	4418      	add	r0, r3
   d8024:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   d8028:	e025      	b.n	d8076 <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d802a:	f7fe fa15 	bl	d6458 <__errno>
   d802e:	6803      	ldr	r3, [r0, #0]
   d8030:	2b0b      	cmp	r3, #11
   d8032:	d020      	beq.n	d8076 <_ZN9TCPClient9availableEv+0x9e>
   d8034:	f7fe fa10 	bl	d6458 <__errno>
   d8038:	6803      	ldr	r3, [r0, #0]
   d803a:	2b0b      	cmp	r3, #11
   d803c:	d01b      	beq.n	d8076 <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   d803e:	2320      	movs	r3, #32
   d8040:	2500      	movs	r5, #0
   d8042:	9302      	str	r3, [sp, #8]
   d8044:	9503      	str	r5, [sp, #12]
   d8046:	f7fe fa07 	bl	d6458 <__errno>
   d804a:	6803      	ldr	r3, [r0, #0]
   d804c:	9301      	str	r3, [sp, #4]
   d804e:	4b0e      	ldr	r3, [pc, #56]	; (d8088 <_ZN9TCPClient9availableEv+0xb0>)
   d8050:	9300      	str	r3, [sp, #0]
   d8052:	aa02      	add	r2, sp, #8
   d8054:	462b      	mov	r3, r5
   d8056:	490d      	ldr	r1, [pc, #52]	; (d808c <_ZN9TCPClient9availableEv+0xb4>)
   d8058:	2032      	movs	r0, #50	; 0x32
   d805a:	f7fe f8e1 	bl	d6220 <log_message>
                    sock_close(d_->sock);
   d805e:	6963      	ldr	r3, [r4, #20]
   d8060:	6818      	ldr	r0, [r3, #0]
   d8062:	f7fe f875 	bl	d6150 <sock_close>
   d8066:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d8068:	f04f 32ff 	mov.w	r2, #4294967295
   d806c:	601a      	str	r2, [r3, #0]
   d806e:	e002      	b.n	d8076 <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   d8070:	f7ff ff18 	bl	d7ea4 <_ZN9TCPClient12flush_bufferEv>
   d8074:	e7bb      	b.n	d7fee <_ZN9TCPClient9availableEv+0x16>
   d8076:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   d8078:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d807c:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   d8080:	1a18      	subs	r0, r3, r0
}
   d8082:	b00b      	add	sp, #44	; 0x2c
   d8084:	bd30      	pop	{r4, r5, pc}
   d8086:	bf00      	nop
   d8088:	000dbf8b 	.word	0x000dbf8b
   d808c:	000dbf84 	.word	0x000dbf84

000d8090 <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d8090:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d8092:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d8094:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   d8096:	6001      	str	r1, [r0, #0]
   d8098:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   d809c:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   d80a0:	3088      	adds	r0, #136	; 0x88
   d80a2:	f7ff fadd 	bl	d7660 <_ZN9IPAddressC1Ev>
}
   d80a6:	4620      	mov	r0, r4
   d80a8:	bd10      	pop	{r4, pc}
	...

000d80ac <_ZN9TCPClientC1Ei>:
   d80ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d80b0:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d80b2:	2300      	movs	r3, #0
   d80b4:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   d80b6:	4a14      	ldr	r2, [pc, #80]	; (d8108 <_ZN9TCPClientC1Ei+0x5c>)
   d80b8:	6043      	str	r3, [r0, #4]
   d80ba:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d80bc:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d80be:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d80c0:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d80c2:	20a0      	movs	r0, #160	; 0xa0
   d80c4:	460e      	mov	r6, r1
   d80c6:	f7fb ffe8 	bl	d409a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d80ca:	4605      	mov	r5, r0
   d80cc:	b110      	cbz	r0, d80d4 <_ZN9TCPClientC1Ei+0x28>
   d80ce:	4631      	mov	r1, r6
   d80d0:	f7ff ffde 	bl	d8090 <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d80d4:	2014      	movs	r0, #20
   d80d6:	f7fb ffe0 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d80da:	4603      	mov	r3, r0
   d80dc:	b128      	cbz	r0, d80ea <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d80de:	2201      	movs	r2, #1
   d80e0:	6042      	str	r2, [r0, #4]
   d80e2:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d80e4:	4a09      	ldr	r2, [pc, #36]	; (d810c <_ZN9TCPClientC1Ei+0x60>)
   d80e6:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d80e8:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d80ea:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d80ec:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d80ee:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d80f0:	b128      	cbz	r0, d80fe <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d80f2:	6843      	ldr	r3, [r0, #4]
   d80f4:	3b01      	subs	r3, #1
   d80f6:	6043      	str	r3, [r0, #4]
   d80f8:	b90b      	cbnz	r3, d80fe <_ZN9TCPClientC1Ei+0x52>
   d80fa:	f7ff fddf 	bl	d7cbc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   d80fe:	4620      	mov	r0, r4
   d8100:	f7ff fed0 	bl	d7ea4 <_ZN9TCPClient12flush_bufferEv>
}
   d8104:	4620      	mov	r0, r4
   d8106:	bd70      	pop	{r4, r5, r6, pc}
   d8108:	000dbf40 	.word	0x000dbf40
   d810c:	000dbf24 	.word	0x000dbf24

000d8110 <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d8110:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d8112:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d8116:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d8118:	f7ff ffc8 	bl	d80ac <_ZN9TCPClientC1Ei>
}
   d811c:	4620      	mov	r0, r4
   d811e:	bd10      	pop	{r4, pc}

000d8120 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   d8120:	b510      	push	{r4, lr}
   d8122:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d8124:	6800      	ldr	r0, [r0, #0]
   d8126:	2800      	cmp	r0, #0
   d8128:	db01      	blt.n	d812e <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d812a:	f7fe f811 	bl	d6150 <sock_close>
    }
}
   d812e:	4620      	mov	r0, r4
   d8130:	bd10      	pop	{r4, pc}

000d8132 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d8132:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d8134:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   d8136:	4620      	mov	r0, r4
   d8138:	f7ff fff2 	bl	d8120 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   d813c:	b124      	cbz	r4, d8148 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d813e:	4620      	mov	r0, r4
   d8140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d8144:	f7fb bfab 	b.w	d409e <_ZdlPv>
   d8148:	bd10      	pop	{r4, pc}

000d814a <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d814a:	2200      	movs	r2, #0
   d814c:	4611      	mov	r1, r2
   d814e:	6840      	ldr	r0, [r0, #4]
   d8150:	f7fe b8ca 	b.w	d62e8 <network_ready>

000d8154 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8154:	2200      	movs	r2, #0
   d8156:	4611      	mov	r1, r2
   d8158:	6840      	ldr	r0, [r0, #4]
   d815a:	f7fe b8e5 	b.w	d6328 <network_listening>

000d815e <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d815e:	2200      	movs	r2, #0
   d8160:	4611      	mov	r1, r2
   d8162:	6840      	ldr	r0, [r0, #4]
   d8164:	f7fe b8f0 	b.w	d6348 <network_get_listen_timeout>

000d8168 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d8168:	2200      	movs	r2, #0
   d816a:	6840      	ldr	r0, [r0, #4]
   d816c:	f7fe b8e4 	b.w	d6338 <network_set_listen_timeout>

000d8170 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d8170:	2200      	movs	r2, #0
   d8172:	f081 0101 	eor.w	r1, r1, #1
   d8176:	6840      	ldr	r0, [r0, #4]
   d8178:	f7fe b8ce 	b.w	d6318 <network_listen>

000d817c <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d817c:	2300      	movs	r3, #0
   d817e:	461a      	mov	r2, r3
   d8180:	4619      	mov	r1, r3
   d8182:	6840      	ldr	r0, [r0, #4]
   d8184:	f7fe b8c0 	b.w	d6308 <network_off>

000d8188 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d8188:	2300      	movs	r3, #0
   d818a:	461a      	mov	r2, r3
   d818c:	4619      	mov	r1, r3
   d818e:	6840      	ldr	r0, [r0, #4]
   d8190:	f7fe b8b2 	b.w	d62f8 <network_on>

000d8194 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d8194:	2200      	movs	r2, #0
   d8196:	4611      	mov	r1, r2
   d8198:	6840      	ldr	r0, [r0, #4]
   d819a:	f7fe b895 	b.w	d62c8 <network_connecting>

000d819e <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d819e:	2200      	movs	r2, #0
   d81a0:	2102      	movs	r1, #2
   d81a2:	6840      	ldr	r0, [r0, #4]
   d81a4:	f7fe b898 	b.w	d62d8 <network_disconnect>

000d81a8 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d81a8:	2300      	movs	r3, #0
   d81aa:	461a      	mov	r2, r3
   d81ac:	6840      	ldr	r0, [r0, #4]
   d81ae:	f7fe b883 	b.w	d62b8 <network_connect>
	...

000d81b4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d81b4:	4b02      	ldr	r3, [pc, #8]	; (d81c0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d81b6:	2204      	movs	r2, #4
   d81b8:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d81ba:	4a02      	ldr	r2, [pc, #8]	; (d81c4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d81bc:	601a      	str	r2, [r3, #0]
   d81be:	4770      	bx	lr
   d81c0:	2003e6e8 	.word	0x2003e6e8
   d81c4:	000dbfa4 	.word	0x000dbfa4

000d81c8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d81c8:	2300      	movs	r3, #0
   d81ca:	461a      	mov	r2, r3
   d81cc:	6840      	ldr	r0, [r0, #4]
   d81ce:	f7fe b873 	b.w	d62b8 <network_connect>

000d81d2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d81d2:	2200      	movs	r2, #0
   d81d4:	2102      	movs	r1, #2
   d81d6:	6840      	ldr	r0, [r0, #4]
   d81d8:	f7fe b87e 	b.w	d62d8 <network_disconnect>

000d81dc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d81dc:	2200      	movs	r2, #0
   d81de:	4611      	mov	r1, r2
   d81e0:	6840      	ldr	r0, [r0, #4]
   d81e2:	f7fe b871 	b.w	d62c8 <network_connecting>

000d81e6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d81e6:	2200      	movs	r2, #0
   d81e8:	4611      	mov	r1, r2
   d81ea:	6840      	ldr	r0, [r0, #4]
   d81ec:	f7fe b87c 	b.w	d62e8 <network_ready>

000d81f0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d81f0:	2300      	movs	r3, #0
   d81f2:	461a      	mov	r2, r3
   d81f4:	4619      	mov	r1, r3
   d81f6:	6840      	ldr	r0, [r0, #4]
   d81f8:	f7fe b87e 	b.w	d62f8 <network_on>

000d81fc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d81fc:	2300      	movs	r3, #0
   d81fe:	461a      	mov	r2, r3
   d8200:	4619      	mov	r1, r3
   d8202:	6840      	ldr	r0, [r0, #4]
   d8204:	f7fe b880 	b.w	d6308 <network_off>

000d8208 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d8208:	2200      	movs	r2, #0
   d820a:	f081 0101 	eor.w	r1, r1, #1
   d820e:	6840      	ldr	r0, [r0, #4]
   d8210:	f7fe b882 	b.w	d6318 <network_listen>

000d8214 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d8214:	2200      	movs	r2, #0
   d8216:	6840      	ldr	r0, [r0, #4]
   d8218:	f7fe b88e 	b.w	d6338 <network_set_listen_timeout>

000d821c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d821c:	2200      	movs	r2, #0
   d821e:	4611      	mov	r1, r2
   d8220:	6840      	ldr	r0, [r0, #4]
   d8222:	f7fe b891 	b.w	d6348 <network_get_listen_timeout>

000d8226 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d8226:	2200      	movs	r2, #0
   d8228:	4611      	mov	r1, r2
   d822a:	6840      	ldr	r0, [r0, #4]
   d822c:	f7fe b87c 	b.w	d6328 <network_listening>

000d8230 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d8230:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d8234:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d8236:	b095      	sub	sp, #84	; 0x54
   d8238:	4616      	mov	r6, r2
   d823a:	460d      	mov	r5, r1
   d823c:	4607      	mov	r7, r0
    IPAddress addr;
   d823e:	f7ff fa0f 	bl	d7660 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d8242:	4621      	mov	r1, r4
   d8244:	2220      	movs	r2, #32
   d8246:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d8248:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d824a:	f002 fd6b 	bl	dad24 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d824e:	2340      	movs	r3, #64	; 0x40
   d8250:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d8252:	4621      	mov	r1, r4
   d8254:	466b      	mov	r3, sp
   d8256:	aa0c      	add	r2, sp, #48	; 0x30
   d8258:	4630      	mov	r0, r6
   d825a:	f7fd fde1 	bl	d5e20 <netdb_getaddrinfo>
    if (!r) {
   d825e:	4604      	mov	r4, r0
   d8260:	2800      	cmp	r0, #0
   d8262:	d144      	bne.n	d82ee <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8264:	4602      	mov	r2, r0
   d8266:	2101      	movs	r1, #1
   d8268:	6868      	ldr	r0, [r5, #4]
   d826a:	f7fe f83d 	bl	d62e8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d826e:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8270:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8272:	4622      	mov	r2, r4
   d8274:	6868      	ldr	r0, [r5, #4]
   d8276:	f7fe f837 	bl	d62e8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d827a:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d827c:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d827e:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8280:	2e00      	cmp	r6, #0
   d8282:	d034      	beq.n	d82ee <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d8284:	2900      	cmp	r1, #0
   d8286:	d132      	bne.n	d82ee <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d8288:	6873      	ldr	r3, [r6, #4]
   d828a:	2b02      	cmp	r3, #2
   d828c:	d002      	beq.n	d8294 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d828e:	2b0a      	cmp	r3, #10
   d8290:	d009      	beq.n	d82a6 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d8292:	e02a      	b.n	d82ea <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d8294:	f1b8 0f00 	cmp.w	r8, #0
   d8298:	d027      	beq.n	d82ea <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d829a:	6971      	ldr	r1, [r6, #20]
   d829c:	4638      	mov	r0, r7
   d829e:	3104      	adds	r1, #4
   d82a0:	f7ff fa21 	bl	d76e6 <_ZN9IPAddressaSEPKh>
   d82a4:	e020      	b.n	d82e8 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d82a6:	f1b9 0f00 	cmp.w	r9, #0
   d82aa:	d01e      	beq.n	d82ea <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d82ac:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d82ae:	2211      	movs	r2, #17
   d82b0:	a801      	add	r0, sp, #4
   d82b2:	f002 fd37 	bl	dad24 <memset>
                    a.v = 6;
   d82b6:	2306      	movs	r3, #6
   d82b8:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d82bc:	ad01      	add	r5, sp, #4
   d82be:	f104 0308 	add.w	r3, r4, #8
   d82c2:	3418      	adds	r4, #24
   d82c4:	6818      	ldr	r0, [r3, #0]
   d82c6:	6859      	ldr	r1, [r3, #4]
   d82c8:	462a      	mov	r2, r5
   d82ca:	c203      	stmia	r2!, {r0, r1}
   d82cc:	3308      	adds	r3, #8
   d82ce:	42a3      	cmp	r3, r4
   d82d0:	4615      	mov	r5, r2
   d82d2:	d1f7      	bne.n	d82c4 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d82d4:	a901      	add	r1, sp, #4
   d82d6:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d82d8:	ad07      	add	r5, sp, #28
   d82da:	f7ff f9cf 	bl	d767c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d82de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d82e0:	1d3c      	adds	r4, r7, #4
   d82e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d82e4:	682b      	ldr	r3, [r5, #0]
   d82e6:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d82e8:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d82ea:	69f6      	ldr	r6, [r6, #28]
   d82ec:	e7c8      	b.n	d8280 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d82ee:	9800      	ldr	r0, [sp, #0]
   d82f0:	f7fd fd8e 	bl	d5e10 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d82f4:	4638      	mov	r0, r7
   d82f6:	b015      	add	sp, #84	; 0x54
   d82f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d82fc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d82fc:	4b02      	ldr	r3, [pc, #8]	; (d8308 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d82fe:	4a03      	ldr	r2, [pc, #12]	; (d830c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d8300:	601a      	str	r2, [r3, #0]
   d8302:	2200      	movs	r2, #0
   d8304:	605a      	str	r2, [r3, #4]
   d8306:	4770      	bx	lr
   d8308:	2003e6f0 	.word	0x2003e6f0
   d830c:	000dbfd8 	.word	0x000dbfd8

000d8310 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d8310:	b510      	push	{r4, lr}
   d8312:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d8314:	f000 f874 	bl	d8400 <_ZN8particle7globals11instanceSpiEv>
   d8318:	f7fe f9ad 	bl	d6676 <_ZN8SPIClass9isEnabledEv>
   d831c:	b128      	cbz	r0, d832a <pinAvailable+0x1a>
   d831e:	f1a4 030b 	sub.w	r3, r4, #11
   d8322:	2b02      	cmp	r3, #2
   d8324:	d801      	bhi.n	d832a <pinAvailable+0x1a>
  {
    return 0; // 'pin' is used
   d8326:	2000      	movs	r0, #0
   d8328:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d832a:	f000 f8a3 	bl	d8474 <_Z19__fetch_global_Wirev>
   d832e:	f7ff fb83 	bl	d7a38 <_ZN7TwoWire9isEnabledEv>
   d8332:	b108      	cbz	r0, d8338 <pinAvailable+0x28>
   d8334:	2c01      	cmp	r4, #1
   d8336:	d9f6      	bls.n	d8326 <pinAvailable+0x16>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d8338:	f7ff fac4 	bl	d78c4 <_Z22__fetch_global_Serial1v>
   d833c:	f7ff fabe 	bl	d78bc <_ZN11USARTSerial9isEnabledEv>
   d8340:	b118      	cbz	r0, d834a <pinAvailable+0x3a>
   d8342:	f1a4 0309 	sub.w	r3, r4, #9
   d8346:	2b01      	cmp	r3, #1
   d8348:	d9ed      	bls.n	d8326 <pinAvailable+0x16>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d834a:	2c23      	cmp	r4, #35	; 0x23
   d834c:	bf8c      	ite	hi
   d834e:	2000      	movhi	r0, #0
   d8350:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d8352:	bd10      	pop	{r4, pc}

000d8354 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8354:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d8356:	b538      	push	{r3, r4, r5, lr}
   d8358:	4604      	mov	r4, r0
   d835a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d835c:	d80a      	bhi.n	d8374 <pinMode+0x20>
   d835e:	29ff      	cmp	r1, #255	; 0xff
   d8360:	d008      	beq.n	d8374 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d8362:	f7ff ffd5 	bl	d8310 <pinAvailable>
   d8366:	b128      	cbz	r0, d8374 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d8368:	4629      	mov	r1, r5
   d836a:	4620      	mov	r0, r4
}
   d836c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d8370:	f7fd bd6e 	b.w	d5e50 <HAL_Pin_Mode>
   d8374:	bd38      	pop	{r3, r4, r5, pc}

000d8376 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d8376:	b538      	push	{r3, r4, r5, lr}
   d8378:	4604      	mov	r4, r0
   d837a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d837c:	f7fd fd70 	bl	d5e60 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d8380:	28ff      	cmp	r0, #255	; 0xff
   d8382:	d010      	beq.n	d83a6 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d8384:	2806      	cmp	r0, #6
   d8386:	d804      	bhi.n	d8392 <digitalWrite+0x1c>
   d8388:	234d      	movs	r3, #77	; 0x4d
   d838a:	fa23 f000 	lsr.w	r0, r3, r0
   d838e:	07c3      	lsls	r3, r0, #31
   d8390:	d409      	bmi.n	d83a6 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d8392:	4620      	mov	r0, r4
   d8394:	f7ff ffbc 	bl	d8310 <pinAvailable>
   d8398:	b128      	cbz	r0, d83a6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d839a:	4629      	mov	r1, r5
   d839c:	4620      	mov	r0, r4
}
   d839e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d83a2:	f7fd bd65 	b.w	d5e70 <HAL_GPIO_Write>
   d83a6:	bd38      	pop	{r3, r4, r5, pc}

000d83a8 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d83a8:	b510      	push	{r4, lr}
   d83aa:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d83ac:	f7fd fd58 	bl	d5e60 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d83b0:	3804      	subs	r0, #4
   d83b2:	b2c0      	uxtb	r0, r0
   d83b4:	2801      	cmp	r0, #1
   d83b6:	d908      	bls.n	d83ca <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d83b8:	4620      	mov	r0, r4
   d83ba:	f7ff ffa9 	bl	d8310 <pinAvailable>
   d83be:	b120      	cbz	r0, d83ca <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d83c0:	4620      	mov	r0, r4
}
   d83c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d83c6:	f7fd bd5b 	b.w	d5e80 <HAL_GPIO_Read>
}
   d83ca:	2000      	movs	r0, #0
   d83cc:	bd10      	pop	{r4, pc}

000d83ce <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d83ce:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d83d0:	b510      	push	{r4, lr}
   d83d2:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d83d4:	bf9c      	itt	ls
   d83d6:	340e      	addls	r4, #14
   d83d8:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d83da:	4620      	mov	r0, r4
   d83dc:	f7ff ff98 	bl	d8310 <pinAvailable>
   d83e0:	b150      	cbz	r0, d83f8 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d83e2:	2103      	movs	r1, #3
   d83e4:	4620      	mov	r0, r4
   d83e6:	f7fd fd2b 	bl	d5e40 <HAL_Validate_Pin_Function>
   d83ea:	2803      	cmp	r0, #3
   d83ec:	d104      	bne.n	d83f8 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d83ee:	4620      	mov	r0, r4
}
   d83f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d83f4:	f7fd bd4c 	b.w	d5e90 <HAL_ADC_Read>
}
   d83f8:	2000      	movs	r0, #0
   d83fa:	bd10      	pop	{r4, pc}

000d83fc <pulseIn>:
 */
uint32_t pulseIn(pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return HAL_Pulse_In(pin, value);
   d83fc:	f7fd bd50 	b.w	d5ea0 <HAL_Pulse_In>

000d8400 <_ZN8particle7globals11instanceSpiEv>:
#ifndef SPARK_WIRING_NO_SPI

namespace particle {
namespace globals {

SPIClass& instanceSpi() {
   d8400:	b538      	push	{r3, r4, r5, lr}
    static SPIClass instance(HAL_SPI_INTERFACE1);
   d8402:	4d0b      	ldr	r5, [pc, #44]	; (d8430 <_ZN8particle7globals11instanceSpiEv+0x30>)
   d8404:	6829      	ldr	r1, [r5, #0]
   d8406:	f011 0401 	ands.w	r4, r1, #1
   d840a:	d10f      	bne.n	d842c <_ZN8particle7globals11instanceSpiEv+0x2c>
   d840c:	4628      	mov	r0, r5
   d840e:	f7fb fe55 	bl	d40bc <__cxa_guard_acquire>
   d8412:	b158      	cbz	r0, d842c <_ZN8particle7globals11instanceSpiEv+0x2c>
   d8414:	4621      	mov	r1, r4
   d8416:	4807      	ldr	r0, [pc, #28]	; (d8434 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d8418:	f7fe f872 	bl	d6500 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d841c:	4628      	mov	r0, r5
   d841e:	f7fb fe52 	bl	d40c6 <__cxa_guard_release>
   d8422:	4a05      	ldr	r2, [pc, #20]	; (d8438 <_ZN8particle7globals11instanceSpiEv+0x38>)
   d8424:	4905      	ldr	r1, [pc, #20]	; (d843c <_ZN8particle7globals11instanceSpiEv+0x3c>)
   d8426:	4803      	ldr	r0, [pc, #12]	; (d8434 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d8428:	f000 f84a 	bl	d84c0 <__aeabi_atexit>
    return instance;
}
   d842c:	4801      	ldr	r0, [pc, #4]	; (d8434 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d842e:	bd38      	pop	{r3, r4, r5, pc}
   d8430:	2003e704 	.word	0x2003e704
   d8434:	2003e6f8 	.word	0x2003e6f8
   d8438:	2003e170 	.word	0x2003e170
   d843c:	000d64e5 	.word	0x000d64e5

000d8440 <_Z17acquireWireBufferv>:
   d8440:	b570      	push	{r4, r5, r6, lr}
   d8442:	4604      	mov	r4, r0
   d8444:	2514      	movs	r5, #20
   d8446:	462a      	mov	r2, r5
   d8448:	4e09      	ldr	r6, [pc, #36]	; (d8470 <_Z17acquireWireBufferv+0x30>)
   d844a:	2100      	movs	r1, #0
   d844c:	f002 fc6a 	bl	dad24 <memset>
   d8450:	8025      	strh	r5, [r4, #0]
   d8452:	2520      	movs	r5, #32
   d8454:	4631      	mov	r1, r6
   d8456:	60a5      	str	r5, [r4, #8]
   d8458:	6125      	str	r5, [r4, #16]
   d845a:	4628      	mov	r0, r5
   d845c:	f000 f840 	bl	d84e0 <_ZnajRKSt9nothrow_t>
   d8460:	4631      	mov	r1, r6
   d8462:	6060      	str	r0, [r4, #4]
   d8464:	4628      	mov	r0, r5
   d8466:	f000 f83b 	bl	d84e0 <_ZnajRKSt9nothrow_t>
   d846a:	60e0      	str	r0, [r4, #12]
   d846c:	4620      	mov	r0, r4
   d846e:	bd70      	pop	{r4, r5, r6, pc}
   d8470:	000dc004 	.word	0x000dc004

000d8474 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d8474:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8476:	4d0e      	ldr	r5, [pc, #56]	; (d84b0 <_Z19__fetch_global_Wirev+0x3c>)
   d8478:	6829      	ldr	r1, [r5, #0]
   d847a:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d847e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8480:	d113      	bne.n	d84aa <_Z19__fetch_global_Wirev+0x36>
   d8482:	4628      	mov	r0, r5
   d8484:	f7fb fe1a 	bl	d40bc <__cxa_guard_acquire>
   d8488:	b178      	cbz	r0, d84aa <_Z19__fetch_global_Wirev+0x36>
   d848a:	a801      	add	r0, sp, #4
   d848c:	f7ff ffd8 	bl	d8440 <_Z17acquireWireBufferv>
   d8490:	aa01      	add	r2, sp, #4
   d8492:	4621      	mov	r1, r4
   d8494:	4807      	ldr	r0, [pc, #28]	; (d84b4 <_Z19__fetch_global_Wirev+0x40>)
   d8496:	f7ff fa7b 	bl	d7990 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d849a:	4628      	mov	r0, r5
   d849c:	f7fb fe13 	bl	d40c6 <__cxa_guard_release>
   d84a0:	4a05      	ldr	r2, [pc, #20]	; (d84b8 <_Z19__fetch_global_Wirev+0x44>)
   d84a2:	4906      	ldr	r1, [pc, #24]	; (d84bc <_Z19__fetch_global_Wirev+0x48>)
   d84a4:	4803      	ldr	r0, [pc, #12]	; (d84b4 <_Z19__fetch_global_Wirev+0x40>)
   d84a6:	f000 f80b 	bl	d84c0 <__aeabi_atexit>
	return wire;
}
   d84aa:	4802      	ldr	r0, [pc, #8]	; (d84b4 <_Z19__fetch_global_Wirev+0x40>)
   d84ac:	b007      	add	sp, #28
   d84ae:	bd30      	pop	{r4, r5, pc}
   d84b0:	2003e70c 	.word	0x2003e70c
   d84b4:	2003e710 	.word	0x2003e710
   d84b8:	2003e170 	.word	0x2003e170
   d84bc:	000d7939 	.word	0x000d7939

000d84c0 <__aeabi_atexit>:
   d84c0:	460b      	mov	r3, r1
   d84c2:	4601      	mov	r1, r0
   d84c4:	4618      	mov	r0, r3
   d84c6:	f002 baed 	b.w	daaa4 <__cxa_atexit>
	...

000d84cc <_ZSt15get_new_handlerv>:
   d84cc:	4b02      	ldr	r3, [pc, #8]	; (d84d8 <_ZSt15get_new_handlerv+0xc>)
   d84ce:	6818      	ldr	r0, [r3, #0]
   d84d0:	f3bf 8f5f 	dmb	sy
   d84d4:	4770      	bx	lr
   d84d6:	bf00      	nop
   d84d8:	2003e724 	.word	0x2003e724

000d84dc <_ZdlPvj>:
   d84dc:	f7fb bddf 	b.w	d409e <_ZdlPv>

000d84e0 <_ZnajRKSt9nothrow_t>:
   d84e0:	f000 b800 	b.w	d84e4 <_ZnwjRKSt9nothrow_t>

000d84e4 <_ZnwjRKSt9nothrow_t>:
   d84e4:	b510      	push	{r4, lr}
   d84e6:	2800      	cmp	r0, #0
   d84e8:	bf14      	ite	ne
   d84ea:	4604      	movne	r4, r0
   d84ec:	2401      	moveq	r4, #1
   d84ee:	4620      	mov	r0, r4
   d84f0:	f7fd ff6a 	bl	d63c8 <malloc>
   d84f4:	b920      	cbnz	r0, d8500 <_ZnwjRKSt9nothrow_t+0x1c>
   d84f6:	f7ff ffe9 	bl	d84cc <_ZSt15get_new_handlerv>
   d84fa:	b108      	cbz	r0, d8500 <_ZnwjRKSt9nothrow_t+0x1c>
   d84fc:	4780      	blx	r0
   d84fe:	e7f6      	b.n	d84ee <_ZnwjRKSt9nothrow_t+0xa>
   d8500:	bd10      	pop	{r4, pc}

000d8502 <_ZSt25__throw_bad_function_callv>:
   d8502:	b508      	push	{r3, lr}
   d8504:	f7fd ff98 	bl	d6438 <abort>

000d8508 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d8508:	4b18      	ldr	r3, [pc, #96]	; (d856c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d850a:	681a      	ldr	r2, [r3, #0]
   d850c:	07d1      	lsls	r1, r2, #31
   d850e:	bf5c      	itt	pl
   d8510:	2201      	movpl	r2, #1
   d8512:	601a      	strpl	r2, [r3, #0]
   d8514:	4b16      	ldr	r3, [pc, #88]	; (d8570 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d8516:	681a      	ldr	r2, [r3, #0]
   d8518:	07d2      	lsls	r2, r2, #31
   d851a:	bf5c      	itt	pl
   d851c:	2201      	movpl	r2, #1
   d851e:	601a      	strpl	r2, [r3, #0]
   d8520:	4b14      	ldr	r3, [pc, #80]	; (d8574 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d8522:	681a      	ldr	r2, [r3, #0]
   d8524:	07d0      	lsls	r0, r2, #31
   d8526:	bf5c      	itt	pl
   d8528:	2201      	movpl	r2, #1
   d852a:	601a      	strpl	r2, [r3, #0]
   d852c:	4b12      	ldr	r3, [pc, #72]	; (d8578 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d852e:	681a      	ldr	r2, [r3, #0]
   d8530:	07d1      	lsls	r1, r2, #31
   d8532:	bf5c      	itt	pl
   d8534:	2201      	movpl	r2, #1
   d8536:	601a      	strpl	r2, [r3, #0]
   d8538:	4b10      	ldr	r3, [pc, #64]	; (d857c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d853a:	681a      	ldr	r2, [r3, #0]
   d853c:	07d2      	lsls	r2, r2, #31
   d853e:	bf5c      	itt	pl
   d8540:	2201      	movpl	r2, #1
   d8542:	601a      	strpl	r2, [r3, #0]
   d8544:	4b0e      	ldr	r3, [pc, #56]	; (d8580 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d8546:	681a      	ldr	r2, [r3, #0]
   d8548:	07d0      	lsls	r0, r2, #31
   d854a:	bf5c      	itt	pl
   d854c:	2201      	movpl	r2, #1
   d854e:	601a      	strpl	r2, [r3, #0]
   d8550:	4b0c      	ldr	r3, [pc, #48]	; (d8584 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d8552:	681a      	ldr	r2, [r3, #0]
   d8554:	07d1      	lsls	r1, r2, #31
   d8556:	bf5c      	itt	pl
   d8558:	2201      	movpl	r2, #1
   d855a:	601a      	strpl	r2, [r3, #0]
   d855c:	4b0a      	ldr	r3, [pc, #40]	; (d8588 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d855e:	681a      	ldr	r2, [r3, #0]
   d8560:	07d2      	lsls	r2, r2, #31
   d8562:	bf5c      	itt	pl
   d8564:	2201      	movpl	r2, #1
   d8566:	601a      	strpl	r2, [r3, #0]
   d8568:	4770      	bx	lr
   d856a:	bf00      	nop
   d856c:	2003e744 	.word	0x2003e744
   d8570:	2003e740 	.word	0x2003e740
   d8574:	2003e73c 	.word	0x2003e73c
   d8578:	2003e738 	.word	0x2003e738
   d857c:	2003e734 	.word	0x2003e734
   d8580:	2003e730 	.word	0x2003e730
   d8584:	2003e72c 	.word	0x2003e72c
   d8588:	2003e728 	.word	0x2003e728

000d858c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d858c:	4b24      	ldr	r3, [pc, #144]	; (d8620 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d858e:	681a      	ldr	r2, [r3, #0]
   d8590:	07d0      	lsls	r0, r2, #31
   d8592:	bf5c      	itt	pl
   d8594:	2201      	movpl	r2, #1
   d8596:	601a      	strpl	r2, [r3, #0]
   d8598:	4b22      	ldr	r3, [pc, #136]	; (d8624 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d859a:	681a      	ldr	r2, [r3, #0]
   d859c:	07d1      	lsls	r1, r2, #31
   d859e:	bf5c      	itt	pl
   d85a0:	2201      	movpl	r2, #1
   d85a2:	601a      	strpl	r2, [r3, #0]
   d85a4:	4b20      	ldr	r3, [pc, #128]	; (d8628 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d85a6:	681a      	ldr	r2, [r3, #0]
   d85a8:	07d2      	lsls	r2, r2, #31
   d85aa:	bf5c      	itt	pl
   d85ac:	2201      	movpl	r2, #1
   d85ae:	601a      	strpl	r2, [r3, #0]
   d85b0:	4b1e      	ldr	r3, [pc, #120]	; (d862c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d85b2:	681a      	ldr	r2, [r3, #0]
   d85b4:	07d0      	lsls	r0, r2, #31
   d85b6:	bf5c      	itt	pl
   d85b8:	2201      	movpl	r2, #1
   d85ba:	601a      	strpl	r2, [r3, #0]
   d85bc:	4b1c      	ldr	r3, [pc, #112]	; (d8630 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d85be:	681a      	ldr	r2, [r3, #0]
   d85c0:	07d1      	lsls	r1, r2, #31
   d85c2:	bf5c      	itt	pl
   d85c4:	2201      	movpl	r2, #1
   d85c6:	601a      	strpl	r2, [r3, #0]
   d85c8:	4b1a      	ldr	r3, [pc, #104]	; (d8634 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d85ca:	681a      	ldr	r2, [r3, #0]
   d85cc:	07d2      	lsls	r2, r2, #31
   d85ce:	bf5c      	itt	pl
   d85d0:	2201      	movpl	r2, #1
   d85d2:	601a      	strpl	r2, [r3, #0]
   d85d4:	4b18      	ldr	r3, [pc, #96]	; (d8638 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d85d6:	681a      	ldr	r2, [r3, #0]
   d85d8:	07d0      	lsls	r0, r2, #31
   d85da:	bf5c      	itt	pl
   d85dc:	2201      	movpl	r2, #1
   d85de:	601a      	strpl	r2, [r3, #0]
   d85e0:	4b16      	ldr	r3, [pc, #88]	; (d863c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d85e2:	681a      	ldr	r2, [r3, #0]
   d85e4:	07d1      	lsls	r1, r2, #31
   d85e6:	bf5c      	itt	pl
   d85e8:	2201      	movpl	r2, #1
   d85ea:	601a      	strpl	r2, [r3, #0]
   d85ec:	4b14      	ldr	r3, [pc, #80]	; (d8640 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d85ee:	681a      	ldr	r2, [r3, #0]
   d85f0:	07d2      	lsls	r2, r2, #31
   d85f2:	bf5c      	itt	pl
   d85f4:	2201      	movpl	r2, #1
   d85f6:	601a      	strpl	r2, [r3, #0]
   d85f8:	4b12      	ldr	r3, [pc, #72]	; (d8644 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d85fa:	681a      	ldr	r2, [r3, #0]
   d85fc:	07d0      	lsls	r0, r2, #31
   d85fe:	bf5c      	itt	pl
   d8600:	2201      	movpl	r2, #1
   d8602:	601a      	strpl	r2, [r3, #0]
   d8604:	4b10      	ldr	r3, [pc, #64]	; (d8648 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d8606:	681a      	ldr	r2, [r3, #0]
   d8608:	07d1      	lsls	r1, r2, #31
   d860a:	bf5c      	itt	pl
   d860c:	2201      	movpl	r2, #1
   d860e:	601a      	strpl	r2, [r3, #0]
   d8610:	4b0e      	ldr	r3, [pc, #56]	; (d864c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d8612:	681a      	ldr	r2, [r3, #0]
   d8614:	07d2      	lsls	r2, r2, #31
   d8616:	bf5c      	itt	pl
   d8618:	2201      	movpl	r2, #1
   d861a:	601a      	strpl	r2, [r3, #0]
   d861c:	4770      	bx	lr
   d861e:	bf00      	nop
   d8620:	2003e774 	.word	0x2003e774
   d8624:	2003e770 	.word	0x2003e770
   d8628:	2003e76c 	.word	0x2003e76c
   d862c:	2003e768 	.word	0x2003e768
   d8630:	2003e764 	.word	0x2003e764
   d8634:	2003e760 	.word	0x2003e760
   d8638:	2003e75c 	.word	0x2003e75c
   d863c:	2003e758 	.word	0x2003e758
   d8640:	2003e754 	.word	0x2003e754
   d8644:	2003e750 	.word	0x2003e750
   d8648:	2003e74c 	.word	0x2003e74c
   d864c:	2003e748 	.word	0x2003e748

000d8650 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d8650:	4b24      	ldr	r3, [pc, #144]	; (d86e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d8652:	681a      	ldr	r2, [r3, #0]
   d8654:	07d0      	lsls	r0, r2, #31
   d8656:	bf5c      	itt	pl
   d8658:	2201      	movpl	r2, #1
   d865a:	601a      	strpl	r2, [r3, #0]
   d865c:	4b22      	ldr	r3, [pc, #136]	; (d86e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d865e:	681a      	ldr	r2, [r3, #0]
   d8660:	07d1      	lsls	r1, r2, #31
   d8662:	bf5c      	itt	pl
   d8664:	2201      	movpl	r2, #1
   d8666:	601a      	strpl	r2, [r3, #0]
   d8668:	4b20      	ldr	r3, [pc, #128]	; (d86ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d866a:	681a      	ldr	r2, [r3, #0]
   d866c:	07d2      	lsls	r2, r2, #31
   d866e:	bf5c      	itt	pl
   d8670:	2201      	movpl	r2, #1
   d8672:	601a      	strpl	r2, [r3, #0]
   d8674:	4b1e      	ldr	r3, [pc, #120]	; (d86f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d8676:	681a      	ldr	r2, [r3, #0]
   d8678:	07d0      	lsls	r0, r2, #31
   d867a:	bf5c      	itt	pl
   d867c:	2201      	movpl	r2, #1
   d867e:	601a      	strpl	r2, [r3, #0]
   d8680:	4b1c      	ldr	r3, [pc, #112]	; (d86f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d8682:	681a      	ldr	r2, [r3, #0]
   d8684:	07d1      	lsls	r1, r2, #31
   d8686:	bf5c      	itt	pl
   d8688:	2201      	movpl	r2, #1
   d868a:	601a      	strpl	r2, [r3, #0]
   d868c:	4b1a      	ldr	r3, [pc, #104]	; (d86f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d868e:	681a      	ldr	r2, [r3, #0]
   d8690:	07d2      	lsls	r2, r2, #31
   d8692:	bf5c      	itt	pl
   d8694:	2201      	movpl	r2, #1
   d8696:	601a      	strpl	r2, [r3, #0]
   d8698:	4b18      	ldr	r3, [pc, #96]	; (d86fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d869a:	681a      	ldr	r2, [r3, #0]
   d869c:	07d0      	lsls	r0, r2, #31
   d869e:	bf5c      	itt	pl
   d86a0:	2201      	movpl	r2, #1
   d86a2:	601a      	strpl	r2, [r3, #0]
   d86a4:	4b16      	ldr	r3, [pc, #88]	; (d8700 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d86a6:	681a      	ldr	r2, [r3, #0]
   d86a8:	07d1      	lsls	r1, r2, #31
   d86aa:	bf5c      	itt	pl
   d86ac:	2201      	movpl	r2, #1
   d86ae:	601a      	strpl	r2, [r3, #0]
   d86b0:	4b14      	ldr	r3, [pc, #80]	; (d8704 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d86b2:	681a      	ldr	r2, [r3, #0]
   d86b4:	07d2      	lsls	r2, r2, #31
   d86b6:	bf5c      	itt	pl
   d86b8:	2201      	movpl	r2, #1
   d86ba:	601a      	strpl	r2, [r3, #0]
   d86bc:	4b12      	ldr	r3, [pc, #72]	; (d8708 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d86be:	681a      	ldr	r2, [r3, #0]
   d86c0:	07d0      	lsls	r0, r2, #31
   d86c2:	bf5c      	itt	pl
   d86c4:	2201      	movpl	r2, #1
   d86c6:	601a      	strpl	r2, [r3, #0]
   d86c8:	4b10      	ldr	r3, [pc, #64]	; (d870c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d86ca:	681a      	ldr	r2, [r3, #0]
   d86cc:	07d1      	lsls	r1, r2, #31
   d86ce:	bf5c      	itt	pl
   d86d0:	2201      	movpl	r2, #1
   d86d2:	601a      	strpl	r2, [r3, #0]
   d86d4:	4b0e      	ldr	r3, [pc, #56]	; (d8710 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d86d6:	681a      	ldr	r2, [r3, #0]
   d86d8:	07d2      	lsls	r2, r2, #31
   d86da:	bf5c      	itt	pl
   d86dc:	2201      	movpl	r2, #1
   d86de:	601a      	strpl	r2, [r3, #0]
   d86e0:	4770      	bx	lr
   d86e2:	bf00      	nop
   d86e4:	2003e7a4 	.word	0x2003e7a4
   d86e8:	2003e7a0 	.word	0x2003e7a0
   d86ec:	2003e79c 	.word	0x2003e79c
   d86f0:	2003e798 	.word	0x2003e798
   d86f4:	2003e794 	.word	0x2003e794
   d86f8:	2003e790 	.word	0x2003e790
   d86fc:	2003e78c 	.word	0x2003e78c
   d8700:	2003e788 	.word	0x2003e788
   d8704:	2003e784 	.word	0x2003e784
   d8708:	2003e780 	.word	0x2003e780
   d870c:	2003e77c 	.word	0x2003e77c
   d8710:	2003e778 	.word	0x2003e778

000d8714 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d8714:	4b18      	ldr	r3, [pc, #96]	; (d8778 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d8716:	681a      	ldr	r2, [r3, #0]
   d8718:	07d1      	lsls	r1, r2, #31
   d871a:	bf5c      	itt	pl
   d871c:	2201      	movpl	r2, #1
   d871e:	601a      	strpl	r2, [r3, #0]
   d8720:	4b16      	ldr	r3, [pc, #88]	; (d877c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d8722:	681a      	ldr	r2, [r3, #0]
   d8724:	07d2      	lsls	r2, r2, #31
   d8726:	bf5c      	itt	pl
   d8728:	2201      	movpl	r2, #1
   d872a:	601a      	strpl	r2, [r3, #0]
   d872c:	4b14      	ldr	r3, [pc, #80]	; (d8780 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d872e:	681a      	ldr	r2, [r3, #0]
   d8730:	07d0      	lsls	r0, r2, #31
   d8732:	bf5c      	itt	pl
   d8734:	2201      	movpl	r2, #1
   d8736:	601a      	strpl	r2, [r3, #0]
   d8738:	4b12      	ldr	r3, [pc, #72]	; (d8784 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d873a:	681a      	ldr	r2, [r3, #0]
   d873c:	07d1      	lsls	r1, r2, #31
   d873e:	bf5c      	itt	pl
   d8740:	2201      	movpl	r2, #1
   d8742:	601a      	strpl	r2, [r3, #0]
   d8744:	4b10      	ldr	r3, [pc, #64]	; (d8788 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d8746:	681a      	ldr	r2, [r3, #0]
   d8748:	07d2      	lsls	r2, r2, #31
   d874a:	bf5c      	itt	pl
   d874c:	2201      	movpl	r2, #1
   d874e:	601a      	strpl	r2, [r3, #0]
   d8750:	4b0e      	ldr	r3, [pc, #56]	; (d878c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d8752:	681a      	ldr	r2, [r3, #0]
   d8754:	07d0      	lsls	r0, r2, #31
   d8756:	bf5c      	itt	pl
   d8758:	2201      	movpl	r2, #1
   d875a:	601a      	strpl	r2, [r3, #0]
   d875c:	4b0c      	ldr	r3, [pc, #48]	; (d8790 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d875e:	681a      	ldr	r2, [r3, #0]
   d8760:	07d1      	lsls	r1, r2, #31
   d8762:	bf5c      	itt	pl
   d8764:	2201      	movpl	r2, #1
   d8766:	601a      	strpl	r2, [r3, #0]
   d8768:	4b0a      	ldr	r3, [pc, #40]	; (d8794 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d876a:	681a      	ldr	r2, [r3, #0]
   d876c:	07d2      	lsls	r2, r2, #31
   d876e:	bf5c      	itt	pl
   d8770:	2201      	movpl	r2, #1
   d8772:	601a      	strpl	r2, [r3, #0]
   d8774:	4770      	bx	lr
   d8776:	bf00      	nop
   d8778:	2003e7c4 	.word	0x2003e7c4
   d877c:	2003e7c0 	.word	0x2003e7c0
   d8780:	2003e7bc 	.word	0x2003e7bc
   d8784:	2003e7b8 	.word	0x2003e7b8
   d8788:	2003e7b4 	.word	0x2003e7b4
   d878c:	2003e7b0 	.word	0x2003e7b0
   d8790:	2003e7ac 	.word	0x2003e7ac
   d8794:	2003e7a8 	.word	0x2003e7a8

000d8798 <pow>:
   d8798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d879c:	ed2d 8b02 	vpush	{d8}
   d87a0:	f8df a324 	ldr.w	sl, [pc, #804]	; d8ac8 <pow+0x330>
   d87a4:	b08b      	sub	sp, #44	; 0x2c
   d87a6:	ec57 6b10 	vmov	r6, r7, d0
   d87aa:	ec55 4b11 	vmov	r4, r5, d1
   d87ae:	f000 f98f 	bl	d8ad0 <__ieee754_pow>
   d87b2:	f99a 8000 	ldrsb.w	r8, [sl]
   d87b6:	eeb0 8a40 	vmov.f32	s16, s0
   d87ba:	eef0 8a60 	vmov.f32	s17, s1
   d87be:	f1b8 3fff 	cmp.w	r8, #4294967295
   d87c2:	d048      	beq.n	d8856 <pow+0xbe>
   d87c4:	4622      	mov	r2, r4
   d87c6:	462b      	mov	r3, r5
   d87c8:	4620      	mov	r0, r4
   d87ca:	4629      	mov	r1, r5
   d87cc:	f001 fd6e 	bl	da2ac <__aeabi_dcmpun>
   d87d0:	4683      	mov	fp, r0
   d87d2:	2800      	cmp	r0, #0
   d87d4:	d13f      	bne.n	d8856 <pow+0xbe>
   d87d6:	4632      	mov	r2, r6
   d87d8:	463b      	mov	r3, r7
   d87da:	4630      	mov	r0, r6
   d87dc:	4639      	mov	r1, r7
   d87de:	f001 fd65 	bl	da2ac <__aeabi_dcmpun>
   d87e2:	4681      	mov	r9, r0
   d87e4:	2800      	cmp	r0, #0
   d87e6:	f040 8090 	bne.w	d890a <pow+0x172>
   d87ea:	4630      	mov	r0, r6
   d87ec:	4639      	mov	r1, r7
   d87ee:	2200      	movs	r2, #0
   d87f0:	2300      	movs	r3, #0
   d87f2:	f001 fd29 	bl	da248 <__aeabi_dcmpeq>
   d87f6:	2800      	cmp	r0, #0
   d87f8:	d036      	beq.n	d8868 <pow+0xd0>
   d87fa:	2200      	movs	r2, #0
   d87fc:	2300      	movs	r3, #0
   d87fe:	4620      	mov	r0, r4
   d8800:	4629      	mov	r1, r5
   d8802:	f001 fd21 	bl	da248 <__aeabi_dcmpeq>
   d8806:	4683      	mov	fp, r0
   d8808:	b1b8      	cbz	r0, d883a <pow+0xa2>
   d880a:	ed9f 7ba5 	vldr	d7, [pc, #660]	; d8aa0 <pow+0x308>
   d880e:	2201      	movs	r2, #1
   d8810:	4ba9      	ldr	r3, [pc, #676]	; (d8ab8 <pow+0x320>)
   d8812:	f8cd 9020 	str.w	r9, [sp, #32]
   d8816:	9200      	str	r2, [sp, #0]
   d8818:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d881c:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d8820:	ed8d 7b06 	vstr	d7, [sp, #24]
   d8824:	9301      	str	r3, [sp, #4]
   d8826:	f1b8 0f00 	cmp.w	r8, #0
   d882a:	d05b      	beq.n	d88e4 <pow+0x14c>
   d882c:	ed9f 0b9e 	vldr	d0, [pc, #632]	; d8aa8 <pow+0x310>
   d8830:	b00b      	add	sp, #44	; 0x2c
   d8832:	ecbd 8b02 	vpop	{d8}
   d8836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d883a:	ec45 4b10 	vmov	d0, r4, r5
   d883e:	f000 ffa7 	bl	d9790 <finite>
   d8842:	b140      	cbz	r0, d8856 <pow+0xbe>
   d8844:	2200      	movs	r2, #0
   d8846:	2300      	movs	r3, #0
   d8848:	4620      	mov	r0, r4
   d884a:	4629      	mov	r1, r5
   d884c:	f001 fd06 	bl	da25c <__aeabi_dcmplt>
   d8850:	2800      	cmp	r0, #0
   d8852:	f040 80c5 	bne.w	d89e0 <pow+0x248>
   d8856:	eeb0 0a48 	vmov.f32	s0, s16
   d885a:	eef0 0a68 	vmov.f32	s1, s17
   d885e:	b00b      	add	sp, #44	; 0x2c
   d8860:	ecbd 8b02 	vpop	{d8}
   d8864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8868:	eeb0 0a48 	vmov.f32	s0, s16
   d886c:	eef0 0a68 	vmov.f32	s1, s17
   d8870:	f000 ff8e 	bl	d9790 <finite>
   d8874:	4680      	mov	r8, r0
   d8876:	2800      	cmp	r0, #0
   d8878:	d061      	beq.n	d893e <pow+0x1a6>
   d887a:	f04f 0800 	mov.w	r8, #0
   d887e:	f04f 0900 	mov.w	r9, #0
   d8882:	ec51 0b18 	vmov	r0, r1, d8
   d8886:	4642      	mov	r2, r8
   d8888:	464b      	mov	r3, r9
   d888a:	f001 fcdd 	bl	da248 <__aeabi_dcmpeq>
   d888e:	2800      	cmp	r0, #0
   d8890:	d0e1      	beq.n	d8856 <pow+0xbe>
   d8892:	ec47 6b10 	vmov	d0, r6, r7
   d8896:	f000 ff7b 	bl	d9790 <finite>
   d889a:	2800      	cmp	r0, #0
   d889c:	d0db      	beq.n	d8856 <pow+0xbe>
   d889e:	ec45 4b10 	vmov	d0, r4, r5
   d88a2:	f000 ff75 	bl	d9790 <finite>
   d88a6:	2800      	cmp	r0, #0
   d88a8:	d0d5      	beq.n	d8856 <pow+0xbe>
   d88aa:	f99a 3000 	ldrsb.w	r3, [sl]
   d88ae:	4a82      	ldr	r2, [pc, #520]	; (d8ab8 <pow+0x320>)
   d88b0:	9201      	str	r2, [sp, #4]
   d88b2:	2104      	movs	r1, #4
   d88b4:	2200      	movs	r2, #0
   d88b6:	2b02      	cmp	r3, #2
   d88b8:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d88bc:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d88c0:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d88c4:	9100      	str	r1, [sp, #0]
   d88c6:	9208      	str	r2, [sp, #32]
   d88c8:	d003      	beq.n	d88d2 <pow+0x13a>
   d88ca:	4668      	mov	r0, sp
   d88cc:	f000 ff68 	bl	d97a0 <matherr>
   d88d0:	b970      	cbnz	r0, d88f0 <pow+0x158>
   d88d2:	f7fd fdc1 	bl	d6458 <__errno>
   d88d6:	2322      	movs	r3, #34	; 0x22
   d88d8:	6003      	str	r3, [r0, #0]
   d88da:	e009      	b.n	d88f0 <pow+0x158>
   d88dc:	ed9f 7b70 	vldr	d7, [pc, #448]	; d8aa0 <pow+0x308>
   d88e0:	ed8d 7b06 	vstr	d7, [sp, #24]
   d88e4:	4668      	mov	r0, sp
   d88e6:	f000 ff5b 	bl	d97a0 <matherr>
   d88ea:	2800      	cmp	r0, #0
   d88ec:	f000 808e 	beq.w	d8a0c <pow+0x274>
   d88f0:	9b08      	ldr	r3, [sp, #32]
   d88f2:	b11b      	cbz	r3, d88fc <pow+0x164>
   d88f4:	f7fd fdb0 	bl	d6458 <__errno>
   d88f8:	9b08      	ldr	r3, [sp, #32]
   d88fa:	6003      	str	r3, [r0, #0]
   d88fc:	ed9d 0b06 	vldr	d0, [sp, #24]
   d8900:	b00b      	add	sp, #44	; 0x2c
   d8902:	ecbd 8b02 	vpop	{d8}
   d8906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d890a:	2200      	movs	r2, #0
   d890c:	2300      	movs	r3, #0
   d890e:	4620      	mov	r0, r4
   d8910:	4629      	mov	r1, r5
   d8912:	f001 fc99 	bl	da248 <__aeabi_dcmpeq>
   d8916:	2800      	cmp	r0, #0
   d8918:	d09d      	beq.n	d8856 <pow+0xbe>
   d891a:	ed9f 0b63 	vldr	d0, [pc, #396]	; d8aa8 <pow+0x310>
   d891e:	4b66      	ldr	r3, [pc, #408]	; (d8ab8 <pow+0x320>)
   d8920:	f8cd b020 	str.w	fp, [sp, #32]
   d8924:	2201      	movs	r2, #1
   d8926:	f1b8 0f02 	cmp.w	r8, #2
   d892a:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d892e:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d8932:	ed8d 0b06 	vstr	d0, [sp, #24]
   d8936:	e88d 000c 	stmia.w	sp, {r2, r3}
   d893a:	d1d3      	bne.n	d88e4 <pow+0x14c>
   d893c:	e78f      	b.n	d885e <pow+0xc6>
   d893e:	ec47 6b10 	vmov	d0, r6, r7
   d8942:	f000 ff25 	bl	d9790 <finite>
   d8946:	2800      	cmp	r0, #0
   d8948:	d097      	beq.n	d887a <pow+0xe2>
   d894a:	ec45 4b10 	vmov	d0, r4, r5
   d894e:	f000 ff1f 	bl	d9790 <finite>
   d8952:	2800      	cmp	r0, #0
   d8954:	d091      	beq.n	d887a <pow+0xe2>
   d8956:	ec53 2b18 	vmov	r2, r3, d8
   d895a:	ee18 0a10 	vmov	r0, s16
   d895e:	4619      	mov	r1, r3
   d8960:	f001 fca4 	bl	da2ac <__aeabi_dcmpun>
   d8964:	2800      	cmp	r0, #0
   d8966:	d17c      	bne.n	d8a62 <pow+0x2ca>
   d8968:	2303      	movs	r3, #3
   d896a:	f99a 8000 	ldrsb.w	r8, [sl]
   d896e:	9300      	str	r3, [sp, #0]
   d8970:	4b51      	ldr	r3, [pc, #324]	; (d8ab8 <pow+0x320>)
   d8972:	9008      	str	r0, [sp, #32]
   d8974:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d8978:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d897c:	9301      	str	r3, [sp, #4]
   d897e:	f1b8 0f00 	cmp.w	r8, #0
   d8982:	d148      	bne.n	d8a16 <pow+0x27e>
   d8984:	f8df 9144 	ldr.w	r9, [pc, #324]	; d8acc <pow+0x334>
   d8988:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
   d898c:	2200      	movs	r2, #0
   d898e:	2300      	movs	r3, #0
   d8990:	4630      	mov	r0, r6
   d8992:	4639      	mov	r1, r7
   d8994:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d8998:	f001 fc60 	bl	da25c <__aeabi_dcmplt>
   d899c:	2800      	cmp	r0, #0
   d899e:	d094      	beq.n	d88ca <pow+0x132>
   d89a0:	2200      	movs	r2, #0
   d89a2:	4b46      	ldr	r3, [pc, #280]	; (d8abc <pow+0x324>)
   d89a4:	4620      	mov	r0, r4
   d89a6:	4629      	mov	r1, r5
   d89a8:	f001 f9e6 	bl	d9d78 <__aeabi_dmul>
   d89ac:	4604      	mov	r4, r0
   d89ae:	460d      	mov	r5, r1
   d89b0:	ec45 4b10 	vmov	d0, r4, r5
   d89b4:	f000 ff00 	bl	d97b8 <rint>
   d89b8:	4620      	mov	r0, r4
   d89ba:	ec53 2b10 	vmov	r2, r3, d0
   d89be:	4629      	mov	r1, r5
   d89c0:	f001 fc42 	bl	da248 <__aeabi_dcmpeq>
   d89c4:	2800      	cmp	r0, #0
   d89c6:	d149      	bne.n	d8a5c <pow+0x2c4>
   d89c8:	4b3d      	ldr	r3, [pc, #244]	; (d8ac0 <pow+0x328>)
   d89ca:	f99a 8000 	ldrsb.w	r8, [sl]
   d89ce:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d89d2:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d89d6:	f1b8 0f02 	cmp.w	r8, #2
   d89da:	f47f af76 	bne.w	d88ca <pow+0x132>
   d89de:	e778      	b.n	d88d2 <pow+0x13a>
   d89e0:	4a35      	ldr	r2, [pc, #212]	; (d8ab8 <pow+0x320>)
   d89e2:	f99a 3000 	ldrsb.w	r3, [sl]
   d89e6:	f8cd b020 	str.w	fp, [sp, #32]
   d89ea:	2101      	movs	r1, #1
   d89ec:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d89f0:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d89f4:	e88d 0006 	stmia.w	sp, {r1, r2}
   d89f8:	2b00      	cmp	r3, #0
   d89fa:	f43f af6f 	beq.w	d88dc <pow+0x144>
   d89fe:	4931      	ldr	r1, [pc, #196]	; (d8ac4 <pow+0x32c>)
   d8a00:	2000      	movs	r0, #0
   d8a02:	2b02      	cmp	r3, #2
   d8a04:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d8a08:	f47f af6c 	bne.w	d88e4 <pow+0x14c>
   d8a0c:	f7fd fd24 	bl	d6458 <__errno>
   d8a10:	2321      	movs	r3, #33	; 0x21
   d8a12:	6003      	str	r3, [r0, #0]
   d8a14:	e76c      	b.n	d88f0 <pow+0x158>
   d8a16:	ed9f 7b26 	vldr	d7, [pc, #152]	; d8ab0 <pow+0x318>
   d8a1a:	2200      	movs	r2, #0
   d8a1c:	2300      	movs	r3, #0
   d8a1e:	4630      	mov	r0, r6
   d8a20:	4639      	mov	r1, r7
   d8a22:	ed8d 7b06 	vstr	d7, [sp, #24]
   d8a26:	f001 fc19 	bl	da25c <__aeabi_dcmplt>
   d8a2a:	2800      	cmp	r0, #0
   d8a2c:	d0d3      	beq.n	d89d6 <pow+0x23e>
   d8a2e:	2200      	movs	r2, #0
   d8a30:	4b22      	ldr	r3, [pc, #136]	; (d8abc <pow+0x324>)
   d8a32:	4620      	mov	r0, r4
   d8a34:	4629      	mov	r1, r5
   d8a36:	f001 f99f 	bl	d9d78 <__aeabi_dmul>
   d8a3a:	4604      	mov	r4, r0
   d8a3c:	460d      	mov	r5, r1
   d8a3e:	ec45 4b10 	vmov	d0, r4, r5
   d8a42:	f000 feb9 	bl	d97b8 <rint>
   d8a46:	4620      	mov	r0, r4
   d8a48:	ec53 2b10 	vmov	r2, r3, d0
   d8a4c:	4629      	mov	r1, r5
   d8a4e:	f001 fbfb 	bl	da248 <__aeabi_dcmpeq>
   d8a52:	b918      	cbnz	r0, d8a5c <pow+0x2c4>
   d8a54:	4b1b      	ldr	r3, [pc, #108]	; (d8ac4 <pow+0x32c>)
   d8a56:	2200      	movs	r2, #0
   d8a58:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d8a5c:	f99a 8000 	ldrsb.w	r8, [sl]
   d8a60:	e7b9      	b.n	d89d6 <pow+0x23e>
   d8a62:	4b15      	ldr	r3, [pc, #84]	; (d8ab8 <pow+0x320>)
   d8a64:	f99a 9000 	ldrsb.w	r9, [sl]
   d8a68:	f8cd 8020 	str.w	r8, [sp, #32]
   d8a6c:	2201      	movs	r2, #1
   d8a6e:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d8a72:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d8a76:	e88d 000c 	stmia.w	sp, {r2, r3}
   d8a7a:	f1b9 0f00 	cmp.w	r9, #0
   d8a7e:	f43f af2d 	beq.w	d88dc <pow+0x144>
   d8a82:	2200      	movs	r2, #0
   d8a84:	2300      	movs	r3, #0
   d8a86:	4610      	mov	r0, r2
   d8a88:	4619      	mov	r1, r3
   d8a8a:	f001 fa9f 	bl	d9fcc <__aeabi_ddiv>
   d8a8e:	f1b9 0f02 	cmp.w	r9, #2
   d8a92:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d8a96:	d0b9      	beq.n	d8a0c <pow+0x274>
   d8a98:	e724      	b.n	d88e4 <pow+0x14c>
   d8a9a:	bf00      	nop
   d8a9c:	f3af 8000 	nop.w
	...
   d8aac:	3ff00000 	.word	0x3ff00000
   d8ab0:	00000000 	.word	0x00000000
   d8ab4:	7ff00000 	.word	0x7ff00000
   d8ab8:	000dc008 	.word	0x000dc008
   d8abc:	3fe00000 	.word	0x3fe00000
   d8ac0:	c7efffff 	.word	0xc7efffff
   d8ac4:	fff00000 	.word	0xfff00000
   d8ac8:	2003e0b8 	.word	0x2003e0b8
   d8acc:	47efffff 	.word	0x47efffff

000d8ad0 <__ieee754_pow>:
   d8ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8ad4:	ec51 0b11 	vmov	r0, r1, d1
   d8ad8:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   d8adc:	ea58 0400 	orrs.w	r4, r8, r0
   d8ae0:	b093      	sub	sp, #76	; 0x4c
   d8ae2:	d03c      	beq.n	d8b5e <__ieee754_pow+0x8e>
   d8ae4:	ec53 2b10 	vmov	r2, r3, d0
   d8ae8:	4e6d      	ldr	r6, [pc, #436]	; (d8ca0 <__ieee754_pow+0x1d0>)
   d8aea:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   d8aee:	42b4      	cmp	r4, r6
   d8af0:	ee10 aa10 	vmov	sl, s0
   d8af4:	461d      	mov	r5, r3
   d8af6:	dc2b      	bgt.n	d8b50 <__ieee754_pow+0x80>
   d8af8:	4689      	mov	r9, r1
   d8afa:	ee11 ea10 	vmov	lr, s2
   d8afe:	d026      	beq.n	d8b4e <__ieee754_pow+0x7e>
   d8b00:	45b0      	cmp	r8, r6
   d8b02:	dc25      	bgt.n	d8b50 <__ieee754_pow+0x80>
   d8b04:	4e66      	ldr	r6, [pc, #408]	; (d8ca0 <__ieee754_pow+0x1d0>)
   d8b06:	45b0      	cmp	r8, r6
   d8b08:	d077      	beq.n	d8bfa <__ieee754_pow+0x12a>
   d8b0a:	2d00      	cmp	r5, #0
   d8b0c:	4616      	mov	r6, r2
   d8b0e:	461f      	mov	r7, r3
   d8b10:	e9cd 0100 	strd	r0, r1, [sp]
   d8b14:	db75      	blt.n	d8c02 <__ieee754_pow+0x132>
   d8b16:	f04f 0b00 	mov.w	fp, #0
   d8b1a:	f1be 0f00 	cmp.w	lr, #0
   d8b1e:	d12d      	bne.n	d8b7c <__ieee754_pow+0xac>
   d8b20:	4b5f      	ldr	r3, [pc, #380]	; (d8ca0 <__ieee754_pow+0x1d0>)
   d8b22:	4598      	cmp	r8, r3
   d8b24:	f000 8089 	beq.w	d8c3a <__ieee754_pow+0x16a>
   d8b28:	4b5e      	ldr	r3, [pc, #376]	; (d8ca4 <__ieee754_pow+0x1d4>)
   d8b2a:	4598      	cmp	r8, r3
   d8b2c:	d05e      	beq.n	d8bec <__ieee754_pow+0x11c>
   d8b2e:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
   d8b32:	f000 83de 	beq.w	d92f2 <__ieee754_pow+0x822>
   d8b36:	4b5c      	ldr	r3, [pc, #368]	; (d8ca8 <__ieee754_pow+0x1d8>)
   d8b38:	4599      	cmp	r9, r3
   d8b3a:	d11f      	bne.n	d8b7c <__ieee754_pow+0xac>
   d8b3c:	2d00      	cmp	r5, #0
   d8b3e:	db1d      	blt.n	d8b7c <__ieee754_pow+0xac>
   d8b40:	ec47 6b10 	vmov	d0, r6, r7
   d8b44:	b013      	add	sp, #76	; 0x4c
   d8b46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8b4a:	f000 bd49 	b.w	d95e0 <__ieee754_sqrt>
   d8b4e:	b15a      	cbz	r2, d8b68 <__ieee754_pow+0x98>
   d8b50:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
   d8b54:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
   d8b58:	ea54 030a 	orrs.w	r3, r4, sl
   d8b5c:	d106      	bne.n	d8b6c <__ieee754_pow+0x9c>
   d8b5e:	ed9f 0b4a 	vldr	d0, [pc, #296]	; d8c88 <__ieee754_pow+0x1b8>
   d8b62:	b013      	add	sp, #76	; 0x4c
   d8b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8b68:	45a0      	cmp	r8, r4
   d8b6a:	ddcb      	ble.n	d8b04 <__ieee754_pow+0x34>
   d8b6c:	484f      	ldr	r0, [pc, #316]	; (d8cac <__ieee754_pow+0x1dc>)
   d8b6e:	b013      	add	sp, #76	; 0x4c
   d8b70:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8b74:	f000 be18 	b.w	d97a8 <nan>
   d8b78:	f04f 0b00 	mov.w	fp, #0
   d8b7c:	ec47 6b10 	vmov	d0, r6, r7
   d8b80:	f000 fdfe 	bl	d9780 <fabs>
   d8b84:	ec51 0b10 	vmov	r0, r1, d0
   d8b88:	f1ba 0f00 	cmp.w	sl, #0
   d8b8c:	d01e      	beq.n	d8bcc <__ieee754_pow+0xfc>
   d8b8e:	0fed      	lsrs	r5, r5, #31
   d8b90:	f105 3aff 	add.w	sl, r5, #4294967295
   d8b94:	ea5b 030a 	orrs.w	r3, fp, sl
   d8b98:	d063      	beq.n	d8c62 <__ieee754_pow+0x192>
   d8b9a:	4b45      	ldr	r3, [pc, #276]	; (d8cb0 <__ieee754_pow+0x1e0>)
   d8b9c:	4598      	cmp	r8, r3
   d8b9e:	f340 808d 	ble.w	d8cbc <__ieee754_pow+0x1ec>
   d8ba2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   d8ba6:	4598      	cmp	r8, r3
   d8ba8:	f340 8438 	ble.w	d941c <__ieee754_pow+0x94c>
   d8bac:	4b41      	ldr	r3, [pc, #260]	; (d8cb4 <__ieee754_pow+0x1e4>)
   d8bae:	429c      	cmp	r4, r3
   d8bb0:	dd62      	ble.n	d8c78 <__ieee754_pow+0x1a8>
   d8bb2:	f1b9 0f00 	cmp.w	r9, #0
   d8bb6:	dd62      	ble.n	d8c7e <__ieee754_pow+0x1ae>
   d8bb8:	a335      	add	r3, pc, #212	; (adr r3, d8c90 <__ieee754_pow+0x1c0>)
   d8bba:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8bbe:	4610      	mov	r0, r2
   d8bc0:	4619      	mov	r1, r3
   d8bc2:	f001 f8d9 	bl	d9d78 <__aeabi_dmul>
   d8bc6:	ec41 0b10 	vmov	d0, r0, r1
   d8bca:	e7ca      	b.n	d8b62 <__ieee754_pow+0x92>
   d8bcc:	b124      	cbz	r4, d8bd8 <__ieee754_pow+0x108>
   d8bce:	4b35      	ldr	r3, [pc, #212]	; (d8ca4 <__ieee754_pow+0x1d4>)
   d8bd0:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
   d8bd4:	429a      	cmp	r2, r3
   d8bd6:	d1da      	bne.n	d8b8e <__ieee754_pow+0xbe>
   d8bd8:	f1b9 0f00 	cmp.w	r9, #0
   d8bdc:	f2c0 83cb 	blt.w	d9376 <__ieee754_pow+0x8a6>
   d8be0:	2d00      	cmp	r5, #0
   d8be2:	f2c0 8374 	blt.w	d92ce <__ieee754_pow+0x7fe>
   d8be6:	ec41 0b10 	vmov	d0, r0, r1
   d8bea:	e7ba      	b.n	d8b62 <__ieee754_pow+0x92>
   d8bec:	f1b9 0f00 	cmp.w	r9, #0
   d8bf0:	f2c0 847a 	blt.w	d94e8 <__ieee754_pow+0xa18>
   d8bf4:	ec47 6b10 	vmov	d0, r6, r7
   d8bf8:	e7b3      	b.n	d8b62 <__ieee754_pow+0x92>
   d8bfa:	f1be 0f00 	cmp.w	lr, #0
   d8bfe:	d084      	beq.n	d8b0a <__ieee754_pow+0x3a>
   d8c00:	e7a6      	b.n	d8b50 <__ieee754_pow+0x80>
   d8c02:	4b2d      	ldr	r3, [pc, #180]	; (d8cb8 <__ieee754_pow+0x1e8>)
   d8c04:	4598      	cmp	r8, r3
   d8c06:	dc29      	bgt.n	d8c5c <__ieee754_pow+0x18c>
   d8c08:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
   d8c0c:	4598      	cmp	r8, r3
   d8c0e:	dd82      	ble.n	d8b16 <__ieee754_pow+0x46>
   d8c10:	ea4f 5328 	mov.w	r3, r8, asr #20
   d8c14:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   d8c18:	2b14      	cmp	r3, #20
   d8c1a:	f340 847f 	ble.w	d951c <__ieee754_pow+0xa4c>
   d8c1e:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
   d8c22:	fa2e f203 	lsr.w	r2, lr, r3
   d8c26:	fa02 f303 	lsl.w	r3, r2, r3
   d8c2a:	459e      	cmp	lr, r3
   d8c2c:	f47f af73 	bne.w	d8b16 <__ieee754_pow+0x46>
   d8c30:	f002 0201 	and.w	r2, r2, #1
   d8c34:	f1c2 0b02 	rsb	fp, r2, #2
   d8c38:	e76f      	b.n	d8b1a <__ieee754_pow+0x4a>
   d8c3a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
   d8c3e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   d8c42:	ea53 030a 	orrs.w	r3, r3, sl
   d8c46:	d08a      	beq.n	d8b5e <__ieee754_pow+0x8e>
   d8c48:	4b1a      	ldr	r3, [pc, #104]	; (d8cb4 <__ieee754_pow+0x1e4>)
   d8c4a:	429c      	cmp	r4, r3
   d8c4c:	f340 8385 	ble.w	d935a <__ieee754_pow+0x88a>
   d8c50:	f1b9 0f00 	cmp.w	r9, #0
   d8c54:	db13      	blt.n	d8c7e <__ieee754_pow+0x1ae>
   d8c56:	ed9d 0b00 	vldr	d0, [sp]
   d8c5a:	e782      	b.n	d8b62 <__ieee754_pow+0x92>
   d8c5c:	f04f 0b02 	mov.w	fp, #2
   d8c60:	e75b      	b.n	d8b1a <__ieee754_pow+0x4a>
   d8c62:	4632      	mov	r2, r6
   d8c64:	463b      	mov	r3, r7
   d8c66:	4610      	mov	r0, r2
   d8c68:	4619      	mov	r1, r3
   d8c6a:	f000 fed1 	bl	d9a10 <__aeabi_dsub>
   d8c6e:	4602      	mov	r2, r0
   d8c70:	460b      	mov	r3, r1
   d8c72:	f001 f9ab 	bl	d9fcc <__aeabi_ddiv>
   d8c76:	e7b6      	b.n	d8be6 <__ieee754_pow+0x116>
   d8c78:	f1b9 0f00 	cmp.w	r9, #0
   d8c7c:	db9c      	blt.n	d8bb8 <__ieee754_pow+0xe8>
   d8c7e:	ed9f 0b06 	vldr	d0, [pc, #24]	; d8c98 <__ieee754_pow+0x1c8>
   d8c82:	e76e      	b.n	d8b62 <__ieee754_pow+0x92>
   d8c84:	f3af 8000 	nop.w
   d8c88:	00000000 	.word	0x00000000
   d8c8c:	3ff00000 	.word	0x3ff00000
   d8c90:	8800759c 	.word	0x8800759c
   d8c94:	7e37e43c 	.word	0x7e37e43c
	...
   d8ca0:	7ff00000 	.word	0x7ff00000
   d8ca4:	3ff00000 	.word	0x3ff00000
   d8ca8:	3fe00000 	.word	0x3fe00000
   d8cac:	000dc00c 	.word	0x000dc00c
   d8cb0:	41e00000 	.word	0x41e00000
   d8cb4:	3fefffff 	.word	0x3fefffff
   d8cb8:	433fffff 	.word	0x433fffff
   d8cbc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
   d8cc0:	f04f 0200 	mov.w	r2, #0
   d8cc4:	da05      	bge.n	d8cd2 <__ieee754_pow+0x202>
   d8cc6:	4bd6      	ldr	r3, [pc, #856]	; (d9020 <__ieee754_pow+0x550>)
   d8cc8:	f001 f856 	bl	d9d78 <__aeabi_dmul>
   d8ccc:	f06f 0234 	mvn.w	r2, #52	; 0x34
   d8cd0:	460c      	mov	r4, r1
   d8cd2:	1523      	asrs	r3, r4, #20
   d8cd4:	4ed3      	ldr	r6, [pc, #844]	; (d9024 <__ieee754_pow+0x554>)
   d8cd6:	f3c4 0413 	ubfx	r4, r4, #0, #20
   d8cda:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   d8cde:	4413      	add	r3, r2
   d8ce0:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
   d8ce4:	42b4      	cmp	r4, r6
   d8ce6:	461a      	mov	r2, r3
   d8ce8:	930d      	str	r3, [sp, #52]	; 0x34
   d8cea:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
   d8cee:	f340 8349 	ble.w	d9384 <__ieee754_pow+0x8b4>
   d8cf2:	4bcd      	ldr	r3, [pc, #820]	; (d9028 <__ieee754_pow+0x558>)
   d8cf4:	429c      	cmp	r4, r3
   d8cf6:	f340 842d 	ble.w	d9554 <__ieee754_pow+0xa84>
   d8cfa:	ed9f 7bb3 	vldr	d7, [pc, #716]	; d8fc8 <__ieee754_pow+0x4f8>
   d8cfe:	ed8d 7b08 	vstr	d7, [sp, #32]
   d8d02:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d8d06:	ed9f 7bb2 	vldr	d7, [pc, #712]	; d8fd0 <__ieee754_pow+0x500>
   d8d0a:	4613      	mov	r3, r2
   d8d0c:	ed8d 7b06 	vstr	d7, [sp, #24]
   d8d10:	3301      	adds	r3, #1
   d8d12:	930d      	str	r3, [sp, #52]	; 0x34
   d8d14:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
   d8d18:	f04f 0800 	mov.w	r8, #0
   d8d1c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d8d20:	4629      	mov	r1, r5
   d8d22:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d8d26:	f000 fe73 	bl	d9a10 <__aeabi_dsub>
   d8d2a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d8d2e:	4606      	mov	r6, r0
   d8d30:	460f      	mov	r7, r1
   d8d32:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d8d36:	f000 fe6d 	bl	d9a14 <__adddf3>
   d8d3a:	4602      	mov	r2, r0
   d8d3c:	460b      	mov	r3, r1
   d8d3e:	2000      	movs	r0, #0
   d8d40:	49ba      	ldr	r1, [pc, #744]	; (d902c <__ieee754_pow+0x55c>)
   d8d42:	f001 f943 	bl	d9fcc <__aeabi_ddiv>
   d8d46:	4603      	mov	r3, r0
   d8d48:	460c      	mov	r4, r1
   d8d4a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
   d8d4e:	4602      	mov	r2, r0
   d8d50:	460b      	mov	r3, r1
   d8d52:	4630      	mov	r0, r6
   d8d54:	4639      	mov	r1, r7
   d8d56:	f001 f80f 	bl	d9d78 <__aeabi_dmul>
   d8d5a:	106b      	asrs	r3, r5, #1
   d8d5c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   d8d60:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
   d8d64:	eb03 0508 	add.w	r5, r3, r8
   d8d68:	460a      	mov	r2, r1
   d8d6a:	2300      	movs	r3, #0
   d8d6c:	4601      	mov	r1, r0
   d8d6e:	e9cd 1202 	strd	r1, r2, [sp, #8]
   d8d72:	9302      	str	r3, [sp, #8]
   d8d74:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
   d8d78:	2400      	movs	r4, #0
   d8d7a:	e9cd 1204 	strd	r1, r2, [sp, #16]
   d8d7e:	462b      	mov	r3, r5
   d8d80:	4622      	mov	r2, r4
   d8d82:	4640      	mov	r0, r8
   d8d84:	4649      	mov	r1, r9
   d8d86:	f000 fff7 	bl	d9d78 <__aeabi_dmul>
   d8d8a:	4602      	mov	r2, r0
   d8d8c:	460b      	mov	r3, r1
   d8d8e:	4630      	mov	r0, r6
   d8d90:	4639      	mov	r1, r7
   d8d92:	f000 fe3d 	bl	d9a10 <__aeabi_dsub>
   d8d96:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d8d9a:	4606      	mov	r6, r0
   d8d9c:	460f      	mov	r7, r1
   d8d9e:	4620      	mov	r0, r4
   d8da0:	4629      	mov	r1, r5
   d8da2:	f000 fe35 	bl	d9a10 <__aeabi_dsub>
   d8da6:	4602      	mov	r2, r0
   d8da8:	460b      	mov	r3, r1
   d8daa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d8dae:	f000 fe2f 	bl	d9a10 <__aeabi_dsub>
   d8db2:	4642      	mov	r2, r8
   d8db4:	464b      	mov	r3, r9
   d8db6:	f000 ffdf 	bl	d9d78 <__aeabi_dmul>
   d8dba:	4602      	mov	r2, r0
   d8dbc:	460b      	mov	r3, r1
   d8dbe:	4630      	mov	r0, r6
   d8dc0:	4639      	mov	r1, r7
   d8dc2:	f000 fe25 	bl	d9a10 <__aeabi_dsub>
   d8dc6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   d8dca:	f000 ffd5 	bl	d9d78 <__aeabi_dmul>
   d8dce:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
   d8dd2:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d8dd6:	4622      	mov	r2, r4
   d8dd8:	462b      	mov	r3, r5
   d8dda:	4620      	mov	r0, r4
   d8ddc:	4629      	mov	r1, r5
   d8dde:	f000 ffcb 	bl	d9d78 <__aeabi_dmul>
   d8de2:	a37d      	add	r3, pc, #500	; (adr r3, d8fd8 <__ieee754_pow+0x508>)
   d8de4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8de8:	4604      	mov	r4, r0
   d8dea:	460d      	mov	r5, r1
   d8dec:	f000 ffc4 	bl	d9d78 <__aeabi_dmul>
   d8df0:	a37b      	add	r3, pc, #492	; (adr r3, d8fe0 <__ieee754_pow+0x510>)
   d8df2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8df6:	f000 fe0d 	bl	d9a14 <__adddf3>
   d8dfa:	4622      	mov	r2, r4
   d8dfc:	462b      	mov	r3, r5
   d8dfe:	f000 ffbb 	bl	d9d78 <__aeabi_dmul>
   d8e02:	a379      	add	r3, pc, #484	; (adr r3, d8fe8 <__ieee754_pow+0x518>)
   d8e04:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8e08:	f000 fe04 	bl	d9a14 <__adddf3>
   d8e0c:	4622      	mov	r2, r4
   d8e0e:	462b      	mov	r3, r5
   d8e10:	f000 ffb2 	bl	d9d78 <__aeabi_dmul>
   d8e14:	a376      	add	r3, pc, #472	; (adr r3, d8ff0 <__ieee754_pow+0x520>)
   d8e16:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8e1a:	f000 fdfb 	bl	d9a14 <__adddf3>
   d8e1e:	4622      	mov	r2, r4
   d8e20:	462b      	mov	r3, r5
   d8e22:	f000 ffa9 	bl	d9d78 <__aeabi_dmul>
   d8e26:	a374      	add	r3, pc, #464	; (adr r3, d8ff8 <__ieee754_pow+0x528>)
   d8e28:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8e2c:	f000 fdf2 	bl	d9a14 <__adddf3>
   d8e30:	4622      	mov	r2, r4
   d8e32:	462b      	mov	r3, r5
   d8e34:	f000 ffa0 	bl	d9d78 <__aeabi_dmul>
   d8e38:	a371      	add	r3, pc, #452	; (adr r3, d9000 <__ieee754_pow+0x530>)
   d8e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8e3e:	f000 fde9 	bl	d9a14 <__adddf3>
   d8e42:	4622      	mov	r2, r4
   d8e44:	4606      	mov	r6, r0
   d8e46:	460f      	mov	r7, r1
   d8e48:	462b      	mov	r3, r5
   d8e4a:	4620      	mov	r0, r4
   d8e4c:	4629      	mov	r1, r5
   d8e4e:	f000 ff93 	bl	d9d78 <__aeabi_dmul>
   d8e52:	4602      	mov	r2, r0
   d8e54:	460b      	mov	r3, r1
   d8e56:	4630      	mov	r0, r6
   d8e58:	4639      	mov	r1, r7
   d8e5a:	f000 ff8d 	bl	d9d78 <__aeabi_dmul>
   d8e5e:	4642      	mov	r2, r8
   d8e60:	4604      	mov	r4, r0
   d8e62:	460d      	mov	r5, r1
   d8e64:	464b      	mov	r3, r9
   d8e66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d8e6a:	f000 fdd3 	bl	d9a14 <__adddf3>
   d8e6e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d8e72:	f000 ff81 	bl	d9d78 <__aeabi_dmul>
   d8e76:	4622      	mov	r2, r4
   d8e78:	462b      	mov	r3, r5
   d8e7a:	f000 fdcb 	bl	d9a14 <__adddf3>
   d8e7e:	4642      	mov	r2, r8
   d8e80:	4606      	mov	r6, r0
   d8e82:	460f      	mov	r7, r1
   d8e84:	464b      	mov	r3, r9
   d8e86:	4640      	mov	r0, r8
   d8e88:	4649      	mov	r1, r9
   d8e8a:	f000 ff75 	bl	d9d78 <__aeabi_dmul>
   d8e8e:	2200      	movs	r2, #0
   d8e90:	4b67      	ldr	r3, [pc, #412]	; (d9030 <__ieee754_pow+0x560>)
   d8e92:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d8e96:	f000 fdbd 	bl	d9a14 <__adddf3>
   d8e9a:	4632      	mov	r2, r6
   d8e9c:	463b      	mov	r3, r7
   d8e9e:	f000 fdb9 	bl	d9a14 <__adddf3>
   d8ea2:	9802      	ldr	r0, [sp, #8]
   d8ea4:	460d      	mov	r5, r1
   d8ea6:	4604      	mov	r4, r0
   d8ea8:	4622      	mov	r2, r4
   d8eaa:	462b      	mov	r3, r5
   d8eac:	4640      	mov	r0, r8
   d8eae:	4649      	mov	r1, r9
   d8eb0:	f000 ff62 	bl	d9d78 <__aeabi_dmul>
   d8eb4:	2200      	movs	r2, #0
   d8eb6:	4680      	mov	r8, r0
   d8eb8:	4689      	mov	r9, r1
   d8eba:	4b5d      	ldr	r3, [pc, #372]	; (d9030 <__ieee754_pow+0x560>)
   d8ebc:	4620      	mov	r0, r4
   d8ebe:	4629      	mov	r1, r5
   d8ec0:	f000 fda6 	bl	d9a10 <__aeabi_dsub>
   d8ec4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d8ec8:	f000 fda2 	bl	d9a10 <__aeabi_dsub>
   d8ecc:	4602      	mov	r2, r0
   d8ece:	460b      	mov	r3, r1
   d8ed0:	4630      	mov	r0, r6
   d8ed2:	4639      	mov	r1, r7
   d8ed4:	f000 fd9c 	bl	d9a10 <__aeabi_dsub>
   d8ed8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d8edc:	f000 ff4c 	bl	d9d78 <__aeabi_dmul>
   d8ee0:	4622      	mov	r2, r4
   d8ee2:	4606      	mov	r6, r0
   d8ee4:	460f      	mov	r7, r1
   d8ee6:	462b      	mov	r3, r5
   d8ee8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d8eec:	f000 ff44 	bl	d9d78 <__aeabi_dmul>
   d8ef0:	4602      	mov	r2, r0
   d8ef2:	460b      	mov	r3, r1
   d8ef4:	4630      	mov	r0, r6
   d8ef6:	4639      	mov	r1, r7
   d8ef8:	f000 fd8c 	bl	d9a14 <__adddf3>
   d8efc:	4606      	mov	r6, r0
   d8efe:	460f      	mov	r7, r1
   d8f00:	4602      	mov	r2, r0
   d8f02:	460b      	mov	r3, r1
   d8f04:	4640      	mov	r0, r8
   d8f06:	4649      	mov	r1, r9
   d8f08:	e9cd 8904 	strd	r8, r9, [sp, #16]
   d8f0c:	f000 fd82 	bl	d9a14 <__adddf3>
   d8f10:	9802      	ldr	r0, [sp, #8]
   d8f12:	a33d      	add	r3, pc, #244	; (adr r3, d9008 <__ieee754_pow+0x538>)
   d8f14:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8f18:	4604      	mov	r4, r0
   d8f1a:	460d      	mov	r5, r1
   d8f1c:	f000 ff2c 	bl	d9d78 <__aeabi_dmul>
   d8f20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d8f24:	4680      	mov	r8, r0
   d8f26:	4689      	mov	r9, r1
   d8f28:	4620      	mov	r0, r4
   d8f2a:	4629      	mov	r1, r5
   d8f2c:	f000 fd70 	bl	d9a10 <__aeabi_dsub>
   d8f30:	4602      	mov	r2, r0
   d8f32:	460b      	mov	r3, r1
   d8f34:	4630      	mov	r0, r6
   d8f36:	4639      	mov	r1, r7
   d8f38:	f000 fd6a 	bl	d9a10 <__aeabi_dsub>
   d8f3c:	a334      	add	r3, pc, #208	; (adr r3, d9010 <__ieee754_pow+0x540>)
   d8f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8f42:	f000 ff19 	bl	d9d78 <__aeabi_dmul>
   d8f46:	a334      	add	r3, pc, #208	; (adr r3, d9018 <__ieee754_pow+0x548>)
   d8f48:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8f4c:	4606      	mov	r6, r0
   d8f4e:	460f      	mov	r7, r1
   d8f50:	4620      	mov	r0, r4
   d8f52:	4629      	mov	r1, r5
   d8f54:	f000 ff10 	bl	d9d78 <__aeabi_dmul>
   d8f58:	4602      	mov	r2, r0
   d8f5a:	460b      	mov	r3, r1
   d8f5c:	4630      	mov	r0, r6
   d8f5e:	4639      	mov	r1, r7
   d8f60:	f000 fd58 	bl	d9a14 <__adddf3>
   d8f64:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   d8f68:	f000 fd54 	bl	d9a14 <__adddf3>
   d8f6c:	4606      	mov	r6, r0
   d8f6e:	980d      	ldr	r0, [sp, #52]	; 0x34
   d8f70:	460f      	mov	r7, r1
   d8f72:	f000 fe9b 	bl	d9cac <__aeabi_i2d>
   d8f76:	4632      	mov	r2, r6
   d8f78:	4604      	mov	r4, r0
   d8f7a:	460d      	mov	r5, r1
   d8f7c:	463b      	mov	r3, r7
   d8f7e:	4640      	mov	r0, r8
   d8f80:	4649      	mov	r1, r9
   d8f82:	f000 fd47 	bl	d9a14 <__adddf3>
   d8f86:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d8f8a:	f000 fd43 	bl	d9a14 <__adddf3>
   d8f8e:	4622      	mov	r2, r4
   d8f90:	462b      	mov	r3, r5
   d8f92:	f000 fd3f 	bl	d9a14 <__adddf3>
   d8f96:	9802      	ldr	r0, [sp, #8]
   d8f98:	4622      	mov	r2, r4
   d8f9a:	462b      	mov	r3, r5
   d8f9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d8fa0:	f000 fd36 	bl	d9a10 <__aeabi_dsub>
   d8fa4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d8fa8:	f000 fd32 	bl	d9a10 <__aeabi_dsub>
   d8fac:	4642      	mov	r2, r8
   d8fae:	464b      	mov	r3, r9
   d8fb0:	f000 fd2e 	bl	d9a10 <__aeabi_dsub>
   d8fb4:	4602      	mov	r2, r0
   d8fb6:	460b      	mov	r3, r1
   d8fb8:	4630      	mov	r0, r6
   d8fba:	4639      	mov	r1, r7
   d8fbc:	f000 fd28 	bl	d9a10 <__aeabi_dsub>
   d8fc0:	4680      	mov	r8, r0
   d8fc2:	4689      	mov	r9, r1
   d8fc4:	e036      	b.n	d9034 <__ieee754_pow+0x564>
   d8fc6:	bf00      	nop
	...
   d8fd4:	3ff00000 	.word	0x3ff00000
   d8fd8:	4a454eef 	.word	0x4a454eef
   d8fdc:	3fca7e28 	.word	0x3fca7e28
   d8fe0:	93c9db65 	.word	0x93c9db65
   d8fe4:	3fcd864a 	.word	0x3fcd864a
   d8fe8:	a91d4101 	.word	0xa91d4101
   d8fec:	3fd17460 	.word	0x3fd17460
   d8ff0:	518f264d 	.word	0x518f264d
   d8ff4:	3fd55555 	.word	0x3fd55555
   d8ff8:	db6fabff 	.word	0xdb6fabff
   d8ffc:	3fdb6db6 	.word	0x3fdb6db6
   d9000:	33333303 	.word	0x33333303
   d9004:	3fe33333 	.word	0x3fe33333
   d9008:	e0000000 	.word	0xe0000000
   d900c:	3feec709 	.word	0x3feec709
   d9010:	dc3a03fd 	.word	0xdc3a03fd
   d9014:	3feec709 	.word	0x3feec709
   d9018:	145b01f5 	.word	0x145b01f5
   d901c:	be3e2fe0 	.word	0xbe3e2fe0
   d9020:	43400000 	.word	0x43400000
   d9024:	0003988e 	.word	0x0003988e
   d9028:	000bb679 	.word	0x000bb679
   d902c:	3ff00000 	.word	0x3ff00000
   d9030:	40080000 	.word	0x40080000
   d9034:	f10b 33ff 	add.w	r3, fp, #4294967295
   d9038:	ea53 030a 	orrs.w	r3, r3, sl
   d903c:	f000 8188 	beq.w	d9350 <__ieee754_pow+0x880>
   d9040:	ed9f 7bd7 	vldr	d7, [pc, #860]	; d93a0 <__ieee754_pow+0x8d0>
   d9044:	ed8d 7b06 	vstr	d7, [sp, #24]
   d9048:	e9dd ab00 	ldrd	sl, fp, [sp]
   d904c:	4653      	mov	r3, sl
   d904e:	465c      	mov	r4, fp
   d9050:	e9cd 3400 	strd	r3, r4, [sp]
   d9054:	2300      	movs	r3, #0
   d9056:	9300      	str	r3, [sp, #0]
   d9058:	e9dd 4500 	ldrd	r4, r5, [sp]
   d905c:	4650      	mov	r0, sl
   d905e:	4622      	mov	r2, r4
   d9060:	462b      	mov	r3, r5
   d9062:	4659      	mov	r1, fp
   d9064:	f000 fcd4 	bl	d9a10 <__aeabi_dsub>
   d9068:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d906c:	f000 fe84 	bl	d9d78 <__aeabi_dmul>
   d9070:	4652      	mov	r2, sl
   d9072:	4606      	mov	r6, r0
   d9074:	460f      	mov	r7, r1
   d9076:	465b      	mov	r3, fp
   d9078:	4640      	mov	r0, r8
   d907a:	4649      	mov	r1, r9
   d907c:	f000 fe7c 	bl	d9d78 <__aeabi_dmul>
   d9080:	4602      	mov	r2, r0
   d9082:	460b      	mov	r3, r1
   d9084:	4630      	mov	r0, r6
   d9086:	4639      	mov	r1, r7
   d9088:	f000 fcc4 	bl	d9a14 <__adddf3>
   d908c:	4622      	mov	r2, r4
   d908e:	4680      	mov	r8, r0
   d9090:	4689      	mov	r9, r1
   d9092:	462b      	mov	r3, r5
   d9094:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d9098:	e9cd 8904 	strd	r8, r9, [sp, #16]
   d909c:	f000 fe6c 	bl	d9d78 <__aeabi_dmul>
   d90a0:	460b      	mov	r3, r1
   d90a2:	4602      	mov	r2, r0
   d90a4:	4606      	mov	r6, r0
   d90a6:	460f      	mov	r7, r1
   d90a8:	4640      	mov	r0, r8
   d90aa:	4649      	mov	r1, r9
   d90ac:	f000 fcb2 	bl	d9a14 <__adddf3>
   d90b0:	4bd5      	ldr	r3, [pc, #852]	; (d9408 <__ieee754_pow+0x938>)
   d90b2:	4299      	cmp	r1, r3
   d90b4:	4604      	mov	r4, r0
   d90b6:	460d      	mov	r5, r1
   d90b8:	468a      	mov	sl, r1
   d90ba:	f340 8123 	ble.w	d9304 <__ieee754_pow+0x834>
   d90be:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   d90c2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   d90c6:	4303      	orrs	r3, r0
   d90c8:	f040 8218 	bne.w	d94fc <__ieee754_pow+0xa2c>
   d90cc:	a3b6      	add	r3, pc, #728	; (adr r3, d93a8 <__ieee754_pow+0x8d8>)
   d90ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   d90d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d90d6:	f000 fc9d 	bl	d9a14 <__adddf3>
   d90da:	4632      	mov	r2, r6
   d90dc:	4680      	mov	r8, r0
   d90de:	4689      	mov	r9, r1
   d90e0:	463b      	mov	r3, r7
   d90e2:	4620      	mov	r0, r4
   d90e4:	4629      	mov	r1, r5
   d90e6:	f000 fc93 	bl	d9a10 <__aeabi_dsub>
   d90ea:	4602      	mov	r2, r0
   d90ec:	460b      	mov	r3, r1
   d90ee:	4640      	mov	r0, r8
   d90f0:	4649      	mov	r1, r9
   d90f2:	f001 f8d1 	bl	da298 <__aeabi_dcmpgt>
   d90f6:	2800      	cmp	r0, #0
   d90f8:	f040 8200 	bne.w	d94fc <__ieee754_pow+0xa2c>
   d90fc:	46a8      	mov	r8, r5
   d90fe:	ea4f 5328 	mov.w	r3, r8, asr #20
   d9102:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   d9106:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   d910a:	fa42 f303 	asr.w	r3, r2, r3
   d910e:	4453      	add	r3, sl
   d9110:	f3c3 520a 	ubfx	r2, r3, #20, #11
   d9114:	4dbd      	ldr	r5, [pc, #756]	; (d940c <__ieee754_pow+0x93c>)
   d9116:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   d911a:	4115      	asrs	r5, r2
   d911c:	f3c3 0b13 	ubfx	fp, r3, #0, #20
   d9120:	2000      	movs	r0, #0
   d9122:	f1c2 0414 	rsb	r4, r2, #20
   d9126:	ea23 0105 	bic.w	r1, r3, r5
   d912a:	f44b 1b80 	orr.w	fp, fp, #1048576	; 0x100000
   d912e:	f1ba 0f00 	cmp.w	sl, #0
   d9132:	4602      	mov	r2, r0
   d9134:	460b      	mov	r3, r1
   d9136:	fa4b fb04 	asr.w	fp, fp, r4
   d913a:	4630      	mov	r0, r6
   d913c:	4639      	mov	r1, r7
   d913e:	bfb8      	it	lt
   d9140:	f1cb 0b00 	rsblt	fp, fp, #0
   d9144:	f000 fc64 	bl	d9a10 <__aeabi_dsub>
   d9148:	4602      	mov	r2, r0
   d914a:	460b      	mov	r3, r1
   d914c:	4606      	mov	r6, r0
   d914e:	460f      	mov	r7, r1
   d9150:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d9154:	f000 fc5e 	bl	d9a14 <__adddf3>
   d9158:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
   d915c:	2400      	movs	r4, #0
   d915e:	a394      	add	r3, pc, #592	; (adr r3, d93b0 <__ieee754_pow+0x8e0>)
   d9160:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9164:	4620      	mov	r0, r4
   d9166:	460d      	mov	r5, r1
   d9168:	f000 fe06 	bl	d9d78 <__aeabi_dmul>
   d916c:	4632      	mov	r2, r6
   d916e:	4680      	mov	r8, r0
   d9170:	4689      	mov	r9, r1
   d9172:	463b      	mov	r3, r7
   d9174:	4620      	mov	r0, r4
   d9176:	4629      	mov	r1, r5
   d9178:	f000 fc4a 	bl	d9a10 <__aeabi_dsub>
   d917c:	4602      	mov	r2, r0
   d917e:	460b      	mov	r3, r1
   d9180:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d9184:	f000 fc44 	bl	d9a10 <__aeabi_dsub>
   d9188:	a38b      	add	r3, pc, #556	; (adr r3, d93b8 <__ieee754_pow+0x8e8>)
   d918a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d918e:	f000 fdf3 	bl	d9d78 <__aeabi_dmul>
   d9192:	a38b      	add	r3, pc, #556	; (adr r3, d93c0 <__ieee754_pow+0x8f0>)
   d9194:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9198:	4606      	mov	r6, r0
   d919a:	460f      	mov	r7, r1
   d919c:	4620      	mov	r0, r4
   d919e:	4629      	mov	r1, r5
   d91a0:	f000 fdea 	bl	d9d78 <__aeabi_dmul>
   d91a4:	4602      	mov	r2, r0
   d91a6:	460b      	mov	r3, r1
   d91a8:	4630      	mov	r0, r6
   d91aa:	4639      	mov	r1, r7
   d91ac:	f000 fc32 	bl	d9a14 <__adddf3>
   d91b0:	4606      	mov	r6, r0
   d91b2:	460f      	mov	r7, r1
   d91b4:	4602      	mov	r2, r0
   d91b6:	460b      	mov	r3, r1
   d91b8:	4640      	mov	r0, r8
   d91ba:	4649      	mov	r1, r9
   d91bc:	f000 fc2a 	bl	d9a14 <__adddf3>
   d91c0:	4642      	mov	r2, r8
   d91c2:	464b      	mov	r3, r9
   d91c4:	4604      	mov	r4, r0
   d91c6:	460d      	mov	r5, r1
   d91c8:	f000 fc22 	bl	d9a10 <__aeabi_dsub>
   d91cc:	4602      	mov	r2, r0
   d91ce:	460b      	mov	r3, r1
   d91d0:	4630      	mov	r0, r6
   d91d2:	4639      	mov	r1, r7
   d91d4:	f000 fc1c 	bl	d9a10 <__aeabi_dsub>
   d91d8:	4622      	mov	r2, r4
   d91da:	4680      	mov	r8, r0
   d91dc:	4689      	mov	r9, r1
   d91de:	462b      	mov	r3, r5
   d91e0:	4620      	mov	r0, r4
   d91e2:	4629      	mov	r1, r5
   d91e4:	f000 fdc8 	bl	d9d78 <__aeabi_dmul>
   d91e8:	a377      	add	r3, pc, #476	; (adr r3, d93c8 <__ieee754_pow+0x8f8>)
   d91ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   d91ee:	4606      	mov	r6, r0
   d91f0:	460f      	mov	r7, r1
   d91f2:	f000 fdc1 	bl	d9d78 <__aeabi_dmul>
   d91f6:	a376      	add	r3, pc, #472	; (adr r3, d93d0 <__ieee754_pow+0x900>)
   d91f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d91fc:	f000 fc08 	bl	d9a10 <__aeabi_dsub>
   d9200:	4632      	mov	r2, r6
   d9202:	463b      	mov	r3, r7
   d9204:	f000 fdb8 	bl	d9d78 <__aeabi_dmul>
   d9208:	a373      	add	r3, pc, #460	; (adr r3, d93d8 <__ieee754_pow+0x908>)
   d920a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d920e:	f000 fc01 	bl	d9a14 <__adddf3>
   d9212:	4632      	mov	r2, r6
   d9214:	463b      	mov	r3, r7
   d9216:	f000 fdaf 	bl	d9d78 <__aeabi_dmul>
   d921a:	a371      	add	r3, pc, #452	; (adr r3, d93e0 <__ieee754_pow+0x910>)
   d921c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9220:	f000 fbf6 	bl	d9a10 <__aeabi_dsub>
   d9224:	4632      	mov	r2, r6
   d9226:	463b      	mov	r3, r7
   d9228:	f000 fda6 	bl	d9d78 <__aeabi_dmul>
   d922c:	a36e      	add	r3, pc, #440	; (adr r3, d93e8 <__ieee754_pow+0x918>)
   d922e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9232:	f000 fbef 	bl	d9a14 <__adddf3>
   d9236:	4632      	mov	r2, r6
   d9238:	463b      	mov	r3, r7
   d923a:	f000 fd9d 	bl	d9d78 <__aeabi_dmul>
   d923e:	4602      	mov	r2, r0
   d9240:	460b      	mov	r3, r1
   d9242:	4620      	mov	r0, r4
   d9244:	4629      	mov	r1, r5
   d9246:	f000 fbe3 	bl	d9a10 <__aeabi_dsub>
   d924a:	4606      	mov	r6, r0
   d924c:	460f      	mov	r7, r1
   d924e:	4602      	mov	r2, r0
   d9250:	460b      	mov	r3, r1
   d9252:	4620      	mov	r0, r4
   d9254:	4629      	mov	r1, r5
   d9256:	f000 fd8f 	bl	d9d78 <__aeabi_dmul>
   d925a:	2200      	movs	r2, #0
   d925c:	e9cd 0100 	strd	r0, r1, [sp]
   d9260:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d9264:	4630      	mov	r0, r6
   d9266:	4639      	mov	r1, r7
   d9268:	f000 fbd2 	bl	d9a10 <__aeabi_dsub>
   d926c:	4602      	mov	r2, r0
   d926e:	460b      	mov	r3, r1
   d9270:	e9dd 0100 	ldrd	r0, r1, [sp]
   d9274:	f000 feaa 	bl	d9fcc <__aeabi_ddiv>
   d9278:	4642      	mov	r2, r8
   d927a:	4606      	mov	r6, r0
   d927c:	460f      	mov	r7, r1
   d927e:	464b      	mov	r3, r9
   d9280:	4620      	mov	r0, r4
   d9282:	4629      	mov	r1, r5
   d9284:	f000 fd78 	bl	d9d78 <__aeabi_dmul>
   d9288:	4642      	mov	r2, r8
   d928a:	464b      	mov	r3, r9
   d928c:	f000 fbc2 	bl	d9a14 <__adddf3>
   d9290:	4602      	mov	r2, r0
   d9292:	460b      	mov	r3, r1
   d9294:	4630      	mov	r0, r6
   d9296:	4639      	mov	r1, r7
   d9298:	f000 fbba 	bl	d9a10 <__aeabi_dsub>
   d929c:	4622      	mov	r2, r4
   d929e:	462b      	mov	r3, r5
   d92a0:	f000 fbb6 	bl	d9a10 <__aeabi_dsub>
   d92a4:	4602      	mov	r2, r0
   d92a6:	460b      	mov	r3, r1
   d92a8:	2000      	movs	r0, #0
   d92aa:	4959      	ldr	r1, [pc, #356]	; (d9410 <__ieee754_pow+0x940>)
   d92ac:	f000 fbb0 	bl	d9a10 <__aeabi_dsub>
   d92b0:	448a      	add	sl, r1
   d92b2:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
   d92b6:	4602      	mov	r2, r0
   d92b8:	460b      	mov	r3, r1
   d92ba:	f2c0 815b 	blt.w	d9574 <__ieee754_pow+0xaa4>
   d92be:	4651      	mov	r1, sl
   d92c0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d92c4:	f000 fd58 	bl	d9d78 <__aeabi_dmul>
   d92c8:	ec41 0b10 	vmov	d0, r0, r1
   d92cc:	e449      	b.n	d8b62 <__ieee754_pow+0x92>
   d92ce:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
   d92d2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
   d92d6:	ea54 030b 	orrs.w	r3, r4, fp
   d92da:	f000 8137 	beq.w	d954c <__ieee754_pow+0xa7c>
   d92de:	f1bb 0f01 	cmp.w	fp, #1
   d92e2:	f47f ac80 	bne.w	d8be6 <__ieee754_pow+0x116>
   d92e6:	4602      	mov	r2, r0
   d92e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d92ec:	ec43 2b10 	vmov	d0, r2, r3
   d92f0:	e437      	b.n	d8b62 <__ieee754_pow+0x92>
   d92f2:	4632      	mov	r2, r6
   d92f4:	463b      	mov	r3, r7
   d92f6:	4630      	mov	r0, r6
   d92f8:	4639      	mov	r1, r7
   d92fa:	f000 fd3d 	bl	d9d78 <__aeabi_dmul>
   d92fe:	ec41 0b10 	vmov	d0, r0, r1
   d9302:	e42e      	b.n	d8b62 <__ieee754_pow+0x92>
   d9304:	4b43      	ldr	r3, [pc, #268]	; (d9414 <__ieee754_pow+0x944>)
   d9306:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   d930a:	4598      	cmp	r8, r3
   d930c:	f340 8115 	ble.w	d953a <__ieee754_pow+0xa6a>
   d9310:	4b41      	ldr	r3, [pc, #260]	; (d9418 <__ieee754_pow+0x948>)
   d9312:	440b      	add	r3, r1
   d9314:	4303      	orrs	r3, r0
   d9316:	d10c      	bne.n	d9332 <__ieee754_pow+0x862>
   d9318:	4632      	mov	r2, r6
   d931a:	463b      	mov	r3, r7
   d931c:	f000 fb78 	bl	d9a10 <__aeabi_dsub>
   d9320:	4602      	mov	r2, r0
   d9322:	460b      	mov	r3, r1
   d9324:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d9328:	f000 ffa2 	bl	da270 <__aeabi_dcmple>
   d932c:	2800      	cmp	r0, #0
   d932e:	f43f aee6 	beq.w	d90fe <__ieee754_pow+0x62e>
   d9332:	a32f      	add	r3, pc, #188	; (adr r3, d93f0 <__ieee754_pow+0x920>)
   d9334:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9338:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d933c:	f000 fd1c 	bl	d9d78 <__aeabi_dmul>
   d9340:	a32b      	add	r3, pc, #172	; (adr r3, d93f0 <__ieee754_pow+0x920>)
   d9342:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9346:	f000 fd17 	bl	d9d78 <__aeabi_dmul>
   d934a:	ec41 0b10 	vmov	d0, r0, r1
   d934e:	e408      	b.n	d8b62 <__ieee754_pow+0x92>
   d9350:	ed9f 7b29 	vldr	d7, [pc, #164]	; d93f8 <__ieee754_pow+0x928>
   d9354:	ed8d 7b06 	vstr	d7, [sp, #24]
   d9358:	e676      	b.n	d9048 <__ieee754_pow+0x578>
   d935a:	f1b9 0f00 	cmp.w	r9, #0
   d935e:	f6bf ac8e 	bge.w	d8c7e <__ieee754_pow+0x1ae>
   d9362:	e9dd 3400 	ldrd	r3, r4, [sp]
   d9366:	ee00 3a10 	vmov	s0, r3
   d936a:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
   d936e:	ee00 3a90 	vmov	s1, r3
   d9372:	f7ff bbf6 	b.w	d8b62 <__ieee754_pow+0x92>
   d9376:	4602      	mov	r2, r0
   d9378:	460b      	mov	r3, r1
   d937a:	2000      	movs	r0, #0
   d937c:	4924      	ldr	r1, [pc, #144]	; (d9410 <__ieee754_pow+0x940>)
   d937e:	f000 fe25 	bl	d9fcc <__aeabi_ddiv>
   d9382:	e42d      	b.n	d8be0 <__ieee754_pow+0x110>
   d9384:	ed9f 7b1e 	vldr	d7, [pc, #120]	; d9400 <__ieee754_pow+0x930>
   d9388:	ed8d 7b08 	vstr	d7, [sp, #32]
   d938c:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d9390:	ed9f 7b03 	vldr	d7, [pc, #12]	; d93a0 <__ieee754_pow+0x8d0>
   d9394:	f04f 0800 	mov.w	r8, #0
   d9398:	ed8d 7b06 	vstr	d7, [sp, #24]
   d939c:	e4be      	b.n	d8d1c <__ieee754_pow+0x24c>
   d939e:	bf00      	nop
   d93a0:	00000000 	.word	0x00000000
   d93a4:	3ff00000 	.word	0x3ff00000
   d93a8:	652b82fe 	.word	0x652b82fe
   d93ac:	3c971547 	.word	0x3c971547
   d93b0:	00000000 	.word	0x00000000
   d93b4:	3fe62e43 	.word	0x3fe62e43
   d93b8:	fefa39ef 	.word	0xfefa39ef
   d93bc:	3fe62e42 	.word	0x3fe62e42
   d93c0:	0ca86c39 	.word	0x0ca86c39
   d93c4:	be205c61 	.word	0xbe205c61
   d93c8:	72bea4d0 	.word	0x72bea4d0
   d93cc:	3e663769 	.word	0x3e663769
   d93d0:	c5d26bf1 	.word	0xc5d26bf1
   d93d4:	3ebbbd41 	.word	0x3ebbbd41
   d93d8:	af25de2c 	.word	0xaf25de2c
   d93dc:	3f11566a 	.word	0x3f11566a
   d93e0:	16bebd93 	.word	0x16bebd93
   d93e4:	3f66c16c 	.word	0x3f66c16c
   d93e8:	5555553e 	.word	0x5555553e
   d93ec:	3fc55555 	.word	0x3fc55555
   d93f0:	c2f8f359 	.word	0xc2f8f359
   d93f4:	01a56e1f 	.word	0x01a56e1f
   d93f8:	00000000 	.word	0x00000000
   d93fc:	bff00000 	.word	0xbff00000
	...
   d9408:	408fffff 	.word	0x408fffff
   d940c:	000fffff 	.word	0x000fffff
   d9410:	3ff00000 	.word	0x3ff00000
   d9414:	4090cbff 	.word	0x4090cbff
   d9418:	3f6f3400 	.word	0x3f6f3400
   d941c:	4b6c      	ldr	r3, [pc, #432]	; (d95d0 <__ieee754_pow+0xb00>)
   d941e:	429c      	cmp	r4, r3
   d9420:	f77f ac2a 	ble.w	d8c78 <__ieee754_pow+0x1a8>
   d9424:	4b6b      	ldr	r3, [pc, #428]	; (d95d4 <__ieee754_pow+0xb04>)
   d9426:	429c      	cmp	r4, r3
   d9428:	f73f abc3 	bgt.w	d8bb2 <__ieee754_pow+0xe2>
   d942c:	2200      	movs	r2, #0
   d942e:	4b69      	ldr	r3, [pc, #420]	; (d95d4 <__ieee754_pow+0xb04>)
   d9430:	f000 faee 	bl	d9a10 <__aeabi_dsub>
   d9434:	a356      	add	r3, pc, #344	; (adr r3, d9590 <__ieee754_pow+0xac0>)
   d9436:	e9d3 2300 	ldrd	r2, r3, [r3]
   d943a:	4604      	mov	r4, r0
   d943c:	460d      	mov	r5, r1
   d943e:	f000 fc9b 	bl	d9d78 <__aeabi_dmul>
   d9442:	a355      	add	r3, pc, #340	; (adr r3, d9598 <__ieee754_pow+0xac8>)
   d9444:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9448:	4680      	mov	r8, r0
   d944a:	4689      	mov	r9, r1
   d944c:	4620      	mov	r0, r4
   d944e:	4629      	mov	r1, r5
   d9450:	f000 fc92 	bl	d9d78 <__aeabi_dmul>
   d9454:	2200      	movs	r2, #0
   d9456:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d945a:	4b5f      	ldr	r3, [pc, #380]	; (d95d8 <__ieee754_pow+0xb08>)
   d945c:	4620      	mov	r0, r4
   d945e:	4629      	mov	r1, r5
   d9460:	f000 fc8a 	bl	d9d78 <__aeabi_dmul>
   d9464:	4602      	mov	r2, r0
   d9466:	460b      	mov	r3, r1
   d9468:	a14d      	add	r1, pc, #308	; (adr r1, d95a0 <__ieee754_pow+0xad0>)
   d946a:	e9d1 0100 	ldrd	r0, r1, [r1]
   d946e:	f000 facf 	bl	d9a10 <__aeabi_dsub>
   d9472:	4622      	mov	r2, r4
   d9474:	462b      	mov	r3, r5
   d9476:	f000 fc7f 	bl	d9d78 <__aeabi_dmul>
   d947a:	4602      	mov	r2, r0
   d947c:	460b      	mov	r3, r1
   d947e:	2000      	movs	r0, #0
   d9480:	4956      	ldr	r1, [pc, #344]	; (d95dc <__ieee754_pow+0xb0c>)
   d9482:	f000 fac5 	bl	d9a10 <__aeabi_dsub>
   d9486:	4622      	mov	r2, r4
   d9488:	462b      	mov	r3, r5
   d948a:	4606      	mov	r6, r0
   d948c:	460f      	mov	r7, r1
   d948e:	4620      	mov	r0, r4
   d9490:	4629      	mov	r1, r5
   d9492:	f000 fc71 	bl	d9d78 <__aeabi_dmul>
   d9496:	4602      	mov	r2, r0
   d9498:	460b      	mov	r3, r1
   d949a:	4630      	mov	r0, r6
   d949c:	4639      	mov	r1, r7
   d949e:	f000 fc6b 	bl	d9d78 <__aeabi_dmul>
   d94a2:	a341      	add	r3, pc, #260	; (adr r3, d95a8 <__ieee754_pow+0xad8>)
   d94a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d94a8:	f000 fc66 	bl	d9d78 <__aeabi_dmul>
   d94ac:	4602      	mov	r2, r0
   d94ae:	460b      	mov	r3, r1
   d94b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d94b4:	f000 faac 	bl	d9a10 <__aeabi_dsub>
   d94b8:	4602      	mov	r2, r0
   d94ba:	460b      	mov	r3, r1
   d94bc:	4604      	mov	r4, r0
   d94be:	460d      	mov	r5, r1
   d94c0:	4640      	mov	r0, r8
   d94c2:	4649      	mov	r1, r9
   d94c4:	f000 faa6 	bl	d9a14 <__adddf3>
   d94c8:	4642      	mov	r2, r8
   d94ca:	464b      	mov	r3, r9
   d94cc:	2000      	movs	r0, #0
   d94ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d94d2:	f000 fa9d 	bl	d9a10 <__aeabi_dsub>
   d94d6:	4602      	mov	r2, r0
   d94d8:	460b      	mov	r3, r1
   d94da:	4620      	mov	r0, r4
   d94dc:	4629      	mov	r1, r5
   d94de:	f000 fa97 	bl	d9a10 <__aeabi_dsub>
   d94e2:	4680      	mov	r8, r0
   d94e4:	4689      	mov	r9, r1
   d94e6:	e5a5      	b.n	d9034 <__ieee754_pow+0x564>
   d94e8:	4632      	mov	r2, r6
   d94ea:	463b      	mov	r3, r7
   d94ec:	2000      	movs	r0, #0
   d94ee:	4939      	ldr	r1, [pc, #228]	; (d95d4 <__ieee754_pow+0xb04>)
   d94f0:	f000 fd6c 	bl	d9fcc <__aeabi_ddiv>
   d94f4:	ec41 0b10 	vmov	d0, r0, r1
   d94f8:	f7ff bb33 	b.w	d8b62 <__ieee754_pow+0x92>
   d94fc:	a32c      	add	r3, pc, #176	; (adr r3, d95b0 <__ieee754_pow+0xae0>)
   d94fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9502:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d9506:	f000 fc37 	bl	d9d78 <__aeabi_dmul>
   d950a:	a329      	add	r3, pc, #164	; (adr r3, d95b0 <__ieee754_pow+0xae0>)
   d950c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9510:	f000 fc32 	bl	d9d78 <__aeabi_dmul>
   d9514:	ec41 0b10 	vmov	d0, r0, r1
   d9518:	f7ff bb23 	b.w	d8b62 <__ieee754_pow+0x92>
   d951c:	f1be 0f00 	cmp.w	lr, #0
   d9520:	f47f ab2a 	bne.w	d8b78 <__ieee754_pow+0xa8>
   d9524:	f1c3 0314 	rsb	r3, r3, #20
   d9528:	fa48 f203 	asr.w	r2, r8, r3
   d952c:	fa02 f303 	lsl.w	r3, r2, r3
   d9530:	4598      	cmp	r8, r3
   d9532:	d027      	beq.n	d9584 <__ieee754_pow+0xab4>
   d9534:	46f3      	mov	fp, lr
   d9536:	f7ff baf7 	b.w	d8b28 <__ieee754_pow+0x58>
   d953a:	4b28      	ldr	r3, [pc, #160]	; (d95dc <__ieee754_pow+0xb0c>)
   d953c:	4598      	cmp	r8, r3
   d953e:	f73f adde 	bgt.w	d90fe <__ieee754_pow+0x62e>
   d9542:	e9dd 3400 	ldrd	r3, r4, [sp]
   d9546:	469a      	mov	sl, r3
   d9548:	469b      	mov	fp, r3
   d954a:	e607      	b.n	d915c <__ieee754_pow+0x68c>
   d954c:	4602      	mov	r2, r0
   d954e:	460b      	mov	r3, r1
   d9550:	f7ff bb89 	b.w	d8c66 <__ieee754_pow+0x196>
   d9554:	ed9f 7b18 	vldr	d7, [pc, #96]	; d95b8 <__ieee754_pow+0xae8>
   d9558:	ed8d 7b08 	vstr	d7, [sp, #32]
   d955c:	ed9f 7b18 	vldr	d7, [pc, #96]	; d95c0 <__ieee754_pow+0xaf0>
   d9560:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d9564:	ed9f 7b18 	vldr	d7, [pc, #96]	; d95c8 <__ieee754_pow+0xaf8>
   d9568:	f44f 2880 	mov.w	r8, #262144	; 0x40000
   d956c:	ed8d 7b06 	vstr	d7, [sp, #24]
   d9570:	f7ff bbd4 	b.w	d8d1c <__ieee754_pow+0x24c>
   d9574:	4658      	mov	r0, fp
   d9576:	ec43 2b10 	vmov	d0, r2, r3
   d957a:	f000 f9b1 	bl	d98e0 <scalbn>
   d957e:	ec51 0b10 	vmov	r0, r1, d0
   d9582:	e69d      	b.n	d92c0 <__ieee754_pow+0x7f0>
   d9584:	f002 0201 	and.w	r2, r2, #1
   d9588:	f1c2 0b02 	rsb	fp, r2, #2
   d958c:	f7ff bacc 	b.w	d8b28 <__ieee754_pow+0x58>
   d9590:	60000000 	.word	0x60000000
   d9594:	3ff71547 	.word	0x3ff71547
   d9598:	f85ddf44 	.word	0xf85ddf44
   d959c:	3e54ae0b 	.word	0x3e54ae0b
   d95a0:	55555555 	.word	0x55555555
   d95a4:	3fd55555 	.word	0x3fd55555
   d95a8:	652b82fe 	.word	0x652b82fe
   d95ac:	3ff71547 	.word	0x3ff71547
   d95b0:	8800759c 	.word	0x8800759c
   d95b4:	7e37e43c 	.word	0x7e37e43c
   d95b8:	40000000 	.word	0x40000000
   d95bc:	3fe2b803 	.word	0x3fe2b803
   d95c0:	43cfd006 	.word	0x43cfd006
   d95c4:	3e4cfdeb 	.word	0x3e4cfdeb
   d95c8:	00000000 	.word	0x00000000
   d95cc:	3ff80000 	.word	0x3ff80000
   d95d0:	3feffffe 	.word	0x3feffffe
   d95d4:	3ff00000 	.word	0x3ff00000
   d95d8:	3fd00000 	.word	0x3fd00000
   d95dc:	3fe00000 	.word	0x3fe00000

000d95e0 <__ieee754_sqrt>:
   d95e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d95e4:	4965      	ldr	r1, [pc, #404]	; (d977c <__ieee754_sqrt+0x19c>)
   d95e6:	ec55 4b10 	vmov	r4, r5, d0
   d95ea:	460e      	mov	r6, r1
   d95ec:	4029      	ands	r1, r5
   d95ee:	42b1      	cmp	r1, r6
   d95f0:	f000 8097 	beq.w	d9722 <__ieee754_sqrt+0x142>
   d95f4:	2d00      	cmp	r5, #0
   d95f6:	462b      	mov	r3, r5
   d95f8:	ee10 2a10 	vmov	r2, s0
   d95fc:	dd74      	ble.n	d96e8 <__ieee754_sqrt+0x108>
   d95fe:	152f      	asrs	r7, r5, #20
   d9600:	d07f      	beq.n	d9702 <__ieee754_sqrt+0x122>
   d9602:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   d9606:	f3c3 0313 	ubfx	r3, r3, #0, #20
   d960a:	07f9      	lsls	r1, r7, #31
   d960c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d9610:	d465      	bmi.n	d96de <__ieee754_sqrt+0xfe>
   d9612:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
   d9616:	2600      	movs	r6, #0
   d9618:	440b      	add	r3, r1
   d961a:	107f      	asrs	r7, r7, #1
   d961c:	0052      	lsls	r2, r2, #1
   d961e:	46b6      	mov	lr, r6
   d9620:	2016      	movs	r0, #22
   d9622:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   d9626:	eb0e 0401 	add.w	r4, lr, r1
   d962a:	429c      	cmp	r4, r3
   d962c:	ea4f 75d2 	mov.w	r5, r2, lsr #31
   d9630:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d9634:	dc03      	bgt.n	d963e <__ieee754_sqrt+0x5e>
   d9636:	1b1b      	subs	r3, r3, r4
   d9638:	eb04 0e01 	add.w	lr, r4, r1
   d963c:	440e      	add	r6, r1
   d963e:	3801      	subs	r0, #1
   d9640:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   d9644:	ea4f 0151 	mov.w	r1, r1, lsr #1
   d9648:	d1ed      	bne.n	d9626 <__ieee754_sqrt+0x46>
   d964a:	4684      	mov	ip, r0
   d964c:	2420      	movs	r4, #32
   d964e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   d9652:	e009      	b.n	d9668 <__ieee754_sqrt+0x88>
   d9654:	d020      	beq.n	d9698 <__ieee754_sqrt+0xb8>
   d9656:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
   d965a:	3c01      	subs	r4, #1
   d965c:	ea4f 0151 	mov.w	r1, r1, lsr #1
   d9660:	442b      	add	r3, r5
   d9662:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d9666:	d020      	beq.n	d96aa <__ieee754_sqrt+0xca>
   d9668:	459e      	cmp	lr, r3
   d966a:	eb01 050c 	add.w	r5, r1, ip
   d966e:	daf1      	bge.n	d9654 <__ieee754_sqrt+0x74>
   d9670:	2d00      	cmp	r5, #0
   d9672:	eb05 0c01 	add.w	ip, r5, r1
   d9676:	db09      	blt.n	d968c <__ieee754_sqrt+0xac>
   d9678:	46f0      	mov	r8, lr
   d967a:	4295      	cmp	r5, r2
   d967c:	ebce 0303 	rsb	r3, lr, r3
   d9680:	d900      	bls.n	d9684 <__ieee754_sqrt+0xa4>
   d9682:	3b01      	subs	r3, #1
   d9684:	1b52      	subs	r2, r2, r5
   d9686:	4408      	add	r0, r1
   d9688:	46c6      	mov	lr, r8
   d968a:	e7e4      	b.n	d9656 <__ieee754_sqrt+0x76>
   d968c:	f1bc 0f00 	cmp.w	ip, #0
   d9690:	dbf2      	blt.n	d9678 <__ieee754_sqrt+0x98>
   d9692:	f10e 0801 	add.w	r8, lr, #1
   d9696:	e7f0      	b.n	d967a <__ieee754_sqrt+0x9a>
   d9698:	4295      	cmp	r5, r2
   d969a:	d81e      	bhi.n	d96da <__ieee754_sqrt+0xfa>
   d969c:	2d00      	cmp	r5, #0
   d969e:	eb05 0c01 	add.w	ip, r5, r1
   d96a2:	db50      	blt.n	d9746 <__ieee754_sqrt+0x166>
   d96a4:	4698      	mov	r8, r3
   d96a6:	2300      	movs	r3, #0
   d96a8:	e7ec      	b.n	d9684 <__ieee754_sqrt+0xa4>
   d96aa:	4313      	orrs	r3, r2
   d96ac:	d004      	beq.n	d96b8 <__ieee754_sqrt+0xd8>
   d96ae:	1c42      	adds	r2, r0, #1
   d96b0:	d04d      	beq.n	d974e <__ieee754_sqrt+0x16e>
   d96b2:	f000 0301 	and.w	r3, r0, #1
   d96b6:	4418      	add	r0, r3
   d96b8:	0840      	lsrs	r0, r0, #1
   d96ba:	1071      	asrs	r1, r6, #1
   d96bc:	07f3      	lsls	r3, r6, #31
   d96be:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   d96c2:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   d96c6:	bf48      	it	mi
   d96c8:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   d96cc:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   d96d0:	4602      	mov	r2, r0
   d96d2:	ec43 2b10 	vmov	d0, r2, r3
   d96d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d96da:	4673      	mov	r3, lr
   d96dc:	e7bb      	b.n	d9656 <__ieee754_sqrt+0x76>
   d96de:	005b      	lsls	r3, r3, #1
   d96e0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
   d96e4:	0052      	lsls	r2, r2, #1
   d96e6:	e794      	b.n	d9612 <__ieee754_sqrt+0x32>
   d96e8:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
   d96ec:	4321      	orrs	r1, r4
   d96ee:	d028      	beq.n	d9742 <__ieee754_sqrt+0x162>
   d96f0:	bbad      	cbnz	r5, d975e <__ieee754_sqrt+0x17e>
   d96f2:	462f      	mov	r7, r5
   d96f4:	0ad3      	lsrs	r3, r2, #11
   d96f6:	3f15      	subs	r7, #21
   d96f8:	0552      	lsls	r2, r2, #21
   d96fa:	2b00      	cmp	r3, #0
   d96fc:	d0fa      	beq.n	d96f4 <__ieee754_sqrt+0x114>
   d96fe:	02dd      	lsls	r5, r3, #11
   d9700:	d428      	bmi.n	d9754 <__ieee754_sqrt+0x174>
   d9702:	2100      	movs	r1, #0
   d9704:	e000      	b.n	d9708 <__ieee754_sqrt+0x128>
   d9706:	4601      	mov	r1, r0
   d9708:	005b      	lsls	r3, r3, #1
   d970a:	02dc      	lsls	r4, r3, #11
   d970c:	f101 0001 	add.w	r0, r1, #1
   d9710:	d5f9      	bpl.n	d9706 <__ieee754_sqrt+0x126>
   d9712:	f1c0 0420 	rsb	r4, r0, #32
   d9716:	fa22 f404 	lsr.w	r4, r2, r4
   d971a:	4323      	orrs	r3, r4
   d971c:	1a7f      	subs	r7, r7, r1
   d971e:	4082      	lsls	r2, r0
   d9720:	e76f      	b.n	d9602 <__ieee754_sqrt+0x22>
   d9722:	ee10 2a10 	vmov	r2, s0
   d9726:	462b      	mov	r3, r5
   d9728:	ee10 0a10 	vmov	r0, s0
   d972c:	4629      	mov	r1, r5
   d972e:	f000 fb23 	bl	d9d78 <__aeabi_dmul>
   d9732:	4622      	mov	r2, r4
   d9734:	462b      	mov	r3, r5
   d9736:	f000 f96d 	bl	d9a14 <__adddf3>
   d973a:	ec41 0b10 	vmov	d0, r0, r1
   d973e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d9742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d9746:	f1bc 0f00 	cmp.w	ip, #0
   d974a:	daa2      	bge.n	d9692 <__ieee754_sqrt+0xb2>
   d974c:	e7aa      	b.n	d96a4 <__ieee754_sqrt+0xc4>
   d974e:	3601      	adds	r6, #1
   d9750:	4620      	mov	r0, r4
   d9752:	e7b2      	b.n	d96ba <__ieee754_sqrt+0xda>
   d9754:	2420      	movs	r4, #32
   d9756:	f04f 31ff 	mov.w	r1, #4294967295
   d975a:	2000      	movs	r0, #0
   d975c:	e7db      	b.n	d9716 <__ieee754_sqrt+0x136>
   d975e:	ee10 2a10 	vmov	r2, s0
   d9762:	462b      	mov	r3, r5
   d9764:	4620      	mov	r0, r4
   d9766:	4629      	mov	r1, r5
   d9768:	f000 f952 	bl	d9a10 <__aeabi_dsub>
   d976c:	4602      	mov	r2, r0
   d976e:	460b      	mov	r3, r1
   d9770:	f000 fc2c 	bl	d9fcc <__aeabi_ddiv>
   d9774:	ec41 0b10 	vmov	d0, r0, r1
   d9778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d977c:	7ff00000 	.word	0x7ff00000

000d9780 <fabs>:
   d9780:	ec53 2b10 	vmov	r2, r3, d0
   d9784:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   d9788:	ec43 2b10 	vmov	d0, r2, r3
   d978c:	4770      	bx	lr
   d978e:	bf00      	nop

000d9790 <finite>:
   d9790:	ee10 3a90 	vmov	r3, s1
   d9794:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
   d9798:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   d979c:	0fc0      	lsrs	r0, r0, #31
   d979e:	4770      	bx	lr

000d97a0 <matherr>:
   d97a0:	2000      	movs	r0, #0
   d97a2:	4770      	bx	lr
   d97a4:	0000      	movs	r0, r0
	...

000d97a8 <nan>:
   d97a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; d97b0 <nan+0x8>
   d97ac:	4770      	bx	lr
   d97ae:	bf00      	nop
   d97b0:	00000000 	.word	0x00000000
   d97b4:	7ff80000 	.word	0x7ff80000

000d97b8 <rint>:
   d97b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d97ba:	ec53 2b10 	vmov	r2, r3, d0
   d97be:	f3c3 560a 	ubfx	r6, r3, #20, #11
   d97c2:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
   d97c6:	2813      	cmp	r0, #19
   d97c8:	b083      	sub	sp, #12
   d97ca:	4619      	mov	r1, r3
   d97cc:	ea4f 74d3 	mov.w	r4, r3, lsr #31
   d97d0:	ee10 5a10 	vmov	r5, s0
   d97d4:	dc2f      	bgt.n	d9836 <rint+0x7e>
   d97d6:	2800      	cmp	r0, #0
   d97d8:	db49      	blt.n	d986e <rint+0xb6>
   d97da:	4e3f      	ldr	r6, [pc, #252]	; (d98d8 <rint+0x120>)
   d97dc:	4106      	asrs	r6, r0
   d97de:	ea03 0706 	and.w	r7, r3, r6
   d97e2:	4317      	orrs	r7, r2
   d97e4:	d02c      	beq.n	d9840 <rint+0x88>
   d97e6:	0876      	lsrs	r6, r6, #1
   d97e8:	4033      	ands	r3, r6
   d97ea:	431d      	orrs	r5, r3
   d97ec:	d00c      	beq.n	d9808 <rint+0x50>
   d97ee:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   d97f2:	2813      	cmp	r0, #19
   d97f4:	ea21 0606 	bic.w	r6, r1, r6
   d97f8:	fa43 f100 	asr.w	r1, r3, r0
   d97fc:	ea41 0106 	orr.w	r1, r1, r6
   d9800:	bf0c      	ite	eq
   d9802:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
   d9806:	2500      	movne	r5, #0
   d9808:	4834      	ldr	r0, [pc, #208]	; (d98dc <rint+0x124>)
   d980a:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
   d980e:	462a      	mov	r2, r5
   d9810:	e9d4 4500 	ldrd	r4, r5, [r4]
   d9814:	4610      	mov	r0, r2
   d9816:	462b      	mov	r3, r5
   d9818:	4622      	mov	r2, r4
   d981a:	f000 f8fb 	bl	d9a14 <__adddf3>
   d981e:	e9cd 0100 	strd	r0, r1, [sp]
   d9822:	4622      	mov	r2, r4
   d9824:	462b      	mov	r3, r5
   d9826:	e9dd 0100 	ldrd	r0, r1, [sp]
   d982a:	f000 f8f1 	bl	d9a10 <__aeabi_dsub>
   d982e:	ec41 0b10 	vmov	d0, r0, r1
   d9832:	b003      	add	sp, #12
   d9834:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9836:	2833      	cmp	r0, #51	; 0x33
   d9838:	dd06      	ble.n	d9848 <rint+0x90>
   d983a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   d983e:	d042      	beq.n	d98c6 <rint+0x10e>
   d9840:	ec43 2b10 	vmov	d0, r2, r3
   d9844:	b003      	add	sp, #12
   d9846:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9848:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   d984c:	f04f 30ff 	mov.w	r0, #4294967295
   d9850:	40f0      	lsrs	r0, r6
   d9852:	4202      	tst	r2, r0
   d9854:	d0f4      	beq.n	d9840 <rint+0x88>
   d9856:	0840      	lsrs	r0, r0, #1
   d9858:	4202      	tst	r2, r0
   d985a:	d0d5      	beq.n	d9808 <rint+0x50>
   d985c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d9860:	ea25 0000 	bic.w	r0, r5, r0
   d9864:	fa43 f606 	asr.w	r6, r3, r6
   d9868:	ea46 0500 	orr.w	r5, r6, r0
   d986c:	e7cc      	b.n	d9808 <rint+0x50>
   d986e:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   d9872:	4310      	orrs	r0, r2
   d9874:	ee10 7a10 	vmov	r7, s0
   d9878:	d0e2      	beq.n	d9840 <rint+0x88>
   d987a:	f3c3 0013 	ubfx	r0, r3, #0, #20
   d987e:	4307      	orrs	r7, r0
   d9880:	4278      	negs	r0, r7
   d9882:	4307      	orrs	r7, r0
   d9884:	4815      	ldr	r0, [pc, #84]	; (d98dc <rint+0x124>)
   d9886:	0c59      	lsrs	r1, r3, #17
   d9888:	0b3f      	lsrs	r7, r7, #12
   d988a:	0449      	lsls	r1, r1, #17
   d988c:	f407 2700 	and.w	r7, r7, #524288	; 0x80000
   d9890:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   d9894:	ea47 0301 	orr.w	r3, r7, r1
   d9898:	e9d0 6700 	ldrd	r6, r7, [r0]
   d989c:	4619      	mov	r1, r3
   d989e:	4610      	mov	r0, r2
   d98a0:	463b      	mov	r3, r7
   d98a2:	4632      	mov	r2, r6
   d98a4:	f000 f8b6 	bl	d9a14 <__adddf3>
   d98a8:	e9cd 0100 	strd	r0, r1, [sp]
   d98ac:	463b      	mov	r3, r7
   d98ae:	4632      	mov	r2, r6
   d98b0:	e9dd 0100 	ldrd	r0, r1, [sp]
   d98b4:	f000 f8ac 	bl	d9a10 <__aeabi_dsub>
   d98b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d98bc:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
   d98c0:	ec41 0b10 	vmov	d0, r0, r1
   d98c4:	e7be      	b.n	d9844 <rint+0x8c>
   d98c6:	ee10 0a10 	vmov	r0, s0
   d98ca:	4619      	mov	r1, r3
   d98cc:	f000 f8a2 	bl	d9a14 <__adddf3>
   d98d0:	ec41 0b10 	vmov	d0, r0, r1
   d98d4:	e7b6      	b.n	d9844 <rint+0x8c>
   d98d6:	bf00      	nop
   d98d8:	000fffff 	.word	0x000fffff
   d98dc:	000dc010 	.word	0x000dc010

000d98e0 <scalbn>:
   d98e0:	ec53 2b10 	vmov	r2, r3, d0
   d98e4:	b570      	push	{r4, r5, r6, lr}
   d98e6:	f3c3 540a 	ubfx	r4, r3, #20, #11
   d98ea:	4619      	mov	r1, r3
   d98ec:	4605      	mov	r5, r0
   d98ee:	bb14      	cbnz	r4, d9936 <scalbn+0x56>
   d98f0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   d98f4:	4311      	orrs	r1, r2
   d98f6:	d02a      	beq.n	d994e <scalbn+0x6e>
   d98f8:	4619      	mov	r1, r3
   d98fa:	2200      	movs	r2, #0
   d98fc:	4b38      	ldr	r3, [pc, #224]	; (d99e0 <scalbn+0x100>)
   d98fe:	4e39      	ldr	r6, [pc, #228]	; (d99e4 <scalbn+0x104>)
   d9900:	ee10 0a10 	vmov	r0, s0
   d9904:	f000 fa38 	bl	d9d78 <__aeabi_dmul>
   d9908:	42b5      	cmp	r5, r6
   d990a:	4602      	mov	r2, r0
   d990c:	460b      	mov	r3, r1
   d990e:	db1f      	blt.n	d9950 <scalbn+0x70>
   d9910:	f3c1 540a 	ubfx	r4, r1, #20, #11
   d9914:	3c36      	subs	r4, #54	; 0x36
   d9916:	442c      	add	r4, r5
   d9918:	f240 70fe 	movw	r0, #2046	; 0x7fe
   d991c:	4284      	cmp	r4, r0
   d991e:	dc1f      	bgt.n	d9960 <scalbn+0x80>
   d9920:	2c00      	cmp	r4, #0
   d9922:	dd2d      	ble.n	d9980 <scalbn+0xa0>
   d9924:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   d9928:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   d992c:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
   d9930:	ec43 2b10 	vmov	d0, r2, r3
   d9934:	bd70      	pop	{r4, r5, r6, pc}
   d9936:	f240 70ff 	movw	r0, #2047	; 0x7ff
   d993a:	4284      	cmp	r4, r0
   d993c:	d1eb      	bne.n	d9916 <scalbn+0x36>
   d993e:	ee10 0a10 	vmov	r0, s0
   d9942:	4619      	mov	r1, r3
   d9944:	f000 f866 	bl	d9a14 <__adddf3>
   d9948:	ec41 0b10 	vmov	d0, r0, r1
   d994c:	bd70      	pop	{r4, r5, r6, pc}
   d994e:	bd70      	pop	{r4, r5, r6, pc}
   d9950:	a31f      	add	r3, pc, #124	; (adr r3, d99d0 <scalbn+0xf0>)
   d9952:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9956:	f000 fa0f 	bl	d9d78 <__aeabi_dmul>
   d995a:	ec41 0b10 	vmov	d0, r0, r1
   d995e:	bd70      	pop	{r4, r5, r6, pc}
   d9960:	ec43 2b11 	vmov	d1, r2, r3
   d9964:	ed9f 0b1c 	vldr	d0, [pc, #112]	; d99d8 <scalbn+0xf8>
   d9968:	f000 f840 	bl	d99ec <copysign>
   d996c:	a31a      	add	r3, pc, #104	; (adr r3, d99d8 <scalbn+0xf8>)
   d996e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9972:	ec51 0b10 	vmov	r0, r1, d0
   d9976:	f000 f9ff 	bl	d9d78 <__aeabi_dmul>
   d997a:	ec41 0b10 	vmov	d0, r0, r1
   d997e:	bd70      	pop	{r4, r5, r6, pc}
   d9980:	f114 0f35 	cmn.w	r4, #53	; 0x35
   d9984:	da13      	bge.n	d99ae <scalbn+0xce>
   d9986:	f24c 3150 	movw	r1, #50000	; 0xc350
   d998a:	428d      	cmp	r5, r1
   d998c:	ec43 2b11 	vmov	d1, r2, r3
   d9990:	dce8      	bgt.n	d9964 <scalbn+0x84>
   d9992:	ed9f 0b0f 	vldr	d0, [pc, #60]	; d99d0 <scalbn+0xf0>
   d9996:	f000 f829 	bl	d99ec <copysign>
   d999a:	a30d      	add	r3, pc, #52	; (adr r3, d99d0 <scalbn+0xf0>)
   d999c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d99a0:	ec51 0b10 	vmov	r0, r1, d0
   d99a4:	f000 f9e8 	bl	d9d78 <__aeabi_dmul>
   d99a8:	ec41 0b10 	vmov	d0, r0, r1
   d99ac:	bd70      	pop	{r4, r5, r6, pc}
   d99ae:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   d99b2:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   d99b6:	3436      	adds	r4, #54	; 0x36
   d99b8:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
   d99bc:	4610      	mov	r0, r2
   d99be:	4619      	mov	r1, r3
   d99c0:	2200      	movs	r2, #0
   d99c2:	4b09      	ldr	r3, [pc, #36]	; (d99e8 <scalbn+0x108>)
   d99c4:	f000 f9d8 	bl	d9d78 <__aeabi_dmul>
   d99c8:	ec41 0b10 	vmov	d0, r0, r1
   d99cc:	bd70      	pop	{r4, r5, r6, pc}
   d99ce:	bf00      	nop
   d99d0:	c2f8f359 	.word	0xc2f8f359
   d99d4:	01a56e1f 	.word	0x01a56e1f
   d99d8:	8800759c 	.word	0x8800759c
   d99dc:	7e37e43c 	.word	0x7e37e43c
   d99e0:	43500000 	.word	0x43500000
   d99e4:	ffff3cb0 	.word	0xffff3cb0
   d99e8:	3c900000 	.word	0x3c900000

000d99ec <copysign>:
   d99ec:	ec53 2b10 	vmov	r2, r3, d0
   d99f0:	ee11 0a90 	vmov	r0, s3
   d99f4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   d99f8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   d99fc:	ea41 0300 	orr.w	r3, r1, r0
   d9a00:	ec43 2b10 	vmov	d0, r2, r3
   d9a04:	4770      	bx	lr
   d9a06:	bf00      	nop

000d9a08 <__aeabi_drsub>:
   d9a08:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d9a0c:	e002      	b.n	d9a14 <__adddf3>
   d9a0e:	bf00      	nop

000d9a10 <__aeabi_dsub>:
   d9a10:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d9a14 <__adddf3>:
   d9a14:	b530      	push	{r4, r5, lr}
   d9a16:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d9a1a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d9a1e:	ea94 0f05 	teq	r4, r5
   d9a22:	bf08      	it	eq
   d9a24:	ea90 0f02 	teqeq	r0, r2
   d9a28:	bf1f      	itttt	ne
   d9a2a:	ea54 0c00 	orrsne.w	ip, r4, r0
   d9a2e:	ea55 0c02 	orrsne.w	ip, r5, r2
   d9a32:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d9a36:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d9a3a:	f000 80e2 	beq.w	d9c02 <__adddf3+0x1ee>
   d9a3e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d9a42:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d9a46:	bfb8      	it	lt
   d9a48:	426d      	neglt	r5, r5
   d9a4a:	dd0c      	ble.n	d9a66 <__adddf3+0x52>
   d9a4c:	442c      	add	r4, r5
   d9a4e:	ea80 0202 	eor.w	r2, r0, r2
   d9a52:	ea81 0303 	eor.w	r3, r1, r3
   d9a56:	ea82 0000 	eor.w	r0, r2, r0
   d9a5a:	ea83 0101 	eor.w	r1, r3, r1
   d9a5e:	ea80 0202 	eor.w	r2, r0, r2
   d9a62:	ea81 0303 	eor.w	r3, r1, r3
   d9a66:	2d36      	cmp	r5, #54	; 0x36
   d9a68:	bf88      	it	hi
   d9a6a:	bd30      	pophi	{r4, r5, pc}
   d9a6c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d9a70:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d9a74:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d9a78:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d9a7c:	d002      	beq.n	d9a84 <__adddf3+0x70>
   d9a7e:	4240      	negs	r0, r0
   d9a80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9a84:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d9a88:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d9a8c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d9a90:	d002      	beq.n	d9a98 <__adddf3+0x84>
   d9a92:	4252      	negs	r2, r2
   d9a94:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d9a98:	ea94 0f05 	teq	r4, r5
   d9a9c:	f000 80a7 	beq.w	d9bee <__adddf3+0x1da>
   d9aa0:	f1a4 0401 	sub.w	r4, r4, #1
   d9aa4:	f1d5 0e20 	rsbs	lr, r5, #32
   d9aa8:	db0d      	blt.n	d9ac6 <__adddf3+0xb2>
   d9aaa:	fa02 fc0e 	lsl.w	ip, r2, lr
   d9aae:	fa22 f205 	lsr.w	r2, r2, r5
   d9ab2:	1880      	adds	r0, r0, r2
   d9ab4:	f141 0100 	adc.w	r1, r1, #0
   d9ab8:	fa03 f20e 	lsl.w	r2, r3, lr
   d9abc:	1880      	adds	r0, r0, r2
   d9abe:	fa43 f305 	asr.w	r3, r3, r5
   d9ac2:	4159      	adcs	r1, r3
   d9ac4:	e00e      	b.n	d9ae4 <__adddf3+0xd0>
   d9ac6:	f1a5 0520 	sub.w	r5, r5, #32
   d9aca:	f10e 0e20 	add.w	lr, lr, #32
   d9ace:	2a01      	cmp	r2, #1
   d9ad0:	fa03 fc0e 	lsl.w	ip, r3, lr
   d9ad4:	bf28      	it	cs
   d9ad6:	f04c 0c02 	orrcs.w	ip, ip, #2
   d9ada:	fa43 f305 	asr.w	r3, r3, r5
   d9ade:	18c0      	adds	r0, r0, r3
   d9ae0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d9ae4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9ae8:	d507      	bpl.n	d9afa <__adddf3+0xe6>
   d9aea:	f04f 0e00 	mov.w	lr, #0
   d9aee:	f1dc 0c00 	rsbs	ip, ip, #0
   d9af2:	eb7e 0000 	sbcs.w	r0, lr, r0
   d9af6:	eb6e 0101 	sbc.w	r1, lr, r1
   d9afa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d9afe:	d31b      	bcc.n	d9b38 <__adddf3+0x124>
   d9b00:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d9b04:	d30c      	bcc.n	d9b20 <__adddf3+0x10c>
   d9b06:	0849      	lsrs	r1, r1, #1
   d9b08:	ea5f 0030 	movs.w	r0, r0, rrx
   d9b0c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d9b10:	f104 0401 	add.w	r4, r4, #1
   d9b14:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d9b18:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d9b1c:	f080 809a 	bcs.w	d9c54 <__adddf3+0x240>
   d9b20:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d9b24:	bf08      	it	eq
   d9b26:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d9b2a:	f150 0000 	adcs.w	r0, r0, #0
   d9b2e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d9b32:	ea41 0105 	orr.w	r1, r1, r5
   d9b36:	bd30      	pop	{r4, r5, pc}
   d9b38:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d9b3c:	4140      	adcs	r0, r0
   d9b3e:	eb41 0101 	adc.w	r1, r1, r1
   d9b42:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9b46:	f1a4 0401 	sub.w	r4, r4, #1
   d9b4a:	d1e9      	bne.n	d9b20 <__adddf3+0x10c>
   d9b4c:	f091 0f00 	teq	r1, #0
   d9b50:	bf04      	itt	eq
   d9b52:	4601      	moveq	r1, r0
   d9b54:	2000      	moveq	r0, #0
   d9b56:	fab1 f381 	clz	r3, r1
   d9b5a:	bf08      	it	eq
   d9b5c:	3320      	addeq	r3, #32
   d9b5e:	f1a3 030b 	sub.w	r3, r3, #11
   d9b62:	f1b3 0220 	subs.w	r2, r3, #32
   d9b66:	da0c      	bge.n	d9b82 <__adddf3+0x16e>
   d9b68:	320c      	adds	r2, #12
   d9b6a:	dd08      	ble.n	d9b7e <__adddf3+0x16a>
   d9b6c:	f102 0c14 	add.w	ip, r2, #20
   d9b70:	f1c2 020c 	rsb	r2, r2, #12
   d9b74:	fa01 f00c 	lsl.w	r0, r1, ip
   d9b78:	fa21 f102 	lsr.w	r1, r1, r2
   d9b7c:	e00c      	b.n	d9b98 <__adddf3+0x184>
   d9b7e:	f102 0214 	add.w	r2, r2, #20
   d9b82:	bfd8      	it	le
   d9b84:	f1c2 0c20 	rsble	ip, r2, #32
   d9b88:	fa01 f102 	lsl.w	r1, r1, r2
   d9b8c:	fa20 fc0c 	lsr.w	ip, r0, ip
   d9b90:	bfdc      	itt	le
   d9b92:	ea41 010c 	orrle.w	r1, r1, ip
   d9b96:	4090      	lslle	r0, r2
   d9b98:	1ae4      	subs	r4, r4, r3
   d9b9a:	bfa2      	ittt	ge
   d9b9c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d9ba0:	4329      	orrge	r1, r5
   d9ba2:	bd30      	popge	{r4, r5, pc}
   d9ba4:	ea6f 0404 	mvn.w	r4, r4
   d9ba8:	3c1f      	subs	r4, #31
   d9baa:	da1c      	bge.n	d9be6 <__adddf3+0x1d2>
   d9bac:	340c      	adds	r4, #12
   d9bae:	dc0e      	bgt.n	d9bce <__adddf3+0x1ba>
   d9bb0:	f104 0414 	add.w	r4, r4, #20
   d9bb4:	f1c4 0220 	rsb	r2, r4, #32
   d9bb8:	fa20 f004 	lsr.w	r0, r0, r4
   d9bbc:	fa01 f302 	lsl.w	r3, r1, r2
   d9bc0:	ea40 0003 	orr.w	r0, r0, r3
   d9bc4:	fa21 f304 	lsr.w	r3, r1, r4
   d9bc8:	ea45 0103 	orr.w	r1, r5, r3
   d9bcc:	bd30      	pop	{r4, r5, pc}
   d9bce:	f1c4 040c 	rsb	r4, r4, #12
   d9bd2:	f1c4 0220 	rsb	r2, r4, #32
   d9bd6:	fa20 f002 	lsr.w	r0, r0, r2
   d9bda:	fa01 f304 	lsl.w	r3, r1, r4
   d9bde:	ea40 0003 	orr.w	r0, r0, r3
   d9be2:	4629      	mov	r1, r5
   d9be4:	bd30      	pop	{r4, r5, pc}
   d9be6:	fa21 f004 	lsr.w	r0, r1, r4
   d9bea:	4629      	mov	r1, r5
   d9bec:	bd30      	pop	{r4, r5, pc}
   d9bee:	f094 0f00 	teq	r4, #0
   d9bf2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d9bf6:	bf06      	itte	eq
   d9bf8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d9bfc:	3401      	addeq	r4, #1
   d9bfe:	3d01      	subne	r5, #1
   d9c00:	e74e      	b.n	d9aa0 <__adddf3+0x8c>
   d9c02:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d9c06:	bf18      	it	ne
   d9c08:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d9c0c:	d029      	beq.n	d9c62 <__adddf3+0x24e>
   d9c0e:	ea94 0f05 	teq	r4, r5
   d9c12:	bf08      	it	eq
   d9c14:	ea90 0f02 	teqeq	r0, r2
   d9c18:	d005      	beq.n	d9c26 <__adddf3+0x212>
   d9c1a:	ea54 0c00 	orrs.w	ip, r4, r0
   d9c1e:	bf04      	itt	eq
   d9c20:	4619      	moveq	r1, r3
   d9c22:	4610      	moveq	r0, r2
   d9c24:	bd30      	pop	{r4, r5, pc}
   d9c26:	ea91 0f03 	teq	r1, r3
   d9c2a:	bf1e      	ittt	ne
   d9c2c:	2100      	movne	r1, #0
   d9c2e:	2000      	movne	r0, #0
   d9c30:	bd30      	popne	{r4, r5, pc}
   d9c32:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d9c36:	d105      	bne.n	d9c44 <__adddf3+0x230>
   d9c38:	0040      	lsls	r0, r0, #1
   d9c3a:	4149      	adcs	r1, r1
   d9c3c:	bf28      	it	cs
   d9c3e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d9c42:	bd30      	pop	{r4, r5, pc}
   d9c44:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d9c48:	bf3c      	itt	cc
   d9c4a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d9c4e:	bd30      	popcc	{r4, r5, pc}
   d9c50:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9c54:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d9c58:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d9c5c:	f04f 0000 	mov.w	r0, #0
   d9c60:	bd30      	pop	{r4, r5, pc}
   d9c62:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d9c66:	bf1a      	itte	ne
   d9c68:	4619      	movne	r1, r3
   d9c6a:	4610      	movne	r0, r2
   d9c6c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d9c70:	bf1c      	itt	ne
   d9c72:	460b      	movne	r3, r1
   d9c74:	4602      	movne	r2, r0
   d9c76:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d9c7a:	bf06      	itte	eq
   d9c7c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d9c80:	ea91 0f03 	teqeq	r1, r3
   d9c84:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d9c88:	bd30      	pop	{r4, r5, pc}
   d9c8a:	bf00      	nop

000d9c8c <__aeabi_ui2d>:
   d9c8c:	f090 0f00 	teq	r0, #0
   d9c90:	bf04      	itt	eq
   d9c92:	2100      	moveq	r1, #0
   d9c94:	4770      	bxeq	lr
   d9c96:	b530      	push	{r4, r5, lr}
   d9c98:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9c9c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9ca0:	f04f 0500 	mov.w	r5, #0
   d9ca4:	f04f 0100 	mov.w	r1, #0
   d9ca8:	e750      	b.n	d9b4c <__adddf3+0x138>
   d9caa:	bf00      	nop

000d9cac <__aeabi_i2d>:
   d9cac:	f090 0f00 	teq	r0, #0
   d9cb0:	bf04      	itt	eq
   d9cb2:	2100      	moveq	r1, #0
   d9cb4:	4770      	bxeq	lr
   d9cb6:	b530      	push	{r4, r5, lr}
   d9cb8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9cbc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9cc0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d9cc4:	bf48      	it	mi
   d9cc6:	4240      	negmi	r0, r0
   d9cc8:	f04f 0100 	mov.w	r1, #0
   d9ccc:	e73e      	b.n	d9b4c <__adddf3+0x138>
   d9cce:	bf00      	nop

000d9cd0 <__aeabi_f2d>:
   d9cd0:	0042      	lsls	r2, r0, #1
   d9cd2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d9cd6:	ea4f 0131 	mov.w	r1, r1, rrx
   d9cda:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d9cde:	bf1f      	itttt	ne
   d9ce0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d9ce4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d9ce8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d9cec:	4770      	bxne	lr
   d9cee:	f092 0f00 	teq	r2, #0
   d9cf2:	bf14      	ite	ne
   d9cf4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d9cf8:	4770      	bxeq	lr
   d9cfa:	b530      	push	{r4, r5, lr}
   d9cfc:	f44f 7460 	mov.w	r4, #896	; 0x380
   d9d00:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9d04:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d9d08:	e720      	b.n	d9b4c <__adddf3+0x138>
   d9d0a:	bf00      	nop

000d9d0c <__aeabi_ul2d>:
   d9d0c:	ea50 0201 	orrs.w	r2, r0, r1
   d9d10:	bf08      	it	eq
   d9d12:	4770      	bxeq	lr
   d9d14:	b530      	push	{r4, r5, lr}
   d9d16:	f04f 0500 	mov.w	r5, #0
   d9d1a:	e00a      	b.n	d9d32 <__aeabi_l2d+0x16>

000d9d1c <__aeabi_l2d>:
   d9d1c:	ea50 0201 	orrs.w	r2, r0, r1
   d9d20:	bf08      	it	eq
   d9d22:	4770      	bxeq	lr
   d9d24:	b530      	push	{r4, r5, lr}
   d9d26:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d9d2a:	d502      	bpl.n	d9d32 <__aeabi_l2d+0x16>
   d9d2c:	4240      	negs	r0, r0
   d9d2e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9d32:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9d36:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9d3a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d9d3e:	f43f aedc 	beq.w	d9afa <__adddf3+0xe6>
   d9d42:	f04f 0203 	mov.w	r2, #3
   d9d46:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d9d4a:	bf18      	it	ne
   d9d4c:	3203      	addne	r2, #3
   d9d4e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d9d52:	bf18      	it	ne
   d9d54:	3203      	addne	r2, #3
   d9d56:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d9d5a:	f1c2 0320 	rsb	r3, r2, #32
   d9d5e:	fa00 fc03 	lsl.w	ip, r0, r3
   d9d62:	fa20 f002 	lsr.w	r0, r0, r2
   d9d66:	fa01 fe03 	lsl.w	lr, r1, r3
   d9d6a:	ea40 000e 	orr.w	r0, r0, lr
   d9d6e:	fa21 f102 	lsr.w	r1, r1, r2
   d9d72:	4414      	add	r4, r2
   d9d74:	e6c1      	b.n	d9afa <__adddf3+0xe6>
   d9d76:	bf00      	nop

000d9d78 <__aeabi_dmul>:
   d9d78:	b570      	push	{r4, r5, r6, lr}
   d9d7a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d9d7e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d9d82:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d9d86:	bf1d      	ittte	ne
   d9d88:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d9d8c:	ea94 0f0c 	teqne	r4, ip
   d9d90:	ea95 0f0c 	teqne	r5, ip
   d9d94:	f000 f8de 	bleq	d9f54 <__aeabi_dmul+0x1dc>
   d9d98:	442c      	add	r4, r5
   d9d9a:	ea81 0603 	eor.w	r6, r1, r3
   d9d9e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d9da2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d9da6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d9daa:	bf18      	it	ne
   d9dac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d9db0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9db4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d9db8:	d038      	beq.n	d9e2c <__aeabi_dmul+0xb4>
   d9dba:	fba0 ce02 	umull	ip, lr, r0, r2
   d9dbe:	f04f 0500 	mov.w	r5, #0
   d9dc2:	fbe1 e502 	umlal	lr, r5, r1, r2
   d9dc6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d9dca:	fbe0 e503 	umlal	lr, r5, r0, r3
   d9dce:	f04f 0600 	mov.w	r6, #0
   d9dd2:	fbe1 5603 	umlal	r5, r6, r1, r3
   d9dd6:	f09c 0f00 	teq	ip, #0
   d9dda:	bf18      	it	ne
   d9ddc:	f04e 0e01 	orrne.w	lr, lr, #1
   d9de0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d9de4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d9de8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d9dec:	d204      	bcs.n	d9df8 <__aeabi_dmul+0x80>
   d9dee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d9df2:	416d      	adcs	r5, r5
   d9df4:	eb46 0606 	adc.w	r6, r6, r6
   d9df8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d9dfc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d9e00:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d9e04:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d9e08:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d9e0c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d9e10:	bf88      	it	hi
   d9e12:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d9e16:	d81e      	bhi.n	d9e56 <__aeabi_dmul+0xde>
   d9e18:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d9e1c:	bf08      	it	eq
   d9e1e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d9e22:	f150 0000 	adcs.w	r0, r0, #0
   d9e26:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d9e2a:	bd70      	pop	{r4, r5, r6, pc}
   d9e2c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d9e30:	ea46 0101 	orr.w	r1, r6, r1
   d9e34:	ea40 0002 	orr.w	r0, r0, r2
   d9e38:	ea81 0103 	eor.w	r1, r1, r3
   d9e3c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d9e40:	bfc2      	ittt	gt
   d9e42:	ebd4 050c 	rsbsgt	r5, r4, ip
   d9e46:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d9e4a:	bd70      	popgt	{r4, r5, r6, pc}
   d9e4c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9e50:	f04f 0e00 	mov.w	lr, #0
   d9e54:	3c01      	subs	r4, #1
   d9e56:	f300 80ab 	bgt.w	d9fb0 <__aeabi_dmul+0x238>
   d9e5a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d9e5e:	bfde      	ittt	le
   d9e60:	2000      	movle	r0, #0
   d9e62:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d9e66:	bd70      	pople	{r4, r5, r6, pc}
   d9e68:	f1c4 0400 	rsb	r4, r4, #0
   d9e6c:	3c20      	subs	r4, #32
   d9e6e:	da35      	bge.n	d9edc <__aeabi_dmul+0x164>
   d9e70:	340c      	adds	r4, #12
   d9e72:	dc1b      	bgt.n	d9eac <__aeabi_dmul+0x134>
   d9e74:	f104 0414 	add.w	r4, r4, #20
   d9e78:	f1c4 0520 	rsb	r5, r4, #32
   d9e7c:	fa00 f305 	lsl.w	r3, r0, r5
   d9e80:	fa20 f004 	lsr.w	r0, r0, r4
   d9e84:	fa01 f205 	lsl.w	r2, r1, r5
   d9e88:	ea40 0002 	orr.w	r0, r0, r2
   d9e8c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d9e90:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d9e94:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d9e98:	fa21 f604 	lsr.w	r6, r1, r4
   d9e9c:	eb42 0106 	adc.w	r1, r2, r6
   d9ea0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9ea4:	bf08      	it	eq
   d9ea6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9eaa:	bd70      	pop	{r4, r5, r6, pc}
   d9eac:	f1c4 040c 	rsb	r4, r4, #12
   d9eb0:	f1c4 0520 	rsb	r5, r4, #32
   d9eb4:	fa00 f304 	lsl.w	r3, r0, r4
   d9eb8:	fa20 f005 	lsr.w	r0, r0, r5
   d9ebc:	fa01 f204 	lsl.w	r2, r1, r4
   d9ec0:	ea40 0002 	orr.w	r0, r0, r2
   d9ec4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9ec8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d9ecc:	f141 0100 	adc.w	r1, r1, #0
   d9ed0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9ed4:	bf08      	it	eq
   d9ed6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9eda:	bd70      	pop	{r4, r5, r6, pc}
   d9edc:	f1c4 0520 	rsb	r5, r4, #32
   d9ee0:	fa00 f205 	lsl.w	r2, r0, r5
   d9ee4:	ea4e 0e02 	orr.w	lr, lr, r2
   d9ee8:	fa20 f304 	lsr.w	r3, r0, r4
   d9eec:	fa01 f205 	lsl.w	r2, r1, r5
   d9ef0:	ea43 0302 	orr.w	r3, r3, r2
   d9ef4:	fa21 f004 	lsr.w	r0, r1, r4
   d9ef8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9efc:	fa21 f204 	lsr.w	r2, r1, r4
   d9f00:	ea20 0002 	bic.w	r0, r0, r2
   d9f04:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d9f08:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9f0c:	bf08      	it	eq
   d9f0e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9f12:	bd70      	pop	{r4, r5, r6, pc}
   d9f14:	f094 0f00 	teq	r4, #0
   d9f18:	d10f      	bne.n	d9f3a <__aeabi_dmul+0x1c2>
   d9f1a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d9f1e:	0040      	lsls	r0, r0, #1
   d9f20:	eb41 0101 	adc.w	r1, r1, r1
   d9f24:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9f28:	bf08      	it	eq
   d9f2a:	3c01      	subeq	r4, #1
   d9f2c:	d0f7      	beq.n	d9f1e <__aeabi_dmul+0x1a6>
   d9f2e:	ea41 0106 	orr.w	r1, r1, r6
   d9f32:	f095 0f00 	teq	r5, #0
   d9f36:	bf18      	it	ne
   d9f38:	4770      	bxne	lr
   d9f3a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d9f3e:	0052      	lsls	r2, r2, #1
   d9f40:	eb43 0303 	adc.w	r3, r3, r3
   d9f44:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d9f48:	bf08      	it	eq
   d9f4a:	3d01      	subeq	r5, #1
   d9f4c:	d0f7      	beq.n	d9f3e <__aeabi_dmul+0x1c6>
   d9f4e:	ea43 0306 	orr.w	r3, r3, r6
   d9f52:	4770      	bx	lr
   d9f54:	ea94 0f0c 	teq	r4, ip
   d9f58:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d9f5c:	bf18      	it	ne
   d9f5e:	ea95 0f0c 	teqne	r5, ip
   d9f62:	d00c      	beq.n	d9f7e <__aeabi_dmul+0x206>
   d9f64:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9f68:	bf18      	it	ne
   d9f6a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9f6e:	d1d1      	bne.n	d9f14 <__aeabi_dmul+0x19c>
   d9f70:	ea81 0103 	eor.w	r1, r1, r3
   d9f74:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9f78:	f04f 0000 	mov.w	r0, #0
   d9f7c:	bd70      	pop	{r4, r5, r6, pc}
   d9f7e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9f82:	bf06      	itte	eq
   d9f84:	4610      	moveq	r0, r2
   d9f86:	4619      	moveq	r1, r3
   d9f88:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9f8c:	d019      	beq.n	d9fc2 <__aeabi_dmul+0x24a>
   d9f8e:	ea94 0f0c 	teq	r4, ip
   d9f92:	d102      	bne.n	d9f9a <__aeabi_dmul+0x222>
   d9f94:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d9f98:	d113      	bne.n	d9fc2 <__aeabi_dmul+0x24a>
   d9f9a:	ea95 0f0c 	teq	r5, ip
   d9f9e:	d105      	bne.n	d9fac <__aeabi_dmul+0x234>
   d9fa0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d9fa4:	bf1c      	itt	ne
   d9fa6:	4610      	movne	r0, r2
   d9fa8:	4619      	movne	r1, r3
   d9faa:	d10a      	bne.n	d9fc2 <__aeabi_dmul+0x24a>
   d9fac:	ea81 0103 	eor.w	r1, r1, r3
   d9fb0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9fb4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d9fb8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d9fbc:	f04f 0000 	mov.w	r0, #0
   d9fc0:	bd70      	pop	{r4, r5, r6, pc}
   d9fc2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d9fc6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d9fca:	bd70      	pop	{r4, r5, r6, pc}

000d9fcc <__aeabi_ddiv>:
   d9fcc:	b570      	push	{r4, r5, r6, lr}
   d9fce:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d9fd2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d9fd6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d9fda:	bf1d      	ittte	ne
   d9fdc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d9fe0:	ea94 0f0c 	teqne	r4, ip
   d9fe4:	ea95 0f0c 	teqne	r5, ip
   d9fe8:	f000 f8a7 	bleq	da13a <__aeabi_ddiv+0x16e>
   d9fec:	eba4 0405 	sub.w	r4, r4, r5
   d9ff0:	ea81 0e03 	eor.w	lr, r1, r3
   d9ff4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d9ff8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d9ffc:	f000 8088 	beq.w	da110 <__aeabi_ddiv+0x144>
   da000:	ea4f 3303 	mov.w	r3, r3, lsl #12
   da004:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   da008:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   da00c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   da010:	ea4f 2202 	mov.w	r2, r2, lsl #8
   da014:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   da018:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   da01c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   da020:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   da024:	429d      	cmp	r5, r3
   da026:	bf08      	it	eq
   da028:	4296      	cmpeq	r6, r2
   da02a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   da02e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   da032:	d202      	bcs.n	da03a <__aeabi_ddiv+0x6e>
   da034:	085b      	lsrs	r3, r3, #1
   da036:	ea4f 0232 	mov.w	r2, r2, rrx
   da03a:	1ab6      	subs	r6, r6, r2
   da03c:	eb65 0503 	sbc.w	r5, r5, r3
   da040:	085b      	lsrs	r3, r3, #1
   da042:	ea4f 0232 	mov.w	r2, r2, rrx
   da046:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   da04a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   da04e:	ebb6 0e02 	subs.w	lr, r6, r2
   da052:	eb75 0e03 	sbcs.w	lr, r5, r3
   da056:	bf22      	ittt	cs
   da058:	1ab6      	subcs	r6, r6, r2
   da05a:	4675      	movcs	r5, lr
   da05c:	ea40 000c 	orrcs.w	r0, r0, ip
   da060:	085b      	lsrs	r3, r3, #1
   da062:	ea4f 0232 	mov.w	r2, r2, rrx
   da066:	ebb6 0e02 	subs.w	lr, r6, r2
   da06a:	eb75 0e03 	sbcs.w	lr, r5, r3
   da06e:	bf22      	ittt	cs
   da070:	1ab6      	subcs	r6, r6, r2
   da072:	4675      	movcs	r5, lr
   da074:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   da078:	085b      	lsrs	r3, r3, #1
   da07a:	ea4f 0232 	mov.w	r2, r2, rrx
   da07e:	ebb6 0e02 	subs.w	lr, r6, r2
   da082:	eb75 0e03 	sbcs.w	lr, r5, r3
   da086:	bf22      	ittt	cs
   da088:	1ab6      	subcs	r6, r6, r2
   da08a:	4675      	movcs	r5, lr
   da08c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   da090:	085b      	lsrs	r3, r3, #1
   da092:	ea4f 0232 	mov.w	r2, r2, rrx
   da096:	ebb6 0e02 	subs.w	lr, r6, r2
   da09a:	eb75 0e03 	sbcs.w	lr, r5, r3
   da09e:	bf22      	ittt	cs
   da0a0:	1ab6      	subcs	r6, r6, r2
   da0a2:	4675      	movcs	r5, lr
   da0a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   da0a8:	ea55 0e06 	orrs.w	lr, r5, r6
   da0ac:	d018      	beq.n	da0e0 <__aeabi_ddiv+0x114>
   da0ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
   da0b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   da0b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   da0ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   da0be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   da0c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   da0c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   da0ca:	d1c0      	bne.n	da04e <__aeabi_ddiv+0x82>
   da0cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   da0d0:	d10b      	bne.n	da0ea <__aeabi_ddiv+0x11e>
   da0d2:	ea41 0100 	orr.w	r1, r1, r0
   da0d6:	f04f 0000 	mov.w	r0, #0
   da0da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   da0de:	e7b6      	b.n	da04e <__aeabi_ddiv+0x82>
   da0e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   da0e4:	bf04      	itt	eq
   da0e6:	4301      	orreq	r1, r0
   da0e8:	2000      	moveq	r0, #0
   da0ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   da0ee:	bf88      	it	hi
   da0f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   da0f4:	f63f aeaf 	bhi.w	d9e56 <__aeabi_dmul+0xde>
   da0f8:	ebb5 0c03 	subs.w	ip, r5, r3
   da0fc:	bf04      	itt	eq
   da0fe:	ebb6 0c02 	subseq.w	ip, r6, r2
   da102:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   da106:	f150 0000 	adcs.w	r0, r0, #0
   da10a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   da10e:	bd70      	pop	{r4, r5, r6, pc}
   da110:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   da114:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   da118:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   da11c:	bfc2      	ittt	gt
   da11e:	ebd4 050c 	rsbsgt	r5, r4, ip
   da122:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   da126:	bd70      	popgt	{r4, r5, r6, pc}
   da128:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da12c:	f04f 0e00 	mov.w	lr, #0
   da130:	3c01      	subs	r4, #1
   da132:	e690      	b.n	d9e56 <__aeabi_dmul+0xde>
   da134:	ea45 0e06 	orr.w	lr, r5, r6
   da138:	e68d      	b.n	d9e56 <__aeabi_dmul+0xde>
   da13a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   da13e:	ea94 0f0c 	teq	r4, ip
   da142:	bf08      	it	eq
   da144:	ea95 0f0c 	teqeq	r5, ip
   da148:	f43f af3b 	beq.w	d9fc2 <__aeabi_dmul+0x24a>
   da14c:	ea94 0f0c 	teq	r4, ip
   da150:	d10a      	bne.n	da168 <__aeabi_ddiv+0x19c>
   da152:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   da156:	f47f af34 	bne.w	d9fc2 <__aeabi_dmul+0x24a>
   da15a:	ea95 0f0c 	teq	r5, ip
   da15e:	f47f af25 	bne.w	d9fac <__aeabi_dmul+0x234>
   da162:	4610      	mov	r0, r2
   da164:	4619      	mov	r1, r3
   da166:	e72c      	b.n	d9fc2 <__aeabi_dmul+0x24a>
   da168:	ea95 0f0c 	teq	r5, ip
   da16c:	d106      	bne.n	da17c <__aeabi_ddiv+0x1b0>
   da16e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   da172:	f43f aefd 	beq.w	d9f70 <__aeabi_dmul+0x1f8>
   da176:	4610      	mov	r0, r2
   da178:	4619      	mov	r1, r3
   da17a:	e722      	b.n	d9fc2 <__aeabi_dmul+0x24a>
   da17c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   da180:	bf18      	it	ne
   da182:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   da186:	f47f aec5 	bne.w	d9f14 <__aeabi_dmul+0x19c>
   da18a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   da18e:	f47f af0d 	bne.w	d9fac <__aeabi_dmul+0x234>
   da192:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   da196:	f47f aeeb 	bne.w	d9f70 <__aeabi_dmul+0x1f8>
   da19a:	e712      	b.n	d9fc2 <__aeabi_dmul+0x24a>

000da19c <__gedf2>:
   da19c:	f04f 3cff 	mov.w	ip, #4294967295
   da1a0:	e006      	b.n	da1b0 <__cmpdf2+0x4>
   da1a2:	bf00      	nop

000da1a4 <__ledf2>:
   da1a4:	f04f 0c01 	mov.w	ip, #1
   da1a8:	e002      	b.n	da1b0 <__cmpdf2+0x4>
   da1aa:	bf00      	nop

000da1ac <__cmpdf2>:
   da1ac:	f04f 0c01 	mov.w	ip, #1
   da1b0:	f84d cd04 	str.w	ip, [sp, #-4]!
   da1b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   da1b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   da1bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   da1c0:	bf18      	it	ne
   da1c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   da1c6:	d01b      	beq.n	da200 <__cmpdf2+0x54>
   da1c8:	b001      	add	sp, #4
   da1ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   da1ce:	bf0c      	ite	eq
   da1d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   da1d4:	ea91 0f03 	teqne	r1, r3
   da1d8:	bf02      	ittt	eq
   da1da:	ea90 0f02 	teqeq	r0, r2
   da1de:	2000      	moveq	r0, #0
   da1e0:	4770      	bxeq	lr
   da1e2:	f110 0f00 	cmn.w	r0, #0
   da1e6:	ea91 0f03 	teq	r1, r3
   da1ea:	bf58      	it	pl
   da1ec:	4299      	cmppl	r1, r3
   da1ee:	bf08      	it	eq
   da1f0:	4290      	cmpeq	r0, r2
   da1f2:	bf2c      	ite	cs
   da1f4:	17d8      	asrcs	r0, r3, #31
   da1f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   da1fa:	f040 0001 	orr.w	r0, r0, #1
   da1fe:	4770      	bx	lr
   da200:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   da204:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   da208:	d102      	bne.n	da210 <__cmpdf2+0x64>
   da20a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   da20e:	d107      	bne.n	da220 <__cmpdf2+0x74>
   da210:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   da214:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   da218:	d1d6      	bne.n	da1c8 <__cmpdf2+0x1c>
   da21a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   da21e:	d0d3      	beq.n	da1c8 <__cmpdf2+0x1c>
   da220:	f85d 0b04 	ldr.w	r0, [sp], #4
   da224:	4770      	bx	lr
   da226:	bf00      	nop

000da228 <__aeabi_cdrcmple>:
   da228:	4684      	mov	ip, r0
   da22a:	4610      	mov	r0, r2
   da22c:	4662      	mov	r2, ip
   da22e:	468c      	mov	ip, r1
   da230:	4619      	mov	r1, r3
   da232:	4663      	mov	r3, ip
   da234:	e000      	b.n	da238 <__aeabi_cdcmpeq>
   da236:	bf00      	nop

000da238 <__aeabi_cdcmpeq>:
   da238:	b501      	push	{r0, lr}
   da23a:	f7ff ffb7 	bl	da1ac <__cmpdf2>
   da23e:	2800      	cmp	r0, #0
   da240:	bf48      	it	mi
   da242:	f110 0f00 	cmnmi.w	r0, #0
   da246:	bd01      	pop	{r0, pc}

000da248 <__aeabi_dcmpeq>:
   da248:	f84d ed08 	str.w	lr, [sp, #-8]!
   da24c:	f7ff fff4 	bl	da238 <__aeabi_cdcmpeq>
   da250:	bf0c      	ite	eq
   da252:	2001      	moveq	r0, #1
   da254:	2000      	movne	r0, #0
   da256:	f85d fb08 	ldr.w	pc, [sp], #8
   da25a:	bf00      	nop

000da25c <__aeabi_dcmplt>:
   da25c:	f84d ed08 	str.w	lr, [sp, #-8]!
   da260:	f7ff ffea 	bl	da238 <__aeabi_cdcmpeq>
   da264:	bf34      	ite	cc
   da266:	2001      	movcc	r0, #1
   da268:	2000      	movcs	r0, #0
   da26a:	f85d fb08 	ldr.w	pc, [sp], #8
   da26e:	bf00      	nop

000da270 <__aeabi_dcmple>:
   da270:	f84d ed08 	str.w	lr, [sp, #-8]!
   da274:	f7ff ffe0 	bl	da238 <__aeabi_cdcmpeq>
   da278:	bf94      	ite	ls
   da27a:	2001      	movls	r0, #1
   da27c:	2000      	movhi	r0, #0
   da27e:	f85d fb08 	ldr.w	pc, [sp], #8
   da282:	bf00      	nop

000da284 <__aeabi_dcmpge>:
   da284:	f84d ed08 	str.w	lr, [sp, #-8]!
   da288:	f7ff ffce 	bl	da228 <__aeabi_cdrcmple>
   da28c:	bf94      	ite	ls
   da28e:	2001      	movls	r0, #1
   da290:	2000      	movhi	r0, #0
   da292:	f85d fb08 	ldr.w	pc, [sp], #8
   da296:	bf00      	nop

000da298 <__aeabi_dcmpgt>:
   da298:	f84d ed08 	str.w	lr, [sp, #-8]!
   da29c:	f7ff ffc4 	bl	da228 <__aeabi_cdrcmple>
   da2a0:	bf34      	ite	cc
   da2a2:	2001      	movcc	r0, #1
   da2a4:	2000      	movcs	r0, #0
   da2a6:	f85d fb08 	ldr.w	pc, [sp], #8
   da2aa:	bf00      	nop

000da2ac <__aeabi_dcmpun>:
   da2ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   da2b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   da2b4:	d102      	bne.n	da2bc <__aeabi_dcmpun+0x10>
   da2b6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   da2ba:	d10a      	bne.n	da2d2 <__aeabi_dcmpun+0x26>
   da2bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   da2c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   da2c4:	d102      	bne.n	da2cc <__aeabi_dcmpun+0x20>
   da2c6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   da2ca:	d102      	bne.n	da2d2 <__aeabi_dcmpun+0x26>
   da2cc:	f04f 0000 	mov.w	r0, #0
   da2d0:	4770      	bx	lr
   da2d2:	f04f 0001 	mov.w	r0, #1
   da2d6:	4770      	bx	lr

000da2d8 <__aeabi_d2iz>:
   da2d8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   da2dc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   da2e0:	d215      	bcs.n	da30e <__aeabi_d2iz+0x36>
   da2e2:	d511      	bpl.n	da308 <__aeabi_d2iz+0x30>
   da2e4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   da2e8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   da2ec:	d912      	bls.n	da314 <__aeabi_d2iz+0x3c>
   da2ee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   da2f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   da2f6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   da2fa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   da2fe:	fa23 f002 	lsr.w	r0, r3, r2
   da302:	bf18      	it	ne
   da304:	4240      	negne	r0, r0
   da306:	4770      	bx	lr
   da308:	f04f 0000 	mov.w	r0, #0
   da30c:	4770      	bx	lr
   da30e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   da312:	d105      	bne.n	da320 <__aeabi_d2iz+0x48>
   da314:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   da318:	bf08      	it	eq
   da31a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   da31e:	4770      	bx	lr
   da320:	f04f 0000 	mov.w	r0, #0
   da324:	4770      	bx	lr
   da326:	bf00      	nop

000da328 <__aeabi_d2uiz>:
   da328:	004a      	lsls	r2, r1, #1
   da32a:	d211      	bcs.n	da350 <__aeabi_d2uiz+0x28>
   da32c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   da330:	d211      	bcs.n	da356 <__aeabi_d2uiz+0x2e>
   da332:	d50d      	bpl.n	da350 <__aeabi_d2uiz+0x28>
   da334:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   da338:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   da33c:	d40e      	bmi.n	da35c <__aeabi_d2uiz+0x34>
   da33e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   da342:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   da346:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   da34a:	fa23 f002 	lsr.w	r0, r3, r2
   da34e:	4770      	bx	lr
   da350:	f04f 0000 	mov.w	r0, #0
   da354:	4770      	bx	lr
   da356:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   da35a:	d102      	bne.n	da362 <__aeabi_d2uiz+0x3a>
   da35c:	f04f 30ff 	mov.w	r0, #4294967295
   da360:	4770      	bx	lr
   da362:	f04f 0000 	mov.w	r0, #0
   da366:	4770      	bx	lr

000da368 <__aeabi_d2f>:
   da368:	ea4f 0241 	mov.w	r2, r1, lsl #1
   da36c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   da370:	bf24      	itt	cs
   da372:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   da376:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   da37a:	d90d      	bls.n	da398 <__aeabi_d2f+0x30>
   da37c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   da380:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   da384:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   da388:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   da38c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   da390:	bf08      	it	eq
   da392:	f020 0001 	biceq.w	r0, r0, #1
   da396:	4770      	bx	lr
   da398:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   da39c:	d121      	bne.n	da3e2 <__aeabi_d2f+0x7a>
   da39e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   da3a2:	bfbc      	itt	lt
   da3a4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   da3a8:	4770      	bxlt	lr
   da3aa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da3ae:	ea4f 5252 	mov.w	r2, r2, lsr #21
   da3b2:	f1c2 0218 	rsb	r2, r2, #24
   da3b6:	f1c2 0c20 	rsb	ip, r2, #32
   da3ba:	fa10 f30c 	lsls.w	r3, r0, ip
   da3be:	fa20 f002 	lsr.w	r0, r0, r2
   da3c2:	bf18      	it	ne
   da3c4:	f040 0001 	orrne.w	r0, r0, #1
   da3c8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   da3cc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   da3d0:	fa03 fc0c 	lsl.w	ip, r3, ip
   da3d4:	ea40 000c 	orr.w	r0, r0, ip
   da3d8:	fa23 f302 	lsr.w	r3, r3, r2
   da3dc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   da3e0:	e7cc      	b.n	da37c <__aeabi_d2f+0x14>
   da3e2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   da3e6:	d107      	bne.n	da3f8 <__aeabi_d2f+0x90>
   da3e8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   da3ec:	bf1e      	ittt	ne
   da3ee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   da3f2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   da3f6:	4770      	bxne	lr
   da3f8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   da3fc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   da400:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   da404:	4770      	bx	lr
   da406:	bf00      	nop

000da408 <__aeabi_frsub>:
   da408:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   da40c:	e002      	b.n	da414 <__addsf3>
   da40e:	bf00      	nop

000da410 <__aeabi_fsub>:
   da410:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000da414 <__addsf3>:
   da414:	0042      	lsls	r2, r0, #1
   da416:	bf1f      	itttt	ne
   da418:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   da41c:	ea92 0f03 	teqne	r2, r3
   da420:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   da424:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   da428:	d06a      	beq.n	da500 <__addsf3+0xec>
   da42a:	ea4f 6212 	mov.w	r2, r2, lsr #24
   da42e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   da432:	bfc1      	itttt	gt
   da434:	18d2      	addgt	r2, r2, r3
   da436:	4041      	eorgt	r1, r0
   da438:	4048      	eorgt	r0, r1
   da43a:	4041      	eorgt	r1, r0
   da43c:	bfb8      	it	lt
   da43e:	425b      	neglt	r3, r3
   da440:	2b19      	cmp	r3, #25
   da442:	bf88      	it	hi
   da444:	4770      	bxhi	lr
   da446:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   da44a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   da44e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   da452:	bf18      	it	ne
   da454:	4240      	negne	r0, r0
   da456:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   da45a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   da45e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   da462:	bf18      	it	ne
   da464:	4249      	negne	r1, r1
   da466:	ea92 0f03 	teq	r2, r3
   da46a:	d03f      	beq.n	da4ec <__addsf3+0xd8>
   da46c:	f1a2 0201 	sub.w	r2, r2, #1
   da470:	fa41 fc03 	asr.w	ip, r1, r3
   da474:	eb10 000c 	adds.w	r0, r0, ip
   da478:	f1c3 0320 	rsb	r3, r3, #32
   da47c:	fa01 f103 	lsl.w	r1, r1, r3
   da480:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   da484:	d502      	bpl.n	da48c <__addsf3+0x78>
   da486:	4249      	negs	r1, r1
   da488:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   da48c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   da490:	d313      	bcc.n	da4ba <__addsf3+0xa6>
   da492:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   da496:	d306      	bcc.n	da4a6 <__addsf3+0x92>
   da498:	0840      	lsrs	r0, r0, #1
   da49a:	ea4f 0131 	mov.w	r1, r1, rrx
   da49e:	f102 0201 	add.w	r2, r2, #1
   da4a2:	2afe      	cmp	r2, #254	; 0xfe
   da4a4:	d251      	bcs.n	da54a <__addsf3+0x136>
   da4a6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   da4aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   da4ae:	bf08      	it	eq
   da4b0:	f020 0001 	biceq.w	r0, r0, #1
   da4b4:	ea40 0003 	orr.w	r0, r0, r3
   da4b8:	4770      	bx	lr
   da4ba:	0049      	lsls	r1, r1, #1
   da4bc:	eb40 0000 	adc.w	r0, r0, r0
   da4c0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   da4c4:	f1a2 0201 	sub.w	r2, r2, #1
   da4c8:	d1ed      	bne.n	da4a6 <__addsf3+0x92>
   da4ca:	fab0 fc80 	clz	ip, r0
   da4ce:	f1ac 0c08 	sub.w	ip, ip, #8
   da4d2:	ebb2 020c 	subs.w	r2, r2, ip
   da4d6:	fa00 f00c 	lsl.w	r0, r0, ip
   da4da:	bfaa      	itet	ge
   da4dc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   da4e0:	4252      	neglt	r2, r2
   da4e2:	4318      	orrge	r0, r3
   da4e4:	bfbc      	itt	lt
   da4e6:	40d0      	lsrlt	r0, r2
   da4e8:	4318      	orrlt	r0, r3
   da4ea:	4770      	bx	lr
   da4ec:	f092 0f00 	teq	r2, #0
   da4f0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   da4f4:	bf06      	itte	eq
   da4f6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   da4fa:	3201      	addeq	r2, #1
   da4fc:	3b01      	subne	r3, #1
   da4fe:	e7b5      	b.n	da46c <__addsf3+0x58>
   da500:	ea4f 0341 	mov.w	r3, r1, lsl #1
   da504:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   da508:	bf18      	it	ne
   da50a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   da50e:	d021      	beq.n	da554 <__addsf3+0x140>
   da510:	ea92 0f03 	teq	r2, r3
   da514:	d004      	beq.n	da520 <__addsf3+0x10c>
   da516:	f092 0f00 	teq	r2, #0
   da51a:	bf08      	it	eq
   da51c:	4608      	moveq	r0, r1
   da51e:	4770      	bx	lr
   da520:	ea90 0f01 	teq	r0, r1
   da524:	bf1c      	itt	ne
   da526:	2000      	movne	r0, #0
   da528:	4770      	bxne	lr
   da52a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   da52e:	d104      	bne.n	da53a <__addsf3+0x126>
   da530:	0040      	lsls	r0, r0, #1
   da532:	bf28      	it	cs
   da534:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   da538:	4770      	bx	lr
   da53a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   da53e:	bf3c      	itt	cc
   da540:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   da544:	4770      	bxcc	lr
   da546:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   da54a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   da54e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   da552:	4770      	bx	lr
   da554:	ea7f 6222 	mvns.w	r2, r2, asr #24
   da558:	bf16      	itet	ne
   da55a:	4608      	movne	r0, r1
   da55c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   da560:	4601      	movne	r1, r0
   da562:	0242      	lsls	r2, r0, #9
   da564:	bf06      	itte	eq
   da566:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   da56a:	ea90 0f01 	teqeq	r0, r1
   da56e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   da572:	4770      	bx	lr

000da574 <__aeabi_ui2f>:
   da574:	f04f 0300 	mov.w	r3, #0
   da578:	e004      	b.n	da584 <__aeabi_i2f+0x8>
   da57a:	bf00      	nop

000da57c <__aeabi_i2f>:
   da57c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   da580:	bf48      	it	mi
   da582:	4240      	negmi	r0, r0
   da584:	ea5f 0c00 	movs.w	ip, r0
   da588:	bf08      	it	eq
   da58a:	4770      	bxeq	lr
   da58c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   da590:	4601      	mov	r1, r0
   da592:	f04f 0000 	mov.w	r0, #0
   da596:	e01c      	b.n	da5d2 <__aeabi_l2f+0x2a>

000da598 <__aeabi_ul2f>:
   da598:	ea50 0201 	orrs.w	r2, r0, r1
   da59c:	bf08      	it	eq
   da59e:	4770      	bxeq	lr
   da5a0:	f04f 0300 	mov.w	r3, #0
   da5a4:	e00a      	b.n	da5bc <__aeabi_l2f+0x14>
   da5a6:	bf00      	nop

000da5a8 <__aeabi_l2f>:
   da5a8:	ea50 0201 	orrs.w	r2, r0, r1
   da5ac:	bf08      	it	eq
   da5ae:	4770      	bxeq	lr
   da5b0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   da5b4:	d502      	bpl.n	da5bc <__aeabi_l2f+0x14>
   da5b6:	4240      	negs	r0, r0
   da5b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da5bc:	ea5f 0c01 	movs.w	ip, r1
   da5c0:	bf02      	ittt	eq
   da5c2:	4684      	moveq	ip, r0
   da5c4:	4601      	moveq	r1, r0
   da5c6:	2000      	moveq	r0, #0
   da5c8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   da5cc:	bf08      	it	eq
   da5ce:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   da5d2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   da5d6:	fabc f28c 	clz	r2, ip
   da5da:	3a08      	subs	r2, #8
   da5dc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   da5e0:	db10      	blt.n	da604 <__aeabi_l2f+0x5c>
   da5e2:	fa01 fc02 	lsl.w	ip, r1, r2
   da5e6:	4463      	add	r3, ip
   da5e8:	fa00 fc02 	lsl.w	ip, r0, r2
   da5ec:	f1c2 0220 	rsb	r2, r2, #32
   da5f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   da5f4:	fa20 f202 	lsr.w	r2, r0, r2
   da5f8:	eb43 0002 	adc.w	r0, r3, r2
   da5fc:	bf08      	it	eq
   da5fe:	f020 0001 	biceq.w	r0, r0, #1
   da602:	4770      	bx	lr
   da604:	f102 0220 	add.w	r2, r2, #32
   da608:	fa01 fc02 	lsl.w	ip, r1, r2
   da60c:	f1c2 0220 	rsb	r2, r2, #32
   da610:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   da614:	fa21 f202 	lsr.w	r2, r1, r2
   da618:	eb43 0002 	adc.w	r0, r3, r2
   da61c:	bf08      	it	eq
   da61e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   da622:	4770      	bx	lr

000da624 <__aeabi_ldivmod>:
   da624:	b97b      	cbnz	r3, da646 <__aeabi_ldivmod+0x22>
   da626:	b972      	cbnz	r2, da646 <__aeabi_ldivmod+0x22>
   da628:	2900      	cmp	r1, #0
   da62a:	bfbe      	ittt	lt
   da62c:	2000      	movlt	r0, #0
   da62e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   da632:	e006      	blt.n	da642 <__aeabi_ldivmod+0x1e>
   da634:	bf08      	it	eq
   da636:	2800      	cmpeq	r0, #0
   da638:	bf1c      	itt	ne
   da63a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   da63e:	f04f 30ff 	movne.w	r0, #4294967295
   da642:	f000 b9ed 	b.w	daa20 <__aeabi_idiv0>
   da646:	f1ad 0c08 	sub.w	ip, sp, #8
   da64a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   da64e:	2900      	cmp	r1, #0
   da650:	db09      	blt.n	da666 <__aeabi_ldivmod+0x42>
   da652:	2b00      	cmp	r3, #0
   da654:	db1a      	blt.n	da68c <__aeabi_ldivmod+0x68>
   da656:	f000 f871 	bl	da73c <__udivmoddi4>
   da65a:	f8dd e004 	ldr.w	lr, [sp, #4]
   da65e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   da662:	b004      	add	sp, #16
   da664:	4770      	bx	lr
   da666:	4240      	negs	r0, r0
   da668:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da66c:	2b00      	cmp	r3, #0
   da66e:	db1b      	blt.n	da6a8 <__aeabi_ldivmod+0x84>
   da670:	f000 f864 	bl	da73c <__udivmoddi4>
   da674:	f8dd e004 	ldr.w	lr, [sp, #4]
   da678:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   da67c:	b004      	add	sp, #16
   da67e:	4240      	negs	r0, r0
   da680:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da684:	4252      	negs	r2, r2
   da686:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   da68a:	4770      	bx	lr
   da68c:	4252      	negs	r2, r2
   da68e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   da692:	f000 f853 	bl	da73c <__udivmoddi4>
   da696:	f8dd e004 	ldr.w	lr, [sp, #4]
   da69a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   da69e:	b004      	add	sp, #16
   da6a0:	4240      	negs	r0, r0
   da6a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da6a6:	4770      	bx	lr
   da6a8:	4252      	negs	r2, r2
   da6aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   da6ae:	f000 f845 	bl	da73c <__udivmoddi4>
   da6b2:	f8dd e004 	ldr.w	lr, [sp, #4]
   da6b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   da6ba:	b004      	add	sp, #16
   da6bc:	4252      	negs	r2, r2
   da6be:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   da6c2:	4770      	bx	lr

000da6c4 <__aeabi_uldivmod>:
   da6c4:	b953      	cbnz	r3, da6dc <__aeabi_uldivmod+0x18>
   da6c6:	b94a      	cbnz	r2, da6dc <__aeabi_uldivmod+0x18>
   da6c8:	2900      	cmp	r1, #0
   da6ca:	bf08      	it	eq
   da6cc:	2800      	cmpeq	r0, #0
   da6ce:	bf1c      	itt	ne
   da6d0:	f04f 31ff 	movne.w	r1, #4294967295
   da6d4:	f04f 30ff 	movne.w	r0, #4294967295
   da6d8:	f000 b9a2 	b.w	daa20 <__aeabi_idiv0>
   da6dc:	f1ad 0c08 	sub.w	ip, sp, #8
   da6e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   da6e4:	f000 f82a 	bl	da73c <__udivmoddi4>
   da6e8:	f8dd e004 	ldr.w	lr, [sp, #4]
   da6ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   da6f0:	b004      	add	sp, #16
   da6f2:	4770      	bx	lr

000da6f4 <__aeabi_d2ulz>:
   da6f4:	b5d0      	push	{r4, r6, r7, lr}
   da6f6:	2200      	movs	r2, #0
   da6f8:	4b0e      	ldr	r3, [pc, #56]	; (da734 <__aeabi_d2ulz+0x40>)
   da6fa:	4606      	mov	r6, r0
   da6fc:	460f      	mov	r7, r1
   da6fe:	f7ff fb3b 	bl	d9d78 <__aeabi_dmul>
   da702:	f7ff fe11 	bl	da328 <__aeabi_d2uiz>
   da706:	4604      	mov	r4, r0
   da708:	f7ff fac0 	bl	d9c8c <__aeabi_ui2d>
   da70c:	2200      	movs	r2, #0
   da70e:	4b0a      	ldr	r3, [pc, #40]	; (da738 <__aeabi_d2ulz+0x44>)
   da710:	f7ff fb32 	bl	d9d78 <__aeabi_dmul>
   da714:	4602      	mov	r2, r0
   da716:	460b      	mov	r3, r1
   da718:	4630      	mov	r0, r6
   da71a:	4639      	mov	r1, r7
   da71c:	f7ff f978 	bl	d9a10 <__aeabi_dsub>
   da720:	f7ff fe02 	bl	da328 <__aeabi_d2uiz>
   da724:	4623      	mov	r3, r4
   da726:	2200      	movs	r2, #0
   da728:	ea42 0200 	orr.w	r2, r2, r0
   da72c:	4610      	mov	r0, r2
   da72e:	4619      	mov	r1, r3
   da730:	bdd0      	pop	{r4, r6, r7, pc}
   da732:	bf00      	nop
   da734:	3df00000 	.word	0x3df00000
   da738:	41f00000 	.word	0x41f00000

000da73c <__udivmoddi4>:
   da73c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da740:	468c      	mov	ip, r1
   da742:	460e      	mov	r6, r1
   da744:	4604      	mov	r4, r0
   da746:	9d08      	ldr	r5, [sp, #32]
   da748:	2b00      	cmp	r3, #0
   da74a:	d150      	bne.n	da7ee <__udivmoddi4+0xb2>
   da74c:	428a      	cmp	r2, r1
   da74e:	4617      	mov	r7, r2
   da750:	d96c      	bls.n	da82c <__udivmoddi4+0xf0>
   da752:	fab2 fe82 	clz	lr, r2
   da756:	f1be 0f00 	cmp.w	lr, #0
   da75a:	d00b      	beq.n	da774 <__udivmoddi4+0x38>
   da75c:	f1ce 0420 	rsb	r4, lr, #32
   da760:	fa20 f404 	lsr.w	r4, r0, r4
   da764:	fa01 f60e 	lsl.w	r6, r1, lr
   da768:	ea44 0c06 	orr.w	ip, r4, r6
   da76c:	fa02 f70e 	lsl.w	r7, r2, lr
   da770:	fa00 f40e 	lsl.w	r4, r0, lr
   da774:	ea4f 4917 	mov.w	r9, r7, lsr #16
   da778:	0c22      	lsrs	r2, r4, #16
   da77a:	fbbc f0f9 	udiv	r0, ip, r9
   da77e:	fa1f f887 	uxth.w	r8, r7
   da782:	fb09 c610 	mls	r6, r9, r0, ip
   da786:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   da78a:	fb00 f308 	mul.w	r3, r0, r8
   da78e:	42b3      	cmp	r3, r6
   da790:	d909      	bls.n	da7a6 <__udivmoddi4+0x6a>
   da792:	19f6      	adds	r6, r6, r7
   da794:	f100 32ff 	add.w	r2, r0, #4294967295
   da798:	f080 8122 	bcs.w	da9e0 <__udivmoddi4+0x2a4>
   da79c:	42b3      	cmp	r3, r6
   da79e:	f240 811f 	bls.w	da9e0 <__udivmoddi4+0x2a4>
   da7a2:	3802      	subs	r0, #2
   da7a4:	443e      	add	r6, r7
   da7a6:	1af6      	subs	r6, r6, r3
   da7a8:	b2a2      	uxth	r2, r4
   da7aa:	fbb6 f3f9 	udiv	r3, r6, r9
   da7ae:	fb09 6613 	mls	r6, r9, r3, r6
   da7b2:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   da7b6:	fb03 f808 	mul.w	r8, r3, r8
   da7ba:	45a0      	cmp	r8, r4
   da7bc:	d909      	bls.n	da7d2 <__udivmoddi4+0x96>
   da7be:	19e4      	adds	r4, r4, r7
   da7c0:	f103 32ff 	add.w	r2, r3, #4294967295
   da7c4:	f080 810a 	bcs.w	da9dc <__udivmoddi4+0x2a0>
   da7c8:	45a0      	cmp	r8, r4
   da7ca:	f240 8107 	bls.w	da9dc <__udivmoddi4+0x2a0>
   da7ce:	3b02      	subs	r3, #2
   da7d0:	443c      	add	r4, r7
   da7d2:	ebc8 0404 	rsb	r4, r8, r4
   da7d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   da7da:	2100      	movs	r1, #0
   da7dc:	2d00      	cmp	r5, #0
   da7de:	d062      	beq.n	da8a6 <__udivmoddi4+0x16a>
   da7e0:	fa24 f40e 	lsr.w	r4, r4, lr
   da7e4:	2300      	movs	r3, #0
   da7e6:	602c      	str	r4, [r5, #0]
   da7e8:	606b      	str	r3, [r5, #4]
   da7ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da7ee:	428b      	cmp	r3, r1
   da7f0:	d907      	bls.n	da802 <__udivmoddi4+0xc6>
   da7f2:	2d00      	cmp	r5, #0
   da7f4:	d055      	beq.n	da8a2 <__udivmoddi4+0x166>
   da7f6:	2100      	movs	r1, #0
   da7f8:	e885 0041 	stmia.w	r5, {r0, r6}
   da7fc:	4608      	mov	r0, r1
   da7fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da802:	fab3 f183 	clz	r1, r3
   da806:	2900      	cmp	r1, #0
   da808:	f040 8090 	bne.w	da92c <__udivmoddi4+0x1f0>
   da80c:	42b3      	cmp	r3, r6
   da80e:	d302      	bcc.n	da816 <__udivmoddi4+0xda>
   da810:	4282      	cmp	r2, r0
   da812:	f200 80f8 	bhi.w	daa06 <__udivmoddi4+0x2ca>
   da816:	1a84      	subs	r4, r0, r2
   da818:	eb66 0603 	sbc.w	r6, r6, r3
   da81c:	2001      	movs	r0, #1
   da81e:	46b4      	mov	ip, r6
   da820:	2d00      	cmp	r5, #0
   da822:	d040      	beq.n	da8a6 <__udivmoddi4+0x16a>
   da824:	e885 1010 	stmia.w	r5, {r4, ip}
   da828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da82c:	b912      	cbnz	r2, da834 <__udivmoddi4+0xf8>
   da82e:	2701      	movs	r7, #1
   da830:	fbb7 f7f2 	udiv	r7, r7, r2
   da834:	fab7 fe87 	clz	lr, r7
   da838:	f1be 0f00 	cmp.w	lr, #0
   da83c:	d135      	bne.n	da8aa <__udivmoddi4+0x16e>
   da83e:	1bf3      	subs	r3, r6, r7
   da840:	ea4f 4817 	mov.w	r8, r7, lsr #16
   da844:	fa1f fc87 	uxth.w	ip, r7
   da848:	2101      	movs	r1, #1
   da84a:	fbb3 f0f8 	udiv	r0, r3, r8
   da84e:	0c22      	lsrs	r2, r4, #16
   da850:	fb08 3610 	mls	r6, r8, r0, r3
   da854:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   da858:	fb0c f300 	mul.w	r3, ip, r0
   da85c:	42b3      	cmp	r3, r6
   da85e:	d907      	bls.n	da870 <__udivmoddi4+0x134>
   da860:	19f6      	adds	r6, r6, r7
   da862:	f100 32ff 	add.w	r2, r0, #4294967295
   da866:	d202      	bcs.n	da86e <__udivmoddi4+0x132>
   da868:	42b3      	cmp	r3, r6
   da86a:	f200 80ce 	bhi.w	daa0a <__udivmoddi4+0x2ce>
   da86e:	4610      	mov	r0, r2
   da870:	1af6      	subs	r6, r6, r3
   da872:	b2a2      	uxth	r2, r4
   da874:	fbb6 f3f8 	udiv	r3, r6, r8
   da878:	fb08 6613 	mls	r6, r8, r3, r6
   da87c:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   da880:	fb0c fc03 	mul.w	ip, ip, r3
   da884:	45a4      	cmp	ip, r4
   da886:	d907      	bls.n	da898 <__udivmoddi4+0x15c>
   da888:	19e4      	adds	r4, r4, r7
   da88a:	f103 32ff 	add.w	r2, r3, #4294967295
   da88e:	d202      	bcs.n	da896 <__udivmoddi4+0x15a>
   da890:	45a4      	cmp	ip, r4
   da892:	f200 80b5 	bhi.w	daa00 <__udivmoddi4+0x2c4>
   da896:	4613      	mov	r3, r2
   da898:	ebcc 0404 	rsb	r4, ip, r4
   da89c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   da8a0:	e79c      	b.n	da7dc <__udivmoddi4+0xa0>
   da8a2:	4629      	mov	r1, r5
   da8a4:	4628      	mov	r0, r5
   da8a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da8aa:	f1ce 0120 	rsb	r1, lr, #32
   da8ae:	fa06 f30e 	lsl.w	r3, r6, lr
   da8b2:	fa07 f70e 	lsl.w	r7, r7, lr
   da8b6:	fa20 f901 	lsr.w	r9, r0, r1
   da8ba:	ea4f 4817 	mov.w	r8, r7, lsr #16
   da8be:	40ce      	lsrs	r6, r1
   da8c0:	ea49 0903 	orr.w	r9, r9, r3
   da8c4:	fbb6 faf8 	udiv	sl, r6, r8
   da8c8:	ea4f 4419 	mov.w	r4, r9, lsr #16
   da8cc:	fb08 661a 	mls	r6, r8, sl, r6
   da8d0:	fa1f fc87 	uxth.w	ip, r7
   da8d4:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
   da8d8:	fb0a f20c 	mul.w	r2, sl, ip
   da8dc:	429a      	cmp	r2, r3
   da8de:	fa00 f40e 	lsl.w	r4, r0, lr
   da8e2:	d90a      	bls.n	da8fa <__udivmoddi4+0x1be>
   da8e4:	19db      	adds	r3, r3, r7
   da8e6:	f10a 31ff 	add.w	r1, sl, #4294967295
   da8ea:	f080 8087 	bcs.w	da9fc <__udivmoddi4+0x2c0>
   da8ee:	429a      	cmp	r2, r3
   da8f0:	f240 8084 	bls.w	da9fc <__udivmoddi4+0x2c0>
   da8f4:	f1aa 0a02 	sub.w	sl, sl, #2
   da8f8:	443b      	add	r3, r7
   da8fa:	1a9b      	subs	r3, r3, r2
   da8fc:	fa1f f989 	uxth.w	r9, r9
   da900:	fbb3 f1f8 	udiv	r1, r3, r8
   da904:	fb08 3311 	mls	r3, r8, r1, r3
   da908:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
   da90c:	fb01 f60c 	mul.w	r6, r1, ip
   da910:	429e      	cmp	r6, r3
   da912:	d907      	bls.n	da924 <__udivmoddi4+0x1e8>
   da914:	19db      	adds	r3, r3, r7
   da916:	f101 32ff 	add.w	r2, r1, #4294967295
   da91a:	d26b      	bcs.n	da9f4 <__udivmoddi4+0x2b8>
   da91c:	429e      	cmp	r6, r3
   da91e:	d969      	bls.n	da9f4 <__udivmoddi4+0x2b8>
   da920:	3902      	subs	r1, #2
   da922:	443b      	add	r3, r7
   da924:	1b9b      	subs	r3, r3, r6
   da926:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   da92a:	e78e      	b.n	da84a <__udivmoddi4+0x10e>
   da92c:	f1c1 0e20 	rsb	lr, r1, #32
   da930:	fa22 f40e 	lsr.w	r4, r2, lr
   da934:	408b      	lsls	r3, r1
   da936:	4323      	orrs	r3, r4
   da938:	fa20 f70e 	lsr.w	r7, r0, lr
   da93c:	fa06 f401 	lsl.w	r4, r6, r1
   da940:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   da944:	fa26 f60e 	lsr.w	r6, r6, lr
   da948:	433c      	orrs	r4, r7
   da94a:	fbb6 f9fc 	udiv	r9, r6, ip
   da94e:	0c27      	lsrs	r7, r4, #16
   da950:	fb0c 6619 	mls	r6, ip, r9, r6
   da954:	fa1f f883 	uxth.w	r8, r3
   da958:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   da95c:	fb09 f708 	mul.w	r7, r9, r8
   da960:	42b7      	cmp	r7, r6
   da962:	fa02 f201 	lsl.w	r2, r2, r1
   da966:	fa00 fa01 	lsl.w	sl, r0, r1
   da96a:	d908      	bls.n	da97e <__udivmoddi4+0x242>
   da96c:	18f6      	adds	r6, r6, r3
   da96e:	f109 30ff 	add.w	r0, r9, #4294967295
   da972:	d241      	bcs.n	da9f8 <__udivmoddi4+0x2bc>
   da974:	42b7      	cmp	r7, r6
   da976:	d93f      	bls.n	da9f8 <__udivmoddi4+0x2bc>
   da978:	f1a9 0902 	sub.w	r9, r9, #2
   da97c:	441e      	add	r6, r3
   da97e:	1bf6      	subs	r6, r6, r7
   da980:	b2a0      	uxth	r0, r4
   da982:	fbb6 f4fc 	udiv	r4, r6, ip
   da986:	fb0c 6614 	mls	r6, ip, r4, r6
   da98a:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
   da98e:	fb04 f808 	mul.w	r8, r4, r8
   da992:	45b8      	cmp	r8, r7
   da994:	d907      	bls.n	da9a6 <__udivmoddi4+0x26a>
   da996:	18ff      	adds	r7, r7, r3
   da998:	f104 30ff 	add.w	r0, r4, #4294967295
   da99c:	d228      	bcs.n	da9f0 <__udivmoddi4+0x2b4>
   da99e:	45b8      	cmp	r8, r7
   da9a0:	d926      	bls.n	da9f0 <__udivmoddi4+0x2b4>
   da9a2:	3c02      	subs	r4, #2
   da9a4:	441f      	add	r7, r3
   da9a6:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
   da9aa:	ebc8 0707 	rsb	r7, r8, r7
   da9ae:	fba0 8902 	umull	r8, r9, r0, r2
   da9b2:	454f      	cmp	r7, r9
   da9b4:	4644      	mov	r4, r8
   da9b6:	464e      	mov	r6, r9
   da9b8:	d314      	bcc.n	da9e4 <__udivmoddi4+0x2a8>
   da9ba:	d029      	beq.n	daa10 <__udivmoddi4+0x2d4>
   da9bc:	b365      	cbz	r5, daa18 <__udivmoddi4+0x2dc>
   da9be:	ebba 0304 	subs.w	r3, sl, r4
   da9c2:	eb67 0706 	sbc.w	r7, r7, r6
   da9c6:	fa07 fe0e 	lsl.w	lr, r7, lr
   da9ca:	40cb      	lsrs	r3, r1
   da9cc:	40cf      	lsrs	r7, r1
   da9ce:	ea4e 0303 	orr.w	r3, lr, r3
   da9d2:	e885 0088 	stmia.w	r5, {r3, r7}
   da9d6:	2100      	movs	r1, #0
   da9d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da9dc:	4613      	mov	r3, r2
   da9de:	e6f8      	b.n	da7d2 <__udivmoddi4+0x96>
   da9e0:	4610      	mov	r0, r2
   da9e2:	e6e0      	b.n	da7a6 <__udivmoddi4+0x6a>
   da9e4:	ebb8 0402 	subs.w	r4, r8, r2
   da9e8:	eb69 0603 	sbc.w	r6, r9, r3
   da9ec:	3801      	subs	r0, #1
   da9ee:	e7e5      	b.n	da9bc <__udivmoddi4+0x280>
   da9f0:	4604      	mov	r4, r0
   da9f2:	e7d8      	b.n	da9a6 <__udivmoddi4+0x26a>
   da9f4:	4611      	mov	r1, r2
   da9f6:	e795      	b.n	da924 <__udivmoddi4+0x1e8>
   da9f8:	4681      	mov	r9, r0
   da9fa:	e7c0      	b.n	da97e <__udivmoddi4+0x242>
   da9fc:	468a      	mov	sl, r1
   da9fe:	e77c      	b.n	da8fa <__udivmoddi4+0x1be>
   daa00:	3b02      	subs	r3, #2
   daa02:	443c      	add	r4, r7
   daa04:	e748      	b.n	da898 <__udivmoddi4+0x15c>
   daa06:	4608      	mov	r0, r1
   daa08:	e70a      	b.n	da820 <__udivmoddi4+0xe4>
   daa0a:	3802      	subs	r0, #2
   daa0c:	443e      	add	r6, r7
   daa0e:	e72f      	b.n	da870 <__udivmoddi4+0x134>
   daa10:	45c2      	cmp	sl, r8
   daa12:	d3e7      	bcc.n	da9e4 <__udivmoddi4+0x2a8>
   daa14:	463e      	mov	r6, r7
   daa16:	e7d1      	b.n	da9bc <__udivmoddi4+0x280>
   daa18:	4629      	mov	r1, r5
   daa1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   daa1e:	bf00      	nop

000daa20 <__aeabi_idiv0>:
   daa20:	4770      	bx	lr
   daa22:	bf00      	nop

000daa24 <asctime>:
   daa24:	4b09      	ldr	r3, [pc, #36]	; (daa4c <asctime+0x28>)
   daa26:	b570      	push	{r4, r5, r6, lr}
   daa28:	681c      	ldr	r4, [r3, #0]
   daa2a:	6c25      	ldr	r5, [r4, #64]	; 0x40
   daa2c:	4606      	mov	r6, r0
   daa2e:	b93d      	cbnz	r5, daa40 <asctime+0x1c>
   daa30:	201a      	movs	r0, #26
   daa32:	f7fb fcc9 	bl	d63c8 <malloc>
   daa36:	221a      	movs	r2, #26
   daa38:	6420      	str	r0, [r4, #64]	; 0x40
   daa3a:	4629      	mov	r1, r5
   daa3c:	f000 f972 	bl	dad24 <memset>
   daa40:	6c21      	ldr	r1, [r4, #64]	; 0x40
   daa42:	4630      	mov	r0, r6
   daa44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   daa48:	f000 b802 	b.w	daa50 <asctime_r>
   daa4c:	2003e120 	.word	0x2003e120

000daa50 <asctime_r>:
   daa50:	b510      	push	{r4, lr}
   daa52:	460c      	mov	r4, r1
   daa54:	6941      	ldr	r1, [r0, #20]
   daa56:	6903      	ldr	r3, [r0, #16]
   daa58:	6982      	ldr	r2, [r0, #24]
   daa5a:	b086      	sub	sp, #24
   daa5c:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   daa60:	9104      	str	r1, [sp, #16]
   daa62:	6801      	ldr	r1, [r0, #0]
   daa64:	9103      	str	r1, [sp, #12]
   daa66:	6841      	ldr	r1, [r0, #4]
   daa68:	9102      	str	r1, [sp, #8]
   daa6a:	6881      	ldr	r1, [r0, #8]
   daa6c:	9101      	str	r1, [sp, #4]
   daa6e:	68c1      	ldr	r1, [r0, #12]
   daa70:	9100      	str	r1, [sp, #0]
   daa72:	4907      	ldr	r1, [pc, #28]	; (daa90 <asctime_r+0x40>)
   daa74:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   daa78:	440b      	add	r3, r1
   daa7a:	4906      	ldr	r1, [pc, #24]	; (daa94 <asctime_r+0x44>)
   daa7c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   daa80:	440a      	add	r2, r1
   daa82:	4620      	mov	r0, r4
   daa84:	4904      	ldr	r1, [pc, #16]	; (daa98 <asctime_r+0x48>)
   daa86:	f7fb fcbf 	bl	d6408 <siprintf>
   daa8a:	4620      	mov	r0, r4
   daa8c:	b006      	add	sp, #24
   daa8e:	bd10      	pop	{r4, pc}
   daa90:	000dc035 	.word	0x000dc035
   daa94:	000dc020 	.word	0x000dc020
   daa98:	000dc059 	.word	0x000dc059

000daa9c <atoi>:
   daa9c:	220a      	movs	r2, #10
   daa9e:	2100      	movs	r1, #0
   daaa0:	f000 ba78 	b.w	daf94 <strtol>

000daaa4 <__cxa_atexit>:
   daaa4:	b510      	push	{r4, lr}
   daaa6:	4c05      	ldr	r4, [pc, #20]	; (daabc <__cxa_atexit+0x18>)
   daaa8:	4613      	mov	r3, r2
   daaaa:	b12c      	cbz	r4, daab8 <__cxa_atexit+0x14>
   daaac:	460a      	mov	r2, r1
   daaae:	4601      	mov	r1, r0
   daab0:	2002      	movs	r0, #2
   daab2:	f3af 8000 	nop.w
   daab6:	bd10      	pop	{r4, pc}
   daab8:	4620      	mov	r0, r4
   daaba:	bd10      	pop	{r4, pc}
   daabc:	00000000 	.word	0x00000000

000daac0 <localtime>:
   daac0:	b538      	push	{r3, r4, r5, lr}
   daac2:	4b07      	ldr	r3, [pc, #28]	; (daae0 <localtime+0x20>)
   daac4:	681c      	ldr	r4, [r3, #0]
   daac6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   daac8:	4605      	mov	r5, r0
   daaca:	b91b      	cbnz	r3, daad4 <localtime+0x14>
   daacc:	2024      	movs	r0, #36	; 0x24
   daace:	f7fb fc7b 	bl	d63c8 <malloc>
   daad2:	63e0      	str	r0, [r4, #60]	; 0x3c
   daad4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   daad6:	4628      	mov	r0, r5
   daad8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   daadc:	f000 b802 	b.w	daae4 <localtime_r>
   daae0:	2003e120 	.word	0x2003e120

000daae4 <localtime_r>:
   daae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   daae8:	460c      	mov	r4, r1
   daaea:	4680      	mov	r8, r0
   daaec:	f000 fd58 	bl	db5a0 <__gettzinfo>
   daaf0:	4621      	mov	r1, r4
   daaf2:	4607      	mov	r7, r0
   daaf4:	4640      	mov	r0, r8
   daaf6:	f000 fd57 	bl	db5a8 <gmtime_r>
   daafa:	6946      	ldr	r6, [r0, #20]
   daafc:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   dab00:	07b3      	lsls	r3, r6, #30
   dab02:	4604      	mov	r4, r0
   dab04:	d105      	bne.n	dab12 <localtime_r+0x2e>
   dab06:	2264      	movs	r2, #100	; 0x64
   dab08:	fb96 f3f2 	sdiv	r3, r6, r2
   dab0c:	fb02 6313 	mls	r3, r2, r3, r6
   dab10:	b94b      	cbnz	r3, dab26 <localtime_r+0x42>
   dab12:	f44f 75c8 	mov.w	r5, #400	; 0x190
   dab16:	fb96 f3f5 	sdiv	r3, r6, r5
   dab1a:	fb05 6513 	mls	r5, r5, r3, r6
   dab1e:	fab5 f385 	clz	r3, r5
   dab22:	095b      	lsrs	r3, r3, #5
   dab24:	e000      	b.n	dab28 <localtime_r+0x44>
   dab26:	2301      	movs	r3, #1
   dab28:	4a5f      	ldr	r2, [pc, #380]	; (daca8 <localtime_r+0x1c4>)
   dab2a:	2530      	movs	r5, #48	; 0x30
   dab2c:	fb05 2503 	mla	r5, r5, r3, r2
   dab30:	f000 fb6a 	bl	db208 <__tz_lock>
   dab34:	f000 fb6a 	bl	db20c <_tzset_unlocked>
   dab38:	4b5c      	ldr	r3, [pc, #368]	; (dacac <localtime_r+0x1c8>)
   dab3a:	681b      	ldr	r3, [r3, #0]
   dab3c:	b1f3      	cbz	r3, dab7c <localtime_r+0x98>
   dab3e:	687b      	ldr	r3, [r7, #4]
   dab40:	429e      	cmp	r6, r3
   dab42:	d105      	bne.n	dab50 <localtime_r+0x6c>
   dab44:	6839      	ldr	r1, [r7, #0]
   dab46:	f8d8 3000 	ldr.w	r3, [r8]
   dab4a:	69fa      	ldr	r2, [r7, #28]
   dab4c:	b941      	cbnz	r1, dab60 <localtime_r+0x7c>
   dab4e:	e00a      	b.n	dab66 <localtime_r+0x82>
   dab50:	4630      	mov	r0, r6
   dab52:	f000 fab1 	bl	db0b8 <__tzcalc_limits>
   dab56:	2800      	cmp	r0, #0
   dab58:	d1f4      	bne.n	dab44 <localtime_r+0x60>
   dab5a:	f04f 33ff 	mov.w	r3, #4294967295
   dab5e:	e00d      	b.n	dab7c <localtime_r+0x98>
   dab60:	4293      	cmp	r3, r2
   dab62:	db08      	blt.n	dab76 <localtime_r+0x92>
   dab64:	e001      	b.n	dab6a <localtime_r+0x86>
   dab66:	4293      	cmp	r3, r2
   dab68:	da07      	bge.n	dab7a <localtime_r+0x96>
   dab6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
   dab6c:	4293      	cmp	r3, r2
   dab6e:	bfac      	ite	ge
   dab70:	2300      	movge	r3, #0
   dab72:	2301      	movlt	r3, #1
   dab74:	e002      	b.n	dab7c <localtime_r+0x98>
   dab76:	2300      	movs	r3, #0
   dab78:	e000      	b.n	dab7c <localtime_r+0x98>
   dab7a:	2301      	movs	r3, #1
   dab7c:	6223      	str	r3, [r4, #32]
   dab7e:	6a23      	ldr	r3, [r4, #32]
   dab80:	2b01      	cmp	r3, #1
   dab82:	bf0c      	ite	eq
   dab84:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   dab86:	6a39      	ldrne	r1, [r7, #32]
   dab88:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   dab8c:	203c      	movs	r0, #60	; 0x3c
   dab8e:	fb91 f6f3 	sdiv	r6, r1, r3
   dab92:	fb03 1316 	mls	r3, r3, r6, r1
   dab96:	6861      	ldr	r1, [r4, #4]
   dab98:	fb93 f2f0 	sdiv	r2, r3, r0
   dab9c:	fb00 3012 	mls	r0, r0, r2, r3
   daba0:	6823      	ldr	r3, [r4, #0]
   daba2:	1a89      	subs	r1, r1, r2
   daba4:	68a2      	ldr	r2, [r4, #8]
   daba6:	6061      	str	r1, [r4, #4]
   daba8:	1a1b      	subs	r3, r3, r0
   dabaa:	1b92      	subs	r2, r2, r6
   dabac:	2b3b      	cmp	r3, #59	; 0x3b
   dabae:	6023      	str	r3, [r4, #0]
   dabb0:	60a2      	str	r2, [r4, #8]
   dabb2:	dd03      	ble.n	dabbc <localtime_r+0xd8>
   dabb4:	3101      	adds	r1, #1
   dabb6:	6061      	str	r1, [r4, #4]
   dabb8:	3b3c      	subs	r3, #60	; 0x3c
   dabba:	e004      	b.n	dabc6 <localtime_r+0xe2>
   dabbc:	2b00      	cmp	r3, #0
   dabbe:	da03      	bge.n	dabc8 <localtime_r+0xe4>
   dabc0:	3901      	subs	r1, #1
   dabc2:	6061      	str	r1, [r4, #4]
   dabc4:	333c      	adds	r3, #60	; 0x3c
   dabc6:	6023      	str	r3, [r4, #0]
   dabc8:	6863      	ldr	r3, [r4, #4]
   dabca:	2b3b      	cmp	r3, #59	; 0x3b
   dabcc:	dd03      	ble.n	dabd6 <localtime_r+0xf2>
   dabce:	3201      	adds	r2, #1
   dabd0:	60a2      	str	r2, [r4, #8]
   dabd2:	3b3c      	subs	r3, #60	; 0x3c
   dabd4:	e004      	b.n	dabe0 <localtime_r+0xfc>
   dabd6:	2b00      	cmp	r3, #0
   dabd8:	da03      	bge.n	dabe2 <localtime_r+0xfe>
   dabda:	3a01      	subs	r2, #1
   dabdc:	60a2      	str	r2, [r4, #8]
   dabde:	333c      	adds	r3, #60	; 0x3c
   dabe0:	6063      	str	r3, [r4, #4]
   dabe2:	68a3      	ldr	r3, [r4, #8]
   dabe4:	2b17      	cmp	r3, #23
   dabe6:	dd22      	ble.n	dac2e <localtime_r+0x14a>
   dabe8:	69e2      	ldr	r2, [r4, #28]
   dabea:	3201      	adds	r2, #1
   dabec:	61e2      	str	r2, [r4, #28]
   dabee:	69a2      	ldr	r2, [r4, #24]
   dabf0:	3201      	adds	r2, #1
   dabf2:	2a06      	cmp	r2, #6
   dabf4:	bfc8      	it	gt
   dabf6:	2200      	movgt	r2, #0
   dabf8:	61a2      	str	r2, [r4, #24]
   dabfa:	68e2      	ldr	r2, [r4, #12]
   dabfc:	3b18      	subs	r3, #24
   dabfe:	3201      	adds	r2, #1
   dac00:	60a3      	str	r3, [r4, #8]
   dac02:	6923      	ldr	r3, [r4, #16]
   dac04:	60e2      	str	r2, [r4, #12]
   dac06:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   dac0a:	428a      	cmp	r2, r1
   dac0c:	dd46      	ble.n	dac9c <localtime_r+0x1b8>
   dac0e:	3301      	adds	r3, #1
   dac10:	2b0c      	cmp	r3, #12
   dac12:	bf0c      	ite	eq
   dac14:	6963      	ldreq	r3, [r4, #20]
   dac16:	6123      	strne	r3, [r4, #16]
   dac18:	eba2 0201 	sub.w	r2, r2, r1
   dac1c:	60e2      	str	r2, [r4, #12]
   dac1e:	bf01      	itttt	eq
   dac20:	3301      	addeq	r3, #1
   dac22:	2200      	moveq	r2, #0
   dac24:	6122      	streq	r2, [r4, #16]
   dac26:	6163      	streq	r3, [r4, #20]
   dac28:	bf08      	it	eq
   dac2a:	61e2      	streq	r2, [r4, #28]
   dac2c:	e036      	b.n	dac9c <localtime_r+0x1b8>
   dac2e:	2b00      	cmp	r3, #0
   dac30:	da34      	bge.n	dac9c <localtime_r+0x1b8>
   dac32:	69e2      	ldr	r2, [r4, #28]
   dac34:	3a01      	subs	r2, #1
   dac36:	61e2      	str	r2, [r4, #28]
   dac38:	69a2      	ldr	r2, [r4, #24]
   dac3a:	3a01      	subs	r2, #1
   dac3c:	bf48      	it	mi
   dac3e:	2206      	movmi	r2, #6
   dac40:	61a2      	str	r2, [r4, #24]
   dac42:	68e2      	ldr	r2, [r4, #12]
   dac44:	3318      	adds	r3, #24
   dac46:	3a01      	subs	r2, #1
   dac48:	60e2      	str	r2, [r4, #12]
   dac4a:	60a3      	str	r3, [r4, #8]
   dac4c:	bb32      	cbnz	r2, dac9c <localtime_r+0x1b8>
   dac4e:	6923      	ldr	r3, [r4, #16]
   dac50:	3b01      	subs	r3, #1
   dac52:	d401      	bmi.n	dac58 <localtime_r+0x174>
   dac54:	6123      	str	r3, [r4, #16]
   dac56:	e01d      	b.n	dac94 <localtime_r+0x1b0>
   dac58:	230b      	movs	r3, #11
   dac5a:	6123      	str	r3, [r4, #16]
   dac5c:	6963      	ldr	r3, [r4, #20]
   dac5e:	1e5a      	subs	r2, r3, #1
   dac60:	f012 0f03 	tst.w	r2, #3
   dac64:	6162      	str	r2, [r4, #20]
   dac66:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   dac6a:	d105      	bne.n	dac78 <localtime_r+0x194>
   dac6c:	2164      	movs	r1, #100	; 0x64
   dac6e:	fb93 f2f1 	sdiv	r2, r3, r1
   dac72:	fb01 3212 	mls	r2, r1, r2, r3
   dac76:	b94a      	cbnz	r2, dac8c <localtime_r+0x1a8>
   dac78:	f44f 71c8 	mov.w	r1, #400	; 0x190
   dac7c:	fb93 f2f1 	sdiv	r2, r3, r1
   dac80:	fb01 3312 	mls	r3, r1, r2, r3
   dac84:	fab3 f383 	clz	r3, r3
   dac88:	095b      	lsrs	r3, r3, #5
   dac8a:	e000      	b.n	dac8e <localtime_r+0x1aa>
   dac8c:	2301      	movs	r3, #1
   dac8e:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   dac92:	61e3      	str	r3, [r4, #28]
   dac94:	6923      	ldr	r3, [r4, #16]
   dac96:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   dac9a:	60e3      	str	r3, [r4, #12]
   dac9c:	f000 fab5 	bl	db20a <__tz_unlock>
   daca0:	4620      	mov	r0, r4
   daca2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   daca6:	bf00      	nop
   daca8:	000dc1dc 	.word	0x000dc1dc
   dacac:	2003e7e4 	.word	0x2003e7e4

000dacb0 <ldiv>:
   dacb0:	2900      	cmp	r1, #0
   dacb2:	b510      	push	{r4, lr}
   dacb4:	fb91 f4f2 	sdiv	r4, r1, r2
   dacb8:	fb02 1314 	mls	r3, r2, r4, r1
   dacbc:	db04      	blt.n	dacc8 <ldiv+0x18>
   dacbe:	2b00      	cmp	r3, #0
   dacc0:	da07      	bge.n	dacd2 <ldiv+0x22>
   dacc2:	3401      	adds	r4, #1
   dacc4:	1a9b      	subs	r3, r3, r2
   dacc6:	e004      	b.n	dacd2 <ldiv+0x22>
   dacc8:	2b00      	cmp	r3, #0
   dacca:	bfc4      	itt	gt
   daccc:	f104 34ff 	addgt.w	r4, r4, #4294967295
   dacd0:	189b      	addgt	r3, r3, r2
   dacd2:	6004      	str	r4, [r0, #0]
   dacd4:	6043      	str	r3, [r0, #4]
   dacd6:	bd10      	pop	{r4, pc}

000dacd8 <memcpy>:
   dacd8:	b510      	push	{r4, lr}
   dacda:	1e43      	subs	r3, r0, #1
   dacdc:	440a      	add	r2, r1
   dacde:	4291      	cmp	r1, r2
   dace0:	d004      	beq.n	dacec <memcpy+0x14>
   dace2:	f811 4b01 	ldrb.w	r4, [r1], #1
   dace6:	f803 4f01 	strb.w	r4, [r3, #1]!
   dacea:	e7f8      	b.n	dacde <memcpy+0x6>
   dacec:	bd10      	pop	{r4, pc}

000dacee <memmove>:
   dacee:	4288      	cmp	r0, r1
   dacf0:	b510      	push	{r4, lr}
   dacf2:	eb01 0302 	add.w	r3, r1, r2
   dacf6:	d801      	bhi.n	dacfc <memmove+0xe>
   dacf8:	1e42      	subs	r2, r0, #1
   dacfa:	e00b      	b.n	dad14 <memmove+0x26>
   dacfc:	4298      	cmp	r0, r3
   dacfe:	d2fb      	bcs.n	dacf8 <memmove+0xa>
   dad00:	1881      	adds	r1, r0, r2
   dad02:	1ad2      	subs	r2, r2, r3
   dad04:	42d3      	cmn	r3, r2
   dad06:	d004      	beq.n	dad12 <memmove+0x24>
   dad08:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   dad0c:	f801 4d01 	strb.w	r4, [r1, #-1]!
   dad10:	e7f8      	b.n	dad04 <memmove+0x16>
   dad12:	bd10      	pop	{r4, pc}
   dad14:	4299      	cmp	r1, r3
   dad16:	d004      	beq.n	dad22 <memmove+0x34>
   dad18:	f811 4b01 	ldrb.w	r4, [r1], #1
   dad1c:	f802 4f01 	strb.w	r4, [r2, #1]!
   dad20:	e7f8      	b.n	dad14 <memmove+0x26>
   dad22:	bd10      	pop	{r4, pc}

000dad24 <memset>:
   dad24:	4402      	add	r2, r0
   dad26:	4603      	mov	r3, r0
   dad28:	4293      	cmp	r3, r2
   dad2a:	d002      	beq.n	dad32 <memset+0xe>
   dad2c:	f803 1b01 	strb.w	r1, [r3], #1
   dad30:	e7fa      	b.n	dad28 <memset+0x4>
   dad32:	4770      	bx	lr

000dad34 <srand>:
   dad34:	b538      	push	{r3, r4, r5, lr}
   dad36:	4b12      	ldr	r3, [pc, #72]	; (dad80 <srand+0x4c>)
   dad38:	681c      	ldr	r4, [r3, #0]
   dad3a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   dad3c:	4605      	mov	r5, r0
   dad3e:	b9d3      	cbnz	r3, dad76 <srand+0x42>
   dad40:	2018      	movs	r0, #24
   dad42:	f7fb fb41 	bl	d63c8 <malloc>
   dad46:	f243 330e 	movw	r3, #13070	; 0x330e
   dad4a:	63a0      	str	r0, [r4, #56]	; 0x38
   dad4c:	8003      	strh	r3, [r0, #0]
   dad4e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   dad52:	8043      	strh	r3, [r0, #2]
   dad54:	f241 2334 	movw	r3, #4660	; 0x1234
   dad58:	8083      	strh	r3, [r0, #4]
   dad5a:	f24e 636d 	movw	r3, #58989	; 0xe66d
   dad5e:	80c3      	strh	r3, [r0, #6]
   dad60:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   dad64:	8103      	strh	r3, [r0, #8]
   dad66:	2305      	movs	r3, #5
   dad68:	8143      	strh	r3, [r0, #10]
   dad6a:	230b      	movs	r3, #11
   dad6c:	8183      	strh	r3, [r0, #12]
   dad6e:	2201      	movs	r2, #1
   dad70:	2300      	movs	r3, #0
   dad72:	e9c0 2304 	strd	r2, r3, [r0, #16]
   dad76:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   dad78:	2200      	movs	r2, #0
   dad7a:	611d      	str	r5, [r3, #16]
   dad7c:	615a      	str	r2, [r3, #20]
   dad7e:	bd38      	pop	{r3, r4, r5, pc}
   dad80:	2003e120 	.word	0x2003e120

000dad84 <strcmp>:
   dad84:	f810 2b01 	ldrb.w	r2, [r0], #1
   dad88:	f811 3b01 	ldrb.w	r3, [r1], #1
   dad8c:	2a01      	cmp	r2, #1
   dad8e:	bf28      	it	cs
   dad90:	429a      	cmpcs	r2, r3
   dad92:	d0f7      	beq.n	dad84 <strcmp>
   dad94:	1ad0      	subs	r0, r2, r3
   dad96:	4770      	bx	lr

000dad98 <strcpy>:
   dad98:	4603      	mov	r3, r0
   dad9a:	f811 2b01 	ldrb.w	r2, [r1], #1
   dad9e:	f803 2b01 	strb.w	r2, [r3], #1
   dada2:	2a00      	cmp	r2, #0
   dada4:	d1f9      	bne.n	dad9a <strcpy+0x2>
   dada6:	4770      	bx	lr

000dada8 <strdup>:
   dada8:	4b02      	ldr	r3, [pc, #8]	; (dadb4 <strdup+0xc>)
   dadaa:	4601      	mov	r1, r0
   dadac:	6818      	ldr	r0, [r3, #0]
   dadae:	f000 b803 	b.w	dadb8 <_strdup_r>
   dadb2:	bf00      	nop
   dadb4:	2003e120 	.word	0x2003e120

000dadb8 <_strdup_r>:
   dadb8:	b570      	push	{r4, r5, r6, lr}
   dadba:	4606      	mov	r6, r0
   dadbc:	4608      	mov	r0, r1
   dadbe:	460c      	mov	r4, r1
   dadc0:	f000 f80d 	bl	dadde <strlen>
   dadc4:	1c45      	adds	r5, r0, #1
   dadc6:	4629      	mov	r1, r5
   dadc8:	4630      	mov	r0, r6
   dadca:	f7fb fb3d 	bl	d6448 <_malloc_r>
   dadce:	4606      	mov	r6, r0
   dadd0:	b118      	cbz	r0, dadda <_strdup_r+0x22>
   dadd2:	462a      	mov	r2, r5
   dadd4:	4621      	mov	r1, r4
   dadd6:	f7ff ff7f 	bl	dacd8 <memcpy>
   dadda:	4630      	mov	r0, r6
   daddc:	bd70      	pop	{r4, r5, r6, pc}

000dadde <strlen>:
   dadde:	4603      	mov	r3, r0
   dade0:	f813 2b01 	ldrb.w	r2, [r3], #1
   dade4:	2a00      	cmp	r2, #0
   dade6:	d1fb      	bne.n	dade0 <strlen+0x2>
   dade8:	1a18      	subs	r0, r3, r0
   dadea:	3801      	subs	r0, #1
   dadec:	4770      	bx	lr
	...

000dadf0 <strncasecmp>:
   dadf0:	4b10      	ldr	r3, [pc, #64]	; (dae34 <strncasecmp+0x44>)
   dadf2:	b570      	push	{r4, r5, r6, lr}
   dadf4:	681e      	ldr	r6, [r3, #0]
   dadf6:	440a      	add	r2, r1
   dadf8:	4291      	cmp	r1, r2
   dadfa:	d017      	beq.n	dae2c <strncasecmp+0x3c>
   dadfc:	f810 3b01 	ldrb.w	r3, [r0], #1
   dae00:	18f4      	adds	r4, r6, r3
   dae02:	7864      	ldrb	r4, [r4, #1]
   dae04:	f004 0403 	and.w	r4, r4, #3
   dae08:	2c01      	cmp	r4, #1
   dae0a:	f811 4b01 	ldrb.w	r4, [r1], #1
   dae0e:	eb06 0504 	add.w	r5, r6, r4
   dae12:	bf08      	it	eq
   dae14:	3320      	addeq	r3, #32
   dae16:	786d      	ldrb	r5, [r5, #1]
   dae18:	f005 0503 	and.w	r5, r5, #3
   dae1c:	2d01      	cmp	r5, #1
   dae1e:	bf08      	it	eq
   dae20:	3420      	addeq	r4, #32
   dae22:	1b1b      	subs	r3, r3, r4
   dae24:	d103      	bne.n	dae2e <strncasecmp+0x3e>
   dae26:	2c00      	cmp	r4, #0
   dae28:	d1e6      	bne.n	dadf8 <strncasecmp+0x8>
   dae2a:	e000      	b.n	dae2e <strncasecmp+0x3e>
   dae2c:	2300      	movs	r3, #0
   dae2e:	4618      	mov	r0, r3
   dae30:	bd70      	pop	{r4, r5, r6, pc}
   dae32:	bf00      	nop
   dae34:	2003e0bc 	.word	0x2003e0bc

000dae38 <strncmp>:
   dae38:	b530      	push	{r4, r5, lr}
   dae3a:	b182      	cbz	r2, dae5e <strncmp+0x26>
   dae3c:	1e45      	subs	r5, r0, #1
   dae3e:	3901      	subs	r1, #1
   dae40:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   dae44:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   dae48:	42a3      	cmp	r3, r4
   dae4a:	d106      	bne.n	dae5a <strncmp+0x22>
   dae4c:	43ec      	mvns	r4, r5
   dae4e:	4414      	add	r4, r2
   dae50:	42e0      	cmn	r0, r4
   dae52:	d001      	beq.n	dae58 <strncmp+0x20>
   dae54:	2b00      	cmp	r3, #0
   dae56:	d1f3      	bne.n	dae40 <strncmp+0x8>
   dae58:	461c      	mov	r4, r3
   dae5a:	1b18      	subs	r0, r3, r4
   dae5c:	bd30      	pop	{r4, r5, pc}
   dae5e:	4610      	mov	r0, r2
   dae60:	bd30      	pop	{r4, r5, pc}

000dae62 <strncpy>:
   dae62:	b510      	push	{r4, lr}
   dae64:	4603      	mov	r3, r0
   dae66:	b142      	cbz	r2, dae7a <strncpy+0x18>
   dae68:	f811 4b01 	ldrb.w	r4, [r1], #1
   dae6c:	f803 4b01 	strb.w	r4, [r3], #1
   dae70:	3a01      	subs	r2, #1
   dae72:	2c00      	cmp	r4, #0
   dae74:	d1f7      	bne.n	dae66 <strncpy+0x4>
   dae76:	441a      	add	r2, r3
   dae78:	e000      	b.n	dae7c <strncpy+0x1a>
   dae7a:	bd10      	pop	{r4, pc}
   dae7c:	4293      	cmp	r3, r2
   dae7e:	d002      	beq.n	dae86 <strncpy+0x24>
   dae80:	f803 4b01 	strb.w	r4, [r3], #1
   dae84:	e7fa      	b.n	dae7c <strncpy+0x1a>
   dae86:	bd10      	pop	{r4, pc}

000dae88 <_strtol_r>:
   dae88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dae8c:	4680      	mov	r8, r0
   dae8e:	4840      	ldr	r0, [pc, #256]	; (daf90 <_strtol_r+0x108>)
   dae90:	f8d0 9000 	ldr.w	r9, [r0]
   dae94:	460f      	mov	r7, r1
   dae96:	463d      	mov	r5, r7
   dae98:	f815 4b01 	ldrb.w	r4, [r5], #1
   dae9c:	eb09 0004 	add.w	r0, r9, r4
   daea0:	7840      	ldrb	r0, [r0, #1]
   daea2:	f000 0008 	and.w	r0, r0, #8
   daea6:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   daeaa:	b108      	cbz	r0, daeb0 <_strtol_r+0x28>
   daeac:	462f      	mov	r7, r5
   daeae:	e7f2      	b.n	dae96 <_strtol_r+0xe>
   daeb0:	2c2d      	cmp	r4, #45	; 0x2d
   daeb2:	d103      	bne.n	daebc <_strtol_r+0x34>
   daeb4:	1cbd      	adds	r5, r7, #2
   daeb6:	787c      	ldrb	r4, [r7, #1]
   daeb8:	2601      	movs	r6, #1
   daeba:	e003      	b.n	daec4 <_strtol_r+0x3c>
   daebc:	2c2b      	cmp	r4, #43	; 0x2b
   daebe:	bf04      	itt	eq
   daec0:	787c      	ldrbeq	r4, [r7, #1]
   daec2:	1cbd      	addeq	r5, r7, #2
   daec4:	b113      	cbz	r3, daecc <_strtol_r+0x44>
   daec6:	2b10      	cmp	r3, #16
   daec8:	d10a      	bne.n	daee0 <_strtol_r+0x58>
   daeca:	e05b      	b.n	daf84 <_strtol_r+0xfc>
   daecc:	2c30      	cmp	r4, #48	; 0x30
   daece:	d157      	bne.n	daf80 <_strtol_r+0xf8>
   daed0:	7828      	ldrb	r0, [r5, #0]
   daed2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   daed6:	2858      	cmp	r0, #88	; 0x58
   daed8:	d14d      	bne.n	daf76 <_strtol_r+0xee>
   daeda:	786c      	ldrb	r4, [r5, #1]
   daedc:	2310      	movs	r3, #16
   daede:	3502      	adds	r5, #2
   daee0:	2e00      	cmp	r6, #0
   daee2:	bf14      	ite	ne
   daee4:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   daee8:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   daeec:	2700      	movs	r7, #0
   daeee:	fbbc faf3 	udiv	sl, ip, r3
   daef2:	4638      	mov	r0, r7
   daef4:	fb03 cc1a 	mls	ip, r3, sl, ip
   daef8:	eb09 0e04 	add.w	lr, r9, r4
   daefc:	f89e e001 	ldrb.w	lr, [lr, #1]
   daf00:	f01e 0f04 	tst.w	lr, #4
   daf04:	d001      	beq.n	daf0a <_strtol_r+0x82>
   daf06:	3c30      	subs	r4, #48	; 0x30
   daf08:	e00b      	b.n	daf22 <_strtol_r+0x9a>
   daf0a:	f01e 0e03 	ands.w	lr, lr, #3
   daf0e:	d01b      	beq.n	daf48 <_strtol_r+0xc0>
   daf10:	f1be 0f01 	cmp.w	lr, #1
   daf14:	bf0c      	ite	eq
   daf16:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   daf1a:	f04f 0e57 	movne.w	lr, #87	; 0x57
   daf1e:	ebce 0404 	rsb	r4, lr, r4
   daf22:	42a3      	cmp	r3, r4
   daf24:	dd10      	ble.n	daf48 <_strtol_r+0xc0>
   daf26:	f1b7 3fff 	cmp.w	r7, #4294967295
   daf2a:	d00a      	beq.n	daf42 <_strtol_r+0xba>
   daf2c:	4550      	cmp	r0, sl
   daf2e:	d806      	bhi.n	daf3e <_strtol_r+0xb6>
   daf30:	d101      	bne.n	daf36 <_strtol_r+0xae>
   daf32:	4564      	cmp	r4, ip
   daf34:	dc03      	bgt.n	daf3e <_strtol_r+0xb6>
   daf36:	fb03 4000 	mla	r0, r3, r0, r4
   daf3a:	2701      	movs	r7, #1
   daf3c:	e001      	b.n	daf42 <_strtol_r+0xba>
   daf3e:	f04f 37ff 	mov.w	r7, #4294967295
   daf42:	f815 4b01 	ldrb.w	r4, [r5], #1
   daf46:	e7d7      	b.n	daef8 <_strtol_r+0x70>
   daf48:	1c7b      	adds	r3, r7, #1
   daf4a:	d10c      	bne.n	daf66 <_strtol_r+0xde>
   daf4c:	2e00      	cmp	r6, #0
   daf4e:	f04f 0322 	mov.w	r3, #34	; 0x22
   daf52:	bf14      	ite	ne
   daf54:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   daf58:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   daf5c:	f8c8 3000 	str.w	r3, [r8]
   daf60:	b92a      	cbnz	r2, daf6e <_strtol_r+0xe6>
   daf62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   daf66:	b106      	cbz	r6, daf6a <_strtol_r+0xe2>
   daf68:	4240      	negs	r0, r0
   daf6a:	b172      	cbz	r2, daf8a <_strtol_r+0x102>
   daf6c:	b107      	cbz	r7, daf70 <_strtol_r+0xe8>
   daf6e:	1e69      	subs	r1, r5, #1
   daf70:	6011      	str	r1, [r2, #0]
   daf72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   daf76:	2430      	movs	r4, #48	; 0x30
   daf78:	2b00      	cmp	r3, #0
   daf7a:	d1b1      	bne.n	daee0 <_strtol_r+0x58>
   daf7c:	2308      	movs	r3, #8
   daf7e:	e7af      	b.n	daee0 <_strtol_r+0x58>
   daf80:	230a      	movs	r3, #10
   daf82:	e7ad      	b.n	daee0 <_strtol_r+0x58>
   daf84:	2c30      	cmp	r4, #48	; 0x30
   daf86:	d0a3      	beq.n	daed0 <_strtol_r+0x48>
   daf88:	e7aa      	b.n	daee0 <_strtol_r+0x58>
   daf8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   daf8e:	bf00      	nop
   daf90:	2003e0bc 	.word	0x2003e0bc

000daf94 <strtol>:
   daf94:	4613      	mov	r3, r2
   daf96:	460a      	mov	r2, r1
   daf98:	4601      	mov	r1, r0
   daf9a:	4802      	ldr	r0, [pc, #8]	; (dafa4 <strtol+0x10>)
   daf9c:	6800      	ldr	r0, [r0, #0]
   daf9e:	f7ff bf73 	b.w	dae88 <_strtol_r>
   dafa2:	bf00      	nop
   dafa4:	2003e120 	.word	0x2003e120

000dafa8 <_strtoul_r>:
   dafa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dafac:	4680      	mov	r8, r0
   dafae:	483c      	ldr	r0, [pc, #240]	; (db0a0 <_strtoul_r+0xf8>)
   dafb0:	f8d0 9000 	ldr.w	r9, [r0]
   dafb4:	460e      	mov	r6, r1
   dafb6:	4635      	mov	r5, r6
   dafb8:	f815 4b01 	ldrb.w	r4, [r5], #1
   dafbc:	eb09 0004 	add.w	r0, r9, r4
   dafc0:	7840      	ldrb	r0, [r0, #1]
   dafc2:	f000 0008 	and.w	r0, r0, #8
   dafc6:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   dafca:	b108      	cbz	r0, dafd0 <_strtoul_r+0x28>
   dafcc:	462e      	mov	r6, r5
   dafce:	e7f2      	b.n	dafb6 <_strtoul_r+0xe>
   dafd0:	2c2d      	cmp	r4, #45	; 0x2d
   dafd2:	d103      	bne.n	dafdc <_strtoul_r+0x34>
   dafd4:	1cb5      	adds	r5, r6, #2
   dafd6:	7874      	ldrb	r4, [r6, #1]
   dafd8:	2701      	movs	r7, #1
   dafda:	e003      	b.n	dafe4 <_strtoul_r+0x3c>
   dafdc:	2c2b      	cmp	r4, #43	; 0x2b
   dafde:	bf04      	itt	eq
   dafe0:	7874      	ldrbeq	r4, [r6, #1]
   dafe2:	1cb5      	addeq	r5, r6, #2
   dafe4:	b113      	cbz	r3, dafec <_strtoul_r+0x44>
   dafe6:	2b10      	cmp	r3, #16
   dafe8:	d10a      	bne.n	db000 <_strtoul_r+0x58>
   dafea:	e053      	b.n	db094 <_strtoul_r+0xec>
   dafec:	2c30      	cmp	r4, #48	; 0x30
   dafee:	d14f      	bne.n	db090 <_strtoul_r+0xe8>
   daff0:	7828      	ldrb	r0, [r5, #0]
   daff2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   daff6:	2858      	cmp	r0, #88	; 0x58
   daff8:	d145      	bne.n	db086 <_strtoul_r+0xde>
   daffa:	786c      	ldrb	r4, [r5, #1]
   daffc:	2310      	movs	r3, #16
   daffe:	3502      	adds	r5, #2
   db000:	f04f 3cff 	mov.w	ip, #4294967295
   db004:	2600      	movs	r6, #0
   db006:	fbbc fcf3 	udiv	ip, ip, r3
   db00a:	fb03 fa0c 	mul.w	sl, r3, ip
   db00e:	ea6f 0a0a 	mvn.w	sl, sl
   db012:	4630      	mov	r0, r6
   db014:	eb09 0e04 	add.w	lr, r9, r4
   db018:	f89e e001 	ldrb.w	lr, [lr, #1]
   db01c:	f01e 0f04 	tst.w	lr, #4
   db020:	d001      	beq.n	db026 <_strtoul_r+0x7e>
   db022:	3c30      	subs	r4, #48	; 0x30
   db024:	e00b      	b.n	db03e <_strtoul_r+0x96>
   db026:	f01e 0e03 	ands.w	lr, lr, #3
   db02a:	d01a      	beq.n	db062 <_strtoul_r+0xba>
   db02c:	f1be 0f01 	cmp.w	lr, #1
   db030:	bf0c      	ite	eq
   db032:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   db036:	f04f 0e57 	movne.w	lr, #87	; 0x57
   db03a:	ebce 0404 	rsb	r4, lr, r4
   db03e:	42a3      	cmp	r3, r4
   db040:	dd0f      	ble.n	db062 <_strtoul_r+0xba>
   db042:	2e00      	cmp	r6, #0
   db044:	db08      	blt.n	db058 <_strtoul_r+0xb0>
   db046:	4560      	cmp	r0, ip
   db048:	d806      	bhi.n	db058 <_strtoul_r+0xb0>
   db04a:	d101      	bne.n	db050 <_strtoul_r+0xa8>
   db04c:	4554      	cmp	r4, sl
   db04e:	dc03      	bgt.n	db058 <_strtoul_r+0xb0>
   db050:	fb03 4000 	mla	r0, r3, r0, r4
   db054:	2601      	movs	r6, #1
   db056:	e001      	b.n	db05c <_strtoul_r+0xb4>
   db058:	f04f 36ff 	mov.w	r6, #4294967295
   db05c:	f815 4b01 	ldrb.w	r4, [r5], #1
   db060:	e7d8      	b.n	db014 <_strtoul_r+0x6c>
   db062:	2e00      	cmp	r6, #0
   db064:	da07      	bge.n	db076 <_strtoul_r+0xce>
   db066:	2322      	movs	r3, #34	; 0x22
   db068:	f8c8 3000 	str.w	r3, [r8]
   db06c:	f04f 30ff 	mov.w	r0, #4294967295
   db070:	b92a      	cbnz	r2, db07e <_strtoul_r+0xd6>
   db072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db076:	b107      	cbz	r7, db07a <_strtoul_r+0xd2>
   db078:	4240      	negs	r0, r0
   db07a:	b172      	cbz	r2, db09a <_strtoul_r+0xf2>
   db07c:	b106      	cbz	r6, db080 <_strtoul_r+0xd8>
   db07e:	1e69      	subs	r1, r5, #1
   db080:	6011      	str	r1, [r2, #0]
   db082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db086:	2430      	movs	r4, #48	; 0x30
   db088:	2b00      	cmp	r3, #0
   db08a:	d1b9      	bne.n	db000 <_strtoul_r+0x58>
   db08c:	2308      	movs	r3, #8
   db08e:	e7b7      	b.n	db000 <_strtoul_r+0x58>
   db090:	230a      	movs	r3, #10
   db092:	e7b5      	b.n	db000 <_strtoul_r+0x58>
   db094:	2c30      	cmp	r4, #48	; 0x30
   db096:	d0ab      	beq.n	daff0 <_strtoul_r+0x48>
   db098:	e7b2      	b.n	db000 <_strtoul_r+0x58>
   db09a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db09e:	bf00      	nop
   db0a0:	2003e0bc 	.word	0x2003e0bc

000db0a4 <strtoul>:
   db0a4:	4613      	mov	r3, r2
   db0a6:	460a      	mov	r2, r1
   db0a8:	4601      	mov	r1, r0
   db0aa:	4802      	ldr	r0, [pc, #8]	; (db0b4 <strtoul+0x10>)
   db0ac:	6800      	ldr	r0, [r0, #0]
   db0ae:	f7ff bf7b 	b.w	dafa8 <_strtoul_r>
   db0b2:	bf00      	nop
   db0b4:	2003e120 	.word	0x2003e120

000db0b8 <__tzcalc_limits>:
   db0b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db0bc:	4604      	mov	r4, r0
   db0be:	f000 fa6f 	bl	db5a0 <__gettzinfo>
   db0c2:	f240 73b1 	movw	r3, #1969	; 0x7b1
   db0c6:	429c      	cmp	r4, r3
   db0c8:	f340 8096 	ble.w	db1f8 <__tzcalc_limits+0x140>
   db0cc:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   db0d0:	18e3      	adds	r3, r4, r3
   db0d2:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   db0d6:	109b      	asrs	r3, r3, #2
   db0d8:	f240 156d 	movw	r5, #365	; 0x16d
   db0dc:	fb05 3502 	mla	r5, r5, r2, r3
   db0e0:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   db0e4:	f06f 0363 	mvn.w	r3, #99	; 0x63
   db0e8:	fb92 f3f3 	sdiv	r3, r2, r3
   db0ec:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   db0f0:	442b      	add	r3, r5
   db0f2:	18a5      	adds	r5, r4, r2
   db0f4:	f44f 72c8 	mov.w	r2, #400	; 0x190
   db0f8:	fb95 f5f2 	sdiv	r5, r5, r2
   db0fc:	441d      	add	r5, r3
   db0fe:	2364      	movs	r3, #100	; 0x64
   db100:	fb94 f7f2 	sdiv	r7, r4, r2
   db104:	fb94 f6f3 	sdiv	r6, r4, r3
   db108:	fb02 4717 	mls	r7, r2, r7, r4
   db10c:	fb03 4616 	mls	r6, r3, r6, r4
   db110:	f100 0338 	add.w	r3, r0, #56	; 0x38
   db114:	fab7 fe87 	clz	lr, r7
   db118:	9301      	str	r3, [sp, #4]
   db11a:	f004 0303 	and.w	r3, r4, #3
   db11e:	6044      	str	r4, [r0, #4]
   db120:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   db124:	4601      	mov	r1, r0
   db126:	9300      	str	r3, [sp, #0]
   db128:	f04f 0c07 	mov.w	ip, #7
   db12c:	7a0b      	ldrb	r3, [r1, #8]
   db12e:	2b4a      	cmp	r3, #74	; 0x4a
   db130:	d10e      	bne.n	db150 <__tzcalc_limits+0x98>
   db132:	694b      	ldr	r3, [r1, #20]
   db134:	9a00      	ldr	r2, [sp, #0]
   db136:	18ec      	adds	r4, r5, r3
   db138:	b902      	cbnz	r2, db13c <__tzcalc_limits+0x84>
   db13a:	b906      	cbnz	r6, db13e <__tzcalc_limits+0x86>
   db13c:	b927      	cbnz	r7, db148 <__tzcalc_limits+0x90>
   db13e:	2b3b      	cmp	r3, #59	; 0x3b
   db140:	bfd4      	ite	le
   db142:	2300      	movle	r3, #0
   db144:	2301      	movgt	r3, #1
   db146:	e000      	b.n	db14a <__tzcalc_limits+0x92>
   db148:	2300      	movs	r3, #0
   db14a:	4423      	add	r3, r4
   db14c:	3b01      	subs	r3, #1
   db14e:	e03f      	b.n	db1d0 <__tzcalc_limits+0x118>
   db150:	2b44      	cmp	r3, #68	; 0x44
   db152:	d102      	bne.n	db15a <__tzcalc_limits+0xa2>
   db154:	694b      	ldr	r3, [r1, #20]
   db156:	442b      	add	r3, r5
   db158:	e03a      	b.n	db1d0 <__tzcalc_limits+0x118>
   db15a:	9b00      	ldr	r3, [sp, #0]
   db15c:	b92b      	cbnz	r3, db16a <__tzcalc_limits+0xb2>
   db15e:	2e00      	cmp	r6, #0
   db160:	bf0c      	ite	eq
   db162:	46f0      	moveq	r8, lr
   db164:	f04f 0801 	movne.w	r8, #1
   db168:	e000      	b.n	db16c <__tzcalc_limits+0xb4>
   db16a:	46f0      	mov	r8, lr
   db16c:	4b24      	ldr	r3, [pc, #144]	; (db200 <__tzcalc_limits+0x148>)
   db16e:	68cc      	ldr	r4, [r1, #12]
   db170:	2230      	movs	r2, #48	; 0x30
   db172:	fb02 3808 	mla	r8, r2, r8, r3
   db176:	f1a8 0a04 	sub.w	sl, r8, #4
   db17a:	46a9      	mov	r9, r5
   db17c:	2301      	movs	r3, #1
   db17e:	42a3      	cmp	r3, r4
   db180:	da04      	bge.n	db18c <__tzcalc_limits+0xd4>
   db182:	f85a bf04 	ldr.w	fp, [sl, #4]!
   db186:	3301      	adds	r3, #1
   db188:	44d9      	add	r9, fp
   db18a:	e7f8      	b.n	db17e <__tzcalc_limits+0xc6>
   db18c:	f109 0304 	add.w	r3, r9, #4
   db190:	fb93 fbfc 	sdiv	fp, r3, ip
   db194:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   db198:	2c01      	cmp	r4, #1
   db19a:	ebca 0a03 	rsb	sl, sl, r3
   db19e:	694b      	ldr	r3, [r1, #20]
   db1a0:	bfb8      	it	lt
   db1a2:	2401      	movlt	r4, #1
   db1a4:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   db1a8:	ebb3 0a0a 	subs.w	sl, r3, sl
   db1ac:	690b      	ldr	r3, [r1, #16]
   db1ae:	f104 34ff 	add.w	r4, r4, #4294967295
   db1b2:	f103 33ff 	add.w	r3, r3, #4294967295
   db1b6:	bf48      	it	mi
   db1b8:	f10a 0a07 	addmi.w	sl, sl, #7
   db1bc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   db1c0:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   db1c4:	4453      	add	r3, sl
   db1c6:	42a3      	cmp	r3, r4
   db1c8:	db01      	blt.n	db1ce <__tzcalc_limits+0x116>
   db1ca:	3b07      	subs	r3, #7
   db1cc:	e7fb      	b.n	db1c6 <__tzcalc_limits+0x10e>
   db1ce:	444b      	add	r3, r9
   db1d0:	698c      	ldr	r4, [r1, #24]
   db1d2:	4a0c      	ldr	r2, [pc, #48]	; (db204 <__tzcalc_limits+0x14c>)
   db1d4:	fb02 4303 	mla	r3, r2, r3, r4
   db1d8:	6a0c      	ldr	r4, [r1, #32]
   db1da:	4423      	add	r3, r4
   db1dc:	f841 3f1c 	str.w	r3, [r1, #28]!
   db1e0:	9b01      	ldr	r3, [sp, #4]
   db1e2:	4299      	cmp	r1, r3
   db1e4:	d1a2      	bne.n	db12c <__tzcalc_limits+0x74>
   db1e6:	69c3      	ldr	r3, [r0, #28]
   db1e8:	6b82      	ldr	r2, [r0, #56]	; 0x38
   db1ea:	4293      	cmp	r3, r2
   db1ec:	bfac      	ite	ge
   db1ee:	2300      	movge	r3, #0
   db1f0:	2301      	movlt	r3, #1
   db1f2:	6003      	str	r3, [r0, #0]
   db1f4:	2001      	movs	r0, #1
   db1f6:	e000      	b.n	db1fa <__tzcalc_limits+0x142>
   db1f8:	2000      	movs	r0, #0
   db1fa:	b003      	add	sp, #12
   db1fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db200:	000dc1dc 	.word	0x000dc1dc
   db204:	00015180 	.word	0x00015180

000db208 <__tz_lock>:
   db208:	4770      	bx	lr

000db20a <__tz_unlock>:
   db20a:	4770      	bx	lr

000db20c <_tzset_unlocked>:
   db20c:	4b01      	ldr	r3, [pc, #4]	; (db214 <_tzset_unlocked+0x8>)
   db20e:	6818      	ldr	r0, [r3, #0]
   db210:	f000 b802 	b.w	db218 <_tzset_unlocked_r>
   db214:	2003e120 	.word	0x2003e120

000db218 <_tzset_unlocked_r>:
   db218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db21c:	b08d      	sub	sp, #52	; 0x34
   db21e:	4607      	mov	r7, r0
   db220:	f000 f9be 	bl	db5a0 <__gettzinfo>
   db224:	49b0      	ldr	r1, [pc, #704]	; (db4e8 <_tzset_unlocked_r+0x2d0>)
   db226:	4eb1      	ldr	r6, [pc, #708]	; (db4ec <_tzset_unlocked_r+0x2d4>)
   db228:	4604      	mov	r4, r0
   db22a:	4638      	mov	r0, r7
   db22c:	f000 f9b0 	bl	db590 <_getenv_r>
   db230:	4605      	mov	r5, r0
   db232:	b960      	cbnz	r0, db24e <_tzset_unlocked_r+0x36>
   db234:	4bae      	ldr	r3, [pc, #696]	; (db4f0 <_tzset_unlocked_r+0x2d8>)
   db236:	4aaf      	ldr	r2, [pc, #700]	; (db4f4 <_tzset_unlocked_r+0x2dc>)
   db238:	6018      	str	r0, [r3, #0]
   db23a:	4baf      	ldr	r3, [pc, #700]	; (db4f8 <_tzset_unlocked_r+0x2e0>)
   db23c:	6018      	str	r0, [r3, #0]
   db23e:	4baf      	ldr	r3, [pc, #700]	; (db4fc <_tzset_unlocked_r+0x2e4>)
   db240:	6830      	ldr	r0, [r6, #0]
   db242:	601a      	str	r2, [r3, #0]
   db244:	605a      	str	r2, [r3, #4]
   db246:	f7fb f8c7 	bl	d63d8 <free>
   db24a:	6035      	str	r5, [r6, #0]
   db24c:	e148      	b.n	db4e0 <_tzset_unlocked_r+0x2c8>
   db24e:	6831      	ldr	r1, [r6, #0]
   db250:	b979      	cbnz	r1, db272 <_tzset_unlocked_r+0x5a>
   db252:	6830      	ldr	r0, [r6, #0]
   db254:	f7fb f8c0 	bl	d63d8 <free>
   db258:	4628      	mov	r0, r5
   db25a:	f7ff fdc0 	bl	dadde <strlen>
   db25e:	1c41      	adds	r1, r0, #1
   db260:	4638      	mov	r0, r7
   db262:	f7fb f8f1 	bl	d6448 <_malloc_r>
   db266:	6030      	str	r0, [r6, #0]
   db268:	b148      	cbz	r0, db27e <_tzset_unlocked_r+0x66>
   db26a:	4629      	mov	r1, r5
   db26c:	f7ff fd94 	bl	dad98 <strcpy>
   db270:	e005      	b.n	db27e <_tzset_unlocked_r+0x66>
   db272:	f7ff fd87 	bl	dad84 <strcmp>
   db276:	2800      	cmp	r0, #0
   db278:	f000 8132 	beq.w	db4e0 <_tzset_unlocked_r+0x2c8>
   db27c:	e7e9      	b.n	db252 <_tzset_unlocked_r+0x3a>
   db27e:	782b      	ldrb	r3, [r5, #0]
   db280:	4a9f      	ldr	r2, [pc, #636]	; (db500 <_tzset_unlocked_r+0x2e8>)
   db282:	49a0      	ldr	r1, [pc, #640]	; (db504 <_tzset_unlocked_r+0x2ec>)
   db284:	2b3a      	cmp	r3, #58	; 0x3a
   db286:	bf08      	it	eq
   db288:	3501      	addeq	r5, #1
   db28a:	ae0a      	add	r6, sp, #40	; 0x28
   db28c:	4633      	mov	r3, r6
   db28e:	4628      	mov	r0, r5
   db290:	f7fb f8c2 	bl	d6418 <siscanf>
   db294:	2800      	cmp	r0, #0
   db296:	f340 8123 	ble.w	db4e0 <_tzset_unlocked_r+0x2c8>
   db29a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   db29c:	18ef      	adds	r7, r5, r3
   db29e:	5ceb      	ldrb	r3, [r5, r3]
   db2a0:	2b2d      	cmp	r3, #45	; 0x2d
   db2a2:	d103      	bne.n	db2ac <_tzset_unlocked_r+0x94>
   db2a4:	3701      	adds	r7, #1
   db2a6:	f04f 35ff 	mov.w	r5, #4294967295
   db2aa:	e003      	b.n	db2b4 <_tzset_unlocked_r+0x9c>
   db2ac:	2b2b      	cmp	r3, #43	; 0x2b
   db2ae:	bf08      	it	eq
   db2b0:	3701      	addeq	r7, #1
   db2b2:	2501      	movs	r5, #1
   db2b4:	f10d 0a20 	add.w	sl, sp, #32
   db2b8:	f10d 0b1e 	add.w	fp, sp, #30
   db2bc:	f04f 0800 	mov.w	r8, #0
   db2c0:	9603      	str	r6, [sp, #12]
   db2c2:	f8cd a008 	str.w	sl, [sp, #8]
   db2c6:	9601      	str	r6, [sp, #4]
   db2c8:	f8cd b000 	str.w	fp, [sp]
   db2cc:	4633      	mov	r3, r6
   db2ce:	aa07      	add	r2, sp, #28
   db2d0:	498d      	ldr	r1, [pc, #564]	; (db508 <_tzset_unlocked_r+0x2f0>)
   db2d2:	f8ad 801e 	strh.w	r8, [sp, #30]
   db2d6:	4638      	mov	r0, r7
   db2d8:	f8ad 8020 	strh.w	r8, [sp, #32]
   db2dc:	f7fb f89c 	bl	d6418 <siscanf>
   db2e0:	4540      	cmp	r0, r8
   db2e2:	f340 80fd 	ble.w	db4e0 <_tzset_unlocked_r+0x2c8>
   db2e6:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   db2ea:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   db2ee:	f8df 9224 	ldr.w	r9, [pc, #548]	; db514 <_tzset_unlocked_r+0x2fc>
   db2f2:	213c      	movs	r1, #60	; 0x3c
   db2f4:	fb01 3302 	mla	r3, r1, r2, r3
   db2f8:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   db2fc:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   db300:	fb01 3302 	mla	r3, r1, r2, r3
   db304:	435d      	muls	r5, r3
   db306:	6225      	str	r5, [r4, #32]
   db308:	4d7c      	ldr	r5, [pc, #496]	; (db4fc <_tzset_unlocked_r+0x2e4>)
   db30a:	4b7d      	ldr	r3, [pc, #500]	; (db500 <_tzset_unlocked_r+0x2e8>)
   db30c:	602b      	str	r3, [r5, #0]
   db30e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   db310:	497c      	ldr	r1, [pc, #496]	; (db504 <_tzset_unlocked_r+0x2ec>)
   db312:	441f      	add	r7, r3
   db314:	464a      	mov	r2, r9
   db316:	4633      	mov	r3, r6
   db318:	4638      	mov	r0, r7
   db31a:	f7fb f87d 	bl	d6418 <siscanf>
   db31e:	4540      	cmp	r0, r8
   db320:	dc08      	bgt.n	db334 <_tzset_unlocked_r+0x11c>
   db322:	682b      	ldr	r3, [r5, #0]
   db324:	606b      	str	r3, [r5, #4]
   db326:	4b72      	ldr	r3, [pc, #456]	; (db4f0 <_tzset_unlocked_r+0x2d8>)
   db328:	6a22      	ldr	r2, [r4, #32]
   db32a:	601a      	str	r2, [r3, #0]
   db32c:	4b72      	ldr	r3, [pc, #456]	; (db4f8 <_tzset_unlocked_r+0x2e0>)
   db32e:	f8c3 8000 	str.w	r8, [r3]
   db332:	e0d5      	b.n	db4e0 <_tzset_unlocked_r+0x2c8>
   db334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   db336:	f8c5 9004 	str.w	r9, [r5, #4]
   db33a:	18fd      	adds	r5, r7, r3
   db33c:	5cfb      	ldrb	r3, [r7, r3]
   db33e:	2b2d      	cmp	r3, #45	; 0x2d
   db340:	d103      	bne.n	db34a <_tzset_unlocked_r+0x132>
   db342:	3501      	adds	r5, #1
   db344:	f04f 37ff 	mov.w	r7, #4294967295
   db348:	e003      	b.n	db352 <_tzset_unlocked_r+0x13a>
   db34a:	2b2b      	cmp	r3, #43	; 0x2b
   db34c:	bf08      	it	eq
   db34e:	3501      	addeq	r5, #1
   db350:	2701      	movs	r7, #1
   db352:	2300      	movs	r3, #0
   db354:	f8ad 301c 	strh.w	r3, [sp, #28]
   db358:	f8ad 301e 	strh.w	r3, [sp, #30]
   db35c:	f8ad 3020 	strh.w	r3, [sp, #32]
   db360:	930a      	str	r3, [sp, #40]	; 0x28
   db362:	9603      	str	r6, [sp, #12]
   db364:	f8cd a008 	str.w	sl, [sp, #8]
   db368:	9601      	str	r6, [sp, #4]
   db36a:	f8cd b000 	str.w	fp, [sp]
   db36e:	4633      	mov	r3, r6
   db370:	aa07      	add	r2, sp, #28
   db372:	4965      	ldr	r1, [pc, #404]	; (db508 <_tzset_unlocked_r+0x2f0>)
   db374:	4628      	mov	r0, r5
   db376:	f7fb f84f 	bl	d6418 <siscanf>
   db37a:	2800      	cmp	r0, #0
   db37c:	dc04      	bgt.n	db388 <_tzset_unlocked_r+0x170>
   db37e:	6a23      	ldr	r3, [r4, #32]
   db380:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   db384:	63e3      	str	r3, [r4, #60]	; 0x3c
   db386:	e00e      	b.n	db3a6 <_tzset_unlocked_r+0x18e>
   db388:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   db38c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   db390:	213c      	movs	r1, #60	; 0x3c
   db392:	fb01 3302 	mla	r3, r1, r2, r3
   db396:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   db39a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   db39e:	fb01 3302 	mla	r3, r1, r2, r3
   db3a2:	435f      	muls	r7, r3
   db3a4:	63e7      	str	r7, [r4, #60]	; 0x3c
   db3a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   db3a8:	4627      	mov	r7, r4
   db3aa:	441d      	add	r5, r3
   db3ac:	f04f 0900 	mov.w	r9, #0
   db3b0:	782b      	ldrb	r3, [r5, #0]
   db3b2:	2b2c      	cmp	r3, #44	; 0x2c
   db3b4:	bf08      	it	eq
   db3b6:	3501      	addeq	r5, #1
   db3b8:	f895 8000 	ldrb.w	r8, [r5]
   db3bc:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   db3c0:	d126      	bne.n	db410 <_tzset_unlocked_r+0x1f8>
   db3c2:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   db3c6:	9302      	str	r3, [sp, #8]
   db3c8:	ab09      	add	r3, sp, #36	; 0x24
   db3ca:	9300      	str	r3, [sp, #0]
   db3cc:	9603      	str	r6, [sp, #12]
   db3ce:	9601      	str	r6, [sp, #4]
   db3d0:	4633      	mov	r3, r6
   db3d2:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   db3d6:	494d      	ldr	r1, [pc, #308]	; (db50c <_tzset_unlocked_r+0x2f4>)
   db3d8:	4628      	mov	r0, r5
   db3da:	f7fb f81d 	bl	d6418 <siscanf>
   db3de:	2803      	cmp	r0, #3
   db3e0:	d17e      	bne.n	db4e0 <_tzset_unlocked_r+0x2c8>
   db3e2:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   db3e6:	1e4b      	subs	r3, r1, #1
   db3e8:	2b0b      	cmp	r3, #11
   db3ea:	d879      	bhi.n	db4e0 <_tzset_unlocked_r+0x2c8>
   db3ec:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   db3f0:	1e53      	subs	r3, r2, #1
   db3f2:	2b04      	cmp	r3, #4
   db3f4:	d874      	bhi.n	db4e0 <_tzset_unlocked_r+0x2c8>
   db3f6:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   db3fa:	2b06      	cmp	r3, #6
   db3fc:	d870      	bhi.n	db4e0 <_tzset_unlocked_r+0x2c8>
   db3fe:	f887 8008 	strb.w	r8, [r7, #8]
   db402:	60f9      	str	r1, [r7, #12]
   db404:	613a      	str	r2, [r7, #16]
   db406:	617b      	str	r3, [r7, #20]
   db408:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   db40a:	eb05 0803 	add.w	r8, r5, r3
   db40e:	e02a      	b.n	db466 <_tzset_unlocked_r+0x24e>
   db410:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   db414:	bf06      	itte	eq
   db416:	3501      	addeq	r5, #1
   db418:	4643      	moveq	r3, r8
   db41a:	2344      	movne	r3, #68	; 0x44
   db41c:	220a      	movs	r2, #10
   db41e:	a90b      	add	r1, sp, #44	; 0x2c
   db420:	4628      	mov	r0, r5
   db422:	9305      	str	r3, [sp, #20]
   db424:	f7ff fe3e 	bl	db0a4 <strtoul>
   db428:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   db42c:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   db430:	4545      	cmp	r5, r8
   db432:	9b05      	ldr	r3, [sp, #20]
   db434:	d114      	bne.n	db460 <_tzset_unlocked_r+0x248>
   db436:	234d      	movs	r3, #77	; 0x4d
   db438:	f1b9 0f00 	cmp.w	r9, #0
   db43c:	d107      	bne.n	db44e <_tzset_unlocked_r+0x236>
   db43e:	7223      	strb	r3, [r4, #8]
   db440:	2303      	movs	r3, #3
   db442:	60e3      	str	r3, [r4, #12]
   db444:	2302      	movs	r3, #2
   db446:	6123      	str	r3, [r4, #16]
   db448:	f8c4 9014 	str.w	r9, [r4, #20]
   db44c:	e00b      	b.n	db466 <_tzset_unlocked_r+0x24e>
   db44e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   db452:	230b      	movs	r3, #11
   db454:	62a3      	str	r3, [r4, #40]	; 0x28
   db456:	2301      	movs	r3, #1
   db458:	62e3      	str	r3, [r4, #44]	; 0x2c
   db45a:	2300      	movs	r3, #0
   db45c:	6323      	str	r3, [r4, #48]	; 0x30
   db45e:	e002      	b.n	db466 <_tzset_unlocked_r+0x24e>
   db460:	b280      	uxth	r0, r0
   db462:	723b      	strb	r3, [r7, #8]
   db464:	6178      	str	r0, [r7, #20]
   db466:	2302      	movs	r3, #2
   db468:	f8ad 301c 	strh.w	r3, [sp, #28]
   db46c:	2300      	movs	r3, #0
   db46e:	f8ad 301e 	strh.w	r3, [sp, #30]
   db472:	f8ad 3020 	strh.w	r3, [sp, #32]
   db476:	930a      	str	r3, [sp, #40]	; 0x28
   db478:	f898 3000 	ldrb.w	r3, [r8]
   db47c:	2b2f      	cmp	r3, #47	; 0x2f
   db47e:	d10b      	bne.n	db498 <_tzset_unlocked_r+0x280>
   db480:	9603      	str	r6, [sp, #12]
   db482:	f8cd a008 	str.w	sl, [sp, #8]
   db486:	9601      	str	r6, [sp, #4]
   db488:	f8cd b000 	str.w	fp, [sp]
   db48c:	4633      	mov	r3, r6
   db48e:	aa07      	add	r2, sp, #28
   db490:	491f      	ldr	r1, [pc, #124]	; (db510 <_tzset_unlocked_r+0x2f8>)
   db492:	4640      	mov	r0, r8
   db494:	f7fa ffc0 	bl	d6418 <siscanf>
   db498:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   db49c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   db4a0:	213c      	movs	r1, #60	; 0x3c
   db4a2:	fb01 3302 	mla	r3, r1, r2, r3
   db4a6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   db4aa:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   db4ae:	fb01 3302 	mla	r3, r1, r2, r3
   db4b2:	61bb      	str	r3, [r7, #24]
   db4b4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   db4b6:	f109 0901 	add.w	r9, r9, #1
   db4ba:	f1b9 0f02 	cmp.w	r9, #2
   db4be:	4445      	add	r5, r8
   db4c0:	f107 071c 	add.w	r7, r7, #28
   db4c4:	f47f af74 	bne.w	db3b0 <_tzset_unlocked_r+0x198>
   db4c8:	6860      	ldr	r0, [r4, #4]
   db4ca:	f7ff fdf5 	bl	db0b8 <__tzcalc_limits>
   db4ce:	4b08      	ldr	r3, [pc, #32]	; (db4f0 <_tzset_unlocked_r+0x2d8>)
   db4d0:	6a22      	ldr	r2, [r4, #32]
   db4d2:	601a      	str	r2, [r3, #0]
   db4d4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   db4d6:	1a9b      	subs	r3, r3, r2
   db4d8:	4a07      	ldr	r2, [pc, #28]	; (db4f8 <_tzset_unlocked_r+0x2e0>)
   db4da:	bf18      	it	ne
   db4dc:	2301      	movne	r3, #1
   db4de:	6013      	str	r3, [r2, #0]
   db4e0:	b00d      	add	sp, #52	; 0x34
   db4e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db4e6:	bf00      	nop
   db4e8:	000dc23c 	.word	0x000dc23c
   db4ec:	2003e7e0 	.word	0x2003e7e0
   db4f0:	2003e7e8 	.word	0x2003e7e8
   db4f4:	000dc23f 	.word	0x000dc23f
   db4f8:	2003e7e4 	.word	0x2003e7e4
   db4fc:	2003e124 	.word	0x2003e124
   db500:	2003e7d3 	.word	0x2003e7d3
   db504:	000dc243 	.word	0x000dc243
   db508:	000dc266 	.word	0x000dc266
   db50c:	000dc252 	.word	0x000dc252
   db510:	000dc265 	.word	0x000dc265
   db514:	2003e7c8 	.word	0x2003e7c8

000db518 <_findenv_r>:
   db518:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db51c:	4607      	mov	r7, r0
   db51e:	468b      	mov	fp, r1
   db520:	4690      	mov	r8, r2
   db522:	f000 f8d9 	bl	db6d8 <__env_lock>
   db526:	4b19      	ldr	r3, [pc, #100]	; (db58c <_findenv_r+0x74>)
   db528:	681d      	ldr	r5, [r3, #0]
   db52a:	469a      	mov	sl, r3
   db52c:	b13d      	cbz	r5, db53e <_findenv_r+0x26>
   db52e:	465c      	mov	r4, fp
   db530:	4623      	mov	r3, r4
   db532:	f813 2b01 	ldrb.w	r2, [r3], #1
   db536:	b142      	cbz	r2, db54a <_findenv_r+0x32>
   db538:	2a3d      	cmp	r2, #61	; 0x3d
   db53a:	461c      	mov	r4, r3
   db53c:	d1f8      	bne.n	db530 <_findenv_r+0x18>
   db53e:	4638      	mov	r0, r7
   db540:	f000 f8cb 	bl	db6da <__env_unlock>
   db544:	2000      	movs	r0, #0
   db546:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db54a:	ebcb 0404 	rsb	r4, fp, r4
   db54e:	46a9      	mov	r9, r5
   db550:	f859 0b04 	ldr.w	r0, [r9], #4
   db554:	2800      	cmp	r0, #0
   db556:	d0f2      	beq.n	db53e <_findenv_r+0x26>
   db558:	4622      	mov	r2, r4
   db55a:	4659      	mov	r1, fp
   db55c:	f7ff fc6c 	bl	dae38 <strncmp>
   db560:	b988      	cbnz	r0, db586 <_findenv_r+0x6e>
   db562:	f859 3c04 	ldr.w	r3, [r9, #-4]
   db566:	191e      	adds	r6, r3, r4
   db568:	5d1b      	ldrb	r3, [r3, r4]
   db56a:	2b3d      	cmp	r3, #61	; 0x3d
   db56c:	d10b      	bne.n	db586 <_findenv_r+0x6e>
   db56e:	f8da 3000 	ldr.w	r3, [sl]
   db572:	1aed      	subs	r5, r5, r3
   db574:	10ad      	asrs	r5, r5, #2
   db576:	4638      	mov	r0, r7
   db578:	f8c8 5000 	str.w	r5, [r8]
   db57c:	f000 f8ad 	bl	db6da <__env_unlock>
   db580:	1c70      	adds	r0, r6, #1
   db582:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db586:	464d      	mov	r5, r9
   db588:	e7e1      	b.n	db54e <_findenv_r+0x36>
   db58a:	bf00      	nop
   db58c:	2003e16c 	.word	0x2003e16c

000db590 <_getenv_r>:
   db590:	b507      	push	{r0, r1, r2, lr}
   db592:	aa01      	add	r2, sp, #4
   db594:	f7ff ffc0 	bl	db518 <_findenv_r>
   db598:	b003      	add	sp, #12
   db59a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000db5a0 <__gettzinfo>:
   db5a0:	4800      	ldr	r0, [pc, #0]	; (db5a4 <__gettzinfo+0x4>)
   db5a2:	4770      	bx	lr
   db5a4:	2003e12c 	.word	0x2003e12c

000db5a8 <gmtime_r>:
   db5a8:	6802      	ldr	r2, [r0, #0]
   db5aa:	4b47      	ldr	r3, [pc, #284]	; (db6c8 <gmtime_r+0x120>)
   db5ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   db5ae:	fb92 f4f3 	sdiv	r4, r2, r3
   db5b2:	fb03 2214 	mls	r2, r3, r4, r2
   db5b6:	2a00      	cmp	r2, #0
   db5b8:	bfbc      	itt	lt
   db5ba:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   db5be:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   db5c2:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   db5c6:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   db5ca:	fb92 f3f0 	sdiv	r3, r2, r0
   db5ce:	fb00 2213 	mls	r2, r0, r3, r2
   db5d2:	f04f 003c 	mov.w	r0, #60	; 0x3c
   db5d6:	bfac      	ite	ge
   db5d8:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   db5dc:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   db5e0:	608b      	str	r3, [r1, #8]
   db5e2:	fb92 f3f0 	sdiv	r3, r2, r0
   db5e6:	fb00 2213 	mls	r2, r0, r3, r2
   db5ea:	604b      	str	r3, [r1, #4]
   db5ec:	600a      	str	r2, [r1, #0]
   db5ee:	2307      	movs	r3, #7
   db5f0:	1ce2      	adds	r2, r4, #3
   db5f2:	fb92 f3f3 	sdiv	r3, r2, r3
   db5f6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   db5fa:	1ad3      	subs	r3, r2, r3
   db5fc:	618b      	str	r3, [r1, #24]
   db5fe:	4b33      	ldr	r3, [pc, #204]	; (db6cc <gmtime_r+0x124>)
   db600:	4d33      	ldr	r5, [pc, #204]	; (db6d0 <gmtime_r+0x128>)
   db602:	fb94 f5f5 	sdiv	r5, r4, r5
   db606:	fb03 4405 	mla	r4, r3, r5, r4
   db60a:	f648 62ac 	movw	r2, #36524	; 0x8eac
   db60e:	fbb4 f2f2 	udiv	r2, r4, r2
   db612:	4422      	add	r2, r4
   db614:	f240 57b4 	movw	r7, #1460	; 0x5b4
   db618:	fbb4 f3f7 	udiv	r3, r4, r7
   db61c:	1ad2      	subs	r2, r2, r3
   db61e:	482d      	ldr	r0, [pc, #180]	; (db6d4 <gmtime_r+0x12c>)
   db620:	fbb4 f0f0 	udiv	r0, r4, r0
   db624:	f648 6694 	movw	r6, #36500	; 0x8e94
   db628:	1a13      	subs	r3, r2, r0
   db62a:	fbb3 f6f6 	udiv	r6, r3, r6
   db62e:	4434      	add	r4, r6
   db630:	f240 126d 	movw	r2, #365	; 0x16d
   db634:	fbb3 f0f2 	udiv	r0, r3, r2
   db638:	fbb3 f3f7 	udiv	r3, r3, r7
   db63c:	1ae3      	subs	r3, r4, r3
   db63e:	fb02 3310 	mls	r3, r2, r0, r3
   db642:	2499      	movs	r4, #153	; 0x99
   db644:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   db648:	3202      	adds	r2, #2
   db64a:	fbb2 f2f4 	udiv	r2, r2, r4
   db64e:	2a0a      	cmp	r2, #10
   db650:	fb04 f402 	mul.w	r4, r4, r2
   db654:	f104 0602 	add.w	r6, r4, #2
   db658:	f04f 0405 	mov.w	r4, #5
   db65c:	fbb6 f4f4 	udiv	r4, r6, r4
   db660:	bf34      	ite	cc
   db662:	2602      	movcc	r6, #2
   db664:	f06f 0609 	mvncs.w	r6, #9
   db668:	4416      	add	r6, r2
   db66a:	f44f 72c8 	mov.w	r2, #400	; 0x190
   db66e:	fb02 0505 	mla	r5, r2, r5, r0
   db672:	1c5f      	adds	r7, r3, #1
   db674:	2e01      	cmp	r6, #1
   db676:	bf98      	it	ls
   db678:	3501      	addls	r5, #1
   db67a:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   db67e:	eba7 0704 	sub.w	r7, r7, r4
   db682:	d302      	bcc.n	db68a <gmtime_r+0xe2>
   db684:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   db688:	e014      	b.n	db6b4 <gmtime_r+0x10c>
   db68a:	0782      	lsls	r2, r0, #30
   db68c:	d105      	bne.n	db69a <gmtime_r+0xf2>
   db68e:	2464      	movs	r4, #100	; 0x64
   db690:	fbb0 f2f4 	udiv	r2, r0, r4
   db694:	fb04 0212 	mls	r2, r4, r2, r0
   db698:	b94a      	cbnz	r2, db6ae <gmtime_r+0x106>
   db69a:	f44f 72c8 	mov.w	r2, #400	; 0x190
   db69e:	fbb0 f4f2 	udiv	r4, r0, r2
   db6a2:	fb02 0014 	mls	r0, r2, r4, r0
   db6a6:	fab0 f280 	clz	r2, r0
   db6aa:	0952      	lsrs	r2, r2, #5
   db6ac:	e000      	b.n	db6b0 <gmtime_r+0x108>
   db6ae:	2201      	movs	r2, #1
   db6b0:	333b      	adds	r3, #59	; 0x3b
   db6b2:	441a      	add	r2, r3
   db6b4:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   db6b8:	2300      	movs	r3, #0
   db6ba:	61ca      	str	r2, [r1, #28]
   db6bc:	614d      	str	r5, [r1, #20]
   db6be:	610e      	str	r6, [r1, #16]
   db6c0:	60cf      	str	r7, [r1, #12]
   db6c2:	620b      	str	r3, [r1, #32]
   db6c4:	4608      	mov	r0, r1
   db6c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   db6c8:	00015180 	.word	0x00015180
   db6cc:	fffdc54f 	.word	0xfffdc54f
   db6d0:	00023ab1 	.word	0x00023ab1
   db6d4:	00023ab0 	.word	0x00023ab0

000db6d8 <__env_lock>:
   db6d8:	4770      	bx	lr

000db6da <__env_unlock>:
   db6da:	4770      	bx	lr

000db6dc <dynalib_user>:
   db6dc:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   db6ec:	0000 0000                                   ....

000db6f0 <_ZTV16JsonWriterStaticILj256EE>:
	...
   db6f8:	40d1 000d 40e5 000d 6c50 6e61 2074 6157     .@...@..Plant Wa
   db708:	6574 6572 0064 4d42 3245 3038 7420 7365     tered.BME280 tes
   db718:	0074 6f43 6c75 2064 6f6e 2074 6966 646e     t.Could not find
   db728:	6120 7620 6c61 6469 4220 454d 3832 2030      a valid BME280 
   db738:	6573 736e 726f 202c 6863 6365 206b 6977     sensor, check wi
   db748:	6972 676e 202c 6461 7264 7365 2c73 7320     ring, address, s
   db758:	6e65 6f73 2072 4449 0021 6553 736e 726f     ensor ID!.Sensor
   db768:	4449 7720 7361 203a 7830 2000 2020 2020     ID was: 0x.     
   db778:	2020 4920 2044 666f 3020 4678 2046 7270        ID of 0xFF pr
   db788:	626f 6261 796c 6d20 6165 736e 6120 6220     obably means a b
   db798:	6461 6120 6464 6572 7373 202c 2061 4d42     ad address, a BM
   db7a8:	2050 3831 2030 726f 4220 504d 3020 3538     P 180 or BMP 085
   db7b8:	000a 2020 4920 2044 666f 3020 3578 2d36     ..   ID of 0x56-
   db7c8:	7830 3835 7220 7065 6572 6573 746e 2073     0x58 represents 
   db7d8:	2061 4d42 2050 3832 2c30 000a 2020 2020     a BMP 280,..    
   db7e8:	2020 2020 4449 6f20 2066 7830 3036 7220         ID of 0x60 r
   db7f8:	7065 6572 6573 746e 2073 2061 4d42 2045     epresents a BME 
   db808:	3832 2e30 000a 2020 2020 2020 2020 4449     280...        ID
   db818:	6f20 2066 7830 3136 7220 7065 6572 6573      of 0x61 represe
   db828:	746e 2073 2061 4d42 2045 3836 2e30 000a     nts a BME 680...
   db838:	6854 2065 6925 3e20 2520 2c69 7420 7275     The %i > %i, tur
   db848:	696e 676e 6f20 206e 7570 706d 5400 6568     ning on pump.The
   db858:	2520 2069 203c 6925 6e20 206f 6177 6574      %i < %i no wate
   db868:	2072 656e 6465 6465 4100 2074 7325 7420     r needed.At %s t
   db878:	6568 6d20 696f 7473 7275 2065 6572 6461     he moisture read
   db888:	6e69 2067 7369 2520 2069 000a 6854 2065     ing is %i ..The 
   db898:	6974 656d 6920 2073 7325 0a20 5400 6d65     time is %s ..Tem
   db8a8:	6570 6172 7574 6572 3d20 0020 2a20 0043     perature = . *C.
   db8b8:	7250 7365 7573 6572 3d20 0020 6820 6150     Pressure = . hPa
   db8c8:	4100 7070 6f72 2e78 4120 746c 7469 6475     .Approx. Altitud
   db8d8:	2065 203d 2000 006d 7548 696d 6964 7974     e = . m.Humidity
   db8e8:	3d20 0020 2520 2c00 6500 766e 762d 6c61      = . %.,.env-val
   db8f8:	0073 7544 7473 5620 6c61 6575 3d20 2520     s.Dust Value = %
   db908:	2e30 6632 0a20 7800 6925 0020 7542 7474     0.2f ..x%i .Butt
   db918:	6e6f 5320 6174 6574 6920 2073 6925 0a20     on State is %i .
   db928:	7200 7361 6168 0070 6f69 612e 6164 7266     .rashap.io.adafr
   db938:	6975 2e74 6f63 006d 3935 3138 3936 6166     uit.com.598169fa
   db948:	6233 3961 3634 3633 3439 6131 3333 3930     3ba94636941a3309
   db958:	3637 3465 6532 6332 7200 7361 6168 2f70     76e42e2c.rashap/
   db968:	6566 6465 2f73 6f48 656d 545f 6d65 6570     feeds/Home_Tempe
   db978:	6172 7574 6572 7200 7361 6168 2f70 6566     rature.rashap/fe
   db988:	6465 2f73 6f48 656d 4d5f 696f 7473 7275     eds/Home_Moistur
   db998:	0065 6172 6873 7061 662f 6565 7364 482f     e.rashap/feeds/H
   db9a8:	6d6f 5f65 6157 6574 0072 6172 6873 7061     ome_Water.rashap
   db9b8:	662f 6565 7364 482f 6d6f 5f65 7250 7365     /feeds/Home_Pres
   db9c8:	7573 6572 7200 7361 6168 2f70 6566 6465     sure.rashap/feed
   db9d8:	2f73 6f48 656d 485f 6d75 6469 7469 0079     s/Home_Humidity.
   db9e8:	6172 6873 7061 662f 6565 7364 4c2f 4445     rashap/feeds/LED
   db9f8:	4f5f 006e                                   _On.

000db9fc <_ZTV10JsonBuffer>:
	...
   dba04:	4ae9 000d 4b05 000d                         .J...K..

000dba0c <_ZTV10JsonWriter>:
	...
   dba14:	4b19 000d 4b2d 000d 6c25 0075 3025 7834     .K..-K..%lu.%04x
   dba24:	5c00 2575 3430 0058 7274 6575 6600 6c61     .\u%04X.true.fal
   dba34:	6573 2500 2a2e 0066 6625 2500 2a2e 666c     se.%.*f.%f.%.*lf
   dba44:	2500 666c 0000 0000                         .%lf....

000dba4c <_ZTVN8particle13__SPISettingsE>:
	...
   dba54:	4db9 000d 6564 6166 6c75 2074 4d00 4253     .M..default .MSB
   dba64:	4c00 4253 3c00 5053 5349 7465 6974 676e     .LSB.<SPISetting
   dba74:	2073 6564 6166 6c75 3e74 3c00 5053 5349     s default>.<SPIS
   dba84:	7465 6974 676e 2073 7325 6c25 2075 7325     ettings %s%lu %s
   dba94:	4d20 444f 2545 3e64 0000 0000                MODE%d>....

000dbaa0 <_ZTV19Adafruit_MQTT_SPARK>:
	...
   dbaa8:	40cd 000d 49a5 000d 5709 000d 57b5 000d     .@...I...W...W..
   dbab8:	57e7 000d 571d 000d 575d 000d               .W...W..]W..

000dbac4 <_ZTV13Adafruit_MQTT>:
	...
   dbad4:	40a9 000d 40a9 000d 40a9 000d 40a9 000d     .@...@...@...@..
   dbae4:	40a9 000d 5b20 7830 3000 5d00 202c 0a00     .@.. [0x.0.], ..
   dbaf4:	0009 7244 706f 6570 2064 2061 6170 6b63     ..Dropped a pack
   dbb04:	7465 5500 6b6e 6f6e 6e77 6520 7272 726f     et.Unknown error
   dbb14:	4d00 5451 0054 2525 6425 252e 6664 4600     .MQTT.%%%d.%df.F
   dbb24:	6961 656c 2064 6f74 7320 6275 6373 6972     ailed to subscri
   dbb34:	6562 4300 6e6f 656e 7463 6f69 206e 6166     be.Connection fa
   dbb44:	6c69 6465 5400 6568 5320 7265 6576 2072     iled.The Server 
   dbb54:	6f64 7365 6e20 746f 7320 7075 6f70 7472     does not support
   dbb64:	7420 6568 6c20 7665 6c65 6f20 2066 6874      the level of th
   dbb74:	2065 514d 5454 7020 6f72 6f74 6f63 206c     e MQTT protocol 
   dbb84:	6572 7571 7365 6574 0064 6854 2065 6c43     requested.The Cl
   dbb94:	6569 746e 6920 6564 746e 6669 6569 2072     ient identifier 
   dbba4:	7369 6320 726f 6572 7463 5520 4654 382d     is correct UTF-8
   dbbb4:	6220 7475 6e20 746f 6120 6c6c 776f 6465      but not allowed
   dbbc4:	6220 2079 6874 2065 6553 7672 7265 5400      by the Server.T
   dbbd4:	6568 4d20 5451 2054 6573 7672 6369 2065     he MQTT service 
   dbbe4:	7369 7520 616e 6176 6c69 6261 656c 5400     is unavailable.T
   dbbf4:	6568 6420 7461 2061 6e69 7420 6568 7520     he data in the u
   dbc04:	6573 2072 616e 656d 6f20 2072 6170 7373     ser name or pass
   dbc14:	6f77 6472 6920 2073 616d 666c 726f 656d     word is malforme
   dbc24:	0064 6f4e 2074 7561 6874 726f 7a69 6465     d.Not authorized
   dbc34:	7420 206f 6f63 6e6e 6365 0074 7845 6563      to connect.Exce
   dbc44:	6465 6465 7220 6365 6e6f 656e 7463 7220     eded reconnect r
   dbc54:	7461 2065 696c 696d 2e74 5020 656c 7361     ate limit. Pleas
   dbc64:	2065 7274 2079 6761 6961 206e 616c 6574     e try again late
   dbc74:	2e72 5900 756f 6820 7661 2065 6562 6e65     r..You have been
   dbc84:	6220 6e61 656e 2064 7266 6d6f 6320 6e6f      banned from con
   dbc94:	656e 7463 6e69 2e67 5020 656c 7361 2065     necting. Please 
   dbca4:	6f63 746e 6361 2074 6874 2065 514d 5454     contact the MQTT
   dbcb4:	7320 7265 6576 2072 6461 696d 696e 7473      server administ
   dbcc4:	6172 6f74 2072 6f66 2072 6f6d 6572 6420     rator for more d
   dbcd4:	7465 6961 736c 002e                         etails..

000dbcdc <_ZTVN5spark13EthernetClassE>:
	...
   dbce4:	64c7 000d 64bd 000d 64b3 000d 64a9 000d     .d...d...d...d..
   dbcf4:	649d 000d 6491 000d 6485 000d 647d 000d     .d...d...d..}d..
   dbd04:	6473 000d 6469 000d 8231 000d               sd..id..1...

000dbd10 <_ZTV8SPIClass>:
	...
   dbd18:	64e5 000d 64e7 000d                         .d...d..

000dbd20 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   dbd20:	0800 1810 2820 3830 616e 006e 766f 0066     .... (08nan.ovf.
   dbd30:	6e69 0066 6162 6475 5300 7265 6169 006c     inf.baud.Serial.
   dbd40:	6553 6972 6c61 0031 7974 6570 7000 7261     Serial1.type.par
   dbd50:	6d61 6300 646d 6900 0064 6e68 0064 7473     am.cmd.id.hnd.st
   dbd60:	6d72 6600 6c69 0074 766c 006c 6461 4864     rm.filt.lvl.addH
   dbd70:	6e61 6c64 7265 7200 6d65 766f 4865 6e61     andler.removeHan
   dbd80:	6c64 7265 6500 756e 486d 6e61 6c64 7265     dler.enumHandler
   dbd90:	0073 534a 4e4f 7453 6572 6d61 6f4c 4867     s.JSONStreamLogH
   dbda0:	6e61 6c64 7265 6100 7070 2500 3130 7530     andler.app.%010u
   dbdb0:	0020 205d 2800 3a29 0020 5b20 6300 646f      .] .(): . [.cod
   dbdc0:	2065 203d 2500 0069 6564 6174 6c69 2073     e = .%i.details 
   dbdd0:	203d 0d00 000a 6e6c 6600 006e 6f63 6564     = ....ln.fn.code
   dbde0:	6400 7465 6961 006c 6f6e 656e 7400 6172     .detail.none.tra
   dbdf0:	6563 6900 666e 006f 6177 6e72 7000 6e61     ce.info.warn.pan
   dbe00:	6369 6100 6c6c 2500 302b 6433 253a 3230     ic.all.%+03d:%02
   dbe10:	0075 5925 252d 2d6d 6425 2554 3a48 4d25     u.%Y-%m-%dT%H:%M
   dbe20:	253a 2553 007a 7361 7463 6d69 0065 0000     :%S%z.asctime...

000dbe30 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dbe38:	7065 000d 706b 000d 70af 000d 7079 000d     ep..kp...p..yp..
   dbe48:	7067 000d                                   gp..

000dbe4c <_ZTV9IPAddress>:
	...
   dbe54:	75fd 000d 75ed 000d 75ef 000d               .u...u...u..

000dbe60 <_ZTV9USBSerial>:
	...
   dbe68:	7701 000d 7751 000d 775f 000d 6ad9 000d     .w..Qw.._w...j..
   dbe78:	773d 000d 7703 000d 7719 000d 774b 000d     =w...w...w..Kw..
   dbe88:	772f 000d 76fd 000d                         /w...v..

000dbe90 <_ZTV11USARTSerial>:
	...
   dbe98:	780d 000d 785d 000d 786b 000d 6ad9 000d     .x..]x..kx...j..
   dbea8:	7821 000d 7843 000d 782f 000d 7857 000d     !x..Cx../x..Wx..
   dbeb8:	780f 000d 7813 000d                         .x...x..

000dbec0 <_ZTV7TwoWire>:
	...
   dbec8:	7939 000d 7983 000d 795b 000d 793b 000d     9y...y..[y..;y..
   dbed8:	7963 000d 796b 000d 7973 000d 797b 000d     cy..ky..sy..{y..

000dbee8 <_ZTVN5spark9MeshClassE>:
	...
   dbef0:	7a9f 000d 7a95 000d 7a8b 000d 7a81 000d     .z...z...z...z..
   dbf00:	7a75 000d 7a69 000d 7a5d 000d 7a55 000d     uz..iz..]z..Uz..
   dbf10:	7a4b 000d 7a41 000d 8231 000d               Kz..Az..1...

000dbf1c <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   dbf24:	7c45 000d 7c4b 000d 8133 000d 7c59 000d     E|..K|..3...Y|..
   dbf34:	7c47 000d                                   G|..

000dbf38 <_ZTV9TCPClient>:
	...
   dbf40:	45ad 000d 45c5 000d 7bbd 000d 7bd7 000d     .E...E...{...{..
   dbf50:	7fd9 000d 7d2b 000d 7cfd 000d 7c01 000d     ....+}...|...|..
   dbf60:	7eb5 000d 7db1 000d 7d5f 000d 7fa9 000d     .~...}.._}......
   dbf70:	7c03 000d 7c3b 000d 7be9 000d 7c5d 000d     .|..;|...{..]|..
   dbf80:	7cdd 000d 6977 6972 676e 7200 6365 2076     .|..wiring.recv 
   dbf90:	7265 6f72 2072 203d 6425 0000               error = %d..

000dbf9c <_ZTVN5spark9WiFiClassE>:
	...
   dbfa4:	81a9 000d 819f 000d 8195 000d 814b 000d     ............K...
   dbfb4:	8189 000d 817d 000d 8171 000d 8169 000d     ....}...q...i...
   dbfc4:	815f 000d 8155 000d 8231 000d               _...U...1...

000dbfd0 <_ZTVN5spark12NetworkClassE>:
	...
   dbfd8:	81c9 000d 81d3 000d 81dd 000d 81e7 000d     ................
   dbfe8:	81f1 000d 81fd 000d 8209 000d 8215 000d     ................
   dbff8:	821d 000d 8227 000d 8231 000d               ....'...1...

000dc004 <_ZSt7nothrow>:
   dc004:	0000 0000 6f70 0077 0000 0000               ....pow.....

000dc010 <TWO52>:
   dc010:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

000dc020 <day_name.4725>:
   dc020:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   dc030:	6972 6153 4a74                                   riSat

000dc035 <mon_name.4726>:
   dc035:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   dc045:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   dc055:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
   dc065:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
   dc075:	6425 000a                                   %d..

000dc079 <_ctype_>:
   dc079:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   dc089:	2020 2020 2020 2020 2020 2020 2020 2020                     
   dc099:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   dc0a9:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   dc0b9:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   dc0c9:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   dc0d9:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   dc0e9:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   dc0f9:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000dc17c <__sf_fake_stdin>:
	...

000dc19c <__sf_fake_stdout>:
	...

000dc1bc <__sf_fake_stderr>:
	...

000dc1dc <__month_lengths>:
   dc1dc:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   dc1ec:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   dc1fc:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   dc20c:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   dc21c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   dc22c:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   dc23c:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
   dc24c:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
   dc25c:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
   dc26c:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

000dc278 <link_const_variable_data_end>:
   dc278:	000d49b5 	.word	0x000d49b5
   dc27c:	000d4db5 	.word	0x000d4db5
   dc280:	000d5705 	.word	0x000d5705
   dc284:	000d5847 	.word	0x000d5847
   dc288:	000d5e0b 	.word	0x000d5e0b
   dc28c:	000d64d1 	.word	0x000d64d1
   dc290:	000d669d 	.word	0x000d669d
   dc294:	000d6ab1 	.word	0x000d6ab1
   dc298:	000d6de9 	.word	0x000d6de9
   dc29c:	000d6ee1 	.word	0x000d6ee1
   dc2a0:	000d6f39 	.word	0x000d6f39
   dc2a4:	000d7b6d 	.word	0x000d7b6d
   dc2a8:	000d81b5 	.word	0x000d81b5
   dc2ac:	000d82fd 	.word	0x000d82fd
   dc2b0:	000d8509 	.word	0x000d8509
   dc2b4:	000d858d 	.word	0x000d858d
   dc2b8:	000d8651 	.word	0x000d8651
   dc2bc:	000d8715 	.word	0x000d8715
