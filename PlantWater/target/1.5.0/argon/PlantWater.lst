
c:/Users/IoTPa/Documents/jarvis/PlantWater/target/1.5.0/argon/PlantWater.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000034c4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d74e0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000000d0  2003e270  000d74e4  0001e270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000004b0  2003e340  2003e340  0002e340  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d75b4  000d75b4  000275b4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d75dc  000d75dc  000275dc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000f0f05  00000000  00000000  000275e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00012a8c  00000000  00000000  001184e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00022cc4  00000000  00000000  0012af71  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000028d8  00000000  00000000  0014dc35  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004e48  00000000  00000000  0015050d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00036a3b  00000000  00000000  00155355  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002cabb  00000000  00000000  0018bd90  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00106d0b  00000000  00000000  001b884b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000defc  00000000  00000000  002bf558  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fb1d 	bl	d666c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fb22 	bl	d6682 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e270 	.word	0x2003e270
   d4048:	000d74e4 	.word	0x000d74e4
   d404c:	2003e340 	.word	0x2003e340
   d4050:	2003e340 	.word	0x2003e340
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 f933 	bl	d52c4 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d74e0 	.word	0x000d74e0
   d4080:	000d74a4 	.word	0x000d74a4

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b82c 	b.w	d40e0 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f955 	bl	d4338 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 b8d9 	b.w	d5248 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 bd5b 	b.w	d4b50 <malloc>

000d409a <_ZdlPv>:
   d409a:	f000 bd61 	b.w	d4b60 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 bd5f 	b.w	d4b60 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr
	...

000d40b4 <_ZN16JsonWriterStaticILj256EED1Ev>:
 * variable.
 *
 * @param BUFFER_SIZE The size of the buffer to reserve.
 */
template <size_t BUFFER_SIZE>
class JsonWriterStatic : public JsonWriter {
   d40b4:	b510      	push	{r4, lr}
   d40b6:	4b03      	ldr	r3, [pc, #12]	; (d40c4 <_ZN16JsonWriterStaticILj256EED1Ev+0x10>)
   d40b8:	6003      	str	r3, [r0, #0]
   d40ba:	4604      	mov	r4, r0
   d40bc:	f000 f9f2 	bl	d44a4 <_ZN10JsonWriterD1Ev>
   d40c0:	4620      	mov	r0, r4
   d40c2:	bd10      	pop	{r4, pc}
   d40c4:	000d6ef0 	.word	0x000d6ef0

000d40c8 <_ZN16JsonWriterStaticILj256EED0Ev>:
   d40c8:	b510      	push	{r4, lr}
   d40ca:	4604      	mov	r4, r0
   d40cc:	f7ff fff2 	bl	d40b4 <_ZN16JsonWriterStaticILj256EED1Ev>
   d40d0:	4620      	mov	r0, r4
   d40d2:	f44f 7198 	mov.w	r1, #304	; 0x130
   d40d6:	f002 f829 	bl	d612c <_ZdlPvj>
   d40da:	4620      	mov	r0, r4
   d40dc:	bd10      	pop	{r4, pc}
	...

000d40e0 <setup>:
char currentTime[25];
char current[9];
String t;
String t2;

void setup() {
   d40e0:	b510      	push	{r4, lr}
  Serial.begin(9600);
   d40e2:	f001 fcb3 	bl	d5a4c <_Z16_fetch_usbserialv>
   d40e6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40ea:	f001 fca3 	bl	d5a34 <_ZN9USBSerial5beginEl>
  pinMode(soilPin,INPUT);
   d40ee:	4b14      	ldr	r3, [pc, #80]	; (d4140 <setup+0x60>)
   d40f0:	2100      	movs	r1, #0
   d40f2:	8818      	ldrh	r0, [r3, #0]
   d40f4:	f001 ff6a 	bl	d5fcc <pinMode>
  pinMode(pumpPin,OUTPUT);
   d40f8:	4b12      	ldr	r3, [pc, #72]	; (d4144 <setup+0x64>)
   d40fa:	2101      	movs	r1, #1
   d40fc:	8818      	ldrh	r0, [r3, #0]
   d40fe:	f001 ff65 	bl	d5fcc <pinMode>
  Time.zone(-6); // set timezone to MDT
   d4102:	eeb9 0a08 	vmov.f32	s0, #152	; 0xc0c00000 -6.0
   d4106:	f000 ffe1 	bl	d50cc <_ZN9TimeClass4zoneEf>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d410a:	f000 fcf9 	bl	d4b00 <spark_cloud_flag_connected>
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
    {
        if (!connected()) {
   d410e:	b110      	cbz	r0, d4116 <setup+0x36>
            return false;
        }
        return spark_sync_time(NULL);
   d4110:	2000      	movs	r0, #0
   d4112:	f000 fd05 	bl	d4b20 <spark_sync_time>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d4116:	2300      	movs	r3, #0
   d4118:	2202      	movs	r2, #2
   d411a:	490b      	ldr	r1, [pc, #44]	; (d4148 <setup+0x68>)
   d411c:	480b      	ldr	r0, [pc, #44]	; (d414c <setup+0x6c>)
   d411e:	f000 fcdf 	bl	d4ae0 <spark_variable>
   d4122:	2300      	movs	r3, #0
   d4124:	2202      	movs	r2, #2
   d4126:	490a      	ldr	r1, [pc, #40]	; (d4150 <setup+0x70>)
   d4128:	480a      	ldr	r0, [pc, #40]	; (d4154 <setup+0x74>)
   d412a:	f000 fcd9 	bl	d4ae0 <spark_variable>
   d412e:	2300      	movs	r3, #0
   d4130:	2201      	movs	r2, #1
   d4132:	4909      	ldr	r1, [pc, #36]	; (d4158 <setup+0x78>)
   d4134:	4809      	ldr	r0, [pc, #36]	; (d415c <setup+0x7c>)
  Particle.syncTime(); 
  Particle.variable("Moisture", moist);
  Particle.variable("Temperature", temp);
  Particle.variable("Plant Watered", watered);
}
   d4136:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d413a:	f000 bcd1 	b.w	d4ae0 <spark_variable>
   d413e:	bf00      	nop
   d4140:	2003e274 	.word	0x2003e274
   d4144:	2003e27c 	.word	0x2003e27c
   d4148:	2003e37c 	.word	0x2003e37c
   d414c:	000d6ef8 	.word	0x000d6ef8
   d4150:	2003e350 	.word	0x2003e350
   d4154:	000d6f01 	.word	0x000d6f01
   d4158:	2003e378 	.word	0x2003e378
   d415c:	000d6f0d 	.word	0x000d6f0d

000d4160 <_Z10waterPlanti>:
  createEventPayLoad(moist,temp,watered);

  delay(soilDelay);
}

bool waterPlant(int moistVal) {
   d4160:	b510      	push	{r4, lr}
  if(moistVal > threshold) {
   d4162:	4b0a      	ldr	r3, [pc, #40]	; (d418c <_Z10waterPlanti+0x2c>)
   d4164:	681b      	ldr	r3, [r3, #0]
   d4166:	4283      	cmp	r3, r0
   d4168:	da0e      	bge.n	d4188 <_Z10waterPlanti+0x28>
    digitalWrite(pumpPin,HIGH);
   d416a:	4c09      	ldr	r4, [pc, #36]	; (d4190 <_Z10waterPlanti+0x30>)
   d416c:	2101      	movs	r1, #1
   d416e:	8820      	ldrh	r0, [r4, #0]
   d4170:	f001 ff3d 	bl	d5fee <digitalWrite>
    delay(waterTime);
   d4174:	4b07      	ldr	r3, [pc, #28]	; (d4194 <_Z10waterPlanti+0x34>)
   d4176:	6818      	ldr	r0, [r3, #0]
   d4178:	f001 f818 	bl	d51ac <delay>
    digitalWrite(pumpPin,LOW);
   d417c:	8820      	ldrh	r0, [r4, #0]
   d417e:	2100      	movs	r1, #0
   d4180:	f001 ff35 	bl	d5fee <digitalWrite>
   d4184:	2001      	movs	r0, #1
   d4186:	bd10      	pop	{r4, pc}
    return true;
  }
  else
  {
    return false;
   d4188:	2000      	movs	r0, #0
  }
    
}
   d418a:	bd10      	pop	{r4, pc}
   d418c:	2003e270 	.word	0x2003e270
   d4190:	2003e27c 	.word	0x2003e27c
   d4194:	2003e280 	.word	0x2003e280

000d4198 <_Z10printMoisti>:


void printMoist(int moistVal) {
   d4198:	b570      	push	{r4, r5, r6, lr}
   d419a:	b086      	sub	sp, #24
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   d419c:	f000 fff5 	bl	d518a <_ZN9TimeClass3nowEv>
  t = Time.timeStr(); 
   d41a0:	4c1f      	ldr	r4, [pc, #124]	; (d4220 <_Z10printMoisti+0x88>)
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d41a2:	4e20      	ldr	r6, [pc, #128]	; (d4224 <_Z10printMoisti+0x8c>)
   d41a4:	4d20      	ldr	r5, [pc, #128]	; (d4228 <_Z10printMoisti+0x90>)
   d41a6:	4601      	mov	r1, r0
   d41a8:	a802      	add	r0, sp, #8
   d41aa:	f000 ffab 	bl	d5104 <_ZN9TimeClass7timeStrEl>
   d41ae:	a902      	add	r1, sp, #8
   d41b0:	4620      	mov	r0, r4
   d41b2:	f000 fe53 	bl	d4e5c <_ZN6StringaSEOS_>
   d41b6:	a802      	add	r0, sp, #8
   d41b8:	f000 fdd9 	bl	d4d6e <_ZN6StringD1Ev>
   d41bc:	4631      	mov	r1, r6
   d41be:	4620      	mov	r0, r4
   d41c0:	2300      	movs	r3, #0
   d41c2:	2219      	movs	r2, #25
   d41c4:	f000 fe76 	bl	d4eb4 <_ZNK6String8getBytesEPhjj>
  t.toCharArray(currentTime,25);
  t2 = t.substring(11,19);
   d41c8:	4621      	mov	r1, r4
   d41ca:	4c18      	ldr	r4, [pc, #96]	; (d422c <_Z10printMoisti+0x94>)
   d41cc:	2313      	movs	r3, #19
   d41ce:	220b      	movs	r2, #11
   d41d0:	a802      	add	r0, sp, #8
   d41d2:	f000 fe87 	bl	d4ee4 <_ZNK6String9substringEjj>
   d41d6:	a902      	add	r1, sp, #8
   d41d8:	4620      	mov	r0, r4
   d41da:	f000 fe3f 	bl	d4e5c <_ZN6StringaSEOS_>
   d41de:	a802      	add	r0, sp, #8
   d41e0:	f000 fdc5 	bl	d4d6e <_ZN6StringD1Ev>
   d41e4:	2300      	movs	r3, #0
   d41e6:	2209      	movs	r2, #9
   d41e8:	4629      	mov	r1, r5
   d41ea:	4620      	mov	r0, r4
   d41ec:	f000 fe62 	bl	d4eb4 <_ZNK6String8getBytesEPhjj>
  t2.toCharArray(current,9);
  Serial.println(t2);
   d41f0:	f001 fc2c 	bl	d5a4c <_Z16_fetch_usbserialv>
   d41f4:	6821      	ldr	r1, [r4, #0]
   d41f6:	f000 feee 	bl	d4fd6 <_ZN5Print7printlnEPKc>
  Serial.printf("At %s the moisture reading is %i \n",currentTime,moist);
   d41fa:	f001 fc27 	bl	d5a4c <_Z16_fetch_usbserialv>
   d41fe:	4b0c      	ldr	r3, [pc, #48]	; (d4230 <_Z10printMoisti+0x98>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d4200:	4a0c      	ldr	r2, [pc, #48]	; (d4234 <_Z10printMoisti+0x9c>)
   d4202:	681b      	ldr	r3, [r3, #0]
   d4204:	9300      	str	r3, [sp, #0]
   d4206:	2100      	movs	r1, #0
   d4208:	4633      	mov	r3, r6
   d420a:	f000 ff0e 	bl	d502a <_ZN5Print11printf_implEbPKcz>
  //Serial.printf("At %s the moisture reading is %i \n",Time.timeStr().c_str(),moist);
  Serial.printf("The time is %s \n",current);
   d420e:	f001 fc1d 	bl	d5a4c <_Z16_fetch_usbserialv>
   d4212:	462b      	mov	r3, r5
   d4214:	4a08      	ldr	r2, [pc, #32]	; (d4238 <_Z10printMoisti+0xa0>)
   d4216:	2100      	movs	r1, #0
   d4218:	f000 ff07 	bl	d502a <_ZN5Print11printf_implEbPKcz>
}
   d421c:	b006      	add	sp, #24
   d421e:	bd70      	pop	{r4, r5, r6, pc}
   d4220:	2003e368 	.word	0x2003e368
   d4224:	2003e380 	.word	0x2003e380
   d4228:	2003e344 	.word	0x2003e344
   d422c:	2003e354 	.word	0x2003e354
   d4230:	2003e37c 	.word	0x2003e37c
   d4234:	000d6f1b 	.word	0x000d6f1b
   d4238:	000d6f3e 	.word	0x000d6f3e

000d423c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d423c:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d423e:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4240:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d4242:	b17c      	cbz	r4, d4264 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4244:	6863      	ldr	r3, [r4, #4]
   d4246:	3b01      	subs	r3, #1
   d4248:	6063      	str	r3, [r4, #4]
   d424a:	b95b      	cbnz	r3, d4264 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d424c:	6823      	ldr	r3, [r4, #0]
   d424e:	4620      	mov	r0, r4
   d4250:	689b      	ldr	r3, [r3, #8]
   d4252:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4254:	68a3      	ldr	r3, [r4, #8]
   d4256:	3b01      	subs	r3, #1
   d4258:	60a3      	str	r3, [r4, #8]
   d425a:	b91b      	cbnz	r3, d4264 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d425c:	6823      	ldr	r3, [r4, #0]
   d425e:	4620      	mov	r0, r4
   d4260:	68db      	ldr	r3, [r3, #12]
   d4262:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4264:	4628      	mov	r0, r5
   d4266:	bd38      	pop	{r3, r4, r5, pc}

000d4268 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>:
	 *
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
   d4268:	b570      	push	{r4, r5, r6, lr}
   d426a:	4604      	mov	r4, r0
   d426c:	460e      	mov	r6, r1
   d426e:	4615      	mov	r5, r2
		insertCheckSeparator();
   d4270:	f000 fa20 	bl	d46b4 <_ZN10JsonWriter20insertCheckSeparatorEv>
	 * @brief Inserts a quoted string value. This escapes special characters and encodes utf-8.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const char *value) { insertString(value, true); }
   d4274:	2201      	movs	r2, #1
   d4276:	4631      	mov	r1, r6
   d4278:	4620      	mov	r0, r4
   d427a:	f000 f98f 	bl	d459c <_ZN10JsonWriter12insertStringEPKcb>
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
   d427e:	4620      	mov	r0, r4
   d4280:	213a      	movs	r1, #58	; 0x3a
   d4282:	f000 f93f 	bl	d4504 <_ZN10JsonWriter10insertCharEc>
	 * @brief Inserts an integer value.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separators between items.
	 */
	void insertValue(int value) { insertsprintf("%d", value); }
   d4286:	462a      	mov	r2, r5
   d4288:	4620      	mov	r0, r4
   d428a:	4902      	ldr	r1, [pc, #8]	; (d4294 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_+0x2c>)
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
		insertValue(value);
	}
   d428c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	 * @brief Inserts an integer value.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separators between items.
	 */
	void insertValue(int value) { insertsprintf("%d", value); }
   d4290:	f000 b977 	b.w	d4582 <_ZN10JsonWriter13insertsprintfEPKcz>
   d4294:	000d6f4f 	.word	0x000d6f4f

000d4298 <_Z18createEventPayLoadiib>:

void createEventPayLoad(int moistValue, int tempValue, bool waterED) {
   d4298:	b570      	push	{r4, r5, r6, lr}
   d429a:	b0d2      	sub	sp, #328	; 0x148
   d429c:	4606      	mov	r6, r0
   d429e:	460d      	mov	r5, r1
   d42a0:	4614      	mov	r4, r2
 * @param BUFFER_SIZE The size of the buffer to reserve.
 */
template <size_t BUFFER_SIZE>
class JsonWriterStatic : public JsonWriter {
public:
	explicit JsonWriterStatic() : JsonWriter(staticBuffer, BUFFER_SIZE) {};
   d42a2:	a912      	add	r1, sp, #72	; 0x48
   d42a4:	f44f 7280 	mov.w	r2, #256	; 0x100
   d42a8:	a806      	add	r0, sp, #24
   d42aa:	f000 f919 	bl	d44e0 <_ZN10JsonWriterC1EPcj>
   d42ae:	4b1c      	ldr	r3, [pc, #112]	; (d4320 <_Z18createEventPayLoadiib+0x88>)
   d42b0:	9306      	str	r3, [sp, #24]
	void init();

	/**
	 * @brief Start a new JSON object. Make sure you finish it with finishObjectOrArray()
	 */
	bool startObject() { return startObjectOrArray('{', '}'); };
   d42b2:	227d      	movs	r2, #125	; 0x7d
   d42b4:	217b      	movs	r1, #123	; 0x7b
   d42b6:	a806      	add	r0, sp, #24
   d42b8:	f000 fa07 	bl	d46ca <_ZN10JsonWriter18startObjectOrArrayEcc>
  JsonWriterStatic<256> jw;
  {
    JsonWriterAutoObject obj(&jw);

    jw.insertKeyValue("Moisture", moistValue);
   d42bc:	4632      	mov	r2, r6
   d42be:	a806      	add	r0, sp, #24
   d42c0:	4918      	ldr	r1, [pc, #96]	; (d4324 <_Z18createEventPayLoadiib+0x8c>)
   d42c2:	f7ff ffd1 	bl	d4268 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
    jw.insertKeyValue("Temperature", tempValue);
   d42c6:	462a      	mov	r2, r5
   d42c8:	4917      	ldr	r1, [pc, #92]	; (d4328 <_Z18createEventPayLoadiib+0x90>)
   d42ca:	a806      	add	r0, sp, #24
   d42cc:	f7ff ffcc 	bl	d4268 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
   d42d0:	a806      	add	r0, sp, #24
   d42d2:	f000 f9ef 	bl	d46b4 <_ZN10JsonWriter20insertCheckSeparatorEv>
	 * @brief Inserts a quoted string value. This escapes special characters and encodes utf-8.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const char *value) { insertString(value, true); }
   d42d6:	2201      	movs	r2, #1
   d42d8:	a806      	add	r0, sp, #24
   d42da:	4914      	ldr	r1, [pc, #80]	; (d432c <_Z18createEventPayLoadiib+0x94>)
   d42dc:	f000 f95e 	bl	d459c <_ZN10JsonWriter12insertStringEPKcb>
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
   d42e0:	a806      	add	r0, sp, #24
   d42e2:	213a      	movs	r1, #58	; 0x3a
   d42e4:	f000 f90e 	bl	d4504 <_ZN10JsonWriter10insertCharEc>
		insertValue(value);
   d42e8:	4621      	mov	r1, r4
   d42ea:	a806      	add	r0, sp, #24
   d42ec:	f000 fa06 	bl	d46fc <_ZN10JsonWriter11insertValueEb>

	/**
	 * @brief End the object
	 */
	~JsonWriterAutoObject() {
		jw->finishObjectOrArray();
   d42f0:	a806      	add	r0, sp, #24
   d42f2:	f000 f915 	bl	d4520 <_ZN10JsonWriter19finishObjectOrArrayEv>
   d42f6:	9b07      	ldr	r3, [sp, #28]
   d42f8:	9303      	str	r3, [sp, #12]
   d42fa:	4b0d      	ldr	r3, [pc, #52]	; (d4330 <_Z18createEventPayLoadiib+0x98>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d42fc:	9a03      	ldr	r2, [sp, #12]
   d42fe:	781b      	ldrb	r3, [r3, #0]
   d4300:	490c      	ldr	r1, [pc, #48]	; (d4334 <_Z18createEventPayLoadiib+0x9c>)
   d4302:	f88d 3000 	strb.w	r3, [sp]
   d4306:	a804      	add	r0, sp, #16
   d4308:	233c      	movs	r3, #60	; 0x3c
   d430a:	f001 f949 	bl	d55a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d430e:	a805      	add	r0, sp, #20
   d4310:	f7ff ff94 	bl	d423c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  //Serial.printf("At %s the moisture reading is %i \n",Time.timeStr().c_str(),moist);
  Serial.printf("The time is %s \n",current);
}

void createEventPayLoad(int moistValue, int tempValue, bool waterED) {
  JsonWriterStatic<256> jw;
   d4314:	a806      	add	r0, sp, #24
   d4316:	f7ff fecd 	bl	d40b4 <_ZN16JsonWriterStaticILj256EED1Ev>
    jw.insertKeyValue("Moisture", moistValue);
    jw.insertKeyValue("Temperature", tempValue);
    jw.insertKeyValue("Plant Watered", waterED);
  }
  Particle.publish("env-vals",jw.getBuffer(), PRIVATE);
   d431a:	b052      	add	sp, #328	; 0x148
   d431c:	bd70      	pop	{r4, r5, r6, pc}
   d431e:	bf00      	nop
   d4320:	000d6ef0 	.word	0x000d6ef0
   d4324:	000d6ef8 	.word	0x000d6ef8
   d4328:	000d6f01 	.word	0x000d6f01
   d432c:	000d6f0d 	.word	0x000d6f0d
   d4330:	2003e364 	.word	0x2003e364
   d4334:	000d6f52 	.word	0x000d6f52

000d4338 <loop>:
  Particle.variable("Moisture", moist);
  Particle.variable("Temperature", temp);
  Particle.variable("Plant Watered", watered);
}

void loop() {
   d4338:	b5f0      	push	{r4, r5, r6, r7, lr}
  moist = analogRead(soilPin);
   d433a:	4b2e      	ldr	r3, [pc, #184]	; (d43f4 <loop+0xbc>)
   d433c:	4c2e      	ldr	r4, [pc, #184]	; (d43f8 <loop+0xc0>)
   d433e:	8818      	ldrh	r0, [r3, #0]
  watered = waterPlant(moist);
   d4340:	4e2e      	ldr	r6, [pc, #184]	; (d43fc <loop+0xc4>)

  temp = analogRead(tempPin);
   d4342:	4d2f      	ldr	r5, [pc, #188]	; (d4400 <loop+0xc8>)
   d4344:	4f2f      	ldr	r7, [pc, #188]	; (d4404 <loop+0xcc>)
  Particle.variable("Moisture", moist);
  Particle.variable("Temperature", temp);
  Particle.variable("Plant Watered", watered);
}

void loop() {
   d4346:	b089      	sub	sp, #36	; 0x24
  moist = analogRead(soilPin);
   d4348:	f001 fe6a 	bl	d6020 <analogRead>
   d434c:	6020      	str	r0, [r4, #0]
  watered = waterPlant(moist);
   d434e:	f7ff ff07 	bl	d4160 <_Z10waterPlanti>

  temp = analogRead(tempPin);
   d4352:	4b2d      	ldr	r3, [pc, #180]	; (d4408 <loop+0xd0>)
  Particle.variable("Plant Watered", watered);
}

void loop() {
  moist = analogRead(soilPin);
  watered = waterPlant(moist);
   d4354:	7030      	strb	r0, [r6, #0]

  temp = analogRead(tempPin);
   d4356:	8818      	ldrh	r0, [r3, #0]
   d4358:	f001 fe62 	bl	d6020 <analogRead>
   d435c:	6028      	str	r0, [r5, #0]
  printMoist(moist);
   d435e:	6820      	ldr	r0, [r4, #0]
   d4360:	f7ff ff1a 	bl	d4198 <_Z10printMoisti>
  Particle.publish("Moisture", String(moist),PRIVATE);
   d4364:	6821      	ldr	r1, [r4, #0]
   d4366:	220a      	movs	r2, #10
   d4368:	a804      	add	r0, sp, #16
   d436a:	f000 fd90 	bl	d4e8e <_ZN6StringC1Eih>
   d436e:	783b      	ldrb	r3, [r7, #0]
   d4370:	9a04      	ldr	r2, [sp, #16]
   d4372:	4926      	ldr	r1, [pc, #152]	; (d440c <loop+0xd4>)
   d4374:	f88d 3000 	strb.w	r3, [sp]
   d4378:	a802      	add	r0, sp, #8
   d437a:	233c      	movs	r3, #60	; 0x3c
   d437c:	f001 f910 	bl	d55a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4380:	a803      	add	r0, sp, #12
   d4382:	f7ff ff5b 	bl	d423c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4386:	a804      	add	r0, sp, #16
   d4388:	f000 fcf1 	bl	d4d6e <_ZN6StringD1Ev>
  Particle.publish("Temperature", String(temp),PRIVATE);
   d438c:	6829      	ldr	r1, [r5, #0]
   d438e:	220a      	movs	r2, #10
   d4390:	a804      	add	r0, sp, #16
   d4392:	f000 fd7c 	bl	d4e8e <_ZN6StringC1Eih>
   d4396:	783b      	ldrb	r3, [r7, #0]
   d4398:	9a04      	ldr	r2, [sp, #16]
   d439a:	491d      	ldr	r1, [pc, #116]	; (d4410 <loop+0xd8>)
   d439c:	f88d 3000 	strb.w	r3, [sp]
   d43a0:	a802      	add	r0, sp, #8
   d43a2:	233c      	movs	r3, #60	; 0x3c
   d43a4:	f001 f8fc 	bl	d55a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d43a8:	a803      	add	r0, sp, #12
   d43aa:	f7ff ff47 	bl	d423c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d43ae:	a804      	add	r0, sp, #16
   d43b0:	f000 fcdd 	bl	d4d6e <_ZN6StringD1Ev>
  Particle.publish("Plant Watered", String(watered),PRIVATE);
   d43b4:	7831      	ldrb	r1, [r6, #0]
   d43b6:	220a      	movs	r2, #10
   d43b8:	a804      	add	r0, sp, #16
   d43ba:	f000 fd68 	bl	d4e8e <_ZN6StringC1Eih>
   d43be:	783b      	ldrb	r3, [r7, #0]
   d43c0:	9a04      	ldr	r2, [sp, #16]
   d43c2:	4914      	ldr	r1, [pc, #80]	; (d4414 <loop+0xdc>)
   d43c4:	f88d 3000 	strb.w	r3, [sp]
   d43c8:	a802      	add	r0, sp, #8
   d43ca:	233c      	movs	r3, #60	; 0x3c
   d43cc:	f001 f8e8 	bl	d55a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d43d0:	a803      	add	r0, sp, #12
   d43d2:	f7ff ff33 	bl	d423c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d43d6:	a804      	add	r0, sp, #16
   d43d8:	f000 fcc9 	bl	d4d6e <_ZN6StringD1Ev>
  createEventPayLoad(moist,temp,watered);
   d43dc:	7832      	ldrb	r2, [r6, #0]
   d43de:	6829      	ldr	r1, [r5, #0]
   d43e0:	6820      	ldr	r0, [r4, #0]
   d43e2:	f7ff ff59 	bl	d4298 <_Z18createEventPayLoadiib>

  delay(soilDelay);
   d43e6:	4b0c      	ldr	r3, [pc, #48]	; (d4418 <loop+0xe0>)
   d43e8:	6818      	ldr	r0, [r3, #0]
   d43ea:	f000 fedf 	bl	d51ac <delay>
}
   d43ee:	b009      	add	sp, #36	; 0x24
   d43f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d43f2:	bf00      	nop
   d43f4:	2003e274 	.word	0x2003e274
   d43f8:	2003e37c 	.word	0x2003e37c
   d43fc:	2003e378 	.word	0x2003e378
   d4400:	2003e350 	.word	0x2003e350
   d4404:	2003e364 	.word	0x2003e364
   d4408:	2003e278 	.word	0x2003e278
   d440c:	000d6ef8 	.word	0x000d6ef8
   d4410:	000d6f01 	.word	0x000d6f01
   d4414:	000d6f0d 	.word	0x000d6f0d
   d4418:	2003e284 	.word	0x2003e284

000d441c <_GLOBAL__sub_I_soilPin>:
    jw.insertKeyValue("Moisture", moistValue);
    jw.insertKeyValue("Temperature", tempValue);
    jw.insertKeyValue("Plant Watered", waterED);
  }
  Particle.publish("env-vals",jw.getBuffer(), PRIVATE);
   d441c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d441e:	4b0f      	ldr	r3, [pc, #60]	; (d445c <_GLOBAL__sub_I_soilPin+0x40>)
int tempPin = A3;
int temp;

char currentTime[25];
char current[9];
String t;
   d4420:	4f0f      	ldr	r7, [pc, #60]	; (d4460 <_GLOBAL__sub_I_soilPin+0x44>)
   d4422:	4c10      	ldr	r4, [pc, #64]	; (d4464 <_GLOBAL__sub_I_soilPin+0x48>)
   d4424:	4e10      	ldr	r6, [pc, #64]	; (d4468 <_GLOBAL__sub_I_soilPin+0x4c>)
   d4426:	4d11      	ldr	r5, [pc, #68]	; (d446c <_GLOBAL__sub_I_soilPin+0x50>)
   d4428:	2201      	movs	r2, #1
   d442a:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d442c:	f000 f984 	bl	d4738 <HAL_Pin_Map>
   d4430:	4639      	mov	r1, r7
   d4432:	4620      	mov	r0, r4
   d4434:	f000 fce2 	bl	d4dfc <_ZN6StringC1EPK19__FlashStringHelper>
   d4438:	4620      	mov	r0, r4
String t2;
   d443a:	4c0d      	ldr	r4, [pc, #52]	; (d4470 <_GLOBAL__sub_I_soilPin+0x54>)
int tempPin = A3;
int temp;

char currentTime[25];
char current[9];
String t;
   d443c:	4632      	mov	r2, r6
   d443e:	4629      	mov	r1, r5
   d4440:	f001 fe66 	bl	d6110 <__aeabi_atexit>
String t2;
   d4444:	4639      	mov	r1, r7
   d4446:	4620      	mov	r0, r4
   d4448:	f000 fcd8 	bl	d4dfc <_ZN6StringC1EPK19__FlashStringHelper>
   d444c:	4632      	mov	r2, r6
   d444e:	4629      	mov	r1, r5
   d4450:	4620      	mov	r0, r4
    jw.insertKeyValue("Moisture", moistValue);
    jw.insertKeyValue("Temperature", tempValue);
    jw.insertKeyValue("Plant Watered", waterED);
  }
  Particle.publish("env-vals",jw.getBuffer(), PRIVATE);
   d4452:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
int temp;

char currentTime[25];
char current[9];
String t;
String t2;
   d4456:	f001 be5b 	b.w	d6110 <__aeabi_atexit>
   d445a:	bf00      	nop
   d445c:	2003e364 	.word	0x2003e364
   d4460:	000d7094 	.word	0x000d7094
   d4464:	2003e368 	.word	0x2003e368
   d4468:	2003e340 	.word	0x2003e340
   d446c:	000d4d6f 	.word	0x000d4d6f
   d4470:	2003e354 	.word	0x2003e354

000d4474 <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d4474:	b510      	push	{r4, lr}
   d4476:	4b05      	ldr	r3, [pc, #20]	; (d448c <_ZN10JsonBufferD1Ev+0x18>)
   d4478:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   d447a:	7c03      	ldrb	r3, [r0, #16]


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d447c:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   d447e:	b91b      	cbnz	r3, d4488 <_ZN10JsonBufferD1Ev+0x14>
   d4480:	6840      	ldr	r0, [r0, #4]
   d4482:	b108      	cbz	r0, d4488 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   d4484:	f000 fb6c 	bl	d4b60 <free>
	}
}
   d4488:	4620      	mov	r0, r4
   d448a:	bd10      	pop	{r4, pc}
   d448c:	000d6f64 	.word	0x000d6f64

000d4490 <_ZN10JsonBufferD0Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d4490:	b510      	push	{r4, lr}
   d4492:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}
   d4494:	f7ff ffee 	bl	d4474 <_ZN10JsonBufferD1Ev>
   d4498:	4620      	mov	r0, r4
   d449a:	2114      	movs	r1, #20
   d449c:	f001 fe46 	bl	d612c <_ZdlPvj>
   d44a0:	4620      	mov	r0, r4
   d44a2:	bd10      	pop	{r4, pc}

000d44a4 <_ZN10JsonWriterD1Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
   d44a4:	b510      	push	{r4, lr}
   d44a6:	4b03      	ldr	r3, [pc, #12]	; (d44b4 <_ZN10JsonWriterD1Ev+0x10>)
   d44a8:	6003      	str	r3, [r0, #0]
   d44aa:	4604      	mov	r4, r0
   d44ac:	f7ff ffe2 	bl	d4474 <_ZN10JsonBufferD1Ev>

}
   d44b0:	4620      	mov	r0, r4
   d44b2:	bd10      	pop	{r4, pc}
   d44b4:	000d6f74 	.word	0x000d6f74

000d44b8 <_ZN10JsonWriterD0Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
   d44b8:	b510      	push	{r4, lr}
   d44ba:	4604      	mov	r4, r0

}
   d44bc:	f7ff fff2 	bl	d44a4 <_ZN10JsonWriterD1Ev>
   d44c0:	4620      	mov	r0, r4
   d44c2:	2130      	movs	r1, #48	; 0x30
   d44c4:	f001 fe32 	bl	d612c <_ZdlPvj>
   d44c8:	4620      	mov	r0, r4
   d44ca:	bd10      	pop	{r4, pc}

000d44cc <_ZN10JsonWriter4initEv>:
	init();
}

void JsonWriter::init() {
	// Save start of insertion point for later
	offset = 0;
   d44cc:	2300      	movs	r3, #0

	contextIndex = 0;
	context[contextIndex].isFirst = true;
   d44ce:	2201      	movs	r2, #1
	init();
}

void JsonWriter::init() {
	// Save start of insertion point for later
	offset = 0;
   d44d0:	60c3      	str	r3, [r0, #12]

	contextIndex = 0;
   d44d2:	6143      	str	r3, [r0, #20]
	context[contextIndex].isFirst = true;
   d44d4:	7602      	strb	r2, [r0, #24]
	context[contextIndex].terminator = 0;
   d44d6:	7643      	strb	r3, [r0, #25]

	truncated = false;
   d44d8:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
   d44dc:	4770      	bx	lr
	...

000d44e0 <_ZN10JsonWriterC1EPcj>:
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d44e0:	2300      	movs	r3, #0

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d44e2:	b510      	push	{r4, lr}
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d44e4:	60c3      	str	r3, [r0, #12]
   d44e6:	2301      	movs	r3, #1
   d44e8:	7403      	strb	r3, [r0, #16]

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d44ea:	4b05      	ldr	r3, [pc, #20]	; (d4500 <_ZN10JsonWriterC1EPcj+0x20>)
   d44ec:	6003      	str	r3, [r0, #0]
   d44ee:	f04f 33ff 	mov.w	r3, #4294967295
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d44f2:	6041      	str	r1, [r0, #4]
   d44f4:	6082      	str	r2, [r0, #8]

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d44f6:	62c3      	str	r3, [r0, #44]	; 0x2c
	init();
   d44f8:	f7ff ffe8 	bl	d44cc <_ZN10JsonWriter4initEv>
}
   d44fc:	bd10      	pop	{r4, pc}
   d44fe:	bf00      	nop
   d4500:	000d6f74 	.word	0x000d6f74

000d4504 <_ZN10JsonWriter10insertCharEc>:
	}
}


void JsonWriter::insertChar(char ch) {
	if (offset < bufferLen) {
   d4504:	68c3      	ldr	r3, [r0, #12]
   d4506:	6882      	ldr	r2, [r0, #8]
		buffer[bufferLen - 1] = 0;
	}
}


void JsonWriter::insertChar(char ch) {
   d4508:	b510      	push	{r4, lr}
	if (offset < bufferLen) {
   d450a:	4293      	cmp	r3, r2
		buffer[offset++] = ch;
   d450c:	bf3f      	itttt	cc
   d450e:	6842      	ldrcc	r2, [r0, #4]
   d4510:	1c5c      	addcc	r4, r3, #1
   d4512:	60c4      	strcc	r4, [r0, #12]
   d4514:	54d1      	strbcc	r1, [r2, r3]
	}
	else {
		truncated = true;
   d4516:	bf24      	itt	cs
   d4518:	2301      	movcs	r3, #1
   d451a:	f880 302a 	strbcs.w	r3, [r0, #42]	; 0x2a
   d451e:	bd10      	pop	{r4, pc}

000d4520 <_ZN10JsonWriter19finishObjectOrArrayEv>:
	insertChar(startChar);
	return true;
}


void JsonWriter::finishObjectOrArray() {
   d4520:	b510      	push	{r4, lr}
	if (contextIndex > 0) {
   d4522:	6943      	ldr	r3, [r0, #20]
	insertChar(startChar);
	return true;
}


void JsonWriter::finishObjectOrArray() {
   d4524:	4604      	mov	r4, r0
	if (contextIndex > 0) {
   d4526:	b143      	cbz	r3, d453a <_ZN10JsonWriter19finishObjectOrArrayEv+0x1a>
		if (context[contextIndex].terminator != 0) {
   d4528:	eb00 0343 	add.w	r3, r0, r3, lsl #1
   d452c:	7e59      	ldrb	r1, [r3, #25]
   d452e:	b109      	cbz	r1, d4534 <_ZN10JsonWriter19finishObjectOrArrayEv+0x14>
			insertChar(context[contextIndex].terminator);
   d4530:	f7ff ffe8 	bl	d4504 <_ZN10JsonWriter10insertCharEc>
		}
		contextIndex--;
   d4534:	6963      	ldr	r3, [r4, #20]
   d4536:	3b01      	subs	r3, #1
   d4538:	6163      	str	r3, [r4, #20]
	}
	// Make sure buffer is null terminated
	if (offset < bufferLen) {
   d453a:	68a3      	ldr	r3, [r4, #8]
   d453c:	68e0      	ldr	r0, [r4, #12]
   d453e:	6861      	ldr	r1, [r4, #4]
   d4540:	4298      	cmp	r0, r3
   d4542:	f04f 0200 	mov.w	r2, #0
		buffer[offset] = 0;
	}
	else {
		buffer[bufferLen - 1] = 0;
   d4546:	bf2a      	itet	cs
   d4548:	185b      	addcs	r3, r3, r1
		}
		contextIndex--;
	}
	// Make sure buffer is null terminated
	if (offset < bufferLen) {
		buffer[offset] = 0;
   d454a:	540a      	strbcc	r2, [r1, r0]
	}
	else {
		buffer[bufferLen - 1] = 0;
   d454c:	f803 2c01 	strbcs.w	r2, [r3, #-1]
   d4550:	bd10      	pop	{r4, pc}

000d4552 <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>:
	va_start(ap, fmt);
	insertvsprintf(fmt, ap);
	va_end(ap);
}

void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
   d4552:	b570      	push	{r4, r5, r6, lr}
   d4554:	4604      	mov	r4, r0
	size_t spaceAvailable = bufferLen - offset;
   d4556:	68c0      	ldr	r0, [r0, #12]
   d4558:	68a5      	ldr	r5, [r4, #8]

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   d455a:	6866      	ldr	r6, [r4, #4]
	insertvsprintf(fmt, ap);
	va_end(ap);
}

void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;
   d455c:	1a2d      	subs	r5, r5, r0

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   d455e:	4613      	mov	r3, r2
   d4560:	4430      	add	r0, r6
   d4562:	460a      	mov	r2, r1
   d4564:	4629      	mov	r1, r5
   d4566:	f000 fb1b 	bl	d4ba0 <vsnprintf>
	if (count <= spaceAvailable) {
   d456a:	4285      	cmp	r5, r0
		offset += count;
   d456c:	bf2d      	iteet	cs
   d456e:	68e3      	ldrcs	r3, [r4, #12]
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
   d4570:	68a3      	ldrcc	r3, [r4, #8]
   d4572:	60e3      	strcc	r3, [r4, #12]
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
	if (count <= spaceAvailable) {
		offset += count;
   d4574:	18c0      	addcs	r0, r0, r3
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
		truncated = true;
   d4576:	bf36      	itet	cc
   d4578:	2301      	movcc	r3, #1
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
	if (count <= spaceAvailable) {
		offset += count;
   d457a:	60e0      	strcs	r0, [r4, #12]
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
		truncated = true;
   d457c:	f884 302a 	strbcc.w	r3, [r4, #42]	; 0x2a
   d4580:	bd70      	pop	{r4, r5, r6, pc}

000d4582 <_ZN10JsonWriter13insertsprintfEPKcz>:

}



void JsonWriter::insertsprintf(const char *fmt, ...) {
   d4582:	b40e      	push	{r1, r2, r3}
   d4584:	b503      	push	{r0, r1, lr}
   d4586:	aa03      	add	r2, sp, #12
   d4588:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list ap;
	va_start(ap, fmt);
   d458c:	9201      	str	r2, [sp, #4]
	insertvsprintf(fmt, ap);
   d458e:	f7ff ffe0 	bl	d4552 <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>
	va_end(ap);
}
   d4592:	b002      	add	sp, #8
   d4594:	f85d eb04 	ldr.w	lr, [sp], #4
   d4598:	b003      	add	sp, #12
   d459a:	4770      	bx	lr

000d459c <_ZN10JsonWriter12insertStringEPKcb>:
	else {
		truncated = true;
	}
}

void JsonWriter::insertString(const char *s, bool quoted) {
   d459c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d45a0:	4604      	mov	r4, r0
   d45a2:	460e      	mov	r6, r1
	// 110xxxxx 10xxxxxx

	// 0x00000800 - 0x0000FFFF:
	// 1110xxxx 10xxxxxx 10xxxxxx

	if (quoted) {
   d45a4:	4617      	mov	r7, r2
   d45a6:	b112      	cbz	r2, d45ae <_ZN10JsonWriter12insertStringEPKcb+0x12>
		insertChar('"');
   d45a8:	2122      	movs	r1, #34	; 0x22
   d45aa:	f7ff ffab 	bl	d4504 <_ZN10JsonWriter10insertCharEc>
	else {
		truncated = true;
	}
}

void JsonWriter::insertString(const char *s, bool quoted) {
   d45ae:	2500      	movs	r5, #0

	if (quoted) {
		insertChar('"');
	}

	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   d45b0:	5d71      	ldrb	r1, [r6, r5]
   d45b2:	eb06 0805 	add.w	r8, r6, r5
   d45b6:	2900      	cmp	r1, #0
   d45b8:	d071      	beq.n	d469e <_ZN10JsonWriter12insertStringEPKcb+0x102>
   d45ba:	68e2      	ldr	r2, [r4, #12]
   d45bc:	68a3      	ldr	r3, [r4, #8]
   d45be:	429a      	cmp	r2, r3
   d45c0:	d26d      	bcs.n	d469e <_ZN10JsonWriter12insertStringEPKcb+0x102>
		if (s[ii] & 0x80) {
   d45c2:	060b      	lsls	r3, r1, #24
   d45c4:	d533      	bpl.n	d462e <_ZN10JsonWriter12insertStringEPKcb+0x92>
			// High bit set: convert UTF-8 to JSON Unicode escape
			if (((s[ii] & 0b11110000) == 0b11100000) && ((s[ii+1] & 0b11000000) == 0b10000000) && ((s[ii+2] & 0b11000000) == 0b10000000)) {
   d45c6:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
   d45ca:	2be0      	cmp	r3, #224	; 0xe0
   d45cc:	d117      	bne.n	d45fe <_ZN10JsonWriter12insertStringEPKcb+0x62>
   d45ce:	f898 3001 	ldrb.w	r3, [r8, #1]
   d45d2:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   d45d6:	2a80      	cmp	r2, #128	; 0x80
   d45d8:	d111      	bne.n	d45fe <_ZN10JsonWriter12insertStringEPKcb+0x62>
   d45da:	f105 0802 	add.w	r8, r5, #2
   d45de:	f816 2008 	ldrb.w	r2, [r6, r8]
   d45e2:	f002 00c0 	and.w	r0, r2, #192	; 0xc0
   d45e6:	2880      	cmp	r0, #128	; 0x80
   d45e8:	d109      	bne.n	d45fe <_ZN10JsonWriter12insertStringEPKcb+0x62>
				// 3-byte
				uint16_t utf16 = ((s[ii] & 0b1111) << 12) | ((s[ii+1] & 0b111111) << 6) | (s[ii+2] & 0b111111);
				insertsprintf("\\u%04X", utf16);
   d45ea:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   d45ee:	019b      	lsls	r3, r3, #6
   d45f0:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
   d45f4:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
   d45f8:	431a      	orrs	r2, r3
   d45fa:	b292      	uxth	r2, r2
   d45fc:	e011      	b.n	d4622 <_ZN10JsonWriter12insertStringEPKcb+0x86>
				ii += 2; // plus one more in loop increment
			}
			else
			if (((s[ii] & 0b11100000) == 0b11000000) && ((s[ii+1] & 0b11000000) == 0b10000000)) {
   d45fe:	f001 03e0 	and.w	r3, r1, #224	; 0xe0
   d4602:	2bc0      	cmp	r3, #192	; 0xc0
   d4604:	d146      	bne.n	d4694 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
   d4606:	f105 0801 	add.w	r8, r5, #1
   d460a:	f816 3008 	ldrb.w	r3, [r6, r8]
   d460e:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   d4612:	2a80      	cmp	r2, #128	; 0x80
   d4614:	d13e      	bne.n	d4694 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				// 2-byte
				uint16_t utf16 = ((s[ii] & 0b11111) << 6) | (s[ii+1] & 0b111111);
				insertsprintf("\\u%04X", utf16);
   d4616:	0189      	lsls	r1, r1, #6
   d4618:	f401 62f8 	and.w	r2, r1, #1984	; 0x7c0
   d461c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   d4620:	431a      	orrs	r2, r3
   d4622:	4923      	ldr	r1, [pc, #140]	; (d46b0 <_ZN10JsonWriter12insertStringEPKcb+0x114>)
   d4624:	4620      	mov	r0, r4
   d4626:	f7ff ffac 	bl	d4582 <_ZN10JsonWriter13insertsprintfEPKcz>
				ii++; // plus one more in loop increment
   d462a:	4645      	mov	r5, r8
   d462c:	e035      	b.n	d469a <_ZN10JsonWriter12insertStringEPKcb+0xfe>
				// Not valid unicode, just pass characters through
				insertChar(s[ii]);
			}
		}
		else {
			switch(s[ii]) {
   d462e:	290c      	cmp	r1, #12
   d4630:	d018      	beq.n	d4664 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
   d4632:	d80b      	bhi.n	d464c <_ZN10JsonWriter12insertStringEPKcb+0xb0>
   d4634:	2909      	cmp	r1, #9
   d4636:	d021      	beq.n	d467c <_ZN10JsonWriter12insertStringEPKcb+0xe0>
   d4638:	290a      	cmp	r1, #10
   d463a:	d019      	beq.n	d4670 <_ZN10JsonWriter12insertStringEPKcb+0xd4>
   d463c:	2908      	cmp	r1, #8
   d463e:	d129      	bne.n	d4694 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
			case '\b':
				insertChar('\\');
   d4640:	215c      	movs	r1, #92	; 0x5c
   d4642:	4620      	mov	r0, r4
   d4644:	f7ff ff5e 	bl	d4504 <_ZN10JsonWriter10insertCharEc>
				insertChar('b');
   d4648:	2162      	movs	r1, #98	; 0x62
   d464a:	e023      	b.n	d4694 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				// Not valid unicode, just pass characters through
				insertChar(s[ii]);
			}
		}
		else {
			switch(s[ii]) {
   d464c:	2922      	cmp	r1, #34	; 0x22
   d464e:	d01b      	beq.n	d4688 <_ZN10JsonWriter12insertStringEPKcb+0xec>
   d4650:	295c      	cmp	r1, #92	; 0x5c
   d4652:	d019      	beq.n	d4688 <_ZN10JsonWriter12insertStringEPKcb+0xec>
   d4654:	290d      	cmp	r1, #13
   d4656:	d11d      	bne.n	d4694 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('n');
				break;

			case '\r':
				insertChar('\\');
   d4658:	215c      	movs	r1, #92	; 0x5c
   d465a:	4620      	mov	r0, r4
   d465c:	f7ff ff52 	bl	d4504 <_ZN10JsonWriter10insertCharEc>
				insertChar('r');
   d4660:	2172      	movs	r1, #114	; 0x72
   d4662:	e017      	b.n	d4694 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('b');
				break;

			case '\f':
				insertChar('\\');
   d4664:	215c      	movs	r1, #92	; 0x5c
   d4666:	4620      	mov	r0, r4
   d4668:	f7ff ff4c 	bl	d4504 <_ZN10JsonWriter10insertCharEc>
				insertChar('f');
   d466c:	2166      	movs	r1, #102	; 0x66
   d466e:	e011      	b.n	d4694 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				break;

			case '\n':
				insertChar('\\');
   d4670:	215c      	movs	r1, #92	; 0x5c
   d4672:	4620      	mov	r0, r4
   d4674:	f7ff ff46 	bl	d4504 <_ZN10JsonWriter10insertCharEc>
				insertChar('n');
   d4678:	216e      	movs	r1, #110	; 0x6e
   d467a:	e00b      	b.n	d4694 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('r');
				break;

			case '\t':
				insertChar('\\');
   d467c:	215c      	movs	r1, #92	; 0x5c
   d467e:	4620      	mov	r0, r4
   d4680:	f7ff ff40 	bl	d4504 <_ZN10JsonWriter10insertCharEc>
				insertChar('t');
   d4684:	2174      	movs	r1, #116	; 0x74
   d4686:	e005      	b.n	d4694 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				break;

			case '"':
			case '\\':
				insertChar('\\');
   d4688:	215c      	movs	r1, #92	; 0x5c
   d468a:	4620      	mov	r0, r4
   d468c:	f7ff ff3a 	bl	d4504 <_ZN10JsonWriter10insertCharEc>
				insertChar(s[ii]);
   d4690:	f898 1000 	ldrb.w	r1, [r8]
				break;

			default:
				insertChar(s[ii]);
   d4694:	4620      	mov	r0, r4
   d4696:	f7ff ff35 	bl	d4504 <_ZN10JsonWriter10insertCharEc>

	if (quoted) {
		insertChar('"');
	}

	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   d469a:	3501      	adds	r5, #1
   d469c:	e788      	b.n	d45b0 <_ZN10JsonWriter12insertStringEPKcb+0x14>
				insertChar(s[ii]);
				break;
			}
		}
	}
	if (quoted) {
   d469e:	b12f      	cbz	r7, d46ac <_ZN10JsonWriter12insertStringEPKcb+0x110>
		insertChar('"');
   d46a0:	4620      	mov	r0, r4
   d46a2:	2122      	movs	r1, #34	; 0x22
	}

}
   d46a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				break;
			}
		}
	}
	if (quoted) {
		insertChar('"');
   d46a8:	f7ff bf2c 	b.w	d4504 <_ZN10JsonWriter10insertCharEc>
   d46ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d46b0:	000d6f85 	.word	0x000d6f85

000d46b4 <_ZN10JsonWriter20insertCheckSeparatorEv>:
		offset = bufferLen;
		truncated = true;
	}
}

void JsonWriter::insertCheckSeparator() {
   d46b4:	6942      	ldr	r2, [r0, #20]
   d46b6:	eb00 0342 	add.w	r3, r0, r2, lsl #1
	if (context[contextIndex].isFirst) {
   d46ba:	7e1a      	ldrb	r2, [r3, #24]
   d46bc:	b112      	cbz	r2, d46c4 <_ZN10JsonWriter20insertCheckSeparatorEv+0x10>
		context[contextIndex].isFirst = false;
   d46be:	2200      	movs	r2, #0
   d46c0:	761a      	strb	r2, [r3, #24]
   d46c2:	4770      	bx	lr
	}
	else {
		insertChar(',');
   d46c4:	212c      	movs	r1, #44	; 0x2c
   d46c6:	f7ff bf1d 	b.w	d4504 <_ZN10JsonWriter10insertCharEc>

000d46ca <_ZN10JsonWriter18startObjectOrArrayEcc>:

	truncated = false;

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   d46ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   d46cc:	6943      	ldr	r3, [r0, #20]
   d46ce:	3301      	adds	r3, #1
   d46d0:	2b08      	cmp	r3, #8

	truncated = false;

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   d46d2:	460e      	mov	r6, r1
   d46d4:	4617      	mov	r7, r2
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   d46d6:	d80e      	bhi.n	d46f6 <_ZN10JsonWriter18startObjectOrArrayEcc+0x2c>
		return false;
	}
	insertCheckSeparator();
   d46d8:	f7ff ffec 	bl	d46b4 <_ZN10JsonWriter20insertCheckSeparatorEv>

	contextIndex++;
   d46dc:	6943      	ldr	r3, [r0, #20]
   d46de:	1c5a      	adds	r2, r3, #1
   d46e0:	eb00 0343 	add.w	r3, r0, r3, lsl #1

	context[contextIndex].isFirst = true;
   d46e4:	2401      	movs	r4, #1
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
		return false;
	}
	insertCheckSeparator();

	contextIndex++;
   d46e6:	6142      	str	r2, [r0, #20]

	context[contextIndex].isFirst = true;
	context[contextIndex].terminator = endChar;

	insertChar(startChar);
   d46e8:	4631      	mov	r1, r6
	}
	insertCheckSeparator();

	contextIndex++;

	context[contextIndex].isFirst = true;
   d46ea:	769c      	strb	r4, [r3, #26]
	context[contextIndex].terminator = endChar;
   d46ec:	76df      	strb	r7, [r3, #27]

	insertChar(startChar);
   d46ee:	f7ff ff09 	bl	d4504 <_ZN10JsonWriter10insertCharEc>
   d46f2:	4620      	mov	r0, r4
   d46f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
		return false;
   d46f6:	2000      	movs	r0, #0
	context[contextIndex].isFirst = true;
	context[contextIndex].terminator = endChar;

	insertChar(startChar);
	return true;
}
   d46f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d46fc <_ZN10JsonWriter11insertValueEb>:
		insertChar(',');
	}
}

void JsonWriter::insertValue(bool value) {
	if (value) {
   d46fc:	460a      	mov	r2, r1
   d46fe:	b111      	cbz	r1, d4706 <_ZN10JsonWriter11insertValueEb+0xa>
		insertString("true");
   d4700:	2200      	movs	r2, #0
   d4702:	4902      	ldr	r1, [pc, #8]	; (d470c <_ZN10JsonWriter11insertValueEb+0x10>)
   d4704:	e000      	b.n	d4708 <_ZN10JsonWriter11insertValueEb+0xc>
	}
	else {
		insertString("false");
   d4706:	4902      	ldr	r1, [pc, #8]	; (d4710 <_ZN10JsonWriter11insertValueEb+0x14>)
   d4708:	f7ff bf48 	b.w	d459c <_ZN10JsonWriter12insertStringEPKcb>
   d470c:	000d6f8c 	.word	0x000d6f8c
   d4710:	000d6f91 	.word	0x000d6f91

000d4714 <_GLOBAL__sub_I__ZN10JsonBufferC2Ev>:
   d4714:	f000 b810 	b.w	d4738 <HAL_Pin_Map>

000d4718 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4718:	b508      	push	{r3, lr}
   d471a:	4b02      	ldr	r3, [pc, #8]	; (d4724 <netdb_freeaddrinfo+0xc>)
   d471c:	681b      	ldr	r3, [r3, #0]
   d471e:	689b      	ldr	r3, [r3, #8]
   d4720:	9301      	str	r3, [sp, #4]
   d4722:	bd08      	pop	{r3, pc}
   d4724:	00030268 	.word	0x00030268

000d4728 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4728:	b508      	push	{r3, lr}
   d472a:	4b02      	ldr	r3, [pc, #8]	; (d4734 <netdb_getaddrinfo+0xc>)
   d472c:	681b      	ldr	r3, [r3, #0]
   d472e:	68db      	ldr	r3, [r3, #12]
   d4730:	9301      	str	r3, [sp, #4]
   d4732:	bd08      	pop	{r3, pc}
   d4734:	00030268 	.word	0x00030268

000d4738 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4738:	b508      	push	{r3, lr}
   d473a:	4b02      	ldr	r3, [pc, #8]	; (d4744 <HAL_Pin_Map+0xc>)
   d473c:	681b      	ldr	r3, [r3, #0]
   d473e:	681b      	ldr	r3, [r3, #0]
   d4740:	9301      	str	r3, [sp, #4]
   d4742:	bd08      	pop	{r3, pc}
   d4744:	0003022c 	.word	0x0003022c

000d4748 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d4748:	b508      	push	{r3, lr}
   d474a:	4b02      	ldr	r3, [pc, #8]	; (d4754 <HAL_Validate_Pin_Function+0xc>)
   d474c:	681b      	ldr	r3, [r3, #0]
   d474e:	685b      	ldr	r3, [r3, #4]
   d4750:	9301      	str	r3, [sp, #4]
   d4752:	bd08      	pop	{r3, pc}
   d4754:	0003022c 	.word	0x0003022c

000d4758 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4758:	b508      	push	{r3, lr}
   d475a:	4b02      	ldr	r3, [pc, #8]	; (d4764 <HAL_Pin_Mode+0xc>)
   d475c:	681b      	ldr	r3, [r3, #0]
   d475e:	689b      	ldr	r3, [r3, #8]
   d4760:	9301      	str	r3, [sp, #4]
   d4762:	bd08      	pop	{r3, pc}
   d4764:	0003022c 	.word	0x0003022c

000d4768 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4768:	b508      	push	{r3, lr}
   d476a:	4b02      	ldr	r3, [pc, #8]	; (d4774 <HAL_Get_Pin_Mode+0xc>)
   d476c:	681b      	ldr	r3, [r3, #0]
   d476e:	68db      	ldr	r3, [r3, #12]
   d4770:	9301      	str	r3, [sp, #4]
   d4772:	bd08      	pop	{r3, pc}
   d4774:	0003022c 	.word	0x0003022c

000d4778 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4778:	b508      	push	{r3, lr}
   d477a:	4b02      	ldr	r3, [pc, #8]	; (d4784 <HAL_GPIO_Write+0xc>)
   d477c:	681b      	ldr	r3, [r3, #0]
   d477e:	691b      	ldr	r3, [r3, #16]
   d4780:	9301      	str	r3, [sp, #4]
   d4782:	bd08      	pop	{r3, pc}
   d4784:	0003022c 	.word	0x0003022c

000d4788 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d4788:	b508      	push	{r3, lr}
   d478a:	4b02      	ldr	r3, [pc, #8]	; (d4794 <HAL_ADC_Read+0xc>)
   d478c:	681b      	ldr	r3, [r3, #0]
   d478e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4790:	9301      	str	r3, [sp, #4]
   d4792:	bd08      	pop	{r3, pc}
   d4794:	0003022c 	.word	0x0003022c

000d4798 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4798:	b508      	push	{r3, lr}
   d479a:	4b02      	ldr	r3, [pc, #8]	; (d47a4 <HAL_SPI_Init+0xc>)
   d479c:	681b      	ldr	r3, [r3, #0]
   d479e:	69db      	ldr	r3, [r3, #28]
   d47a0:	9301      	str	r3, [sp, #4]
   d47a2:	bd08      	pop	{r3, pc}
   d47a4:	00030230 	.word	0x00030230

000d47a8 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d47a8:	b508      	push	{r3, lr}
   d47aa:	4b02      	ldr	r3, [pc, #8]	; (d47b4 <HAL_SPI_Is_Enabled+0xc>)
   d47ac:	681b      	ldr	r3, [r3, #0]
   d47ae:	6a1b      	ldr	r3, [r3, #32]
   d47b0:	9301      	str	r3, [sp, #4]
   d47b2:	bd08      	pop	{r3, pc}
   d47b4:	00030230 	.word	0x00030230

000d47b8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d47b8:	b508      	push	{r3, lr}
   d47ba:	4b02      	ldr	r3, [pc, #8]	; (d47c4 <HAL_RNG_GetRandomNumber+0xc>)
   d47bc:	681b      	ldr	r3, [r3, #0]
   d47be:	685b      	ldr	r3, [r3, #4]
   d47c0:	9301      	str	r3, [sp, #4]
   d47c2:	bd08      	pop	{r3, pc}
   d47c4:	00030218 	.word	0x00030218

000d47c8 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d47c8:	b508      	push	{r3, lr}
   d47ca:	4b02      	ldr	r3, [pc, #8]	; (d47d4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d47cc:	681b      	ldr	r3, [r3, #0]
   d47ce:	695b      	ldr	r3, [r3, #20]
   d47d0:	9301      	str	r3, [sp, #4]
   d47d2:	bd08      	pop	{r3, pc}
   d47d4:	00030218 	.word	0x00030218

000d47d8 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d47d8:	b508      	push	{r3, lr}
   d47da:	4b02      	ldr	r3, [pc, #8]	; (d47e4 <HAL_RTC_Get_UnixTime+0xc>)
   d47dc:	681b      	ldr	r3, [r3, #0]
   d47de:	69db      	ldr	r3, [r3, #28]
   d47e0:	9301      	str	r3, [sp, #4]
   d47e2:	bd08      	pop	{r3, pc}
   d47e4:	00030218 	.word	0x00030218

000d47e8 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d47e8:	b508      	push	{r3, lr}
   d47ea:	4b02      	ldr	r3, [pc, #8]	; (d47f4 <HAL_RTC_Time_Is_Valid+0xc>)
   d47ec:	681b      	ldr	r3, [r3, #0]
   d47ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d47f0:	9301      	str	r3, [sp, #4]
   d47f2:	bd08      	pop	{r3, pc}
   d47f4:	00030218 	.word	0x00030218

000d47f8 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d47f8:	b508      	push	{r3, lr}
   d47fa:	4b02      	ldr	r3, [pc, #8]	; (d4804 <os_thread_is_current+0xc>)
   d47fc:	681b      	ldr	r3, [r3, #0]
   d47fe:	689b      	ldr	r3, [r3, #8]
   d4800:	9301      	str	r3, [sp, #4]
   d4802:	bd08      	pop	{r3, pc}
   d4804:	00030248 	.word	0x00030248

000d4808 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4808:	b508      	push	{r3, lr}
   d480a:	4b02      	ldr	r3, [pc, #8]	; (d4814 <os_thread_join+0xc>)
   d480c:	681b      	ldr	r3, [r3, #0]
   d480e:	691b      	ldr	r3, [r3, #16]
   d4810:	9301      	str	r3, [sp, #4]
   d4812:	bd08      	pop	{r3, pc}
   d4814:	00030248 	.word	0x00030248

000d4818 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4818:	b508      	push	{r3, lr}
   d481a:	4b02      	ldr	r3, [pc, #8]	; (d4824 <os_thread_cleanup+0xc>)
   d481c:	681b      	ldr	r3, [r3, #0]
   d481e:	695b      	ldr	r3, [r3, #20]
   d4820:	9301      	str	r3, [sp, #4]
   d4822:	bd08      	pop	{r3, pc}
   d4824:	00030248 	.word	0x00030248

000d4828 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4828:	b508      	push	{r3, lr}
   d482a:	4b02      	ldr	r3, [pc, #8]	; (d4834 <os_mutex_recursive_create+0xc>)
   d482c:	681b      	ldr	r3, [r3, #0]
   d482e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4830:	9301      	str	r3, [sp, #4]
   d4832:	bd08      	pop	{r3, pc}
   d4834:	00030248 	.word	0x00030248

000d4838 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4838:	b508      	push	{r3, lr}
   d483a:	4b02      	ldr	r3, [pc, #8]	; (d4844 <os_mutex_recursive_destroy+0xc>)
   d483c:	681b      	ldr	r3, [r3, #0]
   d483e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4840:	9301      	str	r3, [sp, #4]
   d4842:	bd08      	pop	{r3, pc}
   d4844:	00030248 	.word	0x00030248

000d4848 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4848:	b508      	push	{r3, lr}
   d484a:	4b02      	ldr	r3, [pc, #8]	; (d4854 <inet_inet_ntop+0xc>)
   d484c:	681b      	ldr	r3, [r3, #0]
   d484e:	695b      	ldr	r3, [r3, #20]
   d4850:	9301      	str	r3, [sp, #4]
   d4852:	bd08      	pop	{r3, pc}
   d4854:	00030264 	.word	0x00030264

000d4858 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4858:	b508      	push	{r3, lr}
   d485a:	4b02      	ldr	r3, [pc, #8]	; (d4864 <HAL_USART_Init+0xc>)
   d485c:	681b      	ldr	r3, [r3, #0]
   d485e:	681b      	ldr	r3, [r3, #0]
   d4860:	9301      	str	r3, [sp, #4]
   d4862:	bd08      	pop	{r3, pc}
   d4864:	0003023c 	.word	0x0003023c

000d4868 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4868:	b508      	push	{r3, lr}
   d486a:	4b02      	ldr	r3, [pc, #8]	; (d4874 <HAL_USART_Write_Data+0xc>)
   d486c:	681b      	ldr	r3, [r3, #0]
   d486e:	68db      	ldr	r3, [r3, #12]
   d4870:	9301      	str	r3, [sp, #4]
   d4872:	bd08      	pop	{r3, pc}
   d4874:	0003023c 	.word	0x0003023c

000d4878 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4878:	b508      	push	{r3, lr}
   d487a:	4b02      	ldr	r3, [pc, #8]	; (d4884 <HAL_USART_Available_Data+0xc>)
   d487c:	681b      	ldr	r3, [r3, #0]
   d487e:	691b      	ldr	r3, [r3, #16]
   d4880:	9301      	str	r3, [sp, #4]
   d4882:	bd08      	pop	{r3, pc}
   d4884:	0003023c 	.word	0x0003023c

000d4888 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4888:	b508      	push	{r3, lr}
   d488a:	4b02      	ldr	r3, [pc, #8]	; (d4894 <HAL_USART_Read_Data+0xc>)
   d488c:	681b      	ldr	r3, [r3, #0]
   d488e:	695b      	ldr	r3, [r3, #20]
   d4890:	9301      	str	r3, [sp, #4]
   d4892:	bd08      	pop	{r3, pc}
   d4894:	0003023c 	.word	0x0003023c

000d4898 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4898:	b508      	push	{r3, lr}
   d489a:	4b02      	ldr	r3, [pc, #8]	; (d48a4 <HAL_USART_Peek_Data+0xc>)
   d489c:	681b      	ldr	r3, [r3, #0]
   d489e:	699b      	ldr	r3, [r3, #24]
   d48a0:	9301      	str	r3, [sp, #4]
   d48a2:	bd08      	pop	{r3, pc}
   d48a4:	0003023c 	.word	0x0003023c

000d48a8 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d48a8:	b508      	push	{r3, lr}
   d48aa:	4b02      	ldr	r3, [pc, #8]	; (d48b4 <HAL_USART_Flush_Data+0xc>)
   d48ac:	681b      	ldr	r3, [r3, #0]
   d48ae:	69db      	ldr	r3, [r3, #28]
   d48b0:	9301      	str	r3, [sp, #4]
   d48b2:	bd08      	pop	{r3, pc}
   d48b4:	0003023c 	.word	0x0003023c

000d48b8 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d48b8:	b508      	push	{r3, lr}
   d48ba:	4b02      	ldr	r3, [pc, #8]	; (d48c4 <HAL_USART_Is_Enabled+0xc>)
   d48bc:	681b      	ldr	r3, [r3, #0]
   d48be:	6a1b      	ldr	r3, [r3, #32]
   d48c0:	9301      	str	r3, [sp, #4]
   d48c2:	bd08      	pop	{r3, pc}
   d48c4:	0003023c 	.word	0x0003023c

000d48c8 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d48c8:	b508      	push	{r3, lr}
   d48ca:	4b02      	ldr	r3, [pc, #8]	; (d48d4 <HAL_USART_Available_Data_For_Write+0xc>)
   d48cc:	681b      	ldr	r3, [r3, #0]
   d48ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d48d0:	9301      	str	r3, [sp, #4]
   d48d2:	bd08      	pop	{r3, pc}
   d48d4:	0003023c 	.word	0x0003023c

000d48d8 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d48d8:	b508      	push	{r3, lr}
   d48da:	4b02      	ldr	r3, [pc, #8]	; (d48e4 <HAL_I2C_Write_Data+0xc>)
   d48dc:	681b      	ldr	r3, [r3, #0]
   d48de:	6a1b      	ldr	r3, [r3, #32]
   d48e0:	9301      	str	r3, [sp, #4]
   d48e2:	bd08      	pop	{r3, pc}
   d48e4:	00030228 	.word	0x00030228

000d48e8 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d48e8:	b508      	push	{r3, lr}
   d48ea:	4b02      	ldr	r3, [pc, #8]	; (d48f4 <HAL_I2C_Available_Data+0xc>)
   d48ec:	681b      	ldr	r3, [r3, #0]
   d48ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d48f0:	9301      	str	r3, [sp, #4]
   d48f2:	bd08      	pop	{r3, pc}
   d48f4:	00030228 	.word	0x00030228

000d48f8 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d48f8:	b508      	push	{r3, lr}
   d48fa:	4b02      	ldr	r3, [pc, #8]	; (d4904 <HAL_I2C_Read_Data+0xc>)
   d48fc:	681b      	ldr	r3, [r3, #0]
   d48fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4900:	9301      	str	r3, [sp, #4]
   d4902:	bd08      	pop	{r3, pc}
   d4904:	00030228 	.word	0x00030228

000d4908 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4908:	b508      	push	{r3, lr}
   d490a:	4b02      	ldr	r3, [pc, #8]	; (d4914 <HAL_I2C_Peek_Data+0xc>)
   d490c:	681b      	ldr	r3, [r3, #0]
   d490e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4910:	9301      	str	r3, [sp, #4]
   d4912:	bd08      	pop	{r3, pc}
   d4914:	00030228 	.word	0x00030228

000d4918 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4918:	b508      	push	{r3, lr}
   d491a:	4b02      	ldr	r3, [pc, #8]	; (d4924 <HAL_I2C_Flush_Data+0xc>)
   d491c:	681b      	ldr	r3, [r3, #0]
   d491e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4920:	9301      	str	r3, [sp, #4]
   d4922:	bd08      	pop	{r3, pc}
   d4924:	00030228 	.word	0x00030228

000d4928 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4928:	b508      	push	{r3, lr}
   d492a:	4b02      	ldr	r3, [pc, #8]	; (d4934 <HAL_I2C_Is_Enabled+0xc>)
   d492c:	681b      	ldr	r3, [r3, #0]
   d492e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4930:	9301      	str	r3, [sp, #4]
   d4932:	bd08      	pop	{r3, pc}
   d4934:	00030228 	.word	0x00030228

000d4938 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d4938:	b508      	push	{r3, lr}
   d493a:	4b02      	ldr	r3, [pc, #8]	; (d4944 <HAL_I2C_Init+0xc>)
   d493c:	681b      	ldr	r3, [r3, #0]
   d493e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4940:	9301      	str	r3, [sp, #4]
   d4942:	bd08      	pop	{r3, pc}
   d4944:	00030228 	.word	0x00030228

000d4948 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4948:	b508      	push	{r3, lr}
   d494a:	4b02      	ldr	r3, [pc, #8]	; (d4954 <HAL_USB_USART_Init+0xc>)
   d494c:	681b      	ldr	r3, [r3, #0]
   d494e:	681b      	ldr	r3, [r3, #0]
   d4950:	9301      	str	r3, [sp, #4]
   d4952:	bd08      	pop	{r3, pc}
   d4954:	0003024c 	.word	0x0003024c

000d4958 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4958:	b508      	push	{r3, lr}
   d495a:	4b02      	ldr	r3, [pc, #8]	; (d4964 <HAL_USB_USART_Begin+0xc>)
   d495c:	681b      	ldr	r3, [r3, #0]
   d495e:	685b      	ldr	r3, [r3, #4]
   d4960:	9301      	str	r3, [sp, #4]
   d4962:	bd08      	pop	{r3, pc}
   d4964:	0003024c 	.word	0x0003024c

000d4968 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4968:	b508      	push	{r3, lr}
   d496a:	4b02      	ldr	r3, [pc, #8]	; (d4974 <HAL_USB_USART_Available_Data+0xc>)
   d496c:	681b      	ldr	r3, [r3, #0]
   d496e:	691b      	ldr	r3, [r3, #16]
   d4970:	9301      	str	r3, [sp, #4]
   d4972:	bd08      	pop	{r3, pc}
   d4974:	0003024c 	.word	0x0003024c

000d4978 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4978:	b508      	push	{r3, lr}
   d497a:	4b02      	ldr	r3, [pc, #8]	; (d4984 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d497c:	681b      	ldr	r3, [r3, #0]
   d497e:	695b      	ldr	r3, [r3, #20]
   d4980:	9301      	str	r3, [sp, #4]
   d4982:	bd08      	pop	{r3, pc}
   d4984:	0003024c 	.word	0x0003024c

000d4988 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4988:	b508      	push	{r3, lr}
   d498a:	4b02      	ldr	r3, [pc, #8]	; (d4994 <HAL_USB_USART_Receive_Data+0xc>)
   d498c:	681b      	ldr	r3, [r3, #0]
   d498e:	699b      	ldr	r3, [r3, #24]
   d4990:	9301      	str	r3, [sp, #4]
   d4992:	bd08      	pop	{r3, pc}
   d4994:	0003024c 	.word	0x0003024c

000d4998 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4998:	b508      	push	{r3, lr}
   d499a:	4b02      	ldr	r3, [pc, #8]	; (d49a4 <HAL_USB_USART_Send_Data+0xc>)
   d499c:	681b      	ldr	r3, [r3, #0]
   d499e:	69db      	ldr	r3, [r3, #28]
   d49a0:	9301      	str	r3, [sp, #4]
   d49a2:	bd08      	pop	{r3, pc}
   d49a4:	0003024c 	.word	0x0003024c

000d49a8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d49a8:	b508      	push	{r3, lr}
   d49aa:	4b02      	ldr	r3, [pc, #8]	; (d49b4 <HAL_USB_USART_Flush_Data+0xc>)
   d49ac:	681b      	ldr	r3, [r3, #0]
   d49ae:	6a1b      	ldr	r3, [r3, #32]
   d49b0:	9301      	str	r3, [sp, #4]
   d49b2:	bd08      	pop	{r3, pc}
   d49b4:	0003024c 	.word	0x0003024c

000d49b8 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d49b8:	b508      	push	{r3, lr}
   d49ba:	4b02      	ldr	r3, [pc, #8]	; (d49c4 <system_mode+0xc>)
   d49bc:	681b      	ldr	r3, [r3, #0]
   d49be:	681b      	ldr	r3, [r3, #0]
   d49c0:	9301      	str	r3, [sp, #4]
   d49c2:	bd08      	pop	{r3, pc}
   d49c4:	00030220 	.word	0x00030220

000d49c8 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d49c8:	b508      	push	{r3, lr}
   d49ca:	4b02      	ldr	r3, [pc, #8]	; (d49d4 <set_system_mode+0xc>)
   d49cc:	681b      	ldr	r3, [r3, #0]
   d49ce:	685b      	ldr	r3, [r3, #4]
   d49d0:	9301      	str	r3, [sp, #4]
   d49d2:	bd08      	pop	{r3, pc}
   d49d4:	00030220 	.word	0x00030220

000d49d8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d49d8:	b508      	push	{r3, lr}
   d49da:	4b02      	ldr	r3, [pc, #8]	; (d49e4 <system_delay_ms+0xc>)
   d49dc:	681b      	ldr	r3, [r3, #0]
   d49de:	695b      	ldr	r3, [r3, #20]
   d49e0:	9301      	str	r3, [sp, #4]
   d49e2:	bd08      	pop	{r3, pc}
   d49e4:	00030220 	.word	0x00030220

000d49e8 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d49e8:	b508      	push	{r3, lr}
   d49ea:	4b02      	ldr	r3, [pc, #8]	; (d49f4 <application_thread_current+0xc>)
   d49ec:	681b      	ldr	r3, [r3, #0]
   d49ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d49f0:	9301      	str	r3, [sp, #4]
   d49f2:	bd08      	pop	{r3, pc}
   d49f4:	00030220 	.word	0x00030220

000d49f8 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d49f8:	b508      	push	{r3, lr}
   d49fa:	4b02      	ldr	r3, [pc, #8]	; (d4a04 <application_thread_invoke+0xc>)
   d49fc:	681b      	ldr	r3, [r3, #0]
   d49fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4a00:	9301      	str	r3, [sp, #4]
   d4a02:	bd08      	pop	{r3, pc}
   d4a04:	00030220 	.word	0x00030220

000d4a08 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d4a08:	b508      	push	{r3, lr}
   d4a0a:	4b02      	ldr	r3, [pc, #8]	; (d4a14 <system_thread_get_state+0xc>)
   d4a0c:	681b      	ldr	r3, [r3, #0]
   d4a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4a10:	9301      	str	r3, [sp, #4]
   d4a12:	bd08      	pop	{r3, pc}
   d4a14:	00030220 	.word	0x00030220

000d4a18 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4a18:	b508      	push	{r3, lr}
   d4a1a:	4b03      	ldr	r3, [pc, #12]	; (d4a28 <system_ctrl_set_app_request_handler+0x10>)
   d4a1c:	681b      	ldr	r3, [r3, #0]
   d4a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4a22:	9301      	str	r3, [sp, #4]
   d4a24:	bd08      	pop	{r3, pc}
   d4a26:	0000      	.short	0x0000
   d4a28:	00030220 	.word	0x00030220

000d4a2c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4a2c:	b508      	push	{r3, lr}
   d4a2e:	4b03      	ldr	r3, [pc, #12]	; (d4a3c <system_ctrl_set_result+0x10>)
   d4a30:	681b      	ldr	r3, [r3, #0]
   d4a32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4a36:	9301      	str	r3, [sp, #4]
   d4a38:	bd08      	pop	{r3, pc}
   d4a3a:	0000      	.short	0x0000
   d4a3c:	00030220 	.word	0x00030220

000d4a40 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4a40:	b508      	push	{r3, lr}
   d4a42:	4b02      	ldr	r3, [pc, #8]	; (d4a4c <network_connect+0xc>)
   d4a44:	681b      	ldr	r3, [r3, #0]
   d4a46:	685b      	ldr	r3, [r3, #4]
   d4a48:	9301      	str	r3, [sp, #4]
   d4a4a:	bd08      	pop	{r3, pc}
   d4a4c:	00030240 	.word	0x00030240

000d4a50 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4a50:	b508      	push	{r3, lr}
   d4a52:	4b02      	ldr	r3, [pc, #8]	; (d4a5c <network_connecting+0xc>)
   d4a54:	681b      	ldr	r3, [r3, #0]
   d4a56:	689b      	ldr	r3, [r3, #8]
   d4a58:	9301      	str	r3, [sp, #4]
   d4a5a:	bd08      	pop	{r3, pc}
   d4a5c:	00030240 	.word	0x00030240

000d4a60 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4a60:	b508      	push	{r3, lr}
   d4a62:	4b02      	ldr	r3, [pc, #8]	; (d4a6c <network_disconnect+0xc>)
   d4a64:	681b      	ldr	r3, [r3, #0]
   d4a66:	68db      	ldr	r3, [r3, #12]
   d4a68:	9301      	str	r3, [sp, #4]
   d4a6a:	bd08      	pop	{r3, pc}
   d4a6c:	00030240 	.word	0x00030240

000d4a70 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4a70:	b508      	push	{r3, lr}
   d4a72:	4b02      	ldr	r3, [pc, #8]	; (d4a7c <network_ready+0xc>)
   d4a74:	681b      	ldr	r3, [r3, #0]
   d4a76:	691b      	ldr	r3, [r3, #16]
   d4a78:	9301      	str	r3, [sp, #4]
   d4a7a:	bd08      	pop	{r3, pc}
   d4a7c:	00030240 	.word	0x00030240

000d4a80 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4a80:	b508      	push	{r3, lr}
   d4a82:	4b02      	ldr	r3, [pc, #8]	; (d4a8c <network_on+0xc>)
   d4a84:	681b      	ldr	r3, [r3, #0]
   d4a86:	695b      	ldr	r3, [r3, #20]
   d4a88:	9301      	str	r3, [sp, #4]
   d4a8a:	bd08      	pop	{r3, pc}
   d4a8c:	00030240 	.word	0x00030240

000d4a90 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4a90:	b508      	push	{r3, lr}
   d4a92:	4b02      	ldr	r3, [pc, #8]	; (d4a9c <network_off+0xc>)
   d4a94:	681b      	ldr	r3, [r3, #0]
   d4a96:	699b      	ldr	r3, [r3, #24]
   d4a98:	9301      	str	r3, [sp, #4]
   d4a9a:	bd08      	pop	{r3, pc}
   d4a9c:	00030240 	.word	0x00030240

000d4aa0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4aa0:	b508      	push	{r3, lr}
   d4aa2:	4b02      	ldr	r3, [pc, #8]	; (d4aac <network_listen+0xc>)
   d4aa4:	681b      	ldr	r3, [r3, #0]
   d4aa6:	69db      	ldr	r3, [r3, #28]
   d4aa8:	9301      	str	r3, [sp, #4]
   d4aaa:	bd08      	pop	{r3, pc}
   d4aac:	00030240 	.word	0x00030240

000d4ab0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4ab0:	b508      	push	{r3, lr}
   d4ab2:	4b02      	ldr	r3, [pc, #8]	; (d4abc <network_listening+0xc>)
   d4ab4:	681b      	ldr	r3, [r3, #0]
   d4ab6:	6a1b      	ldr	r3, [r3, #32]
   d4ab8:	9301      	str	r3, [sp, #4]
   d4aba:	bd08      	pop	{r3, pc}
   d4abc:	00030240 	.word	0x00030240

000d4ac0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4ac0:	b508      	push	{r3, lr}
   d4ac2:	4b02      	ldr	r3, [pc, #8]	; (d4acc <network_set_listen_timeout+0xc>)
   d4ac4:	681b      	ldr	r3, [r3, #0]
   d4ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4ac8:	9301      	str	r3, [sp, #4]
   d4aca:	bd08      	pop	{r3, pc}
   d4acc:	00030240 	.word	0x00030240

000d4ad0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4ad0:	b508      	push	{r3, lr}
   d4ad2:	4b02      	ldr	r3, [pc, #8]	; (d4adc <network_get_listen_timeout+0xc>)
   d4ad4:	681b      	ldr	r3, [r3, #0]
   d4ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4ad8:	9301      	str	r3, [sp, #4]
   d4ada:	bd08      	pop	{r3, pc}
   d4adc:	00030240 	.word	0x00030240

000d4ae0 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d4ae0:	b508      	push	{r3, lr}
   d4ae2:	4b02      	ldr	r3, [pc, #8]	; (d4aec <spark_variable+0xc>)
   d4ae4:	681b      	ldr	r3, [r3, #0]
   d4ae6:	681b      	ldr	r3, [r3, #0]
   d4ae8:	9301      	str	r3, [sp, #4]
   d4aea:	bd08      	pop	{r3, pc}
   d4aec:	00030244 	.word	0x00030244

000d4af0 <spark_process>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d4af0:	b508      	push	{r3, lr}
   d4af2:	4b02      	ldr	r3, [pc, #8]	; (d4afc <spark_process+0xc>)
   d4af4:	681b      	ldr	r3, [r3, #0]
   d4af6:	689b      	ldr	r3, [r3, #8]
   d4af8:	9301      	str	r3, [sp, #4]
   d4afa:	bd08      	pop	{r3, pc}
   d4afc:	00030244 	.word	0x00030244

000d4b00 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4b00:	b508      	push	{r3, lr}
   d4b02:	4b02      	ldr	r3, [pc, #8]	; (d4b0c <spark_cloud_flag_connected+0xc>)
   d4b04:	681b      	ldr	r3, [r3, #0]
   d4b06:	695b      	ldr	r3, [r3, #20]
   d4b08:	9301      	str	r3, [sp, #4]
   d4b0a:	bd08      	pop	{r3, pc}
   d4b0c:	00030244 	.word	0x00030244

000d4b10 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d4b10:	b508      	push	{r3, lr}
   d4b12:	4b02      	ldr	r3, [pc, #8]	; (d4b1c <spark_send_event+0xc>)
   d4b14:	681b      	ldr	r3, [r3, #0]
   d4b16:	6a1b      	ldr	r3, [r3, #32]
   d4b18:	9301      	str	r3, [sp, #4]
   d4b1a:	bd08      	pop	{r3, pc}
   d4b1c:	00030244 	.word	0x00030244

000d4b20 <spark_sync_time>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d4b20:	b508      	push	{r3, lr}
   d4b22:	4b02      	ldr	r3, [pc, #8]	; (d4b2c <spark_sync_time+0xc>)
   d4b24:	681b      	ldr	r3, [r3, #0]
   d4b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4b28:	9301      	str	r3, [sp, #4]
   d4b2a:	bd08      	pop	{r3, pc}
   d4b2c:	00030244 	.word	0x00030244

000d4b30 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d4b30:	b508      	push	{r3, lr}
   d4b32:	4b02      	ldr	r3, [pc, #8]	; (d4b3c <spark_sync_time_pending+0xc>)
   d4b34:	681b      	ldr	r3, [r3, #0]
   d4b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4b38:	9301      	str	r3, [sp, #4]
   d4b3a:	bd08      	pop	{r3, pc}
   d4b3c:	00030244 	.word	0x00030244

000d4b40 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4b40:	b508      	push	{r3, lr}
   d4b42:	4b02      	ldr	r3, [pc, #8]	; (d4b4c <spark_set_random_seed_from_cloud_handler+0xc>)
   d4b44:	681b      	ldr	r3, [r3, #0]
   d4b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4b48:	9301      	str	r3, [sp, #4]
   d4b4a:	bd08      	pop	{r3, pc}
   d4b4c:	00030244 	.word	0x00030244

000d4b50 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4b50:	b508      	push	{r3, lr}
   d4b52:	4b02      	ldr	r3, [pc, #8]	; (d4b5c <malloc+0xc>)
   d4b54:	681b      	ldr	r3, [r3, #0]
   d4b56:	681b      	ldr	r3, [r3, #0]
   d4b58:	9301      	str	r3, [sp, #4]
   d4b5a:	bd08      	pop	{r3, pc}
   d4b5c:	0003021c 	.word	0x0003021c

000d4b60 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4b60:	b508      	push	{r3, lr}
   d4b62:	4b02      	ldr	r3, [pc, #8]	; (d4b6c <free+0xc>)
   d4b64:	681b      	ldr	r3, [r3, #0]
   d4b66:	685b      	ldr	r3, [r3, #4]
   d4b68:	9301      	str	r3, [sp, #4]
   d4b6a:	bd08      	pop	{r3, pc}
   d4b6c:	0003021c 	.word	0x0003021c

000d4b70 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4b70:	b508      	push	{r3, lr}
   d4b72:	4b02      	ldr	r3, [pc, #8]	; (d4b7c <realloc+0xc>)
   d4b74:	681b      	ldr	r3, [r3, #0]
   d4b76:	689b      	ldr	r3, [r3, #8]
   d4b78:	9301      	str	r3, [sp, #4]
   d4b7a:	bd08      	pop	{r3, pc}
   d4b7c:	0003021c 	.word	0x0003021c

000d4b80 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d4b80:	b508      	push	{r3, lr}
   d4b82:	4b02      	ldr	r3, [pc, #8]	; (d4b8c <siprintf+0xc>)
   d4b84:	681b      	ldr	r3, [r3, #0]
   d4b86:	691b      	ldr	r3, [r3, #16]
   d4b88:	9301      	str	r3, [sp, #4]
   d4b8a:	bd08      	pop	{r3, pc}
   d4b8c:	0003021c 	.word	0x0003021c

000d4b90 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d4b90:	b508      	push	{r3, lr}
   d4b92:	4b02      	ldr	r3, [pc, #8]	; (d4b9c <siscanf+0xc>)
   d4b94:	681b      	ldr	r3, [r3, #0]
   d4b96:	699b      	ldr	r3, [r3, #24]
   d4b98:	9301      	str	r3, [sp, #4]
   d4b9a:	bd08      	pop	{r3, pc}
   d4b9c:	0003021c 	.word	0x0003021c

000d4ba0 <vsnprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4ba0:	b508      	push	{r3, lr}
   d4ba2:	4b02      	ldr	r3, [pc, #8]	; (d4bac <vsnprintf+0xc>)
   d4ba4:	681b      	ldr	r3, [r3, #0]
   d4ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4ba8:	9301      	str	r3, [sp, #4]
   d4baa:	bd08      	pop	{r3, pc}
   d4bac:	0003021c 	.word	0x0003021c

000d4bb0 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4bb0:	b508      	push	{r3, lr}
   d4bb2:	4b02      	ldr	r3, [pc, #8]	; (d4bbc <abort+0xc>)
   d4bb4:	681b      	ldr	r3, [r3, #0]
   d4bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4bb8:	9301      	str	r3, [sp, #4]
   d4bba:	bd08      	pop	{r3, pc}
   d4bbc:	0003021c 	.word	0x0003021c

000d4bc0 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4bc0:	b508      	push	{r3, lr}
   d4bc2:	4b02      	ldr	r3, [pc, #8]	; (d4bcc <_malloc_r+0xc>)
   d4bc4:	681b      	ldr	r3, [r3, #0]
   d4bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4bc8:	9301      	str	r3, [sp, #4]
   d4bca:	bd08      	pop	{r3, pc}
   d4bcc:	0003021c 	.word	0x0003021c

000d4bd0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4bd0:	2200      	movs	r2, #0
   d4bd2:	4611      	mov	r1, r2
   d4bd4:	6840      	ldr	r0, [r0, #4]
   d4bd6:	f7ff bf6b 	b.w	d4ab0 <network_listening>

000d4bda <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4bda:	2200      	movs	r2, #0
   d4bdc:	4611      	mov	r1, r2
   d4bde:	6840      	ldr	r0, [r0, #4]
   d4be0:	f7ff bf76 	b.w	d4ad0 <network_get_listen_timeout>

000d4be4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4be4:	2200      	movs	r2, #0
   d4be6:	6840      	ldr	r0, [r0, #4]
   d4be8:	f7ff bf6a 	b.w	d4ac0 <network_set_listen_timeout>

000d4bec <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4bec:	2200      	movs	r2, #0
   d4bee:	f081 0101 	eor.w	r1, r1, #1
   d4bf2:	6840      	ldr	r0, [r0, #4]
   d4bf4:	f7ff bf54 	b.w	d4aa0 <network_listen>

000d4bf8 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4bf8:	2300      	movs	r3, #0
   d4bfa:	461a      	mov	r2, r3
   d4bfc:	4619      	mov	r1, r3
   d4bfe:	6840      	ldr	r0, [r0, #4]
   d4c00:	f7ff bf46 	b.w	d4a90 <network_off>

000d4c04 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4c04:	2300      	movs	r3, #0
   d4c06:	461a      	mov	r2, r3
   d4c08:	4619      	mov	r1, r3
   d4c0a:	6840      	ldr	r0, [r0, #4]
   d4c0c:	f7ff bf38 	b.w	d4a80 <network_on>

000d4c10 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4c10:	2200      	movs	r2, #0
   d4c12:	4611      	mov	r1, r2
   d4c14:	6840      	ldr	r0, [r0, #4]
   d4c16:	f7ff bf2b 	b.w	d4a70 <network_ready>

000d4c1a <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4c1a:	2200      	movs	r2, #0
   d4c1c:	4611      	mov	r1, r2
   d4c1e:	6840      	ldr	r0, [r0, #4]
   d4c20:	f7ff bf16 	b.w	d4a50 <network_connecting>

000d4c24 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4c24:	2200      	movs	r2, #0
   d4c26:	2102      	movs	r1, #2
   d4c28:	6840      	ldr	r0, [r0, #4]
   d4c2a:	f7ff bf19 	b.w	d4a60 <network_disconnect>

000d4c2e <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4c2e:	2300      	movs	r3, #0
   d4c30:	461a      	mov	r2, r3
   d4c32:	6840      	ldr	r0, [r0, #4]
   d4c34:	f7ff bf04 	b.w	d4a40 <network_connect>

000d4c38 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4c38:	4b02      	ldr	r3, [pc, #8]	; (d4c44 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4c3a:	2203      	movs	r2, #3
   d4c3c:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4c3e:	4a02      	ldr	r2, [pc, #8]	; (d4c48 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4c40:	601a      	str	r2, [r3, #0]
   d4c42:	4770      	bx	lr
   d4c44:	2003e39c 	.word	0x2003e39c
   d4c48:	000d6fb4 	.word	0x000d6fb4

000d4c4c <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d4c4c:	4770      	bx	lr

000d4c4e <_ZN8SPIClassD0Ev>:
   d4c4e:	b510      	push	{r4, lr}
   d4c50:	210c      	movs	r1, #12
   d4c52:	4604      	mov	r4, r0
   d4c54:	f001 fa6a 	bl	d612c <_ZdlPvj>
   d4c58:	4620      	mov	r0, r4
   d4c5a:	bd10      	pop	{r4, pc}

000d4c5c <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d4c5c:	b510      	push	{r4, lr}
   d4c5e:	4b05      	ldr	r3, [pc, #20]	; (d4c74 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x18>)
   d4c60:	6003      	str	r3, [r0, #0]
   d4c62:	4604      	mov	r4, r0
{
    _spi = spi;
   d4c64:	7101      	strb	r1, [r0, #4]
    HAL_SPI_Init(_spi);
   d4c66:	4608      	mov	r0, r1
   d4c68:	f7ff fd96 	bl	d4798 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d4c6c:	2300      	movs	r3, #0
   d4c6e:	60a3      	str	r3, [r4, #8]
}
   d4c70:	4620      	mov	r0, r4
   d4c72:	bd10      	pop	{r4, pc}
   d4c74:	000d6fe8 	.word	0x000d6fe8

000d4c78 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d4c78:	7900      	ldrb	r0, [r0, #4]
   d4c7a:	f7ff bd95 	b.w	d47a8 <HAL_SPI_Is_Enabled>

000d4c7e <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d4c7e:	b510      	push	{r4, lr}
   d4c80:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4c82:	6800      	ldr	r0, [r0, #0]
   d4c84:	b118      	cbz	r0, d4c8e <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d4c86:	f7ff ff6b 	bl	d4b60 <free>
            wakeupSource_ = nullptr;
   d4c8a:	2300      	movs	r3, #0
   d4c8c:	6023      	str	r3, [r4, #0]
   d4c8e:	bd10      	pop	{r4, pc}

000d4c90 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4c90:	b510      	push	{r4, lr}
   d4c92:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d4c94:	f7ff fff3 	bl	d4c7e <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4c98:	4620      	mov	r0, r4
   d4c9a:	bd10      	pop	{r4, pc}

000d4c9c <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4c9c:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4c9e:	4c09      	ldr	r4, [pc, #36]	; (d4cc4 <_GLOBAL__sub_I_System+0x28>)
   d4ca0:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4ca2:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4ca6:	6020      	str	r0, [r4, #0]
   d4ca8:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4caa:	71a0      	strb	r0, [r4, #6]
   d4cac:	8120      	strh	r0, [r4, #8]
   d4cae:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4cb0:	f7ff fe8a 	bl	d49c8 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4cb4:	4620      	mov	r0, r4
   d4cb6:	4a04      	ldr	r2, [pc, #16]	; (d4cc8 <_GLOBAL__sub_I_System+0x2c>)
   d4cb8:	4904      	ldr	r1, [pc, #16]	; (d4ccc <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4cba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4cbe:	f001 ba27 	b.w	d6110 <__aeabi_atexit>
   d4cc2:	bf00      	nop
   d4cc4:	2003e3a4 	.word	0x2003e3a4
   d4cc8:	2003e340 	.word	0x2003e340
   d4ccc:	000d4c91 	.word	0x000d4c91

000d4cd0 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d4cd0:	b510      	push	{r4, lr}
   d4cd2:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d4cd4:	f001 fd33 	bl	d673e <strlen>
   d4cd8:	3801      	subs	r0, #1
   d4cda:	1823      	adds	r3, r4, r0
   d4cdc:	4620      	mov	r0, r4
	while(i<j){
   d4cde:	4298      	cmp	r0, r3
   d4ce0:	d206      	bcs.n	d4cf0 <_Z11str_reversePc+0x20>
		c = *i;
   d4ce2:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d4ce4:	7819      	ldrb	r1, [r3, #0]
   d4ce6:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d4cea:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   d4cee:	e7f6      	b.n	d4cde <_Z11str_reversePc+0xe>
   d4cf0:	bd10      	pop	{r4, pc}

000d4cf2 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d4cf2:	b570      	push	{r4, r5, r6, lr}
   d4cf4:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d4cf6:	1e91      	subs	r1, r2, #2
   d4cf8:	2922      	cmp	r1, #34	; 0x22
   d4cfa:	d820      	bhi.n	d4d3e <ultoa+0x4c>
   d4cfc:	4625      	mov	r5, r4
   d4cfe:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d4d00:	b910      	cbnz	r0, d4d08 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d4d02:	4423      	add	r3, r4
            *ptr++ = '0';
   d4d04:	2230      	movs	r2, #48	; 0x30
   d4d06:	e00e      	b.n	d4d26 <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d4d08:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   d4d0c:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   d4d10:	b2c1      	uxtb	r1, r0
   d4d12:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   d4d16:	2809      	cmp	r0, #9
                *ptr += '0';
   d4d18:	bf94      	ite	ls
   d4d1a:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d4d1c:	3157      	addhi	r1, #87	; 0x57
   d4d1e:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   d4d22:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d4d24:	e7eb      	b.n	d4cfe <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d4d26:	4299      	cmp	r1, r3
   d4d28:	d202      	bcs.n	d4d30 <ultoa+0x3e>
            *ptr++ = '0';
   d4d2a:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d4d2e:	e7fa      	b.n	d4d26 <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   d4d30:	2300      	movs	r3, #0
	str_reverse(buffer);
   d4d32:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   d4d34:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   d4d36:	f7ff ffcb 	bl	d4cd0 <_Z11str_reversePc>
	return buffer;
   d4d3a:	4620      	mov	r0, r4
   d4d3c:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   d4d3e:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   d4d40:	bd70      	pop	{r4, r5, r6, pc}

000d4d42 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d4d42:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d4d44:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d4d46:	460c      	mov	r4, r1
   d4d48:	4615      	mov	r5, r2
	if(a<0){
   d4d4a:	da0b      	bge.n	d4d64 <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d4d4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d4d50:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d4d54:	bf14      	ite	ne
   d4d56:	4258      	negne	r0, r3
   d4d58:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d4d5a:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d4d5c:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
   d4d5e:	462a      	mov	r2, r5
   d4d60:	4419      	add	r1, r3
   d4d62:	e000      	b.n	d4d66 <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
   d4d64:	2301      	movs	r3, #1
   d4d66:	f7ff ffc4 	bl	d4cf2 <ultoa>
	}
	return buffer;
}
   d4d6a:	4620      	mov	r0, r4
   d4d6c:	bd38      	pop	{r3, r4, r5, pc}

000d4d6e <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d4d6e:	b510      	push	{r4, lr}
   d4d70:	4604      	mov	r4, r0
{
	free(buffer);
   d4d72:	6800      	ldr	r0, [r0, #0]
   d4d74:	f7ff fef4 	bl	d4b60 <free>
}
   d4d78:	4620      	mov	r0, r4
   d4d7a:	bd10      	pop	{r4, pc}

000d4d7c <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d4d7c:	b510      	push	{r4, lr}
   d4d7e:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d4d80:	6800      	ldr	r0, [r0, #0]
   d4d82:	b108      	cbz	r0, d4d88 <_ZN6String10invalidateEv+0xc>
   d4d84:	f7ff feec 	bl	d4b60 <free>
	buffer = NULL;
   d4d88:	2300      	movs	r3, #0
   d4d8a:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d4d8c:	60a3      	str	r3, [r4, #8]
   d4d8e:	6063      	str	r3, [r4, #4]
   d4d90:	bd10      	pop	{r4, pc}

000d4d92 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d4d92:	b538      	push	{r3, r4, r5, lr}
   d4d94:	4604      	mov	r4, r0
   d4d96:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d4d98:	6800      	ldr	r0, [r0, #0]
   d4d9a:	3101      	adds	r1, #1
   d4d9c:	f7ff fee8 	bl	d4b70 <realloc>
	if (newbuffer) {
   d4da0:	b110      	cbz	r0, d4da8 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d4da2:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d4da6:	2001      	movs	r0, #1
	}
	return 0;
}
   d4da8:	bd38      	pop	{r3, r4, r5, pc}

000d4daa <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4daa:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d4dac:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4dae:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d4db0:	b113      	cbz	r3, d4db8 <_ZN6String7reserveEj+0xe>
   d4db2:	6843      	ldr	r3, [r0, #4]
   d4db4:	428b      	cmp	r3, r1
   d4db6:	d207      	bcs.n	d4dc8 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d4db8:	4620      	mov	r0, r4
   d4dba:	f7ff ffea 	bl	d4d92 <_ZN6String12changeBufferEj>
   d4dbe:	b120      	cbz	r0, d4dca <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d4dc0:	68a3      	ldr	r3, [r4, #8]
   d4dc2:	b90b      	cbnz	r3, d4dc8 <_ZN6String7reserveEj+0x1e>
   d4dc4:	6822      	ldr	r2, [r4, #0]
   d4dc6:	7013      	strb	r3, [r2, #0]
   d4dc8:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d4dca:	bd10      	pop	{r4, pc}

000d4dcc <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4dcc:	b570      	push	{r4, r5, r6, lr}
   d4dce:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d4dd0:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4dd2:	4604      	mov	r4, r0
   d4dd4:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d4dd6:	f7ff ffe8 	bl	d4daa <_ZN6String7reserveEj>
   d4dda:	b918      	cbnz	r0, d4de4 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d4ddc:	4620      	mov	r0, r4
   d4dde:	f7ff ffcd 	bl	d4d7c <_ZN6String10invalidateEv>
		return *this;
   d4de2:	e009      	b.n	d4df8 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d4de4:	462a      	mov	r2, r5
   d4de6:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d4de8:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d4dea:	6820      	ldr	r0, [r4, #0]
   d4dec:	f001 fc3e 	bl	d666c <memcpy>
	buffer[len] = 0;
   d4df0:	6822      	ldr	r2, [r4, #0]
   d4df2:	68a3      	ldr	r3, [r4, #8]
   d4df4:	2100      	movs	r1, #0
   d4df6:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d4df8:	4620      	mov	r0, r4
   d4dfa:	bd70      	pop	{r4, r5, r6, pc}

000d4dfc <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d4dfc:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4dfe:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d4e00:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4e02:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d4e04:	6043      	str	r3, [r0, #4]
	len = 0;
   d4e06:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4e08:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d4e0a:	460d      	mov	r5, r1
   d4e0c:	b139      	cbz	r1, d4e1e <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d4e0e:	4608      	mov	r0, r1
   d4e10:	f001 fc95 	bl	d673e <strlen>
   d4e14:	4629      	mov	r1, r5
   d4e16:	4602      	mov	r2, r0
   d4e18:	4620      	mov	r0, r4
   d4e1a:	f7ff ffd7 	bl	d4dcc <_ZN6String4copyEPKcj>
}
   d4e1e:	4620      	mov	r0, r4
   d4e20:	bd38      	pop	{r3, r4, r5, pc}

000d4e22 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d4e22:	b538      	push	{r3, r4, r5, lr}
   d4e24:	4605      	mov	r5, r0
	if (buffer) {
   d4e26:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d4e28:	460c      	mov	r4, r1
	if (buffer) {
   d4e2a:	b160      	cbz	r0, d4e46 <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
   d4e2c:	686a      	ldr	r2, [r5, #4]
   d4e2e:	688b      	ldr	r3, [r1, #8]
   d4e30:	429a      	cmp	r2, r3
   d4e32:	d306      	bcc.n	d4e42 <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
   d4e34:	6809      	ldr	r1, [r1, #0]
   d4e36:	f001 fc5f 	bl	d66f8 <strcpy>
			len = rhs.len;
   d4e3a:	68a3      	ldr	r3, [r4, #8]
   d4e3c:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d4e3e:	2300      	movs	r3, #0
   d4e40:	e00a      	b.n	d4e58 <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
   d4e42:	f7ff fe8d 	bl	d4b60 <free>
		}
	}
	buffer = rhs.buffer;
   d4e46:	6823      	ldr	r3, [r4, #0]
   d4e48:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d4e4a:	6863      	ldr	r3, [r4, #4]
   d4e4c:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d4e4e:	68a3      	ldr	r3, [r4, #8]
   d4e50:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d4e52:	2300      	movs	r3, #0
   d4e54:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
   d4e56:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
   d4e58:	60a3      	str	r3, [r4, #8]
   d4e5a:	bd38      	pop	{r3, r4, r5, pc}

000d4e5c <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d4e5c:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
   d4e5e:	b510      	push	{r4, lr}
   d4e60:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d4e62:	d001      	beq.n	d4e68 <_ZN6StringaSEOS_+0xc>
   d4e64:	f7ff ffdd 	bl	d4e22 <_ZN6String4moveERS_>
	return *this;
}
   d4e68:	4620      	mov	r0, r4
   d4e6a:	bd10      	pop	{r4, pc}

000d4e6c <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d4e6c:	b538      	push	{r3, r4, r5, lr}
   d4e6e:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d4e70:	460c      	mov	r4, r1
   d4e72:	b141      	cbz	r1, d4e86 <_ZN6StringaSEPKc+0x1a>
   d4e74:	4608      	mov	r0, r1
   d4e76:	f001 fc62 	bl	d673e <strlen>
   d4e7a:	4621      	mov	r1, r4
   d4e7c:	4602      	mov	r2, r0
   d4e7e:	4628      	mov	r0, r5
   d4e80:	f7ff ffa4 	bl	d4dcc <_ZN6String4copyEPKcj>
   d4e84:	e001      	b.n	d4e8a <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d4e86:	f7ff ff79 	bl	d4d7c <_ZN6String10invalidateEv>

	return *this;
}
   d4e8a:	4628      	mov	r0, r5
   d4e8c:	bd38      	pop	{r3, r4, r5, pc}

000d4e8e <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d4e8e:	b510      	push	{r4, lr}
   d4e90:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4e92:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d4e94:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4e96:	6023      	str	r3, [r4, #0]
	capacity = 0;
   d4e98:	6063      	str	r3, [r4, #4]
	len = 0;
   d4e9a:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d4e9c:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d4e9e:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
   d4ea0:	a901      	add	r1, sp, #4
   d4ea2:	f7ff ff4e 	bl	d4d42 <itoa>
	*this = buf;
   d4ea6:	a901      	add	r1, sp, #4
   d4ea8:	4620      	mov	r0, r4
   d4eaa:	f7ff ffdf 	bl	d4e6c <_ZN6StringaSEPKc>
}
   d4eae:	4620      	mov	r0, r4
   d4eb0:	b00a      	add	sp, #40	; 0x28
   d4eb2:	bd10      	pop	{r4, pc}

000d4eb4 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d4eb4:	b570      	push	{r4, r5, r6, lr}
   d4eb6:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d4eb8:	b19a      	cbz	r2, d4ee2 <_ZNK6String8getBytesEPhjj+0x2e>
   d4eba:	b191      	cbz	r1, d4ee2 <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
   d4ebc:	6885      	ldr	r5, [r0, #8]
   d4ebe:	429d      	cmp	r5, r3
   d4ec0:	d802      	bhi.n	d4ec8 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d4ec2:	2300      	movs	r3, #0
   d4ec4:	700b      	strb	r3, [r1, #0]
		return;
   d4ec6:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
   d4ec8:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
   d4eca:	1aed      	subs	r5, r5, r3
	strncpy((char *)buf, buffer + index, n);
   d4ecc:	6801      	ldr	r1, [r0, #0]
   d4ece:	42ac      	cmp	r4, r5
   d4ed0:	bf28      	it	cs
   d4ed2:	462c      	movcs	r4, r5
   d4ed4:	4419      	add	r1, r3
   d4ed6:	4622      	mov	r2, r4
   d4ed8:	4630      	mov	r0, r6
   d4eda:	f001 fc4d 	bl	d6778 <strncpy>
	buf[n] = 0;
   d4ede:	2300      	movs	r3, #0
   d4ee0:	5533      	strb	r3, [r6, r4]
   d4ee2:	bd70      	pop	{r4, r5, r6, pc}

000d4ee4 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d4ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   d4ee6:	429a      	cmp	r2, r3
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d4ee8:	460f      	mov	r7, r1
   d4eea:	461d      	mov	r5, r3
	if (left > right) {
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d4eec:	490c      	ldr	r1, [pc, #48]	; (d4f20 <_ZNK6String9substringEjj+0x3c>)
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
   d4eee:	bf88      	it	hi
   d4ef0:	4613      	movhi	r3, r2
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d4ef2:	4614      	mov	r4, r2
   d4ef4:	4606      	mov	r6, r0
	if (left > right) {
   d4ef6:	bf84      	itt	hi
   d4ef8:	462c      	movhi	r4, r5
   d4efa:	461d      	movhi	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d4efc:	f7ff ff7e 	bl	d4dfc <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   d4f00:	68ba      	ldr	r2, [r7, #8]
   d4f02:	4294      	cmp	r4, r2
   d4f04:	d80a      	bhi.n	d4f1c <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   d4f06:	6839      	ldr	r1, [r7, #0]
   d4f08:	4295      	cmp	r5, r2
   d4f0a:	bf94      	ite	ls
   d4f0c:	ebc4 0205 	rsbls	r2, r4, r5
   d4f10:	ebc4 0202 	rsbhi	r2, r4, r2
   d4f14:	4421      	add	r1, r4
   d4f16:	4630      	mov	r0, r6
   d4f18:	f7ff ff58 	bl	d4dcc <_ZN6String4copyEPKcj>
	return out;
}
   d4f1c:	4630      	mov	r0, r6
   d4f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4f20:	000d7094 	.word	0x000d7094

000d4f24 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4f24:	b510      	push	{r4, lr}
   d4f26:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4f28:	6800      	ldr	r0, [r0, #0]
   d4f2a:	b108      	cbz	r0, d4f30 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4f2c:	f7ff fc84 	bl	d4838 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d4f30:	4620      	mov	r0, r4
   d4f32:	bd10      	pop	{r4, pc}

000d4f34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d4f34:	680b      	ldr	r3, [r1, #0]
   d4f36:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d4f38:	b113      	cbz	r3, d4f40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d4f3a:	685a      	ldr	r2, [r3, #4]
   d4f3c:	3201      	adds	r2, #1
   d4f3e:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d4f40:	4770      	bx	lr
	...

000d4f44 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4f44:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4f46:	4c06      	ldr	r4, [pc, #24]	; (d4f60 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4f48:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d4f4a:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4f4c:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4f4e:	f7ff fc6b 	bl	d4828 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4f52:	4620      	mov	r0, r4
   d4f54:	4a03      	ldr	r2, [pc, #12]	; (d4f64 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4f56:	4904      	ldr	r1, [pc, #16]	; (d4f68 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4f58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4f5c:	f001 b8d8 	b.w	d6110 <__aeabi_atexit>
   d4f60:	2003e3b0 	.word	0x2003e3b0
   d4f64:	2003e340 	.word	0x2003e340
   d4f68:	000d4f25 	.word	0x000d4f25

000d4f6c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4f6e:	4606      	mov	r6, r0
   d4f70:	460d      	mov	r5, r1
   d4f72:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d4f74:	2400      	movs	r4, #0
  while (size--) {
   d4f76:	42bd      	cmp	r5, r7
   d4f78:	d00c      	beq.n	d4f94 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4f7a:	6833      	ldr	r3, [r6, #0]
   d4f7c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4f80:	689b      	ldr	r3, [r3, #8]
   d4f82:	4630      	mov	r0, r6
   d4f84:	4798      	blx	r3
     if (chunk>=0)
   d4f86:	2800      	cmp	r0, #0
   d4f88:	db01      	blt.n	d4f8e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4f8a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d4f8c:	e7f3      	b.n	d4f76 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4f8e:	2c00      	cmp	r4, #0
   d4f90:	bf08      	it	eq
   d4f92:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d4f94:	4620      	mov	r0, r4
   d4f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4f98 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4f98:	b570      	push	{r4, r5, r6, lr}
   d4f9a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d4f9c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d4f9e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d4fa0:	b149      	cbz	r1, d4fb6 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d4fa2:	f001 fbcc 	bl	d673e <strlen>
   d4fa6:	682b      	ldr	r3, [r5, #0]
   d4fa8:	4602      	mov	r2, r0
   d4faa:	4621      	mov	r1, r4
   d4fac:	4628      	mov	r0, r5
   d4fae:	68db      	ldr	r3, [r3, #12]
    }
   d4fb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4fb4:	4718      	bx	r3
    }
   d4fb6:	bd70      	pop	{r4, r5, r6, pc}

000d4fb8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4fb8:	6803      	ldr	r3, [r0, #0]
   d4fba:	689b      	ldr	r3, [r3, #8]
   d4fbc:	4718      	bx	r3

000d4fbe <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4fbe:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4fc0:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4fc2:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4fc4:	f7ff fff8 	bl	d4fb8 <_ZN5Print5printEc>
  n += print('\n');
   d4fc8:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d4fca:	4604      	mov	r4, r0
  n += print('\n');
   d4fcc:	4628      	mov	r0, r5
   d4fce:	f7ff fff3 	bl	d4fb8 <_ZN5Print5printEc>
  return n;
}
   d4fd2:	4420      	add	r0, r4
   d4fd4:	bd38      	pop	{r3, r4, r5, pc}

000d4fd6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d4fd6:	b538      	push	{r3, r4, r5, lr}
   d4fd8:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4fda:	f7ff ffdd 	bl	d4f98 <_ZN5Print5writeEPKc>
   d4fde:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d4fe0:	4628      	mov	r0, r5
   d4fe2:	f7ff ffec 	bl	d4fbe <_ZN5Print7printlnEv>
  return n;
}
   d4fe6:	4420      	add	r0, r4
   d4fe8:	bd38      	pop	{r3, r4, r5, pc}

000d4fea <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4fea:	b530      	push	{r4, r5, lr}
   d4fec:	b08b      	sub	sp, #44	; 0x2c
   d4fee:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4ff0:	2100      	movs	r1, #0
   d4ff2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4ff6:	2a01      	cmp	r2, #1
   d4ff8:	bf98      	it	ls
   d4ffa:	220a      	movls	r2, #10
   d4ffc:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d5000:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d5004:	fb05 3312 	mls	r3, r5, r2, r3
   d5008:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d500c:	2b09      	cmp	r3, #9
   d500e:	bf94      	ite	ls
   d5010:	3330      	addls	r3, #48	; 0x30
   d5012:	3337      	addhi	r3, #55	; 0x37
   d5014:	b2db      	uxtb	r3, r3
   d5016:	4621      	mov	r1, r4
   d5018:	f804 3901 	strb.w	r3, [r4], #-1
   d501c:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d501e:	2d00      	cmp	r5, #0
   d5020:	d1ee      	bne.n	d5000 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d5022:	f7ff ffb9 	bl	d4f98 <_ZN5Print5writeEPKc>
}
   d5026:	b00b      	add	sp, #44	; 0x2c
   d5028:	bd30      	pop	{r4, r5, pc}

000d502a <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d502a:	b40c      	push	{r2, r3}
   d502c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5030:	b087      	sub	sp, #28
   d5032:	af00      	add	r7, sp, #0
   d5034:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d5038:	4605      	mov	r5, r0
   d503a:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d503e:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d5040:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d5042:	4623      	mov	r3, r4
   d5044:	464a      	mov	r2, r9
   d5046:	2114      	movs	r1, #20
   d5048:	1d38      	adds	r0, r7, #4
   d504a:	f7ff fda9 	bl	d4ba0 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d504e:	2813      	cmp	r0, #19
   d5050:	d805      	bhi.n	d505e <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5052:	1d39      	adds	r1, r7, #4
   d5054:	4628      	mov	r0, r5
   d5056:	f7ff ff9f 	bl	d4f98 <_ZN5Print5writeEPKc>
   d505a:	4604      	mov	r4, r0
   d505c:	e013      	b.n	d5086 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d505e:	f100 0308 	add.w	r3, r0, #8
   d5062:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d5066:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d5068:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d506c:	1c41      	adds	r1, r0, #1
   d506e:	4623      	mov	r3, r4
   d5070:	464a      	mov	r2, r9
   d5072:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d5074:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d5076:	f7ff fd93 	bl	d4ba0 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d507a:	4669      	mov	r1, sp
   d507c:	4628      	mov	r0, r5
   d507e:	f7ff ff8b 	bl	d4f98 <_ZN5Print5writeEPKc>
   d5082:	4604      	mov	r4, r0
   d5084:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d5086:	b11e      	cbz	r6, d5090 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d5088:	4628      	mov	r0, r5
   d508a:	f7ff ff98 	bl	d4fbe <_ZN5Print7printlnEv>
   d508e:	4404      	add	r4, r0
    return n;
}
   d5090:	4620      	mov	r0, r4
   d5092:	371c      	adds	r7, #28
   d5094:	46bd      	mov	sp, r7
   d5096:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d509a:	b002      	add	sp, #8
   d509c:	4770      	bx	lr
	...

000d50a0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d50a0:	4b01      	ldr	r3, [pc, #4]	; (d50a8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d50a2:	4a02      	ldr	r2, [pc, #8]	; (d50ac <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d50a4:	601a      	str	r2, [r3, #0]
   d50a6:	4770      	bx	lr
   d50a8:	2003e3b4 	.word	0x2003e3b4
   d50ac:	000d7063 	.word	0x000d7063

000d50b0 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d50b0:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d50b2:	2000      	movs	r0, #0
   d50b4:	f7ff fd3c 	bl	d4b30 <spark_sync_time_pending>
   d50b8:	b128      	cbz	r0, d50c6 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d50ba:	f7ff fd21 	bl	d4b00 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d50be:	f080 0001 	eor.w	r0, r0, #1
   d50c2:	b2c0      	uxtb	r0, r0
   d50c4:	bd08      	pop	{r3, pc}
   d50c6:	2001      	movs	r0, #1
    }
   d50c8:	bd08      	pop	{r3, pc}
	...

000d50cc <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d50cc:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   d50d0:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d50d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d50d8:	d40f      	bmi.n	d50fa <_ZN9TimeClass4zoneEf+0x2e>
   d50da:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   d50de:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d50e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d50e6:	dc08      	bgt.n	d50fa <_ZN9TimeClass4zoneEf+0x2e>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   d50e8:	eddf 7a04 	vldr	s15, [pc, #16]	; d50fc <_ZN9TimeClass4zoneEf+0x30>
   d50ec:	4b04      	ldr	r3, [pc, #16]	; (d5100 <_ZN9TimeClass4zoneEf+0x34>)
   d50ee:	ee20 0a27 	vmul.f32	s0, s0, s15
   d50f2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d50f6:	ed83 0a00 	vstr	s0, [r3]
   d50fa:	4770      	bx	lr
   d50fc:	45610000 	.word	0x45610000
   d5100:	2003e3c0 	.word	0x2003e3c0

000d5104 <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d5104:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
   d5106:	4b0e      	ldr	r3, [pc, #56]	; (d5140 <_ZN9TimeClass7timeStrEl+0x3c>)
   d5108:	681b      	ldr	r3, [r3, #0]
   d510a:	4419      	add	r1, r3
   d510c:	4b0d      	ldr	r3, [pc, #52]	; (d5144 <_ZN9TimeClass7timeStrEl+0x40>)
   d510e:	681b      	ldr	r3, [r3, #0]
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d5110:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
   d5112:	a802      	add	r0, sp, #8
   d5114:	4419      	add	r1, r3
   d5116:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
   d511a:	f001 f9af 	bl	d647c <localtime>
        char* ascstr = asctime(calendar_time);
   d511e:	f001 f963 	bl	d63e8 <asctime>
   d5122:	4605      	mov	r5, r0
        int len = strlen(ascstr);
   d5124:	f001 fb0b 	bl	d673e <strlen>
        ascstr[len-1] = 0; // remove final newline
   d5128:	4428      	add	r0, r5
   d512a:	2300      	movs	r3, #0
   d512c:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
   d5130:	4629      	mov	r1, r5
   d5132:	4620      	mov	r0, r4
   d5134:	f7ff fe62 	bl	d4dfc <_ZN6StringC1EPK19__FlashStringHelper>
}
   d5138:	4620      	mov	r0, r4
   d513a:	b003      	add	sp, #12
   d513c:	bd30      	pop	{r4, r5, pc}
   d513e:	bf00      	nop
   d5140:	2003e3c0 	.word	0x2003e3c0
   d5144:	2003e3bc 	.word	0x2003e3bc

000d5148 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d5148:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d514a:	2000      	movs	r0, #0
   d514c:	f7ff fb4c 	bl	d47e8 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d5150:	4604      	mov	r4, r0
   d5152:	b968      	cbnz	r0, d5170 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d5154:	f7ff fc30 	bl	d49b8 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d5158:	2801      	cmp	r0, #1
   d515a:	d10b      	bne.n	d5174 <_ZN9TimeClass7isValidEv+0x2c>
   d515c:	4620      	mov	r0, r4
   d515e:	f7ff fc53 	bl	d4a08 <system_thread_get_state>
   d5162:	b938      	cbnz	r0, d5174 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d5164:	f7ff ffa4 	bl	d50b0 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d5168:	b930      	cbnz	r0, d5178 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d516a:	f7ff fcc1 	bl	d4af0 <spark_process>
   d516e:	e7f9      	b.n	d5164 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d5170:	2001      	movs	r0, #1
   d5172:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d5174:	2000      	movs	r0, #0
   d5176:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d5178:	f7ff ff9a 	bl	d50b0 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d517c:	2000      	movs	r0, #0
   d517e:	f7ff fb33 	bl	d47e8 <HAL_RTC_Time_Is_Valid>
   d5182:	3000      	adds	r0, #0
   d5184:	bf18      	it	ne
   d5186:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d5188:	bd10      	pop	{r4, pc}

000d518a <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d518a:	b508      	push	{r3, lr}
    (void)isValid();
   d518c:	f7ff ffdc 	bl	d5148 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d5190:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d5194:	f7ff bb20 	b.w	d47d8 <HAL_RTC_Get_UnixTime>

000d5198 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5198:	4b02      	ldr	r3, [pc, #8]	; (d51a4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d519a:	681a      	ldr	r2, [r3, #0]
   d519c:	4b02      	ldr	r3, [pc, #8]	; (d51a8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d519e:	601a      	str	r2, [r3, #0]
   d51a0:	4770      	bx	lr
   d51a2:	bf00      	nop
   d51a4:	2003e288 	.word	0x2003e288
   d51a8:	2003e3b8 	.word	0x2003e3b8

000d51ac <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d51ac:	2100      	movs	r1, #0
   d51ae:	f7ff bc13 	b.w	d49d8 <system_delay_ms>

000d51b2 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d51b2:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d51b4:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d51b6:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d51b8:	b113      	cbz	r3, d51c0 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d51ba:	2203      	movs	r2, #3
   d51bc:	4601      	mov	r1, r0
   d51be:	4798      	blx	r3
    }
   d51c0:	4620      	mov	r0, r4
   d51c2:	bd10      	pop	{r4, pc}

000d51c4 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d51c4:	b510      	push	{r4, lr}
   d51c6:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d51c8:	f7ff fff3 	bl	d51b2 <_ZNSt14_Function_baseD1Ev>
   d51cc:	4620      	mov	r0, r4
   d51ce:	bd10      	pop	{r4, pc}

000d51d0 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d51d0:	b513      	push	{r0, r1, r4, lr}
   d51d2:	460b      	mov	r3, r1
   d51d4:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d51d6:	c803      	ldmia	r0, {r0, r1}
   d51d8:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d51dc:	e893 0003 	ldmia.w	r3, {r0, r1}
   d51e0:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d51e4:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d51e8:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d51ec:	b002      	add	sp, #8
   d51ee:	bd10      	pop	{r4, pc}

000d51f0 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d51f0:	4803      	ldr	r0, [pc, #12]	; (d5200 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d51f2:	4a04      	ldr	r2, [pc, #16]	; (d5204 <_GLOBAL__sub_I_RGB+0x14>)
   d51f4:	4904      	ldr	r1, [pc, #16]	; (d5208 <_GLOBAL__sub_I_RGB+0x18>)
   d51f6:	2300      	movs	r3, #0
   d51f8:	6083      	str	r3, [r0, #8]
   d51fa:	f000 bf89 	b.w	d6110 <__aeabi_atexit>
   d51fe:	bf00      	nop
   d5200:	2003e3c4 	.word	0x2003e3c4
   d5204:	2003e340 	.word	0x2003e340
   d5208:	000d51c5 	.word	0x000d51c5

000d520c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d520c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d520e:	4b0c      	ldr	r3, [pc, #48]	; (d5240 <serialEventRun+0x34>)
   d5210:	b133      	cbz	r3, d5220 <serialEventRun+0x14>
   d5212:	f000 fc1b 	bl	d5a4c <_Z16_fetch_usbserialv>
   d5216:	6803      	ldr	r3, [r0, #0]
   d5218:	691b      	ldr	r3, [r3, #16]
   d521a:	4798      	blx	r3
   d521c:	2800      	cmp	r0, #0
   d521e:	dc09      	bgt.n	d5234 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d5220:	4b08      	ldr	r3, [pc, #32]	; (d5244 <serialEventRun+0x38>)
   d5222:	b163      	cbz	r3, d523e <serialEventRun+0x32>
   d5224:	f000 fc94 	bl	d5b50 <_Z22__fetch_global_Serial1v>
   d5228:	6803      	ldr	r3, [r0, #0]
   d522a:	691b      	ldr	r3, [r3, #16]
   d522c:	4798      	blx	r3
   d522e:	2800      	cmp	r0, #0
   d5230:	dc03      	bgt.n	d523a <serialEventRun+0x2e>
   d5232:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5234:	f3af 8000 	nop.w
   d5238:	e7f2      	b.n	d5220 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d523a:	f3af 8000 	nop.w
   d523e:	bd08      	pop	{r3, pc}
	...

000d5248 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5248:	b508      	push	{r3, lr}
	serialEventRun();
   d524a:	f7ff ffdf 	bl	d520c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d524e:	f7ff fabb 	bl	d47c8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5252:	4b01      	ldr	r3, [pc, #4]	; (d5258 <_post_loop+0x10>)
   d5254:	6018      	str	r0, [r3, #0]
   d5256:	bd08      	pop	{r3, pc}
   d5258:	2003e708 	.word	0x2003e708

000d525c <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d525c:	4802      	ldr	r0, [pc, #8]	; (d5268 <_Z33system_initialize_user_backup_ramv+0xc>)
   d525e:	4a03      	ldr	r2, [pc, #12]	; (d526c <_Z33system_initialize_user_backup_ramv+0x10>)
   d5260:	4903      	ldr	r1, [pc, #12]	; (d5270 <_Z33system_initialize_user_backup_ramv+0x14>)
   d5262:	1a12      	subs	r2, r2, r0
   d5264:	f001 ba02 	b.w	d666c <memcpy>
   d5268:	2003f400 	.word	0x2003f400
   d526c:	2003f404 	.word	0x2003f404
   d5270:	000d74e0 	.word	0x000d74e0

000d5274 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5274:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5276:	2300      	movs	r3, #0
   d5278:	9300      	str	r3, [sp, #0]
   d527a:	461a      	mov	r2, r3
   d527c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5280:	f7ff fbd4 	bl	d4a2c <system_ctrl_set_result>
}
   d5284:	b003      	add	sp, #12
   d5286:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d528c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d528c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d528e:	8843      	ldrh	r3, [r0, #2]
   d5290:	2b0a      	cmp	r3, #10
   d5292:	d008      	beq.n	d52a6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5294:	2b50      	cmp	r3, #80	; 0x50
   d5296:	d109      	bne.n	d52ac <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d5298:	4b09      	ldr	r3, [pc, #36]	; (d52c0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d529a:	681b      	ldr	r3, [r3, #0]
   d529c:	b13b      	cbz	r3, d52ae <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d529e:	b003      	add	sp, #12
   d52a0:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d52a4:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d52a6:	f7ff ffe5 	bl	d5274 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d52aa:	e006      	b.n	d52ba <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d52ac:	2300      	movs	r3, #0
   d52ae:	9300      	str	r3, [sp, #0]
   d52b0:	461a      	mov	r2, r3
   d52b2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d52b6:	f7ff fbb9 	bl	d4a2c <system_ctrl_set_result>
        break;
    }
}
   d52ba:	b003      	add	sp, #12
   d52bc:	f85d fb04 	ldr.w	pc, [sp], #4
   d52c0:	2003e3d4 	.word	0x2003e3d4

000d52c4 <module_user_init_hook>:

void module_user_init_hook()
{
   d52c4:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d52c6:	4c10      	ldr	r4, [pc, #64]	; (d5308 <module_user_init_hook+0x44>)
   d52c8:	4d10      	ldr	r5, [pc, #64]	; (d530c <module_user_init_hook+0x48>)
   d52ca:	6823      	ldr	r3, [r4, #0]
   d52cc:	42ab      	cmp	r3, r5
   d52ce:	4b10      	ldr	r3, [pc, #64]	; (d5310 <module_user_init_hook+0x4c>)
   d52d0:	bf0c      	ite	eq
   d52d2:	2201      	moveq	r2, #1
   d52d4:	2200      	movne	r2, #0
   d52d6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d52d8:	d002      	beq.n	d52e0 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d52da:	f7ff ffbf 	bl	d525c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d52de:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d52e0:	f7ff fa6a 	bl	d47b8 <HAL_RNG_GetRandomNumber>
   d52e4:	4604      	mov	r4, r0
    srand(seed);
   d52e6:	f001 f9d5 	bl	d6694 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d52ea:	4b0a      	ldr	r3, [pc, #40]	; (d5314 <module_user_init_hook+0x50>)
   d52ec:	b113      	cbz	r3, d52f4 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d52ee:	4620      	mov	r0, r4
   d52f0:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d52f4:	2100      	movs	r1, #0
   d52f6:	4807      	ldr	r0, [pc, #28]	; (d5314 <module_user_init_hook+0x50>)
   d52f8:	f7ff fc22 	bl	d4b40 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d52fc:	2100      	movs	r1, #0
   d52fe:	4806      	ldr	r0, [pc, #24]	; (d5318 <module_user_init_hook+0x54>)
}
   d5300:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5304:	f7ff bb88 	b.w	d4a18 <system_ctrl_set_app_request_handler>
   d5308:	2003f400 	.word	0x2003f400
   d530c:	9a271c1e 	.word	0x9a271c1e
   d5310:	2003e3d8 	.word	0x2003e3d8
   d5314:	00000000 	.word	0x00000000
   d5318:	000d528d 	.word	0x000d528d

000d531c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d531c:	4770      	bx	lr

000d531e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d531e:	2000      	movs	r0, #0
   d5320:	4770      	bx	lr

000d5322 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5322:	b510      	push	{r4, lr}
   d5324:	2110      	movs	r1, #16
   d5326:	4604      	mov	r4, r0
   d5328:	f000 ff00 	bl	d612c <_ZdlPvj>
   d532c:	4620      	mov	r0, r4
   d532e:	bd10      	pop	{r4, pc}

000d5330 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d5330:	b508      	push	{r3, lr}
      { delete this; }
   d5332:	b108      	cbz	r0, d5338 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d5334:	f7ff fff5 	bl	d5322 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d5338:	bd08      	pop	{r3, pc}

000d533a <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d533a:	2200      	movs	r2, #0
   d533c:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d533e:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5340:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d5344:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5346:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d534a:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d534c:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d534e:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5350:	680c      	ldr	r4, [r1, #0]
   d5352:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d5354:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d5356:	bd10      	pop	{r4, pc}

000d5358 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d5358:	b510      	push	{r4, lr}
   d535a:	4604      	mov	r4, r0
    free((void*)msg_);
   d535c:	6800      	ldr	r0, [r0, #0]
   d535e:	f7ff fbff 	bl	d4b60 <free>
}
   d5362:	4620      	mov	r0, r4
   d5364:	bd10      	pop	{r4, pc}

000d5366 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d5366:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d5368:	68c4      	ldr	r4, [r0, #12]
   d536a:	b1f4      	cbz	r4, d53aa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d536c:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d536e:	2b02      	cmp	r3, #2
   d5370:	d103      	bne.n	d537a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d5372:	f104 000c 	add.w	r0, r4, #12
   d5376:	f7ff ffef 	bl	d5358 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d537a:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d537c:	b135      	cbz	r5, d538c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d537e:	4628      	mov	r0, r5
   d5380:	f7ff ff17 	bl	d51b2 <_ZNSt14_Function_baseD1Ev>
   d5384:	2110      	movs	r1, #16
   d5386:	4628      	mov	r0, r5
   d5388:	f000 fed0 	bl	d612c <_ZdlPvj>
   d538c:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d538e:	b135      	cbz	r5, d539e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d5390:	4628      	mov	r0, r5
   d5392:	f7ff ff0e 	bl	d51b2 <_ZNSt14_Function_baseD1Ev>
   d5396:	2110      	movs	r1, #16
   d5398:	4628      	mov	r0, r5
   d539a:	f000 fec7 	bl	d612c <_ZdlPvj>
   d539e:	4620      	mov	r0, r4
   d53a0:	2114      	movs	r1, #20
   d53a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d53a6:	f000 bec1 	b.w	d612c <_ZdlPvj>
   d53aa:	bd38      	pop	{r3, r4, r5, pc}

000d53ac <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d53ac:	b513      	push	{r0, r1, r4, lr}
   d53ae:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d53b0:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d53b4:	2300      	movs	r3, #0
   d53b6:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d53b8:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d53ba:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d53bc:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d53be:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d53c0:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d53c2:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d53c4:	f7fe ff3a 	bl	d423c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d53c8:	4620      	mov	r0, r4
   d53ca:	b002      	add	sp, #8
   d53cc:	bd10      	pop	{r4, pc}

000d53ce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d53ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d53d0:	460c      	mov	r4, r1
   d53d2:	ad02      	add	r5, sp, #8
   d53d4:	f854 3b04 	ldr.w	r3, [r4], #4
   d53d8:	f845 3d08 	str.w	r3, [r5, #-8]!
   d53dc:	4606      	mov	r6, r0
   d53de:	460f      	mov	r7, r1
   d53e0:	a801      	add	r0, sp, #4
   d53e2:	4621      	mov	r1, r4
   d53e4:	f7ff fda6 	bl	d4f34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d53e8:	4629      	mov	r1, r5
   d53ea:	4630      	mov	r0, r6
   d53ec:	f7ff ffde 	bl	d53ac <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d53f0:	a801      	add	r0, sp, #4
   d53f2:	f7fe ff23 	bl	d423c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d53f6:	4620      	mov	r0, r4
   d53f8:	f7fe ff20 	bl	d423c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d53fc:	4638      	mov	r0, r7
   d53fe:	2108      	movs	r1, #8
   d5400:	f000 fe94 	bl	d612c <_ZdlPvj>
        return p;
    }
   d5404:	4630      	mov	r0, r6
   d5406:	b003      	add	sp, #12
   d5408:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d540c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d540c:	b538      	push	{r3, r4, r5, lr}
   d540e:	2300      	movs	r3, #0
   d5410:	4604      	mov	r4, r0
   d5412:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5414:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d5416:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5418:	f7fe fe3d 	bl	d4096 <_Znwj>
   d541c:	b128      	cbz	r0, d542a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d541e:	2301      	movs	r3, #1
   d5420:	6043      	str	r3, [r0, #4]
   d5422:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d5424:	4b02      	ldr	r3, [pc, #8]	; (d5430 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d5426:	6003      	str	r3, [r0, #0]
   d5428:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d542a:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d542c:	4620      	mov	r0, r4
   d542e:	bd38      	pop	{r3, r4, r5, pc}
   d5430:	000d70fc 	.word	0x000d70fc

000d5434 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5434:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d5436:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5438:	b90a      	cbnz	r2, d543e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d543a:	f000 fe8a 	bl	d6152 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d543e:	68c3      	ldr	r3, [r0, #12]
    }
   d5440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5444:	4718      	bx	r3

000d5446 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5446:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5448:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d544a:	f100 0110 	add.w	r1, r0, #16
   d544e:	f7ff fff1 	bl	d5434 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5452:	bd08      	pop	{r3, pc}

000d5454 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5454:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d5456:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5458:	b90a      	cbnz	r2, d545e <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d545a:	f000 fe7a 	bl	d6152 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d545e:	68c3      	ldr	r3, [r0, #12]
    }
   d5460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5464:	4718      	bx	r3

000d5466 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5466:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5468:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d546a:	f100 0110 	add.w	r1, r0, #16
   d546e:	f7ff fff1 	bl	d5454 <_ZNKSt8functionIFvRKbEEclES1_>
   d5472:	bd08      	pop	{r3, pc}

000d5474 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5474:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5476:	2300      	movs	r3, #0
   d5478:	6083      	str	r3, [r0, #8]
   d547a:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d547c:	4604      	mov	r4, r0
   d547e:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5480:	b12b      	cbz	r3, d548e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5482:	2202      	movs	r2, #2
   d5484:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5486:	68eb      	ldr	r3, [r5, #12]
   d5488:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d548a:	68ab      	ldr	r3, [r5, #8]
   d548c:	60a3      	str	r3, [r4, #8]
	}
    }
   d548e:	4620      	mov	r0, r4
   d5490:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5494 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d5494:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5496:	b089      	sub	sp, #36	; 0x24
   d5498:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d549a:	4668      	mov	r0, sp
   d549c:	f7ff ff4d 	bl	d533a <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d54a0:	2300      	movs	r3, #0
   d54a2:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d54a6:	f04f 0202 	mov.w	r2, #2
   d54aa:	e8d4 3f4f 	ldrexb	r3, [r4]
   d54ae:	2b00      	cmp	r3, #0
   d54b0:	d103      	bne.n	d54ba <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d54b2:	e8c4 2f41 	strexb	r1, r2, [r4]
   d54b6:	2900      	cmp	r1, #0
   d54b8:	d1f7      	bne.n	d54aa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d54ba:	d002      	beq.n	d54c2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d54bc:	f88d 3008 	strb.w	r3, [sp, #8]
   d54c0:	e063      	b.n	d558a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d54c2:	f114 050c 	adds.w	r5, r4, #12
   d54c6:	d003      	beq.n	d54d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d54c8:	4669      	mov	r1, sp
   d54ca:	4628      	mov	r0, r5
   d54cc:	f7ff ff35 	bl	d533a <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d54d0:	f3bf 8f5f 	dmb	sy
   d54d4:	2301      	movs	r3, #1
   d54d6:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d54d8:	2000      	movs	r0, #0
   d54da:	f104 0308 	add.w	r3, r4, #8
   d54de:	f3bf 8f5f 	dmb	sy
   d54e2:	e853 6f00 	ldrex	r6, [r3]
   d54e6:	e843 0200 	strex	r2, r0, [r3]
   d54ea:	2a00      	cmp	r2, #0
   d54ec:	d1f9      	bne.n	d54e2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d54ee:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d54f2:	2e00      	cmp	r6, #0
   d54f4:	d049      	beq.n	d558a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d54f6:	f7ff fa77 	bl	d49e8 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d54fa:	b120      	cbz	r0, d5506 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d54fc:	4629      	mov	r1, r5
   d54fe:	4630      	mov	r0, r6
   d5500:	f7ff ff98 	bl	d5434 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5504:	e03a      	b.n	d557c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5506:	4631      	mov	r1, r6
   d5508:	a802      	add	r0, sp, #8
   d550a:	f7ff ffb3 	bl	d5474 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d550e:	68e0      	ldr	r0, [r4, #12]
   d5510:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5514:	b108      	cbz	r0, d551a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d5516:	f001 f8f7 	bl	d6708 <strdup>
   d551a:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d551c:	2010      	movs	r0, #16
   d551e:	f8ad 501c 	strh.w	r5, [sp, #28]
   d5522:	f7fe fdb8 	bl	d4096 <_Znwj>
   d5526:	4605      	mov	r5, r0
   d5528:	b1e8      	cbz	r0, d5566 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d552a:	2700      	movs	r7, #0
   d552c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d552e:	2018      	movs	r0, #24
   d5530:	f7fe fdb1 	bl	d4096 <_Znwj>
   d5534:	4604      	mov	r4, r0
   d5536:	b188      	cbz	r0, d555c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5538:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d553a:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d553c:	a802      	add	r0, sp, #8
   d553e:	f7ff fe47 	bl	d51d0 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5542:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5544:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5546:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5548:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d554a:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d554c:	a906      	add	r1, sp, #24
   d554e:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5550:	60e3      	str	r3, [r4, #12]
   d5552:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5556:	9205      	str	r2, [sp, #20]
   d5558:	f7ff feef 	bl	d533a <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d555c:	4b0d      	ldr	r3, [pc, #52]	; (d5594 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d555e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5560:	4b0d      	ldr	r3, [pc, #52]	; (d5598 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5562:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5564:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d5566:	a806      	add	r0, sp, #24
   d5568:	f7ff fef6 	bl	d5358 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d556c:	a802      	add	r0, sp, #8
   d556e:	f7ff fe20 	bl	d51b2 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5572:	2200      	movs	r2, #0
   d5574:	4629      	mov	r1, r5
   d5576:	4809      	ldr	r0, [pc, #36]	; (d559c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d5578:	f7ff fa3e 	bl	d49f8 <application_thread_invoke>
   d557c:	4630      	mov	r0, r6
   d557e:	f7ff fe18 	bl	d51b2 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5582:	2110      	movs	r1, #16
   d5584:	4630      	mov	r0, r6
   d5586:	f000 fdd1 	bl	d612c <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d558a:	4668      	mov	r0, sp
   d558c:	f7ff fee4 	bl	d5358 <_ZN8particle5ErrorD1Ev>
    }
   d5590:	b009      	add	sp, #36	; 0x24
   d5592:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5594:	000d5447 	.word	0x000d5447
   d5598:	000d56bd 	.word	0x000d56bd
   d559c:	000d5b9d 	.word	0x000d5b9d

000d55a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d55a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d55a4:	b08b      	sub	sp, #44	; 0x2c
   d55a6:	4606      	mov	r6, r0
   d55a8:	460f      	mov	r7, r1
   d55aa:	4690      	mov	r8, r2
   d55ac:	4699      	mov	r9, r3
   d55ae:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d55b2:	f7ff faa5 	bl	d4b00 <spark_cloud_flag_connected>
   d55b6:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d55b8:	4683      	mov	fp, r0
   d55ba:	bb30      	cbnz	r0, d560a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d55bc:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d55c0:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d55c2:	a905      	add	r1, sp, #20
   d55c4:	4628      	mov	r0, r5
   d55c6:	f8ad 3018 	strh.w	r3, [sp, #24]
   d55ca:	f7ff feb6 	bl	d533a <_ZN8particle5ErrorC1EOS0_>
   d55ce:	2014      	movs	r0, #20
   d55d0:	f7fe fd61 	bl	d4096 <_Znwj>
   d55d4:	4604      	mov	r4, r0
   d55d6:	b158      	cbz	r0, d55f0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d55d8:	2302      	movs	r3, #2
   d55da:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d55dc:	2301      	movs	r3, #1
   d55de:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d55e0:	f8c0 b004 	str.w	fp, [r0, #4]
   d55e4:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d55e8:	4629      	mov	r1, r5
   d55ea:	300c      	adds	r0, #12
   d55ec:	f7ff fea5 	bl	d533a <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d55f0:	4630      	mov	r0, r6
   d55f2:	4621      	mov	r1, r4
   d55f4:	f840 4b04 	str.w	r4, [r0], #4
   d55f8:	f7ff ff08 	bl	d540c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d55fc:	4628      	mov	r0, r5
   d55fe:	f7ff feab 	bl	d5358 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d5602:	a805      	add	r0, sp, #20
   d5604:	f7ff fea8 	bl	d5358 <_ZN8particle5ErrorD1Ev>
   d5608:	e052      	b.n	d56b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d560a:	2400      	movs	r4, #0
   d560c:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d560e:	2014      	movs	r0, #20
   d5610:	606c      	str	r4, [r5, #4]
   d5612:	60ac      	str	r4, [r5, #8]
   d5614:	9307      	str	r3, [sp, #28]
   d5616:	f7fe fd3e 	bl	d4096 <_Znwj>
   d561a:	4601      	mov	r1, r0
   d561c:	b118      	cbz	r0, d5626 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d561e:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5620:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5622:	6044      	str	r4, [r0, #4]
   d5624:	6084      	str	r4, [r0, #8]
   d5626:	a804      	add	r0, sp, #16
   d5628:	9103      	str	r1, [sp, #12]
   d562a:	f7ff feef 	bl	d540c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d562e:	4b22      	ldr	r3, [pc, #136]	; (d56b8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d5630:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d5632:	2008      	movs	r0, #8
   d5634:	f7fe fd2f 	bl	d4096 <_Znwj>
   d5638:	4604      	mov	r4, r0
   d563a:	b128      	cbz	r0, d5648 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d563c:	9b03      	ldr	r3, [sp, #12]
   d563e:	f840 3b04 	str.w	r3, [r0], #4
   d5642:	a904      	add	r1, sp, #16
   d5644:	f7ff fc76 	bl	d4f34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5648:	9500      	str	r5, [sp, #0]
   d564a:	fa5f f38a 	uxtb.w	r3, sl
   d564e:	464a      	mov	r2, r9
   d5650:	4641      	mov	r1, r8
   d5652:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d5654:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5656:	f7ff fa5b 	bl	d4b10 <spark_send_event>
   d565a:	b920      	cbnz	r0, d5666 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d565c:	9b03      	ldr	r3, [sp, #12]
   d565e:	785b      	ldrb	r3, [r3, #1]
   d5660:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d5664:	b183      	cbz	r3, d5688 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d5666:	9b03      	ldr	r3, [sp, #12]
   d5668:	9305      	str	r3, [sp, #20]
   d566a:	a904      	add	r1, sp, #16
   d566c:	a806      	add	r0, sp, #24
   d566e:	f7ff fc61 	bl	d4f34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d5672:	a905      	add	r1, sp, #20
   d5674:	4630      	mov	r0, r6
   d5676:	f7ff fe99 	bl	d53ac <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d567a:	a806      	add	r0, sp, #24
   d567c:	f7fe fdde 	bl	d423c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5680:	a804      	add	r0, sp, #16
   d5682:	f7fe fddb 	bl	d423c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5686:	e013      	b.n	d56b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d5688:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d568c:	a905      	add	r1, sp, #20
   d568e:	a803      	add	r0, sp, #12
   d5690:	9205      	str	r2, [sp, #20]
   d5692:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5696:	f7ff fefd 	bl	d5494 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d569a:	a805      	add	r0, sp, #20
   d569c:	f7ff fe5c 	bl	d5358 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d56a0:	a805      	add	r0, sp, #20
   d56a2:	9909      	ldr	r1, [sp, #36]	; 0x24
   d56a4:	f7ff fe93 	bl	d53ce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d56a8:	a806      	add	r0, sp, #24
   d56aa:	f7fe fdc7 	bl	d423c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d56ae:	e7da      	b.n	d5666 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d56b0:	4630      	mov	r0, r6
   d56b2:	b00b      	add	sp, #44	; 0x2c
   d56b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d56b8:	000d582d 	.word	0x000d582d

000d56bc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d56bc:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d56be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d56c0:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d56c2:	d006      	beq.n	d56d2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d56c4:	2a03      	cmp	r2, #3
   d56c6:	d017      	beq.n	d56f8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d56c8:	2a01      	cmp	r2, #1
   d56ca:	d122      	bne.n	d5712 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d56cc:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d56ce:	6003      	str	r3, [r0, #0]
	      break;
   d56d0:	e01f      	b.n	d5712 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d56d2:	2018      	movs	r0, #24
   d56d4:	680e      	ldr	r6, [r1, #0]
   d56d6:	f7fe fcde 	bl	d4096 <_Znwj>
   d56da:	4605      	mov	r5, r0
   d56dc:	b150      	cbz	r0, d56f4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d56de:	4631      	mov	r1, r6
   d56e0:	f7ff fec8 	bl	d5474 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d56e4:	6930      	ldr	r0, [r6, #16]
   d56e6:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d56ea:	b108      	cbz	r0, d56f0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d56ec:	f001 f80c 	bl	d6708 <strdup>
   d56f0:	6128      	str	r0, [r5, #16]
   d56f2:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d56f4:	6025      	str	r5, [r4, #0]
   d56f6:	e00c      	b.n	d5712 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d56f8:	6804      	ldr	r4, [r0, #0]
   d56fa:	b154      	cbz	r4, d5712 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d56fc:	f104 0010 	add.w	r0, r4, #16
   d5700:	f7ff fe2a 	bl	d5358 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5704:	4620      	mov	r0, r4
   d5706:	f7ff fd54 	bl	d51b2 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d570a:	2118      	movs	r1, #24
   d570c:	4620      	mov	r0, r4
   d570e:	f000 fd0d 	bl	d612c <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5712:	2000      	movs	r0, #0
   d5714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5716 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5716:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5718:	2300      	movs	r3, #0
   d571a:	6083      	str	r3, [r0, #8]
   d571c:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d571e:	4604      	mov	r4, r0
   d5720:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5722:	b12b      	cbz	r3, d5730 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5724:	2202      	movs	r2, #2
   d5726:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5728:	68eb      	ldr	r3, [r5, #12]
   d572a:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d572c:	68ab      	ldr	r3, [r5, #8]
   d572e:	60a3      	str	r3, [r4, #8]
	}
    }
   d5730:	4620      	mov	r0, r4
   d5732:	bd38      	pop	{r3, r4, r5, pc}

000d5734 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5734:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5736:	b570      	push	{r4, r5, r6, lr}
   d5738:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d573a:	d006      	beq.n	d574a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d573c:	2a03      	cmp	r2, #3
   d573e:	d011      	beq.n	d5764 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d5740:	2a01      	cmp	r2, #1
   d5742:	d118      	bne.n	d5776 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5744:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5746:	6003      	str	r3, [r0, #0]
	      break;
   d5748:	e015      	b.n	d5776 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d574a:	2014      	movs	r0, #20
   d574c:	680e      	ldr	r6, [r1, #0]
   d574e:	f7fe fca2 	bl	d4096 <_Znwj>
   d5752:	4605      	mov	r5, r0
   d5754:	b120      	cbz	r0, d5760 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5756:	4631      	mov	r1, r6
   d5758:	f7ff ffdd 	bl	d5716 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d575c:	7c33      	ldrb	r3, [r6, #16]
   d575e:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5760:	6025      	str	r5, [r4, #0]
   d5762:	e008      	b.n	d5776 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5764:	6804      	ldr	r4, [r0, #0]
   d5766:	b134      	cbz	r4, d5776 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5768:	4620      	mov	r0, r4
   d576a:	f7ff fd22 	bl	d51b2 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d576e:	2114      	movs	r1, #20
   d5770:	4620      	mov	r0, r4
   d5772:	f000 fcdb 	bl	d612c <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5776:	2000      	movs	r0, #0
   d5778:	bd70      	pop	{r4, r5, r6, pc}
	...

000d577c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d577c:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d577e:	2300      	movs	r3, #0
   d5780:	b087      	sub	sp, #28
   d5782:	460c      	mov	r4, r1
   d5784:	f3bf 8f5f 	dmb	sy
   d5788:	e850 6f00 	ldrex	r6, [r0]
   d578c:	e840 3200 	strex	r2, r3, [r0]
   d5790:	2a00      	cmp	r2, #0
   d5792:	d1f9      	bne.n	d5788 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d5794:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5798:	2e00      	cmp	r6, #0
   d579a:	d03f      	beq.n	d581c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d579c:	4618      	mov	r0, r3
   d579e:	f7ff f923 	bl	d49e8 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d57a2:	4607      	mov	r7, r0
   d57a4:	b120      	cbz	r0, d57b0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d57a6:	4621      	mov	r1, r4
   d57a8:	4630      	mov	r0, r6
   d57aa:	f7ff fe53 	bl	d5454 <_ZNKSt8functionIFvRKbEEclES1_>
   d57ae:	e02e      	b.n	d580e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d57b0:	4631      	mov	r1, r6
   d57b2:	a801      	add	r0, sp, #4
   d57b4:	f7ff ffaf 	bl	d5716 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d57b8:	7823      	ldrb	r3, [r4, #0]
   d57ba:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d57be:	2010      	movs	r0, #16
   d57c0:	f7fe fc69 	bl	d4096 <_Znwj>
   d57c4:	4605      	mov	r5, r0
   d57c6:	b1d0      	cbz	r0, d57fe <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d57c8:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d57ca:	2014      	movs	r0, #20
   d57cc:	f7fe fc63 	bl	d4096 <_Znwj>
   d57d0:	4604      	mov	r4, r0
   d57d2:	b178      	cbz	r0, d57f4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d57d4:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d57d6:	4601      	mov	r1, r0
   d57d8:	a801      	add	r0, sp, #4
   d57da:	f7ff fcf9 	bl	d51d0 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d57de:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d57e0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d57e2:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d57e4:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d57e6:	9203      	str	r2, [sp, #12]
   d57e8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d57ea:	60e3      	str	r3, [r4, #12]
   d57ec:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d57f0:	9204      	str	r2, [sp, #16]
   d57f2:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d57f4:	4b0a      	ldr	r3, [pc, #40]	; (d5820 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d57f6:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d57f8:	4b0a      	ldr	r3, [pc, #40]	; (d5824 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d57fa:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d57fc:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d57fe:	a801      	add	r0, sp, #4
   d5800:	f7ff fcd7 	bl	d51b2 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5804:	2200      	movs	r2, #0
   d5806:	4629      	mov	r1, r5
   d5808:	4807      	ldr	r0, [pc, #28]	; (d5828 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d580a:	f7ff f8f5 	bl	d49f8 <application_thread_invoke>
   d580e:	4630      	mov	r0, r6
   d5810:	f7ff fccf 	bl	d51b2 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5814:	2110      	movs	r1, #16
   d5816:	4630      	mov	r0, r6
   d5818:	f000 fc88 	bl	d612c <_ZdlPvj>
        }
    }
   d581c:	b007      	add	sp, #28
   d581e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5820:	000d5467 	.word	0x000d5467
   d5824:	000d5735 	.word	0x000d5735
   d5828:	000d5b9d 	.word	0x000d5b9d

000d582c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d582c:	b530      	push	{r4, r5, lr}
   d582e:	b085      	sub	sp, #20
   d5830:	4604      	mov	r4, r0
   d5832:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d5834:	4668      	mov	r0, sp
   d5836:	4611      	mov	r1, r2
   d5838:	f7ff fdc9 	bl	d53ce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d583c:	b17c      	cbz	r4, d585e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d583e:	b224      	sxth	r4, r4
   d5840:	4628      	mov	r0, r5
   d5842:	b10d      	cbz	r5, d5848 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d5844:	f000 ff60 	bl	d6708 <strdup>
   d5848:	9002      	str	r0, [sp, #8]
   d584a:	a902      	add	r1, sp, #8
   d584c:	4668      	mov	r0, sp
   d584e:	f8ad 400c 	strh.w	r4, [sp, #12]
   d5852:	f7ff fe1f 	bl	d5494 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5856:	a802      	add	r0, sp, #8
   d5858:	f7ff fd7e 	bl	d5358 <_ZN8particle5ErrorD1Ev>
   d585c:	e01d      	b.n	d589a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d585e:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5860:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5864:	f04f 0201 	mov.w	r2, #1
   d5868:	e8d0 3f4f 	ldrexb	r3, [r0]
   d586c:	42a3      	cmp	r3, r4
   d586e:	d103      	bne.n	d5878 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d5870:	e8c0 2f41 	strexb	r1, r2, [r0]
   d5874:	2900      	cmp	r1, #0
   d5876:	d1f7      	bne.n	d5868 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d5878:	d002      	beq.n	d5880 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d587a:	f88d 3008 	strb.w	r3, [sp, #8]
   d587e:	e00c      	b.n	d589a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d5880:	f110 010c 	adds.w	r1, r0, #12
   d5884:	f04f 0301 	mov.w	r3, #1
   d5888:	bf18      	it	ne
   d588a:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d588c:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d5890:	3004      	adds	r0, #4
   d5892:	f800 3c03 	strb.w	r3, [r0, #-3]
   d5896:	f7ff ff71 	bl	d577c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d589a:	a801      	add	r0, sp, #4
   d589c:	f7fe fcce 	bl	d423c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d58a0:	b005      	add	sp, #20
   d58a2:	bd30      	pop	{r4, r5, pc}

000d58a4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d58a4:	4770      	bx	lr

000d58a6 <_ZN9IPAddressD0Ev>:
   d58a6:	b510      	push	{r4, lr}
   d58a8:	2118      	movs	r1, #24
   d58aa:	4604      	mov	r4, r0
   d58ac:	f000 fc3e 	bl	d612c <_ZdlPvj>
   d58b0:	4620      	mov	r0, r4
   d58b2:	bd10      	pop	{r4, pc}

000d58b4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d58b4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d58b6:	7d03      	ldrb	r3, [r0, #20]
   d58b8:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d58ba:	b08d      	sub	sp, #52	; 0x34
   d58bc:	460e      	mov	r6, r1
   d58be:	f100 0704 	add.w	r7, r0, #4
   d58c2:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d58c6:	d002      	beq.n	d58ce <_ZNK9IPAddress7printToER5Print+0x1a>
   d58c8:	f100 0508 	add.w	r5, r0, #8
   d58cc:	e018      	b.n	d5900 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d58ce:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d58d0:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d58d2:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d58d6:	232f      	movs	r3, #47	; 0x2f
   d58d8:	462a      	mov	r2, r5
   d58da:	200a      	movs	r0, #10
   d58dc:	f7fe ffb4 	bl	d4848 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d58e0:	4628      	mov	r0, r5
   d58e2:	f000 ff2c 	bl	d673e <strlen>
   d58e6:	6833      	ldr	r3, [r6, #0]
   d58e8:	4602      	mov	r2, r0
   d58ea:	68db      	ldr	r3, [r3, #12]
   d58ec:	4629      	mov	r1, r5
   d58ee:	4630      	mov	r0, r6
   d58f0:	4798      	blx	r3
   d58f2:	e00f      	b.n	d5914 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d58f4:	b124      	cbz	r4, d5900 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d58f6:	212e      	movs	r1, #46	; 0x2e
   d58f8:	4630      	mov	r0, r6
   d58fa:	f7ff fb5d 	bl	d4fb8 <_ZN5Print5printEc>
   d58fe:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5900:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5904:	220a      	movs	r2, #10
   d5906:	4630      	mov	r0, r6
   d5908:	f7ff fb6f 	bl	d4fea <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d590c:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d590e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5910:	d1f0      	bne.n	d58f4 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5912:	4620      	mov	r0, r4
    }
    return n;
}
   d5914:	b00d      	add	sp, #52	; 0x34
   d5916:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5918 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5918:	b510      	push	{r4, lr}
   d591a:	4b05      	ldr	r3, [pc, #20]	; (d5930 <_ZN9IPAddressC1Ev+0x18>)
   d591c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d591e:	2211      	movs	r2, #17
   d5920:	f840 3b04 	str.w	r3, [r0], #4
   d5924:	2100      	movs	r1, #0
   d5926:	f000 feac 	bl	d6682 <memset>
{
    clear();
}
   d592a:	4620      	mov	r0, r4
   d592c:	bd10      	pop	{r4, pc}
   d592e:	bf00      	nop
   d5930:	000d7118 	.word	0x000d7118

000d5934 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5934:	4603      	mov	r3, r0
   d5936:	4a07      	ldr	r2, [pc, #28]	; (d5954 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5938:	b510      	push	{r4, lr}
   d593a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d593e:	f101 0210 	add.w	r2, r1, #16
   d5942:	f851 4b04 	ldr.w	r4, [r1], #4
   d5946:	f843 4b04 	str.w	r4, [r3], #4
   d594a:	4291      	cmp	r1, r2
   d594c:	d1f9      	bne.n	d5942 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d594e:	780a      	ldrb	r2, [r1, #0]
   d5950:	701a      	strb	r2, [r3, #0]
}
   d5952:	bd10      	pop	{r4, pc}
   d5954:	000d7118 	.word	0x000d7118

000d5958 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5958:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d595a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d595e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5962:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5966:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d596a:	2304      	movs	r3, #4
   d596c:	6041      	str	r1, [r0, #4]
   d596e:	7503      	strb	r3, [r0, #20]
   d5970:	bd10      	pop	{r4, pc}

000d5972 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d5972:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5974:	780d      	ldrb	r5, [r1, #0]
   d5976:	788b      	ldrb	r3, [r1, #2]
   d5978:	784a      	ldrb	r2, [r1, #1]
   d597a:	78c9      	ldrb	r1, [r1, #3]
   d597c:	9100      	str	r1, [sp, #0]
   d597e:	4629      	mov	r1, r5
   d5980:	f7ff ffea 	bl	d5958 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5984:	b003      	add	sp, #12
   d5986:	bd30      	pop	{r4, r5, pc}

000d5988 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5988:	7441      	strb	r1, [r0, #17]
   d598a:	4770      	bx	lr

000d598c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d598c:	4770      	bx	lr

000d598e <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d598e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5990:	2100      	movs	r1, #0
   d5992:	7c00      	ldrb	r0, [r0, #16]
   d5994:	f7fe fff8 	bl	d4988 <HAL_USB_USART_Receive_Data>
}
   d5998:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d599c:	bf28      	it	cs
   d599e:	f04f 30ff 	movcs.w	r0, #4294967295
   d59a2:	bd08      	pop	{r3, pc}

000d59a4 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d59a4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d59a6:	2101      	movs	r1, #1
   d59a8:	7c00      	ldrb	r0, [r0, #16]
   d59aa:	f7fe ffed 	bl	d4988 <HAL_USB_USART_Receive_Data>
}
   d59ae:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d59b2:	bf28      	it	cs
   d59b4:	f04f 30ff 	movcs.w	r0, #4294967295
   d59b8:	bd08      	pop	{r3, pc}

000d59ba <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d59ba:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d59bc:	7c00      	ldrb	r0, [r0, #16]
   d59be:	f7fe ffdb 	bl	d4978 <HAL_USB_USART_Available_Data_For_Write>
}
   d59c2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d59c6:	bd08      	pop	{r3, pc}

000d59c8 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d59c8:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d59ca:	7c00      	ldrb	r0, [r0, #16]
   d59cc:	f7fe ffcc 	bl	d4968 <HAL_USB_USART_Available_Data>
}
   d59d0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d59d4:	bd08      	pop	{r3, pc}

000d59d6 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d59d6:	7c00      	ldrb	r0, [r0, #16]
   d59d8:	f7fe bfe6 	b.w	d49a8 <HAL_USB_USART_Flush_Data>

000d59dc <_ZN9USBSerialD0Ev>:
   d59dc:	b510      	push	{r4, lr}
   d59de:	2114      	movs	r1, #20
   d59e0:	4604      	mov	r4, r0
   d59e2:	f000 fba3 	bl	d612c <_ZdlPvj>
   d59e6:	4620      	mov	r0, r4
   d59e8:	bd10      	pop	{r4, pc}

000d59ea <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d59ea:	b538      	push	{r3, r4, r5, lr}
   d59ec:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d59ee:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d59f0:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d59f2:	f7fe ffc1 	bl	d4978 <HAL_USB_USART_Available_Data_For_Write>
   d59f6:	2800      	cmp	r0, #0
   d59f8:	dc01      	bgt.n	d59fe <_ZN9USBSerial5writeEh+0x14>
   d59fa:	7c60      	ldrb	r0, [r4, #17]
   d59fc:	b128      	cbz	r0, d5a0a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d59fe:	4629      	mov	r1, r5
   d5a00:	7c20      	ldrb	r0, [r4, #16]
   d5a02:	f7fe ffc9 	bl	d4998 <HAL_USB_USART_Send_Data>
   d5a06:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d5a0a:	bd38      	pop	{r3, r4, r5, pc}

000d5a0c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5a0c:	b510      	push	{r4, lr}
   d5a0e:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5a10:	2300      	movs	r3, #0
   d5a12:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5a14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5a18:	60a3      	str	r3, [r4, #8]
   d5a1a:	4b05      	ldr	r3, [pc, #20]	; (d5a30 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5a1c:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5a1e:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5a20:	4608      	mov	r0, r1
{
  _serial = serial;
   d5a22:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5a24:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d5a26:	4611      	mov	r1, r2
   d5a28:	f7fe ff8e 	bl	d4948 <HAL_USB_USART_Init>
}
   d5a2c:	4620      	mov	r0, r4
   d5a2e:	bd10      	pop	{r4, pc}
   d5a30:	000d712c 	.word	0x000d712c

000d5a34 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5a34:	2200      	movs	r2, #0
   d5a36:	7c00      	ldrb	r0, [r0, #16]
   d5a38:	f7fe bf8e 	b.w	d4958 <HAL_USB_USART_Begin>

000d5a3c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5a3c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5a3e:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5a40:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5a42:	2100      	movs	r1, #0
   d5a44:	f000 fe1d 	bl	d6682 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5a48:	4620      	mov	r0, r4
   d5a4a:	bd10      	pop	{r4, pc}

000d5a4c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5a4c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5a4e:	4d0e      	ldr	r5, [pc, #56]	; (d5a88 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5a50:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5a52:	a801      	add	r0, sp, #4
   d5a54:	f7ff fff2 	bl	d5a3c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5a58:	6829      	ldr	r1, [r5, #0]
   d5a5a:	f011 0401 	ands.w	r4, r1, #1
   d5a5e:	d110      	bne.n	d5a82 <_Z16_fetch_usbserialv+0x36>
   d5a60:	4628      	mov	r0, r5
   d5a62:	f7fe fb1e 	bl	d40a2 <__cxa_guard_acquire>
   d5a66:	b160      	cbz	r0, d5a82 <_Z16_fetch_usbserialv+0x36>
   d5a68:	aa01      	add	r2, sp, #4
   d5a6a:	4621      	mov	r1, r4
   d5a6c:	4807      	ldr	r0, [pc, #28]	; (d5a8c <_Z16_fetch_usbserialv+0x40>)
   d5a6e:	f7ff ffcd 	bl	d5a0c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5a72:	4628      	mov	r0, r5
   d5a74:	f7fe fb1a 	bl	d40ac <__cxa_guard_release>
   d5a78:	4a05      	ldr	r2, [pc, #20]	; (d5a90 <_Z16_fetch_usbserialv+0x44>)
   d5a7a:	4906      	ldr	r1, [pc, #24]	; (d5a94 <_Z16_fetch_usbserialv+0x48>)
   d5a7c:	4803      	ldr	r0, [pc, #12]	; (d5a8c <_Z16_fetch_usbserialv+0x40>)
   d5a7e:	f000 fb47 	bl	d6110 <__aeabi_atexit>
	return _usbserial;
}
   d5a82:	4802      	ldr	r0, [pc, #8]	; (d5a8c <_Z16_fetch_usbserialv+0x40>)
   d5a84:	b007      	add	sp, #28
   d5a86:	bd30      	pop	{r4, r5, pc}
   d5a88:	2003e3dc 	.word	0x2003e3dc
   d5a8c:	2003e3e0 	.word	0x2003e3e0
   d5a90:	2003e340 	.word	0x2003e340
   d5a94:	000d598d 	.word	0x000d598d

000d5a98 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5a98:	4770      	bx	lr

000d5a9a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5a9a:	7441      	strb	r1, [r0, #17]
   d5a9c:	4770      	bx	lr

000d5a9e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d5a9e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d5aa0:	7c00      	ldrb	r0, [r0, #16]
   d5aa2:	f7fe ff11 	bl	d48c8 <HAL_USART_Available_Data_For_Write>
}
   d5aa6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5aaa:	bd08      	pop	{r3, pc}

000d5aac <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5aac:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d5aae:	7c00      	ldrb	r0, [r0, #16]
   d5ab0:	f7fe fee2 	bl	d4878 <HAL_USART_Available_Data>
}
   d5ab4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5ab8:	bd08      	pop	{r3, pc}

000d5aba <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5aba:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d5abc:	7c00      	ldrb	r0, [r0, #16]
   d5abe:	f7fe feeb 	bl	d4898 <HAL_USART_Peek_Data>
}
   d5ac2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5ac6:	bf28      	it	cs
   d5ac8:	f04f 30ff 	movcs.w	r0, #4294967295
   d5acc:	bd08      	pop	{r3, pc}

000d5ace <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5ace:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d5ad0:	7c00      	ldrb	r0, [r0, #16]
   d5ad2:	f7fe fed9 	bl	d4888 <HAL_USART_Read_Data>
}
   d5ad6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5ada:	bf28      	it	cs
   d5adc:	f04f 30ff 	movcs.w	r0, #4294967295
   d5ae0:	bd08      	pop	{r3, pc}

000d5ae2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d5ae2:	7c00      	ldrb	r0, [r0, #16]
   d5ae4:	f7fe bee0 	b.w	d48a8 <HAL_USART_Flush_Data>

000d5ae8 <_ZN11USARTSerialD0Ev>:
   d5ae8:	b510      	push	{r4, lr}
   d5aea:	2114      	movs	r1, #20
   d5aec:	4604      	mov	r4, r0
   d5aee:	f000 fb1d 	bl	d612c <_ZdlPvj>
   d5af2:	4620      	mov	r0, r4
   d5af4:	bd10      	pop	{r4, pc}

000d5af6 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5af6:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5af8:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d5afa:	4604      	mov	r4, r0
   d5afc:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5afe:	b925      	cbnz	r5, d5b0a <_ZN11USARTSerial5writeEh+0x14>
   d5b00:	7c00      	ldrb	r0, [r0, #16]
   d5b02:	f7fe fee1 	bl	d48c8 <HAL_USART_Available_Data_For_Write>
   d5b06:	2800      	cmp	r0, #0
   d5b08:	dd05      	ble.n	d5b16 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5b0a:	4631      	mov	r1, r6
   d5b0c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5b0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5b12:	f7fe bea9 	b.w	d4868 <HAL_USART_Write_Data>
  }
  return 0;
}
   d5b16:	4628      	mov	r0, r5
   d5b18:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5b1c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5b1c:	b510      	push	{r4, lr}
   d5b1e:	4604      	mov	r4, r0
   d5b20:	4608      	mov	r0, r1
   d5b22:	4611      	mov	r1, r2
   d5b24:	2200      	movs	r2, #0
   d5b26:	6062      	str	r2, [r4, #4]
   d5b28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5b2c:	60a2      	str	r2, [r4, #8]
   d5b2e:	4a05      	ldr	r2, [pc, #20]	; (d5b44 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5b30:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d5b32:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5b34:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d5b36:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5b38:	461a      	mov	r2, r3
   d5b3a:	f7fe fe8d 	bl	d4858 <HAL_USART_Init>
}
   d5b3e:	4620      	mov	r0, r4
   d5b40:	bd10      	pop	{r4, pc}
   d5b42:	bf00      	nop
   d5b44:	000d715c 	.word	0x000d715c

000d5b48 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d5b48:	7c00      	ldrb	r0, [r0, #16]
   d5b4a:	f7fe beb5 	b.w	d48b8 <HAL_USART_Is_Enabled>
	...

000d5b50 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5b50:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5b52:	4d0c      	ldr	r5, [pc, #48]	; (d5b84 <_Z22__fetch_global_Serial1v+0x34>)
   d5b54:	6829      	ldr	r1, [r5, #0]
   d5b56:	f011 0401 	ands.w	r4, r1, #1
   d5b5a:	d111      	bne.n	d5b80 <_Z22__fetch_global_Serial1v+0x30>
   d5b5c:	4628      	mov	r0, r5
   d5b5e:	f7fe faa0 	bl	d40a2 <__cxa_guard_acquire>
   d5b62:	b168      	cbz	r0, d5b80 <_Z22__fetch_global_Serial1v+0x30>
   d5b64:	4a08      	ldr	r2, [pc, #32]	; (d5b88 <_Z22__fetch_global_Serial1v+0x38>)
   d5b66:	4b09      	ldr	r3, [pc, #36]	; (d5b8c <_Z22__fetch_global_Serial1v+0x3c>)
   d5b68:	4809      	ldr	r0, [pc, #36]	; (d5b90 <_Z22__fetch_global_Serial1v+0x40>)
   d5b6a:	4621      	mov	r1, r4
   d5b6c:	f7ff ffd6 	bl	d5b1c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5b70:	4628      	mov	r0, r5
   d5b72:	f7fe fa9b 	bl	d40ac <__cxa_guard_release>
   d5b76:	4a07      	ldr	r2, [pc, #28]	; (d5b94 <_Z22__fetch_global_Serial1v+0x44>)
   d5b78:	4907      	ldr	r1, [pc, #28]	; (d5b98 <_Z22__fetch_global_Serial1v+0x48>)
   d5b7a:	4805      	ldr	r0, [pc, #20]	; (d5b90 <_Z22__fetch_global_Serial1v+0x40>)
   d5b7c:	f000 fac8 	bl	d6110 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5b80:	4803      	ldr	r0, [pc, #12]	; (d5b90 <_Z22__fetch_global_Serial1v+0x40>)
   d5b82:	bd38      	pop	{r3, r4, r5, pc}
   d5b84:	2003e48c 	.word	0x2003e48c
   d5b88:	2003e490 	.word	0x2003e490
   d5b8c:	2003e408 	.word	0x2003e408
   d5b90:	2003e3f4 	.word	0x2003e3f4
   d5b94:	2003e340 	.word	0x2003e340
   d5b98:	000d5a99 	.word	0x000d5a99

000d5b9c <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d5b9c:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5b9e:	6883      	ldr	r3, [r0, #8]
   d5ba0:	4604      	mov	r4, r0
   d5ba2:	b90b      	cbnz	r3, d5ba8 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d5ba4:	f000 fad5 	bl	d6152 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5ba8:	68c3      	ldr	r3, [r0, #12]
   d5baa:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5bac:	68a3      	ldr	r3, [r4, #8]
   d5bae:	b11b      	cbz	r3, d5bb8 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5bb0:	2203      	movs	r2, #3
   d5bb2:	4621      	mov	r1, r4
   d5bb4:	4620      	mov	r0, r4
   d5bb6:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5bb8:	4620      	mov	r0, r4
   d5bba:	2110      	movs	r1, #16
}
   d5bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5bc0:	f000 bab4 	b.w	d612c <_ZdlPvj>

000d5bc4 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d5bc4:	4770      	bx	lr

000d5bc6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5bc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5bc8:	4606      	mov	r6, r0
   d5bca:	4615      	mov	r5, r2
   d5bcc:	460c      	mov	r4, r1
   d5bce:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5bd0:	42bc      	cmp	r4, r7
   d5bd2:	d006      	beq.n	d5be2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5bd4:	6833      	ldr	r3, [r6, #0]
   d5bd6:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5bda:	689b      	ldr	r3, [r3, #8]
   d5bdc:	4630      	mov	r0, r6
   d5bde:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5be0:	e7f6      	b.n	d5bd0 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d5be2:	4628      	mov	r0, r5
   d5be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5be6 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d5be6:	2200      	movs	r2, #0
   d5be8:	7c00      	ldrb	r0, [r0, #16]
   d5bea:	f7fe be75 	b.w	d48d8 <HAL_I2C_Write_Data>

000d5bee <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d5bee:	2100      	movs	r1, #0
   d5bf0:	7c00      	ldrb	r0, [r0, #16]
   d5bf2:	f7fe be79 	b.w	d48e8 <HAL_I2C_Available_Data>

000d5bf6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d5bf6:	2100      	movs	r1, #0
   d5bf8:	7c00      	ldrb	r0, [r0, #16]
   d5bfa:	f7fe be7d 	b.w	d48f8 <HAL_I2C_Read_Data>

000d5bfe <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d5bfe:	2100      	movs	r1, #0
   d5c00:	7c00      	ldrb	r0, [r0, #16]
   d5c02:	f7fe be81 	b.w	d4908 <HAL_I2C_Peek_Data>

000d5c06 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d5c06:	2100      	movs	r1, #0
   d5c08:	7c00      	ldrb	r0, [r0, #16]
   d5c0a:	f7fe be85 	b.w	d4918 <HAL_I2C_Flush_Data>

000d5c0e <_ZN7TwoWireD0Ev>:
   d5c0e:	b510      	push	{r4, lr}
   d5c10:	2114      	movs	r1, #20
   d5c12:	4604      	mov	r4, r0
   d5c14:	f000 fa8a 	bl	d612c <_ZdlPvj>
   d5c18:	4620      	mov	r0, r4
   d5c1a:	bd10      	pop	{r4, pc}

000d5c1c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d5c1c:	b510      	push	{r4, lr}
   d5c1e:	4604      	mov	r4, r0
   d5c20:	2300      	movs	r3, #0
   d5c22:	6063      	str	r3, [r4, #4]
   d5c24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5c28:	60a3      	str	r3, [r4, #8]
   d5c2a:	4b04      	ldr	r3, [pc, #16]	; (d5c3c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d5c2c:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d5c2e:	4608      	mov	r0, r1
   d5c30:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d5c32:	4611      	mov	r1, r2
   d5c34:	f7fe fe80 	bl	d4938 <HAL_I2C_Init>
}
   d5c38:	4620      	mov	r0, r4
   d5c3a:	bd10      	pop	{r4, pc}
   d5c3c:	000d718c 	.word	0x000d718c

000d5c40 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d5c40:	2100      	movs	r1, #0
   d5c42:	7c00      	ldrb	r0, [r0, #16]
   d5c44:	f7fe be70 	b.w	d4928 <HAL_I2C_Is_Enabled>

000d5c48 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5c48:	2200      	movs	r2, #0
   d5c4a:	4611      	mov	r1, r2
   d5c4c:	6840      	ldr	r0, [r0, #4]
   d5c4e:	f7fe bf2f 	b.w	d4ab0 <network_listening>

000d5c52 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5c52:	2200      	movs	r2, #0
   d5c54:	4611      	mov	r1, r2
   d5c56:	6840      	ldr	r0, [r0, #4]
   d5c58:	f7fe bf3a 	b.w	d4ad0 <network_get_listen_timeout>

000d5c5c <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5c5c:	2200      	movs	r2, #0
   d5c5e:	6840      	ldr	r0, [r0, #4]
   d5c60:	f7fe bf2e 	b.w	d4ac0 <network_set_listen_timeout>

000d5c64 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5c64:	2200      	movs	r2, #0
   d5c66:	f081 0101 	eor.w	r1, r1, #1
   d5c6a:	6840      	ldr	r0, [r0, #4]
   d5c6c:	f7fe bf18 	b.w	d4aa0 <network_listen>

000d5c70 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d5c70:	2300      	movs	r3, #0
   d5c72:	461a      	mov	r2, r3
   d5c74:	2101      	movs	r1, #1
   d5c76:	6840      	ldr	r0, [r0, #4]
   d5c78:	f7fe bf0a 	b.w	d4a90 <network_off>

000d5c7c <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5c7c:	2300      	movs	r3, #0
   d5c7e:	461a      	mov	r2, r3
   d5c80:	4619      	mov	r1, r3
   d5c82:	6840      	ldr	r0, [r0, #4]
   d5c84:	f7fe befc 	b.w	d4a80 <network_on>

000d5c88 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5c88:	2200      	movs	r2, #0
   d5c8a:	4611      	mov	r1, r2
   d5c8c:	6840      	ldr	r0, [r0, #4]
   d5c8e:	f7fe beef 	b.w	d4a70 <network_ready>

000d5c92 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5c92:	2200      	movs	r2, #0
   d5c94:	4611      	mov	r1, r2
   d5c96:	6840      	ldr	r0, [r0, #4]
   d5c98:	f7fe beda 	b.w	d4a50 <network_connecting>

000d5c9c <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5c9c:	2200      	movs	r2, #0
   d5c9e:	2102      	movs	r1, #2
   d5ca0:	6840      	ldr	r0, [r0, #4]
   d5ca2:	f7fe bedd 	b.w	d4a60 <network_disconnect>

000d5ca6 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5ca6:	2300      	movs	r3, #0
   d5ca8:	461a      	mov	r2, r3
   d5caa:	6840      	ldr	r0, [r0, #4]
   d5cac:	f7fe bec8 	b.w	d4a40 <network_connect>

000d5cb0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5cb0:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5cb2:	4605      	mov	r5, r0
   d5cb4:	b188      	cbz	r0, d5cda <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5cb6:	6804      	ldr	r4, [r0, #0]
   d5cb8:	b14c      	cbz	r4, d5cce <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5cba:	68a3      	ldr	r3, [r4, #8]
   d5cbc:	b11b      	cbz	r3, d5cc6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5cbe:	2203      	movs	r2, #3
   d5cc0:	4621      	mov	r1, r4
   d5cc2:	4620      	mov	r0, r4
   d5cc4:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5cc6:	2110      	movs	r1, #16
   d5cc8:	4620      	mov	r0, r4
   d5cca:	f000 fa2f 	bl	d612c <_ZdlPvj>
   d5cce:	4628      	mov	r0, r5
   d5cd0:	2114      	movs	r1, #20
      }
   d5cd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5cd6:	f000 ba29 	b.w	d612c <_ZdlPvj>
   d5cda:	bd38      	pop	{r3, r4, r5, pc}

000d5cdc <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d5cdc:	b110      	cbz	r0, d5ce4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d5cde:	6803      	ldr	r3, [r0, #0]
   d5ce0:	685b      	ldr	r3, [r3, #4]
   d5ce2:	4718      	bx	r3
   d5ce4:	4770      	bx	lr

000d5ce6 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d5ce6:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5ce8:	6803      	ldr	r3, [r0, #0]
   d5cea:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d5cec:	b1bb      	cbz	r3, d5d1e <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d5cee:	6858      	ldr	r0, [r3, #4]
   d5cf0:	f7fe fd82 	bl	d47f8 <os_thread_is_current>
   d5cf4:	b978      	cbnz	r0, d5d16 <_ZN6ThreadD1Ev+0x30>
   d5cf6:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d5cf8:	7c5a      	ldrb	r2, [r3, #17]
   d5cfa:	b912      	cbnz	r2, d5d02 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d5cfc:	6858      	ldr	r0, [r3, #4]
   d5cfe:	f7fe fd83 	bl	d4808 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d5d02:	6823      	ldr	r3, [r4, #0]
   d5d04:	6858      	ldr	r0, [r3, #4]
   d5d06:	f7fe fd87 	bl	d4818 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5d0a:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5d0c:	2300      	movs	r3, #0
   d5d0e:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5d10:	b128      	cbz	r0, d5d1e <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d5d12:	f7ff ffcd 	bl	d5cb0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5d16:	6820      	ldr	r0, [r4, #0]
   d5d18:	b108      	cbz	r0, d5d1e <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d5d1a:	f7ff ffc9 	bl	d5cb0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d5d1e:	4620      	mov	r0, r4
   d5d20:	bd10      	pop	{r4, pc}

000d5d22 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d5d22:	b538      	push	{r3, r4, r5, lr}
   d5d24:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5d26:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d5d2a:	b108      	cbz	r0, d5d30 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5d2c:	f7fe f9b7 	bl	d409e <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5d30:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d5d34:	b108      	cbz	r0, d5d3a <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d5d36:	f7fe fd7f 	bl	d4838 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5d3a:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d5d3e:	b135      	cbz	r5, d5d4e <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5d40:	4628      	mov	r0, r5
   d5d42:	f7ff ffd0 	bl	d5ce6 <_ZN6ThreadD1Ev>
   d5d46:	2104      	movs	r1, #4
   d5d48:	4628      	mov	r0, r5
   d5d4a:	f000 f9ef 	bl	d612c <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5d4e:	6820      	ldr	r0, [r4, #0]
   d5d50:	b108      	cbz	r0, d5d56 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d5d52:	f7ff ffc3 	bl	d5cdc <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d5d56:	4620      	mov	r0, r4
   d5d58:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5d5c <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5d5c:	b510      	push	{r4, lr}
   d5d5e:	4b04      	ldr	r3, [pc, #16]	; (d5d70 <_ZN5spark9MeshClassD1Ev+0x14>)
   d5d60:	4604      	mov	r4, r0
   d5d62:	f840 3b08 	str.w	r3, [r0], #8
   d5d66:	f7ff ffdc 	bl	d5d22 <_ZN5spark11MeshPublishD1Ev>
   d5d6a:	4620      	mov	r0, r4
   d5d6c:	bd10      	pop	{r4, pc}
   d5d6e:	bf00      	nop
   d5d70:	000d71b4 	.word	0x000d71b4

000d5d74 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5d74:	b538      	push	{r3, r4, r5, lr}
   d5d76:	4c0e      	ldr	r4, [pc, #56]	; (d5db0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d5d78:	4b0e      	ldr	r3, [pc, #56]	; (d5db4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d5d7a:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5d7c:	2500      	movs	r5, #0
   d5d7e:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5d80:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5d84:	6063      	str	r3, [r4, #4]
   d5d86:	60a5      	str	r5, [r4, #8]
   d5d88:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5d8c:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5d90:	f7fe fd4a 	bl	d4828 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5d94:	4b08      	ldr	r3, [pc, #32]	; (d5db8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d5d96:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5d9a:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d5d9e:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5da0:	4620      	mov	r0, r4
   d5da2:	4a06      	ldr	r2, [pc, #24]	; (d5dbc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d5da4:	4906      	ldr	r1, [pc, #24]	; (d5dc0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d5da6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d5daa:	f000 b9b1 	b.w	d6110 <__aeabi_atexit>
   d5dae:	bf00      	nop
   d5db0:	2003e514 	.word	0x2003e514
   d5db4:	000d721c 	.word	0x000d721c
   d5db8:	000d71b4 	.word	0x000d71b4
   d5dbc:	2003e340 	.word	0x2003e340
   d5dc0:	000d5d5d 	.word	0x000d5d5d

000d5dc4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5dc4:	2200      	movs	r2, #0
   d5dc6:	4611      	mov	r1, r2
   d5dc8:	6840      	ldr	r0, [r0, #4]
   d5dca:	f7fe be51 	b.w	d4a70 <network_ready>

000d5dce <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5dce:	2200      	movs	r2, #0
   d5dd0:	4611      	mov	r1, r2
   d5dd2:	6840      	ldr	r0, [r0, #4]
   d5dd4:	f7fe be6c 	b.w	d4ab0 <network_listening>

000d5dd8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5dd8:	2200      	movs	r2, #0
   d5dda:	4611      	mov	r1, r2
   d5ddc:	6840      	ldr	r0, [r0, #4]
   d5dde:	f7fe be77 	b.w	d4ad0 <network_get_listen_timeout>

000d5de2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5de2:	2200      	movs	r2, #0
   d5de4:	6840      	ldr	r0, [r0, #4]
   d5de6:	f7fe be6b 	b.w	d4ac0 <network_set_listen_timeout>

000d5dea <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5dea:	2200      	movs	r2, #0
   d5dec:	f081 0101 	eor.w	r1, r1, #1
   d5df0:	6840      	ldr	r0, [r0, #4]
   d5df2:	f7fe be55 	b.w	d4aa0 <network_listen>

000d5df6 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d5df6:	2300      	movs	r3, #0
   d5df8:	461a      	mov	r2, r3
   d5dfa:	4619      	mov	r1, r3
   d5dfc:	6840      	ldr	r0, [r0, #4]
   d5dfe:	f7fe be47 	b.w	d4a90 <network_off>

000d5e02 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d5e02:	2300      	movs	r3, #0
   d5e04:	461a      	mov	r2, r3
   d5e06:	4619      	mov	r1, r3
   d5e08:	6840      	ldr	r0, [r0, #4]
   d5e0a:	f7fe be39 	b.w	d4a80 <network_on>

000d5e0e <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5e0e:	2200      	movs	r2, #0
   d5e10:	4611      	mov	r1, r2
   d5e12:	6840      	ldr	r0, [r0, #4]
   d5e14:	f7fe be1c 	b.w	d4a50 <network_connecting>

000d5e18 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5e18:	2200      	movs	r2, #0
   d5e1a:	2102      	movs	r1, #2
   d5e1c:	6840      	ldr	r0, [r0, #4]
   d5e1e:	f7fe be1f 	b.w	d4a60 <network_disconnect>

000d5e22 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5e22:	2300      	movs	r3, #0
   d5e24:	461a      	mov	r2, r3
   d5e26:	6840      	ldr	r0, [r0, #4]
   d5e28:	f7fe be0a 	b.w	d4a40 <network_connect>

000d5e2c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5e2c:	4b02      	ldr	r3, [pc, #8]	; (d5e38 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d5e2e:	2204      	movs	r2, #4
   d5e30:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d5e32:	4a02      	ldr	r2, [pc, #8]	; (d5e3c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5e34:	601a      	str	r2, [r3, #0]
   d5e36:	4770      	bx	lr
   d5e38:	2003e6e8 	.word	0x2003e6e8
   d5e3c:	000d71e8 	.word	0x000d71e8

000d5e40 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5e40:	2300      	movs	r3, #0
   d5e42:	461a      	mov	r2, r3
   d5e44:	6840      	ldr	r0, [r0, #4]
   d5e46:	f7fe bdfb 	b.w	d4a40 <network_connect>

000d5e4a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5e4a:	2200      	movs	r2, #0
   d5e4c:	2102      	movs	r1, #2
   d5e4e:	6840      	ldr	r0, [r0, #4]
   d5e50:	f7fe be06 	b.w	d4a60 <network_disconnect>

000d5e54 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5e54:	2200      	movs	r2, #0
   d5e56:	4611      	mov	r1, r2
   d5e58:	6840      	ldr	r0, [r0, #4]
   d5e5a:	f7fe bdf9 	b.w	d4a50 <network_connecting>

000d5e5e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5e5e:	2200      	movs	r2, #0
   d5e60:	4611      	mov	r1, r2
   d5e62:	6840      	ldr	r0, [r0, #4]
   d5e64:	f7fe be04 	b.w	d4a70 <network_ready>

000d5e68 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5e68:	2300      	movs	r3, #0
   d5e6a:	461a      	mov	r2, r3
   d5e6c:	4619      	mov	r1, r3
   d5e6e:	6840      	ldr	r0, [r0, #4]
   d5e70:	f7fe be06 	b.w	d4a80 <network_on>

000d5e74 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5e74:	2300      	movs	r3, #0
   d5e76:	461a      	mov	r2, r3
   d5e78:	4619      	mov	r1, r3
   d5e7a:	6840      	ldr	r0, [r0, #4]
   d5e7c:	f7fe be08 	b.w	d4a90 <network_off>

000d5e80 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5e80:	2200      	movs	r2, #0
   d5e82:	f081 0101 	eor.w	r1, r1, #1
   d5e86:	6840      	ldr	r0, [r0, #4]
   d5e88:	f7fe be0a 	b.w	d4aa0 <network_listen>

000d5e8c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5e8c:	2200      	movs	r2, #0
   d5e8e:	6840      	ldr	r0, [r0, #4]
   d5e90:	f7fe be16 	b.w	d4ac0 <network_set_listen_timeout>

000d5e94 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5e94:	2200      	movs	r2, #0
   d5e96:	4611      	mov	r1, r2
   d5e98:	6840      	ldr	r0, [r0, #4]
   d5e9a:	f7fe be19 	b.w	d4ad0 <network_get_listen_timeout>

000d5e9e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5e9e:	2200      	movs	r2, #0
   d5ea0:	4611      	mov	r1, r2
   d5ea2:	6840      	ldr	r0, [r0, #4]
   d5ea4:	f7fe be04 	b.w	d4ab0 <network_listening>

000d5ea8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5ea8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5eac:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d5eae:	b095      	sub	sp, #84	; 0x54
   d5eb0:	4616      	mov	r6, r2
   d5eb2:	460d      	mov	r5, r1
   d5eb4:	4607      	mov	r7, r0
    IPAddress addr;
   d5eb6:	f7ff fd2f 	bl	d5918 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d5eba:	4621      	mov	r1, r4
   d5ebc:	2220      	movs	r2, #32
   d5ebe:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5ec0:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5ec2:	f000 fbde 	bl	d6682 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5ec6:	2340      	movs	r3, #64	; 0x40
   d5ec8:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5eca:	4621      	mov	r1, r4
   d5ecc:	466b      	mov	r3, sp
   d5ece:	aa0c      	add	r2, sp, #48	; 0x30
   d5ed0:	4630      	mov	r0, r6
   d5ed2:	f7fe fc29 	bl	d4728 <netdb_getaddrinfo>
    if (!r) {
   d5ed6:	4604      	mov	r4, r0
   d5ed8:	2800      	cmp	r0, #0
   d5eda:	d144      	bne.n	d5f66 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5edc:	4602      	mov	r2, r0
   d5ede:	2101      	movs	r1, #1
   d5ee0:	6868      	ldr	r0, [r5, #4]
   d5ee2:	f7fe fdc5 	bl	d4a70 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5ee6:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5ee8:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5eea:	4622      	mov	r2, r4
   d5eec:	6868      	ldr	r0, [r5, #4]
   d5eee:	f7fe fdbf 	bl	d4a70 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5ef2:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5ef4:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d5ef6:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5ef8:	2e00      	cmp	r6, #0
   d5efa:	d034      	beq.n	d5f66 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d5efc:	2900      	cmp	r1, #0
   d5efe:	d132      	bne.n	d5f66 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5f00:	6873      	ldr	r3, [r6, #4]
   d5f02:	2b02      	cmp	r3, #2
   d5f04:	d002      	beq.n	d5f0c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d5f06:	2b0a      	cmp	r3, #10
   d5f08:	d009      	beq.n	d5f1e <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d5f0a:	e02a      	b.n	d5f62 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d5f0c:	f1b8 0f00 	cmp.w	r8, #0
   d5f10:	d027      	beq.n	d5f62 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5f12:	6971      	ldr	r1, [r6, #20]
   d5f14:	4638      	mov	r0, r7
   d5f16:	3104      	adds	r1, #4
   d5f18:	f7ff fd2b 	bl	d5972 <_ZN9IPAddressaSEPKh>
   d5f1c:	e020      	b.n	d5f60 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5f1e:	f1b9 0f00 	cmp.w	r9, #0
   d5f22:	d01e      	beq.n	d5f62 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5f24:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5f26:	2211      	movs	r2, #17
   d5f28:	a801      	add	r0, sp, #4
   d5f2a:	f000 fbaa 	bl	d6682 <memset>
                    a.v = 6;
   d5f2e:	2306      	movs	r3, #6
   d5f30:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5f34:	ad01      	add	r5, sp, #4
   d5f36:	f104 0308 	add.w	r3, r4, #8
   d5f3a:	3418      	adds	r4, #24
   d5f3c:	6818      	ldr	r0, [r3, #0]
   d5f3e:	6859      	ldr	r1, [r3, #4]
   d5f40:	462a      	mov	r2, r5
   d5f42:	c203      	stmia	r2!, {r0, r1}
   d5f44:	3308      	adds	r3, #8
   d5f46:	42a3      	cmp	r3, r4
   d5f48:	4615      	mov	r5, r2
   d5f4a:	d1f7      	bne.n	d5f3c <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5f4c:	a901      	add	r1, sp, #4
   d5f4e:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5f50:	ad07      	add	r5, sp, #28
   d5f52:	f7ff fcef 	bl	d5934 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5f56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5f58:	1d3c      	adds	r4, r7, #4
   d5f5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5f5c:	682b      	ldr	r3, [r5, #0]
   d5f5e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d5f60:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5f62:	69f6      	ldr	r6, [r6, #28]
   d5f64:	e7c8      	b.n	d5ef8 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5f66:	9800      	ldr	r0, [sp, #0]
   d5f68:	f7fe fbd6 	bl	d4718 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5f6c:	4638      	mov	r0, r7
   d5f6e:	b015      	add	sp, #84	; 0x54
   d5f70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5f74 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5f74:	4b02      	ldr	r3, [pc, #8]	; (d5f80 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5f76:	4a03      	ldr	r2, [pc, #12]	; (d5f84 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5f78:	601a      	str	r2, [r3, #0]
   d5f7a:	2200      	movs	r2, #0
   d5f7c:	605a      	str	r2, [r3, #4]
   d5f7e:	4770      	bx	lr
   d5f80:	2003e6f0 	.word	0x2003e6f0
   d5f84:	000d721c 	.word	0x000d721c

000d5f88 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d5f88:	b510      	push	{r4, lr}
   d5f8a:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d5f8c:	f000 f860 	bl	d6050 <_ZN8particle7globals11instanceSpiEv>
   d5f90:	f7fe fe72 	bl	d4c78 <_ZN8SPIClass9isEnabledEv>
   d5f94:	b128      	cbz	r0, d5fa2 <pinAvailable+0x1a>
   d5f96:	f1a4 030b 	sub.w	r3, r4, #11
   d5f9a:	2b02      	cmp	r3, #2
   d5f9c:	d801      	bhi.n	d5fa2 <pinAvailable+0x1a>
  {
    return 0; // 'pin' is used
   d5f9e:	2000      	movs	r0, #0
   d5fa0:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d5fa2:	f000 f88f 	bl	d60c4 <_Z19__fetch_global_Wirev>
   d5fa6:	f7ff fe4b 	bl	d5c40 <_ZN7TwoWire9isEnabledEv>
   d5faa:	b108      	cbz	r0, d5fb0 <pinAvailable+0x28>
   d5fac:	2c01      	cmp	r4, #1
   d5fae:	d9f6      	bls.n	d5f9e <pinAvailable+0x16>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d5fb0:	f7ff fdce 	bl	d5b50 <_Z22__fetch_global_Serial1v>
   d5fb4:	f7ff fdc8 	bl	d5b48 <_ZN11USARTSerial9isEnabledEv>
   d5fb8:	b118      	cbz	r0, d5fc2 <pinAvailable+0x3a>
   d5fba:	f1a4 0309 	sub.w	r3, r4, #9
   d5fbe:	2b01      	cmp	r3, #1
   d5fc0:	d9ed      	bls.n	d5f9e <pinAvailable+0x16>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d5fc2:	2c23      	cmp	r4, #35	; 0x23
   d5fc4:	bf8c      	ite	hi
   d5fc6:	2000      	movhi	r0, #0
   d5fc8:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d5fca:	bd10      	pop	{r4, pc}

000d5fcc <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5fcc:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d5fce:	b538      	push	{r3, r4, r5, lr}
   d5fd0:	4604      	mov	r4, r0
   d5fd2:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5fd4:	d80a      	bhi.n	d5fec <pinMode+0x20>
   d5fd6:	29ff      	cmp	r1, #255	; 0xff
   d5fd8:	d008      	beq.n	d5fec <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d5fda:	f7ff ffd5 	bl	d5f88 <pinAvailable>
   d5fde:	b128      	cbz	r0, d5fec <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5fe0:	4629      	mov	r1, r5
   d5fe2:	4620      	mov	r0, r4
}
   d5fe4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5fe8:	f7fe bbb6 	b.w	d4758 <HAL_Pin_Mode>
   d5fec:	bd38      	pop	{r3, r4, r5, pc}

000d5fee <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d5fee:	b538      	push	{r3, r4, r5, lr}
   d5ff0:	4604      	mov	r4, r0
   d5ff2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5ff4:	f7fe fbb8 	bl	d4768 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d5ff8:	28ff      	cmp	r0, #255	; 0xff
   d5ffa:	d010      	beq.n	d601e <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d5ffc:	2806      	cmp	r0, #6
   d5ffe:	d804      	bhi.n	d600a <digitalWrite+0x1c>
   d6000:	234d      	movs	r3, #77	; 0x4d
   d6002:	fa23 f000 	lsr.w	r0, r3, r0
   d6006:	07c3      	lsls	r3, r0, #31
   d6008:	d409      	bmi.n	d601e <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d600a:	4620      	mov	r0, r4
   d600c:	f7ff ffbc 	bl	d5f88 <pinAvailable>
   d6010:	b128      	cbz	r0, d601e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6012:	4629      	mov	r1, r5
   d6014:	4620      	mov	r0, r4
}
   d6016:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d601a:	f7fe bbad 	b.w	d4778 <HAL_GPIO_Write>
   d601e:	bd38      	pop	{r3, r4, r5, pc}

000d6020 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d6020:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d6022:	b510      	push	{r4, lr}
   d6024:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d6026:	bf9c      	itt	ls
   d6028:	340e      	addls	r4, #14
   d602a:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d602c:	4620      	mov	r0, r4
   d602e:	f7ff ffab 	bl	d5f88 <pinAvailable>
   d6032:	b150      	cbz	r0, d604a <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d6034:	2103      	movs	r1, #3
   d6036:	4620      	mov	r0, r4
   d6038:	f7fe fb86 	bl	d4748 <HAL_Validate_Pin_Function>
   d603c:	2803      	cmp	r0, #3
   d603e:	d104      	bne.n	d604a <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d6040:	4620      	mov	r0, r4
}
   d6042:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d6046:	f7fe bb9f 	b.w	d4788 <HAL_ADC_Read>
}
   d604a:	2000      	movs	r0, #0
   d604c:	bd10      	pop	{r4, pc}
	...

000d6050 <_ZN8particle7globals11instanceSpiEv>:
#ifndef SPARK_WIRING_NO_SPI

namespace particle {
namespace globals {

SPIClass& instanceSpi() {
   d6050:	b538      	push	{r3, r4, r5, lr}
    static SPIClass instance(HAL_SPI_INTERFACE1);
   d6052:	4d0b      	ldr	r5, [pc, #44]	; (d6080 <_ZN8particle7globals11instanceSpiEv+0x30>)
   d6054:	6829      	ldr	r1, [r5, #0]
   d6056:	f011 0401 	ands.w	r4, r1, #1
   d605a:	d10f      	bne.n	d607c <_ZN8particle7globals11instanceSpiEv+0x2c>
   d605c:	4628      	mov	r0, r5
   d605e:	f7fe f820 	bl	d40a2 <__cxa_guard_acquire>
   d6062:	b158      	cbz	r0, d607c <_ZN8particle7globals11instanceSpiEv+0x2c>
   d6064:	4621      	mov	r1, r4
   d6066:	4807      	ldr	r0, [pc, #28]	; (d6084 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d6068:	f7fe fdf8 	bl	d4c5c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d606c:	4628      	mov	r0, r5
   d606e:	f7fe f81d 	bl	d40ac <__cxa_guard_release>
   d6072:	4a05      	ldr	r2, [pc, #20]	; (d6088 <_ZN8particle7globals11instanceSpiEv+0x38>)
   d6074:	4905      	ldr	r1, [pc, #20]	; (d608c <_ZN8particle7globals11instanceSpiEv+0x3c>)
   d6076:	4803      	ldr	r0, [pc, #12]	; (d6084 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d6078:	f000 f84a 	bl	d6110 <__aeabi_atexit>
    return instance;
}
   d607c:	4801      	ldr	r0, [pc, #4]	; (d6084 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d607e:	bd38      	pop	{r3, r4, r5, pc}
   d6080:	2003e704 	.word	0x2003e704
   d6084:	2003e6f8 	.word	0x2003e6f8
   d6088:	2003e340 	.word	0x2003e340
   d608c:	000d4c4d 	.word	0x000d4c4d

000d6090 <_Z17acquireWireBufferv>:
   d6090:	b570      	push	{r4, r5, r6, lr}
   d6092:	4604      	mov	r4, r0
   d6094:	2514      	movs	r5, #20
   d6096:	462a      	mov	r2, r5
   d6098:	4e09      	ldr	r6, [pc, #36]	; (d60c0 <_Z17acquireWireBufferv+0x30>)
   d609a:	2100      	movs	r1, #0
   d609c:	f000 faf1 	bl	d6682 <memset>
   d60a0:	8025      	strh	r5, [r4, #0]
   d60a2:	2520      	movs	r5, #32
   d60a4:	4631      	mov	r1, r6
   d60a6:	60a5      	str	r5, [r4, #8]
   d60a8:	6125      	str	r5, [r4, #16]
   d60aa:	4628      	mov	r0, r5
   d60ac:	f000 f840 	bl	d6130 <_ZnajRKSt9nothrow_t>
   d60b0:	4631      	mov	r1, r6
   d60b2:	6060      	str	r0, [r4, #4]
   d60b4:	4628      	mov	r0, r5
   d60b6:	f000 f83b 	bl	d6130 <_ZnajRKSt9nothrow_t>
   d60ba:	60e0      	str	r0, [r4, #12]
   d60bc:	4620      	mov	r0, r4
   d60be:	bd70      	pop	{r4, r5, r6, pc}
   d60c0:	000d7248 	.word	0x000d7248

000d60c4 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d60c4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d60c6:	4d0e      	ldr	r5, [pc, #56]	; (d6100 <_Z19__fetch_global_Wirev+0x3c>)
   d60c8:	6829      	ldr	r1, [r5, #0]
   d60ca:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d60ce:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d60d0:	d113      	bne.n	d60fa <_Z19__fetch_global_Wirev+0x36>
   d60d2:	4628      	mov	r0, r5
   d60d4:	f7fd ffe5 	bl	d40a2 <__cxa_guard_acquire>
   d60d8:	b178      	cbz	r0, d60fa <_Z19__fetch_global_Wirev+0x36>
   d60da:	a801      	add	r0, sp, #4
   d60dc:	f7ff ffd8 	bl	d6090 <_Z17acquireWireBufferv>
   d60e0:	aa01      	add	r2, sp, #4
   d60e2:	4621      	mov	r1, r4
   d60e4:	4807      	ldr	r0, [pc, #28]	; (d6104 <_Z19__fetch_global_Wirev+0x40>)
   d60e6:	f7ff fd99 	bl	d5c1c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d60ea:	4628      	mov	r0, r5
   d60ec:	f7fd ffde 	bl	d40ac <__cxa_guard_release>
   d60f0:	4a05      	ldr	r2, [pc, #20]	; (d6108 <_Z19__fetch_global_Wirev+0x44>)
   d60f2:	4906      	ldr	r1, [pc, #24]	; (d610c <_Z19__fetch_global_Wirev+0x48>)
   d60f4:	4803      	ldr	r0, [pc, #12]	; (d6104 <_Z19__fetch_global_Wirev+0x40>)
   d60f6:	f000 f80b 	bl	d6110 <__aeabi_atexit>
	return wire;
}
   d60fa:	4802      	ldr	r0, [pc, #8]	; (d6104 <_Z19__fetch_global_Wirev+0x40>)
   d60fc:	b007      	add	sp, #28
   d60fe:	bd30      	pop	{r4, r5, pc}
   d6100:	2003e70c 	.word	0x2003e70c
   d6104:	2003e710 	.word	0x2003e710
   d6108:	2003e340 	.word	0x2003e340
   d610c:	000d5bc5 	.word	0x000d5bc5

000d6110 <__aeabi_atexit>:
   d6110:	460b      	mov	r3, r1
   d6112:	4601      	mov	r1, r0
   d6114:	4618      	mov	r0, r3
   d6116:	f000 b9a3 	b.w	d6460 <__cxa_atexit>
	...

000d611c <_ZSt15get_new_handlerv>:
   d611c:	4b02      	ldr	r3, [pc, #8]	; (d6128 <_ZSt15get_new_handlerv+0xc>)
   d611e:	6818      	ldr	r0, [r3, #0]
   d6120:	f3bf 8f5f 	dmb	sy
   d6124:	4770      	bx	lr
   d6126:	bf00      	nop
   d6128:	2003e724 	.word	0x2003e724

000d612c <_ZdlPvj>:
   d612c:	f7fd bfb5 	b.w	d409a <_ZdlPv>

000d6130 <_ZnajRKSt9nothrow_t>:
   d6130:	f000 b800 	b.w	d6134 <_ZnwjRKSt9nothrow_t>

000d6134 <_ZnwjRKSt9nothrow_t>:
   d6134:	b510      	push	{r4, lr}
   d6136:	2800      	cmp	r0, #0
   d6138:	bf14      	ite	ne
   d613a:	4604      	movne	r4, r0
   d613c:	2401      	moveq	r4, #1
   d613e:	4620      	mov	r0, r4
   d6140:	f7fe fd06 	bl	d4b50 <malloc>
   d6144:	b920      	cbnz	r0, d6150 <_ZnwjRKSt9nothrow_t+0x1c>
   d6146:	f7ff ffe9 	bl	d611c <_ZSt15get_new_handlerv>
   d614a:	b108      	cbz	r0, d6150 <_ZnwjRKSt9nothrow_t+0x1c>
   d614c:	4780      	blx	r0
   d614e:	e7f6      	b.n	d613e <_ZnwjRKSt9nothrow_t+0xa>
   d6150:	bd10      	pop	{r4, pc}

000d6152 <_ZSt25__throw_bad_function_callv>:
   d6152:	b508      	push	{r3, lr}
   d6154:	f7fe fd2c 	bl	d4bb0 <abort>

000d6158 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6158:	4b18      	ldr	r3, [pc, #96]	; (d61bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d615a:	681a      	ldr	r2, [r3, #0]
   d615c:	07d1      	lsls	r1, r2, #31
   d615e:	bf5c      	itt	pl
   d6160:	2201      	movpl	r2, #1
   d6162:	601a      	strpl	r2, [r3, #0]
   d6164:	4b16      	ldr	r3, [pc, #88]	; (d61c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6166:	681a      	ldr	r2, [r3, #0]
   d6168:	07d2      	lsls	r2, r2, #31
   d616a:	bf5c      	itt	pl
   d616c:	2201      	movpl	r2, #1
   d616e:	601a      	strpl	r2, [r3, #0]
   d6170:	4b14      	ldr	r3, [pc, #80]	; (d61c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6172:	681a      	ldr	r2, [r3, #0]
   d6174:	07d0      	lsls	r0, r2, #31
   d6176:	bf5c      	itt	pl
   d6178:	2201      	movpl	r2, #1
   d617a:	601a      	strpl	r2, [r3, #0]
   d617c:	4b12      	ldr	r3, [pc, #72]	; (d61c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d617e:	681a      	ldr	r2, [r3, #0]
   d6180:	07d1      	lsls	r1, r2, #31
   d6182:	bf5c      	itt	pl
   d6184:	2201      	movpl	r2, #1
   d6186:	601a      	strpl	r2, [r3, #0]
   d6188:	4b10      	ldr	r3, [pc, #64]	; (d61cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d618a:	681a      	ldr	r2, [r3, #0]
   d618c:	07d2      	lsls	r2, r2, #31
   d618e:	bf5c      	itt	pl
   d6190:	2201      	movpl	r2, #1
   d6192:	601a      	strpl	r2, [r3, #0]
   d6194:	4b0e      	ldr	r3, [pc, #56]	; (d61d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6196:	681a      	ldr	r2, [r3, #0]
   d6198:	07d0      	lsls	r0, r2, #31
   d619a:	bf5c      	itt	pl
   d619c:	2201      	movpl	r2, #1
   d619e:	601a      	strpl	r2, [r3, #0]
   d61a0:	4b0c      	ldr	r3, [pc, #48]	; (d61d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d61a2:	681a      	ldr	r2, [r3, #0]
   d61a4:	07d1      	lsls	r1, r2, #31
   d61a6:	bf5c      	itt	pl
   d61a8:	2201      	movpl	r2, #1
   d61aa:	601a      	strpl	r2, [r3, #0]
   d61ac:	4b0a      	ldr	r3, [pc, #40]	; (d61d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d61ae:	681a      	ldr	r2, [r3, #0]
   d61b0:	07d2      	lsls	r2, r2, #31
   d61b2:	bf5c      	itt	pl
   d61b4:	2201      	movpl	r2, #1
   d61b6:	601a      	strpl	r2, [r3, #0]
   d61b8:	4770      	bx	lr
   d61ba:	bf00      	nop
   d61bc:	2003e744 	.word	0x2003e744
   d61c0:	2003e740 	.word	0x2003e740
   d61c4:	2003e73c 	.word	0x2003e73c
   d61c8:	2003e738 	.word	0x2003e738
   d61cc:	2003e734 	.word	0x2003e734
   d61d0:	2003e730 	.word	0x2003e730
   d61d4:	2003e72c 	.word	0x2003e72c
   d61d8:	2003e728 	.word	0x2003e728

000d61dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d61dc:	4b24      	ldr	r3, [pc, #144]	; (d6270 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d61de:	681a      	ldr	r2, [r3, #0]
   d61e0:	07d0      	lsls	r0, r2, #31
   d61e2:	bf5c      	itt	pl
   d61e4:	2201      	movpl	r2, #1
   d61e6:	601a      	strpl	r2, [r3, #0]
   d61e8:	4b22      	ldr	r3, [pc, #136]	; (d6274 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d61ea:	681a      	ldr	r2, [r3, #0]
   d61ec:	07d1      	lsls	r1, r2, #31
   d61ee:	bf5c      	itt	pl
   d61f0:	2201      	movpl	r2, #1
   d61f2:	601a      	strpl	r2, [r3, #0]
   d61f4:	4b20      	ldr	r3, [pc, #128]	; (d6278 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d61f6:	681a      	ldr	r2, [r3, #0]
   d61f8:	07d2      	lsls	r2, r2, #31
   d61fa:	bf5c      	itt	pl
   d61fc:	2201      	movpl	r2, #1
   d61fe:	601a      	strpl	r2, [r3, #0]
   d6200:	4b1e      	ldr	r3, [pc, #120]	; (d627c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d6202:	681a      	ldr	r2, [r3, #0]
   d6204:	07d0      	lsls	r0, r2, #31
   d6206:	bf5c      	itt	pl
   d6208:	2201      	movpl	r2, #1
   d620a:	601a      	strpl	r2, [r3, #0]
   d620c:	4b1c      	ldr	r3, [pc, #112]	; (d6280 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d620e:	681a      	ldr	r2, [r3, #0]
   d6210:	07d1      	lsls	r1, r2, #31
   d6212:	bf5c      	itt	pl
   d6214:	2201      	movpl	r2, #1
   d6216:	601a      	strpl	r2, [r3, #0]
   d6218:	4b1a      	ldr	r3, [pc, #104]	; (d6284 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d621a:	681a      	ldr	r2, [r3, #0]
   d621c:	07d2      	lsls	r2, r2, #31
   d621e:	bf5c      	itt	pl
   d6220:	2201      	movpl	r2, #1
   d6222:	601a      	strpl	r2, [r3, #0]
   d6224:	4b18      	ldr	r3, [pc, #96]	; (d6288 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d6226:	681a      	ldr	r2, [r3, #0]
   d6228:	07d0      	lsls	r0, r2, #31
   d622a:	bf5c      	itt	pl
   d622c:	2201      	movpl	r2, #1
   d622e:	601a      	strpl	r2, [r3, #0]
   d6230:	4b16      	ldr	r3, [pc, #88]	; (d628c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d6232:	681a      	ldr	r2, [r3, #0]
   d6234:	07d1      	lsls	r1, r2, #31
   d6236:	bf5c      	itt	pl
   d6238:	2201      	movpl	r2, #1
   d623a:	601a      	strpl	r2, [r3, #0]
   d623c:	4b14      	ldr	r3, [pc, #80]	; (d6290 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d623e:	681a      	ldr	r2, [r3, #0]
   d6240:	07d2      	lsls	r2, r2, #31
   d6242:	bf5c      	itt	pl
   d6244:	2201      	movpl	r2, #1
   d6246:	601a      	strpl	r2, [r3, #0]
   d6248:	4b12      	ldr	r3, [pc, #72]	; (d6294 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d624a:	681a      	ldr	r2, [r3, #0]
   d624c:	07d0      	lsls	r0, r2, #31
   d624e:	bf5c      	itt	pl
   d6250:	2201      	movpl	r2, #1
   d6252:	601a      	strpl	r2, [r3, #0]
   d6254:	4b10      	ldr	r3, [pc, #64]	; (d6298 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d6256:	681a      	ldr	r2, [r3, #0]
   d6258:	07d1      	lsls	r1, r2, #31
   d625a:	bf5c      	itt	pl
   d625c:	2201      	movpl	r2, #1
   d625e:	601a      	strpl	r2, [r3, #0]
   d6260:	4b0e      	ldr	r3, [pc, #56]	; (d629c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d6262:	681a      	ldr	r2, [r3, #0]
   d6264:	07d2      	lsls	r2, r2, #31
   d6266:	bf5c      	itt	pl
   d6268:	2201      	movpl	r2, #1
   d626a:	601a      	strpl	r2, [r3, #0]
   d626c:	4770      	bx	lr
   d626e:	bf00      	nop
   d6270:	2003e774 	.word	0x2003e774
   d6274:	2003e770 	.word	0x2003e770
   d6278:	2003e76c 	.word	0x2003e76c
   d627c:	2003e768 	.word	0x2003e768
   d6280:	2003e764 	.word	0x2003e764
   d6284:	2003e760 	.word	0x2003e760
   d6288:	2003e75c 	.word	0x2003e75c
   d628c:	2003e758 	.word	0x2003e758
   d6290:	2003e754 	.word	0x2003e754
   d6294:	2003e750 	.word	0x2003e750
   d6298:	2003e74c 	.word	0x2003e74c
   d629c:	2003e748 	.word	0x2003e748

000d62a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d62a0:	4b24      	ldr	r3, [pc, #144]	; (d6334 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d62a2:	681a      	ldr	r2, [r3, #0]
   d62a4:	07d0      	lsls	r0, r2, #31
   d62a6:	bf5c      	itt	pl
   d62a8:	2201      	movpl	r2, #1
   d62aa:	601a      	strpl	r2, [r3, #0]
   d62ac:	4b22      	ldr	r3, [pc, #136]	; (d6338 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d62ae:	681a      	ldr	r2, [r3, #0]
   d62b0:	07d1      	lsls	r1, r2, #31
   d62b2:	bf5c      	itt	pl
   d62b4:	2201      	movpl	r2, #1
   d62b6:	601a      	strpl	r2, [r3, #0]
   d62b8:	4b20      	ldr	r3, [pc, #128]	; (d633c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d62ba:	681a      	ldr	r2, [r3, #0]
   d62bc:	07d2      	lsls	r2, r2, #31
   d62be:	bf5c      	itt	pl
   d62c0:	2201      	movpl	r2, #1
   d62c2:	601a      	strpl	r2, [r3, #0]
   d62c4:	4b1e      	ldr	r3, [pc, #120]	; (d6340 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d62c6:	681a      	ldr	r2, [r3, #0]
   d62c8:	07d0      	lsls	r0, r2, #31
   d62ca:	bf5c      	itt	pl
   d62cc:	2201      	movpl	r2, #1
   d62ce:	601a      	strpl	r2, [r3, #0]
   d62d0:	4b1c      	ldr	r3, [pc, #112]	; (d6344 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d62d2:	681a      	ldr	r2, [r3, #0]
   d62d4:	07d1      	lsls	r1, r2, #31
   d62d6:	bf5c      	itt	pl
   d62d8:	2201      	movpl	r2, #1
   d62da:	601a      	strpl	r2, [r3, #0]
   d62dc:	4b1a      	ldr	r3, [pc, #104]	; (d6348 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d62de:	681a      	ldr	r2, [r3, #0]
   d62e0:	07d2      	lsls	r2, r2, #31
   d62e2:	bf5c      	itt	pl
   d62e4:	2201      	movpl	r2, #1
   d62e6:	601a      	strpl	r2, [r3, #0]
   d62e8:	4b18      	ldr	r3, [pc, #96]	; (d634c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d62ea:	681a      	ldr	r2, [r3, #0]
   d62ec:	07d0      	lsls	r0, r2, #31
   d62ee:	bf5c      	itt	pl
   d62f0:	2201      	movpl	r2, #1
   d62f2:	601a      	strpl	r2, [r3, #0]
   d62f4:	4b16      	ldr	r3, [pc, #88]	; (d6350 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d62f6:	681a      	ldr	r2, [r3, #0]
   d62f8:	07d1      	lsls	r1, r2, #31
   d62fa:	bf5c      	itt	pl
   d62fc:	2201      	movpl	r2, #1
   d62fe:	601a      	strpl	r2, [r3, #0]
   d6300:	4b14      	ldr	r3, [pc, #80]	; (d6354 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d6302:	681a      	ldr	r2, [r3, #0]
   d6304:	07d2      	lsls	r2, r2, #31
   d6306:	bf5c      	itt	pl
   d6308:	2201      	movpl	r2, #1
   d630a:	601a      	strpl	r2, [r3, #0]
   d630c:	4b12      	ldr	r3, [pc, #72]	; (d6358 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d630e:	681a      	ldr	r2, [r3, #0]
   d6310:	07d0      	lsls	r0, r2, #31
   d6312:	bf5c      	itt	pl
   d6314:	2201      	movpl	r2, #1
   d6316:	601a      	strpl	r2, [r3, #0]
   d6318:	4b10      	ldr	r3, [pc, #64]	; (d635c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d631a:	681a      	ldr	r2, [r3, #0]
   d631c:	07d1      	lsls	r1, r2, #31
   d631e:	bf5c      	itt	pl
   d6320:	2201      	movpl	r2, #1
   d6322:	601a      	strpl	r2, [r3, #0]
   d6324:	4b0e      	ldr	r3, [pc, #56]	; (d6360 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d6326:	681a      	ldr	r2, [r3, #0]
   d6328:	07d2      	lsls	r2, r2, #31
   d632a:	bf5c      	itt	pl
   d632c:	2201      	movpl	r2, #1
   d632e:	601a      	strpl	r2, [r3, #0]
   d6330:	4770      	bx	lr
   d6332:	bf00      	nop
   d6334:	2003e7a4 	.word	0x2003e7a4
   d6338:	2003e7a0 	.word	0x2003e7a0
   d633c:	2003e79c 	.word	0x2003e79c
   d6340:	2003e798 	.word	0x2003e798
   d6344:	2003e794 	.word	0x2003e794
   d6348:	2003e790 	.word	0x2003e790
   d634c:	2003e78c 	.word	0x2003e78c
   d6350:	2003e788 	.word	0x2003e788
   d6354:	2003e784 	.word	0x2003e784
   d6358:	2003e780 	.word	0x2003e780
   d635c:	2003e77c 	.word	0x2003e77c
   d6360:	2003e778 	.word	0x2003e778

000d6364 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6364:	4b18      	ldr	r3, [pc, #96]	; (d63c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6366:	681a      	ldr	r2, [r3, #0]
   d6368:	07d1      	lsls	r1, r2, #31
   d636a:	bf5c      	itt	pl
   d636c:	2201      	movpl	r2, #1
   d636e:	601a      	strpl	r2, [r3, #0]
   d6370:	4b16      	ldr	r3, [pc, #88]	; (d63cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6372:	681a      	ldr	r2, [r3, #0]
   d6374:	07d2      	lsls	r2, r2, #31
   d6376:	bf5c      	itt	pl
   d6378:	2201      	movpl	r2, #1
   d637a:	601a      	strpl	r2, [r3, #0]
   d637c:	4b14      	ldr	r3, [pc, #80]	; (d63d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d637e:	681a      	ldr	r2, [r3, #0]
   d6380:	07d0      	lsls	r0, r2, #31
   d6382:	bf5c      	itt	pl
   d6384:	2201      	movpl	r2, #1
   d6386:	601a      	strpl	r2, [r3, #0]
   d6388:	4b12      	ldr	r3, [pc, #72]	; (d63d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d638a:	681a      	ldr	r2, [r3, #0]
   d638c:	07d1      	lsls	r1, r2, #31
   d638e:	bf5c      	itt	pl
   d6390:	2201      	movpl	r2, #1
   d6392:	601a      	strpl	r2, [r3, #0]
   d6394:	4b10      	ldr	r3, [pc, #64]	; (d63d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6396:	681a      	ldr	r2, [r3, #0]
   d6398:	07d2      	lsls	r2, r2, #31
   d639a:	bf5c      	itt	pl
   d639c:	2201      	movpl	r2, #1
   d639e:	601a      	strpl	r2, [r3, #0]
   d63a0:	4b0e      	ldr	r3, [pc, #56]	; (d63dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d63a2:	681a      	ldr	r2, [r3, #0]
   d63a4:	07d0      	lsls	r0, r2, #31
   d63a6:	bf5c      	itt	pl
   d63a8:	2201      	movpl	r2, #1
   d63aa:	601a      	strpl	r2, [r3, #0]
   d63ac:	4b0c      	ldr	r3, [pc, #48]	; (d63e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d63ae:	681a      	ldr	r2, [r3, #0]
   d63b0:	07d1      	lsls	r1, r2, #31
   d63b2:	bf5c      	itt	pl
   d63b4:	2201      	movpl	r2, #1
   d63b6:	601a      	strpl	r2, [r3, #0]
   d63b8:	4b0a      	ldr	r3, [pc, #40]	; (d63e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d63ba:	681a      	ldr	r2, [r3, #0]
   d63bc:	07d2      	lsls	r2, r2, #31
   d63be:	bf5c      	itt	pl
   d63c0:	2201      	movpl	r2, #1
   d63c2:	601a      	strpl	r2, [r3, #0]
   d63c4:	4770      	bx	lr
   d63c6:	bf00      	nop
   d63c8:	2003e7c4 	.word	0x2003e7c4
   d63cc:	2003e7c0 	.word	0x2003e7c0
   d63d0:	2003e7bc 	.word	0x2003e7bc
   d63d4:	2003e7b8 	.word	0x2003e7b8
   d63d8:	2003e7b4 	.word	0x2003e7b4
   d63dc:	2003e7b0 	.word	0x2003e7b0
   d63e0:	2003e7ac 	.word	0x2003e7ac
   d63e4:	2003e7a8 	.word	0x2003e7a8

000d63e8 <asctime>:
   d63e8:	4b09      	ldr	r3, [pc, #36]	; (d6410 <asctime+0x28>)
   d63ea:	b570      	push	{r4, r5, r6, lr}
   d63ec:	681c      	ldr	r4, [r3, #0]
   d63ee:	6c25      	ldr	r5, [r4, #64]	; 0x40
   d63f0:	4606      	mov	r6, r0
   d63f2:	b93d      	cbnz	r5, d6404 <asctime+0x1c>
   d63f4:	201a      	movs	r0, #26
   d63f6:	f7fe fbab 	bl	d4b50 <malloc>
   d63fa:	221a      	movs	r2, #26
   d63fc:	6420      	str	r0, [r4, #64]	; 0x40
   d63fe:	4629      	mov	r1, r5
   d6400:	f000 f93f 	bl	d6682 <memset>
   d6404:	6c21      	ldr	r1, [r4, #64]	; 0x40
   d6406:	4630      	mov	r0, r6
   d6408:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d640c:	f000 b802 	b.w	d6414 <asctime_r>
   d6410:	2003e2f0 	.word	0x2003e2f0

000d6414 <asctime_r>:
   d6414:	b510      	push	{r4, lr}
   d6416:	460c      	mov	r4, r1
   d6418:	6941      	ldr	r1, [r0, #20]
   d641a:	6903      	ldr	r3, [r0, #16]
   d641c:	6982      	ldr	r2, [r0, #24]
   d641e:	b086      	sub	sp, #24
   d6420:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   d6424:	9104      	str	r1, [sp, #16]
   d6426:	6801      	ldr	r1, [r0, #0]
   d6428:	9103      	str	r1, [sp, #12]
   d642a:	6841      	ldr	r1, [r0, #4]
   d642c:	9102      	str	r1, [sp, #8]
   d642e:	6881      	ldr	r1, [r0, #8]
   d6430:	9101      	str	r1, [sp, #4]
   d6432:	68c1      	ldr	r1, [r0, #12]
   d6434:	9100      	str	r1, [sp, #0]
   d6436:	4907      	ldr	r1, [pc, #28]	; (d6454 <asctime_r+0x40>)
   d6438:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d643c:	440b      	add	r3, r1
   d643e:	4906      	ldr	r1, [pc, #24]	; (d6458 <asctime_r+0x44>)
   d6440:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   d6444:	440a      	add	r2, r1
   d6446:	4620      	mov	r0, r4
   d6448:	4904      	ldr	r1, [pc, #16]	; (d645c <asctime_r+0x48>)
   d644a:	f7fe fb99 	bl	d4b80 <siprintf>
   d644e:	4620      	mov	r0, r4
   d6450:	b006      	add	sp, #24
   d6452:	bd10      	pop	{r4, pc}
   d6454:	000d725e 	.word	0x000d725e
   d6458:	000d7249 	.word	0x000d7249
   d645c:	000d7282 	.word	0x000d7282

000d6460 <__cxa_atexit>:
   d6460:	b510      	push	{r4, lr}
   d6462:	4c05      	ldr	r4, [pc, #20]	; (d6478 <__cxa_atexit+0x18>)
   d6464:	4613      	mov	r3, r2
   d6466:	b12c      	cbz	r4, d6474 <__cxa_atexit+0x14>
   d6468:	460a      	mov	r2, r1
   d646a:	4601      	mov	r1, r0
   d646c:	2002      	movs	r0, #2
   d646e:	f3af 8000 	nop.w
   d6472:	bd10      	pop	{r4, pc}
   d6474:	4620      	mov	r0, r4
   d6476:	bd10      	pop	{r4, pc}
   d6478:	00000000 	.word	0x00000000

000d647c <localtime>:
   d647c:	b538      	push	{r3, r4, r5, lr}
   d647e:	4b07      	ldr	r3, [pc, #28]	; (d649c <localtime+0x20>)
   d6480:	681c      	ldr	r4, [r3, #0]
   d6482:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d6484:	4605      	mov	r5, r0
   d6486:	b91b      	cbnz	r3, d6490 <localtime+0x14>
   d6488:	2024      	movs	r0, #36	; 0x24
   d648a:	f7fe fb61 	bl	d4b50 <malloc>
   d648e:	63e0      	str	r0, [r4, #60]	; 0x3c
   d6490:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d6492:	4628      	mov	r0, r5
   d6494:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d6498:	f000 b802 	b.w	d64a0 <localtime_r>
   d649c:	2003e2f0 	.word	0x2003e2f0

000d64a0 <localtime_r>:
   d64a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d64a4:	460c      	mov	r4, r1
   d64a6:	4680      	mov	r8, r0
   d64a8:	f000 fc76 	bl	d6d98 <__gettzinfo>
   d64ac:	4621      	mov	r1, r4
   d64ae:	4607      	mov	r7, r0
   d64b0:	4640      	mov	r0, r8
   d64b2:	f000 fc75 	bl	d6da0 <gmtime_r>
   d64b6:	6946      	ldr	r6, [r0, #20]
   d64b8:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   d64bc:	07b3      	lsls	r3, r6, #30
   d64be:	4604      	mov	r4, r0
   d64c0:	d105      	bne.n	d64ce <localtime_r+0x2e>
   d64c2:	2264      	movs	r2, #100	; 0x64
   d64c4:	fb96 f3f2 	sdiv	r3, r6, r2
   d64c8:	fb02 6313 	mls	r3, r2, r3, r6
   d64cc:	b94b      	cbnz	r3, d64e2 <localtime_r+0x42>
   d64ce:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d64d2:	fb96 f3f5 	sdiv	r3, r6, r5
   d64d6:	fb05 6513 	mls	r5, r5, r3, r6
   d64da:	fab5 f385 	clz	r3, r5
   d64de:	095b      	lsrs	r3, r3, #5
   d64e0:	e000      	b.n	d64e4 <localtime_r+0x44>
   d64e2:	2301      	movs	r3, #1
   d64e4:	4a5f      	ldr	r2, [pc, #380]	; (d6664 <localtime_r+0x1c4>)
   d64e6:	2530      	movs	r5, #48	; 0x30
   d64e8:	fb05 2503 	mla	r5, r5, r3, r2
   d64ec:	f000 fa88 	bl	d6a00 <__tz_lock>
   d64f0:	f000 fa88 	bl	d6a04 <_tzset_unlocked>
   d64f4:	4b5c      	ldr	r3, [pc, #368]	; (d6668 <localtime_r+0x1c8>)
   d64f6:	681b      	ldr	r3, [r3, #0]
   d64f8:	b1f3      	cbz	r3, d6538 <localtime_r+0x98>
   d64fa:	687b      	ldr	r3, [r7, #4]
   d64fc:	429e      	cmp	r6, r3
   d64fe:	d105      	bne.n	d650c <localtime_r+0x6c>
   d6500:	6839      	ldr	r1, [r7, #0]
   d6502:	f8d8 3000 	ldr.w	r3, [r8]
   d6506:	69fa      	ldr	r2, [r7, #28]
   d6508:	b941      	cbnz	r1, d651c <localtime_r+0x7c>
   d650a:	e00a      	b.n	d6522 <localtime_r+0x82>
   d650c:	4630      	mov	r0, r6
   d650e:	f000 f9cf 	bl	d68b0 <__tzcalc_limits>
   d6512:	2800      	cmp	r0, #0
   d6514:	d1f4      	bne.n	d6500 <localtime_r+0x60>
   d6516:	f04f 33ff 	mov.w	r3, #4294967295
   d651a:	e00d      	b.n	d6538 <localtime_r+0x98>
   d651c:	4293      	cmp	r3, r2
   d651e:	db08      	blt.n	d6532 <localtime_r+0x92>
   d6520:	e001      	b.n	d6526 <localtime_r+0x86>
   d6522:	4293      	cmp	r3, r2
   d6524:	da07      	bge.n	d6536 <localtime_r+0x96>
   d6526:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d6528:	4293      	cmp	r3, r2
   d652a:	bfac      	ite	ge
   d652c:	2300      	movge	r3, #0
   d652e:	2301      	movlt	r3, #1
   d6530:	e002      	b.n	d6538 <localtime_r+0x98>
   d6532:	2300      	movs	r3, #0
   d6534:	e000      	b.n	d6538 <localtime_r+0x98>
   d6536:	2301      	movs	r3, #1
   d6538:	6223      	str	r3, [r4, #32]
   d653a:	6a23      	ldr	r3, [r4, #32]
   d653c:	2b01      	cmp	r3, #1
   d653e:	bf0c      	ite	eq
   d6540:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   d6542:	6a39      	ldrne	r1, [r7, #32]
   d6544:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d6548:	203c      	movs	r0, #60	; 0x3c
   d654a:	fb91 f6f3 	sdiv	r6, r1, r3
   d654e:	fb03 1316 	mls	r3, r3, r6, r1
   d6552:	6861      	ldr	r1, [r4, #4]
   d6554:	fb93 f2f0 	sdiv	r2, r3, r0
   d6558:	fb00 3012 	mls	r0, r0, r2, r3
   d655c:	6823      	ldr	r3, [r4, #0]
   d655e:	1a89      	subs	r1, r1, r2
   d6560:	68a2      	ldr	r2, [r4, #8]
   d6562:	6061      	str	r1, [r4, #4]
   d6564:	1a1b      	subs	r3, r3, r0
   d6566:	1b92      	subs	r2, r2, r6
   d6568:	2b3b      	cmp	r3, #59	; 0x3b
   d656a:	6023      	str	r3, [r4, #0]
   d656c:	60a2      	str	r2, [r4, #8]
   d656e:	dd03      	ble.n	d6578 <localtime_r+0xd8>
   d6570:	3101      	adds	r1, #1
   d6572:	6061      	str	r1, [r4, #4]
   d6574:	3b3c      	subs	r3, #60	; 0x3c
   d6576:	e004      	b.n	d6582 <localtime_r+0xe2>
   d6578:	2b00      	cmp	r3, #0
   d657a:	da03      	bge.n	d6584 <localtime_r+0xe4>
   d657c:	3901      	subs	r1, #1
   d657e:	6061      	str	r1, [r4, #4]
   d6580:	333c      	adds	r3, #60	; 0x3c
   d6582:	6023      	str	r3, [r4, #0]
   d6584:	6863      	ldr	r3, [r4, #4]
   d6586:	2b3b      	cmp	r3, #59	; 0x3b
   d6588:	dd03      	ble.n	d6592 <localtime_r+0xf2>
   d658a:	3201      	adds	r2, #1
   d658c:	60a2      	str	r2, [r4, #8]
   d658e:	3b3c      	subs	r3, #60	; 0x3c
   d6590:	e004      	b.n	d659c <localtime_r+0xfc>
   d6592:	2b00      	cmp	r3, #0
   d6594:	da03      	bge.n	d659e <localtime_r+0xfe>
   d6596:	3a01      	subs	r2, #1
   d6598:	60a2      	str	r2, [r4, #8]
   d659a:	333c      	adds	r3, #60	; 0x3c
   d659c:	6063      	str	r3, [r4, #4]
   d659e:	68a3      	ldr	r3, [r4, #8]
   d65a0:	2b17      	cmp	r3, #23
   d65a2:	dd22      	ble.n	d65ea <localtime_r+0x14a>
   d65a4:	69e2      	ldr	r2, [r4, #28]
   d65a6:	3201      	adds	r2, #1
   d65a8:	61e2      	str	r2, [r4, #28]
   d65aa:	69a2      	ldr	r2, [r4, #24]
   d65ac:	3201      	adds	r2, #1
   d65ae:	2a06      	cmp	r2, #6
   d65b0:	bfc8      	it	gt
   d65b2:	2200      	movgt	r2, #0
   d65b4:	61a2      	str	r2, [r4, #24]
   d65b6:	68e2      	ldr	r2, [r4, #12]
   d65b8:	3b18      	subs	r3, #24
   d65ba:	3201      	adds	r2, #1
   d65bc:	60a3      	str	r3, [r4, #8]
   d65be:	6923      	ldr	r3, [r4, #16]
   d65c0:	60e2      	str	r2, [r4, #12]
   d65c2:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   d65c6:	428a      	cmp	r2, r1
   d65c8:	dd46      	ble.n	d6658 <localtime_r+0x1b8>
   d65ca:	3301      	adds	r3, #1
   d65cc:	2b0c      	cmp	r3, #12
   d65ce:	bf0c      	ite	eq
   d65d0:	6963      	ldreq	r3, [r4, #20]
   d65d2:	6123      	strne	r3, [r4, #16]
   d65d4:	eba2 0201 	sub.w	r2, r2, r1
   d65d8:	60e2      	str	r2, [r4, #12]
   d65da:	bf01      	itttt	eq
   d65dc:	3301      	addeq	r3, #1
   d65de:	2200      	moveq	r2, #0
   d65e0:	6122      	streq	r2, [r4, #16]
   d65e2:	6163      	streq	r3, [r4, #20]
   d65e4:	bf08      	it	eq
   d65e6:	61e2      	streq	r2, [r4, #28]
   d65e8:	e036      	b.n	d6658 <localtime_r+0x1b8>
   d65ea:	2b00      	cmp	r3, #0
   d65ec:	da34      	bge.n	d6658 <localtime_r+0x1b8>
   d65ee:	69e2      	ldr	r2, [r4, #28]
   d65f0:	3a01      	subs	r2, #1
   d65f2:	61e2      	str	r2, [r4, #28]
   d65f4:	69a2      	ldr	r2, [r4, #24]
   d65f6:	3a01      	subs	r2, #1
   d65f8:	bf48      	it	mi
   d65fa:	2206      	movmi	r2, #6
   d65fc:	61a2      	str	r2, [r4, #24]
   d65fe:	68e2      	ldr	r2, [r4, #12]
   d6600:	3318      	adds	r3, #24
   d6602:	3a01      	subs	r2, #1
   d6604:	60e2      	str	r2, [r4, #12]
   d6606:	60a3      	str	r3, [r4, #8]
   d6608:	bb32      	cbnz	r2, d6658 <localtime_r+0x1b8>
   d660a:	6923      	ldr	r3, [r4, #16]
   d660c:	3b01      	subs	r3, #1
   d660e:	d401      	bmi.n	d6614 <localtime_r+0x174>
   d6610:	6123      	str	r3, [r4, #16]
   d6612:	e01d      	b.n	d6650 <localtime_r+0x1b0>
   d6614:	230b      	movs	r3, #11
   d6616:	6123      	str	r3, [r4, #16]
   d6618:	6963      	ldr	r3, [r4, #20]
   d661a:	1e5a      	subs	r2, r3, #1
   d661c:	f012 0f03 	tst.w	r2, #3
   d6620:	6162      	str	r2, [r4, #20]
   d6622:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d6626:	d105      	bne.n	d6634 <localtime_r+0x194>
   d6628:	2164      	movs	r1, #100	; 0x64
   d662a:	fb93 f2f1 	sdiv	r2, r3, r1
   d662e:	fb01 3212 	mls	r2, r1, r2, r3
   d6632:	b94a      	cbnz	r2, d6648 <localtime_r+0x1a8>
   d6634:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d6638:	fb93 f2f1 	sdiv	r2, r3, r1
   d663c:	fb01 3312 	mls	r3, r1, r2, r3
   d6640:	fab3 f383 	clz	r3, r3
   d6644:	095b      	lsrs	r3, r3, #5
   d6646:	e000      	b.n	d664a <localtime_r+0x1aa>
   d6648:	2301      	movs	r3, #1
   d664a:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   d664e:	61e3      	str	r3, [r4, #28]
   d6650:	6923      	ldr	r3, [r4, #16]
   d6652:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d6656:	60e3      	str	r3, [r4, #12]
   d6658:	f000 f9d3 	bl	d6a02 <__tz_unlock>
   d665c:	4620      	mov	r0, r4
   d665e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6662:	bf00      	nop
   d6664:	000d7408 	.word	0x000d7408
   d6668:	2003e7e4 	.word	0x2003e7e4

000d666c <memcpy>:
   d666c:	b510      	push	{r4, lr}
   d666e:	1e43      	subs	r3, r0, #1
   d6670:	440a      	add	r2, r1
   d6672:	4291      	cmp	r1, r2
   d6674:	d004      	beq.n	d6680 <memcpy+0x14>
   d6676:	f811 4b01 	ldrb.w	r4, [r1], #1
   d667a:	f803 4f01 	strb.w	r4, [r3, #1]!
   d667e:	e7f8      	b.n	d6672 <memcpy+0x6>
   d6680:	bd10      	pop	{r4, pc}

000d6682 <memset>:
   d6682:	4402      	add	r2, r0
   d6684:	4603      	mov	r3, r0
   d6686:	4293      	cmp	r3, r2
   d6688:	d002      	beq.n	d6690 <memset+0xe>
   d668a:	f803 1b01 	strb.w	r1, [r3], #1
   d668e:	e7fa      	b.n	d6686 <memset+0x4>
   d6690:	4770      	bx	lr
	...

000d6694 <srand>:
   d6694:	b538      	push	{r3, r4, r5, lr}
   d6696:	4b12      	ldr	r3, [pc, #72]	; (d66e0 <srand+0x4c>)
   d6698:	681c      	ldr	r4, [r3, #0]
   d669a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d669c:	4605      	mov	r5, r0
   d669e:	b9d3      	cbnz	r3, d66d6 <srand+0x42>
   d66a0:	2018      	movs	r0, #24
   d66a2:	f7fe fa55 	bl	d4b50 <malloc>
   d66a6:	f243 330e 	movw	r3, #13070	; 0x330e
   d66aa:	63a0      	str	r0, [r4, #56]	; 0x38
   d66ac:	8003      	strh	r3, [r0, #0]
   d66ae:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d66b2:	8043      	strh	r3, [r0, #2]
   d66b4:	f241 2334 	movw	r3, #4660	; 0x1234
   d66b8:	8083      	strh	r3, [r0, #4]
   d66ba:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d66be:	80c3      	strh	r3, [r0, #6]
   d66c0:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d66c4:	8103      	strh	r3, [r0, #8]
   d66c6:	2305      	movs	r3, #5
   d66c8:	8143      	strh	r3, [r0, #10]
   d66ca:	230b      	movs	r3, #11
   d66cc:	8183      	strh	r3, [r0, #12]
   d66ce:	2201      	movs	r2, #1
   d66d0:	2300      	movs	r3, #0
   d66d2:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d66d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d66d8:	2200      	movs	r2, #0
   d66da:	611d      	str	r5, [r3, #16]
   d66dc:	615a      	str	r2, [r3, #20]
   d66de:	bd38      	pop	{r3, r4, r5, pc}
   d66e0:	2003e2f0 	.word	0x2003e2f0

000d66e4 <strcmp>:
   d66e4:	f810 2b01 	ldrb.w	r2, [r0], #1
   d66e8:	f811 3b01 	ldrb.w	r3, [r1], #1
   d66ec:	2a01      	cmp	r2, #1
   d66ee:	bf28      	it	cs
   d66f0:	429a      	cmpcs	r2, r3
   d66f2:	d0f7      	beq.n	d66e4 <strcmp>
   d66f4:	1ad0      	subs	r0, r2, r3
   d66f6:	4770      	bx	lr

000d66f8 <strcpy>:
   d66f8:	4603      	mov	r3, r0
   d66fa:	f811 2b01 	ldrb.w	r2, [r1], #1
   d66fe:	f803 2b01 	strb.w	r2, [r3], #1
   d6702:	2a00      	cmp	r2, #0
   d6704:	d1f9      	bne.n	d66fa <strcpy+0x2>
   d6706:	4770      	bx	lr

000d6708 <strdup>:
   d6708:	4b02      	ldr	r3, [pc, #8]	; (d6714 <strdup+0xc>)
   d670a:	4601      	mov	r1, r0
   d670c:	6818      	ldr	r0, [r3, #0]
   d670e:	f000 b803 	b.w	d6718 <_strdup_r>
   d6712:	bf00      	nop
   d6714:	2003e2f0 	.word	0x2003e2f0

000d6718 <_strdup_r>:
   d6718:	b570      	push	{r4, r5, r6, lr}
   d671a:	4606      	mov	r6, r0
   d671c:	4608      	mov	r0, r1
   d671e:	460c      	mov	r4, r1
   d6720:	f000 f80d 	bl	d673e <strlen>
   d6724:	1c45      	adds	r5, r0, #1
   d6726:	4629      	mov	r1, r5
   d6728:	4630      	mov	r0, r6
   d672a:	f7fe fa49 	bl	d4bc0 <_malloc_r>
   d672e:	4606      	mov	r6, r0
   d6730:	b118      	cbz	r0, d673a <_strdup_r+0x22>
   d6732:	462a      	mov	r2, r5
   d6734:	4621      	mov	r1, r4
   d6736:	f7ff ff99 	bl	d666c <memcpy>
   d673a:	4630      	mov	r0, r6
   d673c:	bd70      	pop	{r4, r5, r6, pc}

000d673e <strlen>:
   d673e:	4603      	mov	r3, r0
   d6740:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6744:	2a00      	cmp	r2, #0
   d6746:	d1fb      	bne.n	d6740 <strlen+0x2>
   d6748:	1a18      	subs	r0, r3, r0
   d674a:	3801      	subs	r0, #1
   d674c:	4770      	bx	lr

000d674e <strncmp>:
   d674e:	b530      	push	{r4, r5, lr}
   d6750:	b182      	cbz	r2, d6774 <strncmp+0x26>
   d6752:	1e45      	subs	r5, r0, #1
   d6754:	3901      	subs	r1, #1
   d6756:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d675a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d675e:	42a3      	cmp	r3, r4
   d6760:	d106      	bne.n	d6770 <strncmp+0x22>
   d6762:	43ec      	mvns	r4, r5
   d6764:	4414      	add	r4, r2
   d6766:	42e0      	cmn	r0, r4
   d6768:	d001      	beq.n	d676e <strncmp+0x20>
   d676a:	2b00      	cmp	r3, #0
   d676c:	d1f3      	bne.n	d6756 <strncmp+0x8>
   d676e:	461c      	mov	r4, r3
   d6770:	1b18      	subs	r0, r3, r4
   d6772:	bd30      	pop	{r4, r5, pc}
   d6774:	4610      	mov	r0, r2
   d6776:	bd30      	pop	{r4, r5, pc}

000d6778 <strncpy>:
   d6778:	b510      	push	{r4, lr}
   d677a:	4603      	mov	r3, r0
   d677c:	b142      	cbz	r2, d6790 <strncpy+0x18>
   d677e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6782:	f803 4b01 	strb.w	r4, [r3], #1
   d6786:	3a01      	subs	r2, #1
   d6788:	2c00      	cmp	r4, #0
   d678a:	d1f7      	bne.n	d677c <strncpy+0x4>
   d678c:	441a      	add	r2, r3
   d678e:	e000      	b.n	d6792 <strncpy+0x1a>
   d6790:	bd10      	pop	{r4, pc}
   d6792:	4293      	cmp	r3, r2
   d6794:	d002      	beq.n	d679c <strncpy+0x24>
   d6796:	f803 4b01 	strb.w	r4, [r3], #1
   d679a:	e7fa      	b.n	d6792 <strncpy+0x1a>
   d679c:	bd10      	pop	{r4, pc}
	...

000d67a0 <_strtoul_r>:
   d67a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d67a4:	4680      	mov	r8, r0
   d67a6:	483c      	ldr	r0, [pc, #240]	; (d6898 <_strtoul_r+0xf8>)
   d67a8:	f8d0 9000 	ldr.w	r9, [r0]
   d67ac:	460e      	mov	r6, r1
   d67ae:	4635      	mov	r5, r6
   d67b0:	f815 4b01 	ldrb.w	r4, [r5], #1
   d67b4:	eb09 0004 	add.w	r0, r9, r4
   d67b8:	7840      	ldrb	r0, [r0, #1]
   d67ba:	f000 0008 	and.w	r0, r0, #8
   d67be:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   d67c2:	b108      	cbz	r0, d67c8 <_strtoul_r+0x28>
   d67c4:	462e      	mov	r6, r5
   d67c6:	e7f2      	b.n	d67ae <_strtoul_r+0xe>
   d67c8:	2c2d      	cmp	r4, #45	; 0x2d
   d67ca:	d103      	bne.n	d67d4 <_strtoul_r+0x34>
   d67cc:	1cb5      	adds	r5, r6, #2
   d67ce:	7874      	ldrb	r4, [r6, #1]
   d67d0:	2701      	movs	r7, #1
   d67d2:	e003      	b.n	d67dc <_strtoul_r+0x3c>
   d67d4:	2c2b      	cmp	r4, #43	; 0x2b
   d67d6:	bf04      	itt	eq
   d67d8:	7874      	ldrbeq	r4, [r6, #1]
   d67da:	1cb5      	addeq	r5, r6, #2
   d67dc:	b113      	cbz	r3, d67e4 <_strtoul_r+0x44>
   d67de:	2b10      	cmp	r3, #16
   d67e0:	d10a      	bne.n	d67f8 <_strtoul_r+0x58>
   d67e2:	e053      	b.n	d688c <_strtoul_r+0xec>
   d67e4:	2c30      	cmp	r4, #48	; 0x30
   d67e6:	d14f      	bne.n	d6888 <_strtoul_r+0xe8>
   d67e8:	7828      	ldrb	r0, [r5, #0]
   d67ea:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d67ee:	2858      	cmp	r0, #88	; 0x58
   d67f0:	d145      	bne.n	d687e <_strtoul_r+0xde>
   d67f2:	786c      	ldrb	r4, [r5, #1]
   d67f4:	2310      	movs	r3, #16
   d67f6:	3502      	adds	r5, #2
   d67f8:	f04f 3cff 	mov.w	ip, #4294967295
   d67fc:	2600      	movs	r6, #0
   d67fe:	fbbc fcf3 	udiv	ip, ip, r3
   d6802:	fb03 fa0c 	mul.w	sl, r3, ip
   d6806:	ea6f 0a0a 	mvn.w	sl, sl
   d680a:	4630      	mov	r0, r6
   d680c:	eb09 0e04 	add.w	lr, r9, r4
   d6810:	f89e e001 	ldrb.w	lr, [lr, #1]
   d6814:	f01e 0f04 	tst.w	lr, #4
   d6818:	d001      	beq.n	d681e <_strtoul_r+0x7e>
   d681a:	3c30      	subs	r4, #48	; 0x30
   d681c:	e00b      	b.n	d6836 <_strtoul_r+0x96>
   d681e:	f01e 0e03 	ands.w	lr, lr, #3
   d6822:	d01a      	beq.n	d685a <_strtoul_r+0xba>
   d6824:	f1be 0f01 	cmp.w	lr, #1
   d6828:	bf0c      	ite	eq
   d682a:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d682e:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d6832:	ebce 0404 	rsb	r4, lr, r4
   d6836:	42a3      	cmp	r3, r4
   d6838:	dd0f      	ble.n	d685a <_strtoul_r+0xba>
   d683a:	2e00      	cmp	r6, #0
   d683c:	db08      	blt.n	d6850 <_strtoul_r+0xb0>
   d683e:	4560      	cmp	r0, ip
   d6840:	d806      	bhi.n	d6850 <_strtoul_r+0xb0>
   d6842:	d101      	bne.n	d6848 <_strtoul_r+0xa8>
   d6844:	4554      	cmp	r4, sl
   d6846:	dc03      	bgt.n	d6850 <_strtoul_r+0xb0>
   d6848:	fb03 4000 	mla	r0, r3, r0, r4
   d684c:	2601      	movs	r6, #1
   d684e:	e001      	b.n	d6854 <_strtoul_r+0xb4>
   d6850:	f04f 36ff 	mov.w	r6, #4294967295
   d6854:	f815 4b01 	ldrb.w	r4, [r5], #1
   d6858:	e7d8      	b.n	d680c <_strtoul_r+0x6c>
   d685a:	2e00      	cmp	r6, #0
   d685c:	da07      	bge.n	d686e <_strtoul_r+0xce>
   d685e:	2322      	movs	r3, #34	; 0x22
   d6860:	f8c8 3000 	str.w	r3, [r8]
   d6864:	f04f 30ff 	mov.w	r0, #4294967295
   d6868:	b92a      	cbnz	r2, d6876 <_strtoul_r+0xd6>
   d686a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d686e:	b107      	cbz	r7, d6872 <_strtoul_r+0xd2>
   d6870:	4240      	negs	r0, r0
   d6872:	b172      	cbz	r2, d6892 <_strtoul_r+0xf2>
   d6874:	b106      	cbz	r6, d6878 <_strtoul_r+0xd8>
   d6876:	1e69      	subs	r1, r5, #1
   d6878:	6011      	str	r1, [r2, #0]
   d687a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d687e:	2430      	movs	r4, #48	; 0x30
   d6880:	2b00      	cmp	r3, #0
   d6882:	d1b9      	bne.n	d67f8 <_strtoul_r+0x58>
   d6884:	2308      	movs	r3, #8
   d6886:	e7b7      	b.n	d67f8 <_strtoul_r+0x58>
   d6888:	230a      	movs	r3, #10
   d688a:	e7b5      	b.n	d67f8 <_strtoul_r+0x58>
   d688c:	2c30      	cmp	r4, #48	; 0x30
   d688e:	d0ab      	beq.n	d67e8 <_strtoul_r+0x48>
   d6890:	e7b2      	b.n	d67f8 <_strtoul_r+0x58>
   d6892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6896:	bf00      	nop
   d6898:	2003e28c 	.word	0x2003e28c

000d689c <strtoul>:
   d689c:	4613      	mov	r3, r2
   d689e:	460a      	mov	r2, r1
   d68a0:	4601      	mov	r1, r0
   d68a2:	4802      	ldr	r0, [pc, #8]	; (d68ac <strtoul+0x10>)
   d68a4:	6800      	ldr	r0, [r0, #0]
   d68a6:	f7ff bf7b 	b.w	d67a0 <_strtoul_r>
   d68aa:	bf00      	nop
   d68ac:	2003e2f0 	.word	0x2003e2f0

000d68b0 <__tzcalc_limits>:
   d68b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d68b4:	4604      	mov	r4, r0
   d68b6:	f000 fa6f 	bl	d6d98 <__gettzinfo>
   d68ba:	f240 73b1 	movw	r3, #1969	; 0x7b1
   d68be:	429c      	cmp	r4, r3
   d68c0:	f340 8096 	ble.w	d69f0 <__tzcalc_limits+0x140>
   d68c4:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   d68c8:	18e3      	adds	r3, r4, r3
   d68ca:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   d68ce:	109b      	asrs	r3, r3, #2
   d68d0:	f240 156d 	movw	r5, #365	; 0x16d
   d68d4:	fb05 3502 	mla	r5, r5, r2, r3
   d68d8:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   d68dc:	f06f 0363 	mvn.w	r3, #99	; 0x63
   d68e0:	fb92 f3f3 	sdiv	r3, r2, r3
   d68e4:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   d68e8:	442b      	add	r3, r5
   d68ea:	18a5      	adds	r5, r4, r2
   d68ec:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d68f0:	fb95 f5f2 	sdiv	r5, r5, r2
   d68f4:	441d      	add	r5, r3
   d68f6:	2364      	movs	r3, #100	; 0x64
   d68f8:	fb94 f7f2 	sdiv	r7, r4, r2
   d68fc:	fb94 f6f3 	sdiv	r6, r4, r3
   d6900:	fb02 4717 	mls	r7, r2, r7, r4
   d6904:	fb03 4616 	mls	r6, r3, r6, r4
   d6908:	f100 0338 	add.w	r3, r0, #56	; 0x38
   d690c:	fab7 fe87 	clz	lr, r7
   d6910:	9301      	str	r3, [sp, #4]
   d6912:	f004 0303 	and.w	r3, r4, #3
   d6916:	6044      	str	r4, [r0, #4]
   d6918:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   d691c:	4601      	mov	r1, r0
   d691e:	9300      	str	r3, [sp, #0]
   d6920:	f04f 0c07 	mov.w	ip, #7
   d6924:	7a0b      	ldrb	r3, [r1, #8]
   d6926:	2b4a      	cmp	r3, #74	; 0x4a
   d6928:	d10e      	bne.n	d6948 <__tzcalc_limits+0x98>
   d692a:	694b      	ldr	r3, [r1, #20]
   d692c:	9a00      	ldr	r2, [sp, #0]
   d692e:	18ec      	adds	r4, r5, r3
   d6930:	b902      	cbnz	r2, d6934 <__tzcalc_limits+0x84>
   d6932:	b906      	cbnz	r6, d6936 <__tzcalc_limits+0x86>
   d6934:	b927      	cbnz	r7, d6940 <__tzcalc_limits+0x90>
   d6936:	2b3b      	cmp	r3, #59	; 0x3b
   d6938:	bfd4      	ite	le
   d693a:	2300      	movle	r3, #0
   d693c:	2301      	movgt	r3, #1
   d693e:	e000      	b.n	d6942 <__tzcalc_limits+0x92>
   d6940:	2300      	movs	r3, #0
   d6942:	4423      	add	r3, r4
   d6944:	3b01      	subs	r3, #1
   d6946:	e03f      	b.n	d69c8 <__tzcalc_limits+0x118>
   d6948:	2b44      	cmp	r3, #68	; 0x44
   d694a:	d102      	bne.n	d6952 <__tzcalc_limits+0xa2>
   d694c:	694b      	ldr	r3, [r1, #20]
   d694e:	442b      	add	r3, r5
   d6950:	e03a      	b.n	d69c8 <__tzcalc_limits+0x118>
   d6952:	9b00      	ldr	r3, [sp, #0]
   d6954:	b92b      	cbnz	r3, d6962 <__tzcalc_limits+0xb2>
   d6956:	2e00      	cmp	r6, #0
   d6958:	bf0c      	ite	eq
   d695a:	46f0      	moveq	r8, lr
   d695c:	f04f 0801 	movne.w	r8, #1
   d6960:	e000      	b.n	d6964 <__tzcalc_limits+0xb4>
   d6962:	46f0      	mov	r8, lr
   d6964:	4b24      	ldr	r3, [pc, #144]	; (d69f8 <__tzcalc_limits+0x148>)
   d6966:	68cc      	ldr	r4, [r1, #12]
   d6968:	2230      	movs	r2, #48	; 0x30
   d696a:	fb02 3808 	mla	r8, r2, r8, r3
   d696e:	f1a8 0a04 	sub.w	sl, r8, #4
   d6972:	46a9      	mov	r9, r5
   d6974:	2301      	movs	r3, #1
   d6976:	42a3      	cmp	r3, r4
   d6978:	da04      	bge.n	d6984 <__tzcalc_limits+0xd4>
   d697a:	f85a bf04 	ldr.w	fp, [sl, #4]!
   d697e:	3301      	adds	r3, #1
   d6980:	44d9      	add	r9, fp
   d6982:	e7f8      	b.n	d6976 <__tzcalc_limits+0xc6>
   d6984:	f109 0304 	add.w	r3, r9, #4
   d6988:	fb93 fbfc 	sdiv	fp, r3, ip
   d698c:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   d6990:	2c01      	cmp	r4, #1
   d6992:	ebca 0a03 	rsb	sl, sl, r3
   d6996:	694b      	ldr	r3, [r1, #20]
   d6998:	bfb8      	it	lt
   d699a:	2401      	movlt	r4, #1
   d699c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   d69a0:	ebb3 0a0a 	subs.w	sl, r3, sl
   d69a4:	690b      	ldr	r3, [r1, #16]
   d69a6:	f104 34ff 	add.w	r4, r4, #4294967295
   d69aa:	f103 33ff 	add.w	r3, r3, #4294967295
   d69ae:	bf48      	it	mi
   d69b0:	f10a 0a07 	addmi.w	sl, sl, #7
   d69b4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d69b8:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   d69bc:	4453      	add	r3, sl
   d69be:	42a3      	cmp	r3, r4
   d69c0:	db01      	blt.n	d69c6 <__tzcalc_limits+0x116>
   d69c2:	3b07      	subs	r3, #7
   d69c4:	e7fb      	b.n	d69be <__tzcalc_limits+0x10e>
   d69c6:	444b      	add	r3, r9
   d69c8:	698c      	ldr	r4, [r1, #24]
   d69ca:	4a0c      	ldr	r2, [pc, #48]	; (d69fc <__tzcalc_limits+0x14c>)
   d69cc:	fb02 4303 	mla	r3, r2, r3, r4
   d69d0:	6a0c      	ldr	r4, [r1, #32]
   d69d2:	4423      	add	r3, r4
   d69d4:	f841 3f1c 	str.w	r3, [r1, #28]!
   d69d8:	9b01      	ldr	r3, [sp, #4]
   d69da:	4299      	cmp	r1, r3
   d69dc:	d1a2      	bne.n	d6924 <__tzcalc_limits+0x74>
   d69de:	69c3      	ldr	r3, [r0, #28]
   d69e0:	6b82      	ldr	r2, [r0, #56]	; 0x38
   d69e2:	4293      	cmp	r3, r2
   d69e4:	bfac      	ite	ge
   d69e6:	2300      	movge	r3, #0
   d69e8:	2301      	movlt	r3, #1
   d69ea:	6003      	str	r3, [r0, #0]
   d69ec:	2001      	movs	r0, #1
   d69ee:	e000      	b.n	d69f2 <__tzcalc_limits+0x142>
   d69f0:	2000      	movs	r0, #0
   d69f2:	b003      	add	sp, #12
   d69f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d69f8:	000d7408 	.word	0x000d7408
   d69fc:	00015180 	.word	0x00015180

000d6a00 <__tz_lock>:
   d6a00:	4770      	bx	lr

000d6a02 <__tz_unlock>:
   d6a02:	4770      	bx	lr

000d6a04 <_tzset_unlocked>:
   d6a04:	4b01      	ldr	r3, [pc, #4]	; (d6a0c <_tzset_unlocked+0x8>)
   d6a06:	6818      	ldr	r0, [r3, #0]
   d6a08:	f000 b802 	b.w	d6a10 <_tzset_unlocked_r>
   d6a0c:	2003e2f0 	.word	0x2003e2f0

000d6a10 <_tzset_unlocked_r>:
   d6a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6a14:	b08d      	sub	sp, #52	; 0x34
   d6a16:	4607      	mov	r7, r0
   d6a18:	f000 f9be 	bl	d6d98 <__gettzinfo>
   d6a1c:	49b0      	ldr	r1, [pc, #704]	; (d6ce0 <_tzset_unlocked_r+0x2d0>)
   d6a1e:	4eb1      	ldr	r6, [pc, #708]	; (d6ce4 <_tzset_unlocked_r+0x2d4>)
   d6a20:	4604      	mov	r4, r0
   d6a22:	4638      	mov	r0, r7
   d6a24:	f000 f9b0 	bl	d6d88 <_getenv_r>
   d6a28:	4605      	mov	r5, r0
   d6a2a:	b960      	cbnz	r0, d6a46 <_tzset_unlocked_r+0x36>
   d6a2c:	4bae      	ldr	r3, [pc, #696]	; (d6ce8 <_tzset_unlocked_r+0x2d8>)
   d6a2e:	4aaf      	ldr	r2, [pc, #700]	; (d6cec <_tzset_unlocked_r+0x2dc>)
   d6a30:	6018      	str	r0, [r3, #0]
   d6a32:	4baf      	ldr	r3, [pc, #700]	; (d6cf0 <_tzset_unlocked_r+0x2e0>)
   d6a34:	6018      	str	r0, [r3, #0]
   d6a36:	4baf      	ldr	r3, [pc, #700]	; (d6cf4 <_tzset_unlocked_r+0x2e4>)
   d6a38:	6830      	ldr	r0, [r6, #0]
   d6a3a:	601a      	str	r2, [r3, #0]
   d6a3c:	605a      	str	r2, [r3, #4]
   d6a3e:	f7fe f88f 	bl	d4b60 <free>
   d6a42:	6035      	str	r5, [r6, #0]
   d6a44:	e148      	b.n	d6cd8 <_tzset_unlocked_r+0x2c8>
   d6a46:	6831      	ldr	r1, [r6, #0]
   d6a48:	b979      	cbnz	r1, d6a6a <_tzset_unlocked_r+0x5a>
   d6a4a:	6830      	ldr	r0, [r6, #0]
   d6a4c:	f7fe f888 	bl	d4b60 <free>
   d6a50:	4628      	mov	r0, r5
   d6a52:	f7ff fe74 	bl	d673e <strlen>
   d6a56:	1c41      	adds	r1, r0, #1
   d6a58:	4638      	mov	r0, r7
   d6a5a:	f7fe f8b1 	bl	d4bc0 <_malloc_r>
   d6a5e:	6030      	str	r0, [r6, #0]
   d6a60:	b148      	cbz	r0, d6a76 <_tzset_unlocked_r+0x66>
   d6a62:	4629      	mov	r1, r5
   d6a64:	f7ff fe48 	bl	d66f8 <strcpy>
   d6a68:	e005      	b.n	d6a76 <_tzset_unlocked_r+0x66>
   d6a6a:	f7ff fe3b 	bl	d66e4 <strcmp>
   d6a6e:	2800      	cmp	r0, #0
   d6a70:	f000 8132 	beq.w	d6cd8 <_tzset_unlocked_r+0x2c8>
   d6a74:	e7e9      	b.n	d6a4a <_tzset_unlocked_r+0x3a>
   d6a76:	782b      	ldrb	r3, [r5, #0]
   d6a78:	4a9f      	ldr	r2, [pc, #636]	; (d6cf8 <_tzset_unlocked_r+0x2e8>)
   d6a7a:	49a0      	ldr	r1, [pc, #640]	; (d6cfc <_tzset_unlocked_r+0x2ec>)
   d6a7c:	2b3a      	cmp	r3, #58	; 0x3a
   d6a7e:	bf08      	it	eq
   d6a80:	3501      	addeq	r5, #1
   d6a82:	ae0a      	add	r6, sp, #40	; 0x28
   d6a84:	4633      	mov	r3, r6
   d6a86:	4628      	mov	r0, r5
   d6a88:	f7fe f882 	bl	d4b90 <siscanf>
   d6a8c:	2800      	cmp	r0, #0
   d6a8e:	f340 8123 	ble.w	d6cd8 <_tzset_unlocked_r+0x2c8>
   d6a92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6a94:	18ef      	adds	r7, r5, r3
   d6a96:	5ceb      	ldrb	r3, [r5, r3]
   d6a98:	2b2d      	cmp	r3, #45	; 0x2d
   d6a9a:	d103      	bne.n	d6aa4 <_tzset_unlocked_r+0x94>
   d6a9c:	3701      	adds	r7, #1
   d6a9e:	f04f 35ff 	mov.w	r5, #4294967295
   d6aa2:	e003      	b.n	d6aac <_tzset_unlocked_r+0x9c>
   d6aa4:	2b2b      	cmp	r3, #43	; 0x2b
   d6aa6:	bf08      	it	eq
   d6aa8:	3701      	addeq	r7, #1
   d6aaa:	2501      	movs	r5, #1
   d6aac:	f10d 0a20 	add.w	sl, sp, #32
   d6ab0:	f10d 0b1e 	add.w	fp, sp, #30
   d6ab4:	f04f 0800 	mov.w	r8, #0
   d6ab8:	9603      	str	r6, [sp, #12]
   d6aba:	f8cd a008 	str.w	sl, [sp, #8]
   d6abe:	9601      	str	r6, [sp, #4]
   d6ac0:	f8cd b000 	str.w	fp, [sp]
   d6ac4:	4633      	mov	r3, r6
   d6ac6:	aa07      	add	r2, sp, #28
   d6ac8:	498d      	ldr	r1, [pc, #564]	; (d6d00 <_tzset_unlocked_r+0x2f0>)
   d6aca:	f8ad 801e 	strh.w	r8, [sp, #30]
   d6ace:	4638      	mov	r0, r7
   d6ad0:	f8ad 8020 	strh.w	r8, [sp, #32]
   d6ad4:	f7fe f85c 	bl	d4b90 <siscanf>
   d6ad8:	4540      	cmp	r0, r8
   d6ada:	f340 80fd 	ble.w	d6cd8 <_tzset_unlocked_r+0x2c8>
   d6ade:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d6ae2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d6ae6:	f8df 9224 	ldr.w	r9, [pc, #548]	; d6d0c <_tzset_unlocked_r+0x2fc>
   d6aea:	213c      	movs	r1, #60	; 0x3c
   d6aec:	fb01 3302 	mla	r3, r1, r2, r3
   d6af0:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d6af4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d6af8:	fb01 3302 	mla	r3, r1, r2, r3
   d6afc:	435d      	muls	r5, r3
   d6afe:	6225      	str	r5, [r4, #32]
   d6b00:	4d7c      	ldr	r5, [pc, #496]	; (d6cf4 <_tzset_unlocked_r+0x2e4>)
   d6b02:	4b7d      	ldr	r3, [pc, #500]	; (d6cf8 <_tzset_unlocked_r+0x2e8>)
   d6b04:	602b      	str	r3, [r5, #0]
   d6b06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6b08:	497c      	ldr	r1, [pc, #496]	; (d6cfc <_tzset_unlocked_r+0x2ec>)
   d6b0a:	441f      	add	r7, r3
   d6b0c:	464a      	mov	r2, r9
   d6b0e:	4633      	mov	r3, r6
   d6b10:	4638      	mov	r0, r7
   d6b12:	f7fe f83d 	bl	d4b90 <siscanf>
   d6b16:	4540      	cmp	r0, r8
   d6b18:	dc08      	bgt.n	d6b2c <_tzset_unlocked_r+0x11c>
   d6b1a:	682b      	ldr	r3, [r5, #0]
   d6b1c:	606b      	str	r3, [r5, #4]
   d6b1e:	4b72      	ldr	r3, [pc, #456]	; (d6ce8 <_tzset_unlocked_r+0x2d8>)
   d6b20:	6a22      	ldr	r2, [r4, #32]
   d6b22:	601a      	str	r2, [r3, #0]
   d6b24:	4b72      	ldr	r3, [pc, #456]	; (d6cf0 <_tzset_unlocked_r+0x2e0>)
   d6b26:	f8c3 8000 	str.w	r8, [r3]
   d6b2a:	e0d5      	b.n	d6cd8 <_tzset_unlocked_r+0x2c8>
   d6b2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6b2e:	f8c5 9004 	str.w	r9, [r5, #4]
   d6b32:	18fd      	adds	r5, r7, r3
   d6b34:	5cfb      	ldrb	r3, [r7, r3]
   d6b36:	2b2d      	cmp	r3, #45	; 0x2d
   d6b38:	d103      	bne.n	d6b42 <_tzset_unlocked_r+0x132>
   d6b3a:	3501      	adds	r5, #1
   d6b3c:	f04f 37ff 	mov.w	r7, #4294967295
   d6b40:	e003      	b.n	d6b4a <_tzset_unlocked_r+0x13a>
   d6b42:	2b2b      	cmp	r3, #43	; 0x2b
   d6b44:	bf08      	it	eq
   d6b46:	3501      	addeq	r5, #1
   d6b48:	2701      	movs	r7, #1
   d6b4a:	2300      	movs	r3, #0
   d6b4c:	f8ad 301c 	strh.w	r3, [sp, #28]
   d6b50:	f8ad 301e 	strh.w	r3, [sp, #30]
   d6b54:	f8ad 3020 	strh.w	r3, [sp, #32]
   d6b58:	930a      	str	r3, [sp, #40]	; 0x28
   d6b5a:	9603      	str	r6, [sp, #12]
   d6b5c:	f8cd a008 	str.w	sl, [sp, #8]
   d6b60:	9601      	str	r6, [sp, #4]
   d6b62:	f8cd b000 	str.w	fp, [sp]
   d6b66:	4633      	mov	r3, r6
   d6b68:	aa07      	add	r2, sp, #28
   d6b6a:	4965      	ldr	r1, [pc, #404]	; (d6d00 <_tzset_unlocked_r+0x2f0>)
   d6b6c:	4628      	mov	r0, r5
   d6b6e:	f7fe f80f 	bl	d4b90 <siscanf>
   d6b72:	2800      	cmp	r0, #0
   d6b74:	dc04      	bgt.n	d6b80 <_tzset_unlocked_r+0x170>
   d6b76:	6a23      	ldr	r3, [r4, #32]
   d6b78:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   d6b7c:	63e3      	str	r3, [r4, #60]	; 0x3c
   d6b7e:	e00e      	b.n	d6b9e <_tzset_unlocked_r+0x18e>
   d6b80:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d6b84:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d6b88:	213c      	movs	r1, #60	; 0x3c
   d6b8a:	fb01 3302 	mla	r3, r1, r2, r3
   d6b8e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d6b92:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d6b96:	fb01 3302 	mla	r3, r1, r2, r3
   d6b9a:	435f      	muls	r7, r3
   d6b9c:	63e7      	str	r7, [r4, #60]	; 0x3c
   d6b9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6ba0:	4627      	mov	r7, r4
   d6ba2:	441d      	add	r5, r3
   d6ba4:	f04f 0900 	mov.w	r9, #0
   d6ba8:	782b      	ldrb	r3, [r5, #0]
   d6baa:	2b2c      	cmp	r3, #44	; 0x2c
   d6bac:	bf08      	it	eq
   d6bae:	3501      	addeq	r5, #1
   d6bb0:	f895 8000 	ldrb.w	r8, [r5]
   d6bb4:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   d6bb8:	d126      	bne.n	d6c08 <_tzset_unlocked_r+0x1f8>
   d6bba:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   d6bbe:	9302      	str	r3, [sp, #8]
   d6bc0:	ab09      	add	r3, sp, #36	; 0x24
   d6bc2:	9300      	str	r3, [sp, #0]
   d6bc4:	9603      	str	r6, [sp, #12]
   d6bc6:	9601      	str	r6, [sp, #4]
   d6bc8:	4633      	mov	r3, r6
   d6bca:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   d6bce:	494d      	ldr	r1, [pc, #308]	; (d6d04 <_tzset_unlocked_r+0x2f4>)
   d6bd0:	4628      	mov	r0, r5
   d6bd2:	f7fd ffdd 	bl	d4b90 <siscanf>
   d6bd6:	2803      	cmp	r0, #3
   d6bd8:	d17e      	bne.n	d6cd8 <_tzset_unlocked_r+0x2c8>
   d6bda:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   d6bde:	1e4b      	subs	r3, r1, #1
   d6be0:	2b0b      	cmp	r3, #11
   d6be2:	d879      	bhi.n	d6cd8 <_tzset_unlocked_r+0x2c8>
   d6be4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   d6be8:	1e53      	subs	r3, r2, #1
   d6bea:	2b04      	cmp	r3, #4
   d6bec:	d874      	bhi.n	d6cd8 <_tzset_unlocked_r+0x2c8>
   d6bee:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   d6bf2:	2b06      	cmp	r3, #6
   d6bf4:	d870      	bhi.n	d6cd8 <_tzset_unlocked_r+0x2c8>
   d6bf6:	f887 8008 	strb.w	r8, [r7, #8]
   d6bfa:	60f9      	str	r1, [r7, #12]
   d6bfc:	613a      	str	r2, [r7, #16]
   d6bfe:	617b      	str	r3, [r7, #20]
   d6c00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6c02:	eb05 0803 	add.w	r8, r5, r3
   d6c06:	e02a      	b.n	d6c5e <_tzset_unlocked_r+0x24e>
   d6c08:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   d6c0c:	bf06      	itte	eq
   d6c0e:	3501      	addeq	r5, #1
   d6c10:	4643      	moveq	r3, r8
   d6c12:	2344      	movne	r3, #68	; 0x44
   d6c14:	220a      	movs	r2, #10
   d6c16:	a90b      	add	r1, sp, #44	; 0x2c
   d6c18:	4628      	mov	r0, r5
   d6c1a:	9305      	str	r3, [sp, #20]
   d6c1c:	f7ff fe3e 	bl	d689c <strtoul>
   d6c20:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   d6c24:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   d6c28:	4545      	cmp	r5, r8
   d6c2a:	9b05      	ldr	r3, [sp, #20]
   d6c2c:	d114      	bne.n	d6c58 <_tzset_unlocked_r+0x248>
   d6c2e:	234d      	movs	r3, #77	; 0x4d
   d6c30:	f1b9 0f00 	cmp.w	r9, #0
   d6c34:	d107      	bne.n	d6c46 <_tzset_unlocked_r+0x236>
   d6c36:	7223      	strb	r3, [r4, #8]
   d6c38:	2303      	movs	r3, #3
   d6c3a:	60e3      	str	r3, [r4, #12]
   d6c3c:	2302      	movs	r3, #2
   d6c3e:	6123      	str	r3, [r4, #16]
   d6c40:	f8c4 9014 	str.w	r9, [r4, #20]
   d6c44:	e00b      	b.n	d6c5e <_tzset_unlocked_r+0x24e>
   d6c46:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   d6c4a:	230b      	movs	r3, #11
   d6c4c:	62a3      	str	r3, [r4, #40]	; 0x28
   d6c4e:	2301      	movs	r3, #1
   d6c50:	62e3      	str	r3, [r4, #44]	; 0x2c
   d6c52:	2300      	movs	r3, #0
   d6c54:	6323      	str	r3, [r4, #48]	; 0x30
   d6c56:	e002      	b.n	d6c5e <_tzset_unlocked_r+0x24e>
   d6c58:	b280      	uxth	r0, r0
   d6c5a:	723b      	strb	r3, [r7, #8]
   d6c5c:	6178      	str	r0, [r7, #20]
   d6c5e:	2302      	movs	r3, #2
   d6c60:	f8ad 301c 	strh.w	r3, [sp, #28]
   d6c64:	2300      	movs	r3, #0
   d6c66:	f8ad 301e 	strh.w	r3, [sp, #30]
   d6c6a:	f8ad 3020 	strh.w	r3, [sp, #32]
   d6c6e:	930a      	str	r3, [sp, #40]	; 0x28
   d6c70:	f898 3000 	ldrb.w	r3, [r8]
   d6c74:	2b2f      	cmp	r3, #47	; 0x2f
   d6c76:	d10b      	bne.n	d6c90 <_tzset_unlocked_r+0x280>
   d6c78:	9603      	str	r6, [sp, #12]
   d6c7a:	f8cd a008 	str.w	sl, [sp, #8]
   d6c7e:	9601      	str	r6, [sp, #4]
   d6c80:	f8cd b000 	str.w	fp, [sp]
   d6c84:	4633      	mov	r3, r6
   d6c86:	aa07      	add	r2, sp, #28
   d6c88:	491f      	ldr	r1, [pc, #124]	; (d6d08 <_tzset_unlocked_r+0x2f8>)
   d6c8a:	4640      	mov	r0, r8
   d6c8c:	f7fd ff80 	bl	d4b90 <siscanf>
   d6c90:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d6c94:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d6c98:	213c      	movs	r1, #60	; 0x3c
   d6c9a:	fb01 3302 	mla	r3, r1, r2, r3
   d6c9e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d6ca2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d6ca6:	fb01 3302 	mla	r3, r1, r2, r3
   d6caa:	61bb      	str	r3, [r7, #24]
   d6cac:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d6cae:	f109 0901 	add.w	r9, r9, #1
   d6cb2:	f1b9 0f02 	cmp.w	r9, #2
   d6cb6:	4445      	add	r5, r8
   d6cb8:	f107 071c 	add.w	r7, r7, #28
   d6cbc:	f47f af74 	bne.w	d6ba8 <_tzset_unlocked_r+0x198>
   d6cc0:	6860      	ldr	r0, [r4, #4]
   d6cc2:	f7ff fdf5 	bl	d68b0 <__tzcalc_limits>
   d6cc6:	4b08      	ldr	r3, [pc, #32]	; (d6ce8 <_tzset_unlocked_r+0x2d8>)
   d6cc8:	6a22      	ldr	r2, [r4, #32]
   d6cca:	601a      	str	r2, [r3, #0]
   d6ccc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d6cce:	1a9b      	subs	r3, r3, r2
   d6cd0:	4a07      	ldr	r2, [pc, #28]	; (d6cf0 <_tzset_unlocked_r+0x2e0>)
   d6cd2:	bf18      	it	ne
   d6cd4:	2301      	movne	r3, #1
   d6cd6:	6013      	str	r3, [r2, #0]
   d6cd8:	b00d      	add	sp, #52	; 0x34
   d6cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6cde:	bf00      	nop
   d6ce0:	000d7468 	.word	0x000d7468
   d6ce4:	2003e7e0 	.word	0x2003e7e0
   d6ce8:	2003e7e8 	.word	0x2003e7e8
   d6cec:	000d746b 	.word	0x000d746b
   d6cf0:	2003e7e4 	.word	0x2003e7e4
   d6cf4:	2003e2f4 	.word	0x2003e2f4
   d6cf8:	2003e7d3 	.word	0x2003e7d3
   d6cfc:	000d746f 	.word	0x000d746f
   d6d00:	000d7492 	.word	0x000d7492
   d6d04:	000d747e 	.word	0x000d747e
   d6d08:	000d7491 	.word	0x000d7491
   d6d0c:	2003e7c8 	.word	0x2003e7c8

000d6d10 <_findenv_r>:
   d6d10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6d14:	4607      	mov	r7, r0
   d6d16:	468b      	mov	fp, r1
   d6d18:	4690      	mov	r8, r2
   d6d1a:	f000 f8d9 	bl	d6ed0 <__env_lock>
   d6d1e:	4b19      	ldr	r3, [pc, #100]	; (d6d84 <_findenv_r+0x74>)
   d6d20:	681d      	ldr	r5, [r3, #0]
   d6d22:	469a      	mov	sl, r3
   d6d24:	b13d      	cbz	r5, d6d36 <_findenv_r+0x26>
   d6d26:	465c      	mov	r4, fp
   d6d28:	4623      	mov	r3, r4
   d6d2a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6d2e:	b142      	cbz	r2, d6d42 <_findenv_r+0x32>
   d6d30:	2a3d      	cmp	r2, #61	; 0x3d
   d6d32:	461c      	mov	r4, r3
   d6d34:	d1f8      	bne.n	d6d28 <_findenv_r+0x18>
   d6d36:	4638      	mov	r0, r7
   d6d38:	f000 f8cb 	bl	d6ed2 <__env_unlock>
   d6d3c:	2000      	movs	r0, #0
   d6d3e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6d42:	ebcb 0404 	rsb	r4, fp, r4
   d6d46:	46a9      	mov	r9, r5
   d6d48:	f859 0b04 	ldr.w	r0, [r9], #4
   d6d4c:	2800      	cmp	r0, #0
   d6d4e:	d0f2      	beq.n	d6d36 <_findenv_r+0x26>
   d6d50:	4622      	mov	r2, r4
   d6d52:	4659      	mov	r1, fp
   d6d54:	f7ff fcfb 	bl	d674e <strncmp>
   d6d58:	b988      	cbnz	r0, d6d7e <_findenv_r+0x6e>
   d6d5a:	f859 3c04 	ldr.w	r3, [r9, #-4]
   d6d5e:	191e      	adds	r6, r3, r4
   d6d60:	5d1b      	ldrb	r3, [r3, r4]
   d6d62:	2b3d      	cmp	r3, #61	; 0x3d
   d6d64:	d10b      	bne.n	d6d7e <_findenv_r+0x6e>
   d6d66:	f8da 3000 	ldr.w	r3, [sl]
   d6d6a:	1aed      	subs	r5, r5, r3
   d6d6c:	10ad      	asrs	r5, r5, #2
   d6d6e:	4638      	mov	r0, r7
   d6d70:	f8c8 5000 	str.w	r5, [r8]
   d6d74:	f000 f8ad 	bl	d6ed2 <__env_unlock>
   d6d78:	1c70      	adds	r0, r6, #1
   d6d7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6d7e:	464d      	mov	r5, r9
   d6d80:	e7e1      	b.n	d6d46 <_findenv_r+0x36>
   d6d82:	bf00      	nop
   d6d84:	2003e33c 	.word	0x2003e33c

000d6d88 <_getenv_r>:
   d6d88:	b507      	push	{r0, r1, r2, lr}
   d6d8a:	aa01      	add	r2, sp, #4
   d6d8c:	f7ff ffc0 	bl	d6d10 <_findenv_r>
   d6d90:	b003      	add	sp, #12
   d6d92:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6d98 <__gettzinfo>:
   d6d98:	4800      	ldr	r0, [pc, #0]	; (d6d9c <__gettzinfo+0x4>)
   d6d9a:	4770      	bx	lr
   d6d9c:	2003e2fc 	.word	0x2003e2fc

000d6da0 <gmtime_r>:
   d6da0:	6802      	ldr	r2, [r0, #0]
   d6da2:	4b47      	ldr	r3, [pc, #284]	; (d6ec0 <gmtime_r+0x120>)
   d6da4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6da6:	fb92 f4f3 	sdiv	r4, r2, r3
   d6daa:	fb03 2214 	mls	r2, r3, r4, r2
   d6dae:	2a00      	cmp	r2, #0
   d6db0:	bfbc      	itt	lt
   d6db2:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   d6db6:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   d6dba:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   d6dbe:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   d6dc2:	fb92 f3f0 	sdiv	r3, r2, r0
   d6dc6:	fb00 2213 	mls	r2, r0, r3, r2
   d6dca:	f04f 003c 	mov.w	r0, #60	; 0x3c
   d6dce:	bfac      	ite	ge
   d6dd0:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   d6dd4:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   d6dd8:	608b      	str	r3, [r1, #8]
   d6dda:	fb92 f3f0 	sdiv	r3, r2, r0
   d6dde:	fb00 2213 	mls	r2, r0, r3, r2
   d6de2:	604b      	str	r3, [r1, #4]
   d6de4:	600a      	str	r2, [r1, #0]
   d6de6:	2307      	movs	r3, #7
   d6de8:	1ce2      	adds	r2, r4, #3
   d6dea:	fb92 f3f3 	sdiv	r3, r2, r3
   d6dee:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d6df2:	1ad3      	subs	r3, r2, r3
   d6df4:	618b      	str	r3, [r1, #24]
   d6df6:	4b33      	ldr	r3, [pc, #204]	; (d6ec4 <gmtime_r+0x124>)
   d6df8:	4d33      	ldr	r5, [pc, #204]	; (d6ec8 <gmtime_r+0x128>)
   d6dfa:	fb94 f5f5 	sdiv	r5, r4, r5
   d6dfe:	fb03 4405 	mla	r4, r3, r5, r4
   d6e02:	f648 62ac 	movw	r2, #36524	; 0x8eac
   d6e06:	fbb4 f2f2 	udiv	r2, r4, r2
   d6e0a:	4422      	add	r2, r4
   d6e0c:	f240 57b4 	movw	r7, #1460	; 0x5b4
   d6e10:	fbb4 f3f7 	udiv	r3, r4, r7
   d6e14:	1ad2      	subs	r2, r2, r3
   d6e16:	482d      	ldr	r0, [pc, #180]	; (d6ecc <gmtime_r+0x12c>)
   d6e18:	fbb4 f0f0 	udiv	r0, r4, r0
   d6e1c:	f648 6694 	movw	r6, #36500	; 0x8e94
   d6e20:	1a13      	subs	r3, r2, r0
   d6e22:	fbb3 f6f6 	udiv	r6, r3, r6
   d6e26:	4434      	add	r4, r6
   d6e28:	f240 126d 	movw	r2, #365	; 0x16d
   d6e2c:	fbb3 f0f2 	udiv	r0, r3, r2
   d6e30:	fbb3 f3f7 	udiv	r3, r3, r7
   d6e34:	1ae3      	subs	r3, r4, r3
   d6e36:	fb02 3310 	mls	r3, r2, r0, r3
   d6e3a:	2499      	movs	r4, #153	; 0x99
   d6e3c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   d6e40:	3202      	adds	r2, #2
   d6e42:	fbb2 f2f4 	udiv	r2, r2, r4
   d6e46:	2a0a      	cmp	r2, #10
   d6e48:	fb04 f402 	mul.w	r4, r4, r2
   d6e4c:	f104 0602 	add.w	r6, r4, #2
   d6e50:	f04f 0405 	mov.w	r4, #5
   d6e54:	fbb6 f4f4 	udiv	r4, r6, r4
   d6e58:	bf34      	ite	cc
   d6e5a:	2602      	movcc	r6, #2
   d6e5c:	f06f 0609 	mvncs.w	r6, #9
   d6e60:	4416      	add	r6, r2
   d6e62:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d6e66:	fb02 0505 	mla	r5, r2, r5, r0
   d6e6a:	1c5f      	adds	r7, r3, #1
   d6e6c:	2e01      	cmp	r6, #1
   d6e6e:	bf98      	it	ls
   d6e70:	3501      	addls	r5, #1
   d6e72:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   d6e76:	eba7 0704 	sub.w	r7, r7, r4
   d6e7a:	d302      	bcc.n	d6e82 <gmtime_r+0xe2>
   d6e7c:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   d6e80:	e014      	b.n	d6eac <gmtime_r+0x10c>
   d6e82:	0782      	lsls	r2, r0, #30
   d6e84:	d105      	bne.n	d6e92 <gmtime_r+0xf2>
   d6e86:	2464      	movs	r4, #100	; 0x64
   d6e88:	fbb0 f2f4 	udiv	r2, r0, r4
   d6e8c:	fb04 0212 	mls	r2, r4, r2, r0
   d6e90:	b94a      	cbnz	r2, d6ea6 <gmtime_r+0x106>
   d6e92:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d6e96:	fbb0 f4f2 	udiv	r4, r0, r2
   d6e9a:	fb02 0014 	mls	r0, r2, r4, r0
   d6e9e:	fab0 f280 	clz	r2, r0
   d6ea2:	0952      	lsrs	r2, r2, #5
   d6ea4:	e000      	b.n	d6ea8 <gmtime_r+0x108>
   d6ea6:	2201      	movs	r2, #1
   d6ea8:	333b      	adds	r3, #59	; 0x3b
   d6eaa:	441a      	add	r2, r3
   d6eac:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   d6eb0:	2300      	movs	r3, #0
   d6eb2:	61ca      	str	r2, [r1, #28]
   d6eb4:	614d      	str	r5, [r1, #20]
   d6eb6:	610e      	str	r6, [r1, #16]
   d6eb8:	60cf      	str	r7, [r1, #12]
   d6eba:	620b      	str	r3, [r1, #32]
   d6ebc:	4608      	mov	r0, r1
   d6ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6ec0:	00015180 	.word	0x00015180
   d6ec4:	fffdc54f 	.word	0xfffdc54f
   d6ec8:	00023ab1 	.word	0x00023ab1
   d6ecc:	00023ab0 	.word	0x00023ab0

000d6ed0 <__env_lock>:
   d6ed0:	4770      	bx	lr

000d6ed2 <__env_unlock>:
   d6ed2:	4770      	bx	lr

000d6ed4 <dynalib_user>:
   d6ed4:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d6ee4:	0000 0000                                   ....

000d6ee8 <_ZTV16JsonWriterStaticILj256EE>:
	...
   d6ef0:	40b5 000d 40c9 000d 6f4d 7369 7574 6572     .@...@..Moisture
   d6f00:	5400 6d65 6570 6172 7574 6572 5000 616c     .Temperature.Pla
   d6f10:	746e 5720 7461 7265 6465 4100 2074 7325     nt Watered.At %s
   d6f20:	7420 6568 6d20 696f 7473 7275 2065 6572      the moisture re
   d6f30:	6461 6e69 2067 7369 2520 2069 000a 6854     ading is %i ..Th
   d6f40:	2065 6974 656d 6920 2073 7325 0a20 2500     e time is %s ..%
   d6f50:	0064 6e65 2d76 6176 736c 0000               d.env-vals..

000d6f5c <_ZTV10JsonBuffer>:
	...
   d6f64:	4475 000d 4491 000d                         uD...D..

000d6f6c <_ZTV10JsonWriter>:
	...
   d6f74:	44a5 000d 44b9 000d 6c25 0075 3025 7834     .D...D..%lu.%04x
   d6f84:	5c00 2575 3430 0058 7274 6575 6600 6c61     .\u%04X.true.fal
   d6f94:	6573 2500 2a2e 0066 6625 2500 2a2e 666c     se.%.*f.%f.%.*lf
   d6fa4:	2500 666c 0000 0000                         .%lf....

000d6fac <_ZTVN5spark13EthernetClassE>:
	...
   d6fb4:	4c2f 000d 4c25 000d 4c1b 000d 4c11 000d     /L..%L...L...L..
   d6fc4:	4c05 000d 4bf9 000d 4bed 000d 4be5 000d     .L...K...K...K..
   d6fd4:	4bdb 000d 4bd1 000d 5ea9 000d               .K...K...^..

000d6fe0 <_ZTV8SPIClass>:
	...
   d6fe8:	4c4d 000d 4c4f 000d 6162 6475 5300 7265     ML..OL..baud.Ser
   d6ff8:	6169 006c 6553 6972 6c61 0031 7974 6570     ial.Serial1.type
   d7008:	7000 7261 6d61 6300 646d 6900 0064 6e68     .param.cmd.id.hn
   d7018:	0064 7473 6d72 6600 6c69 0074 766c 006c     d.strm.filt.lvl.
   d7028:	6461 4864 6e61 6c64 7265 7200 6d65 766f     addHandler.remov
   d7038:	4865 6e61 6c64 7265 6500 756e 486d 6e61     eHandler.enumHan
   d7048:	6c64 7265 0073 534a 4e4f 7453 6572 6d61     dlers.JSONStream
   d7058:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   d7068:	3130 7530 0020 205d 2c00 0020 2928 203a     010u .] ., .(): 
   d7078:	2000 005b 6f63 6564 3d20 0020 6925 6400     . [.code = .%i.d
   d7088:	7465 6961 736c 3d20 0020 0a0d 6c00 006e     etails = ....ln.
   d7098:	6e66 6300 646f 0065 6564 6174 6c69 6e00     fn.code.detail.n
   d70a8:	6e6f 0065 7274 6361 0065 6e69 6f66 7700     one.trace.info.w
   d70b8:	7261 006e 7265 6f72 0072 6170 696e 0063     arn.error.panic.
   d70c8:	6c61 006c 2b25 3330 3a64 3025 7532 2500     all.%+03d:%02u.%
   d70d8:	2d59 6d25 252d 5464 4825 253a 3a4d 5325     Y-%m-%dT%H:%M:%S
   d70e8:	7a25 6100 6373 6974 656d 0000               %z.asctime..

000d70f4 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d70fc:	531d 000d 5323 000d 5367 000d 5331 000d     .S..#S..gS..1S..
   d710c:	531f 000d                                   .S..

000d7110 <_ZTV9IPAddress>:
	...
   d7118:	58b5 000d 58a5 000d 58a7 000d               .X...X...X..

000d7124 <_ZTV9USBSerial>:
	...
   d712c:	598d 000d 59dd 000d 59eb 000d 4f6d 000d     .Y...Y...Y..mO..
   d713c:	59c9 000d 598f 000d 59a5 000d 59d7 000d     .Y...Y...Y...Y..
   d714c:	59bb 000d 5989 000d                         .Y...Y..

000d7154 <_ZTV11USARTSerial>:
	...
   d715c:	5a99 000d 5ae9 000d 5af7 000d 4f6d 000d     .Z...Z...Z..mO..
   d716c:	5aad 000d 5acf 000d 5abb 000d 5ae3 000d     .Z...Z...Z...Z..
   d717c:	5a9b 000d 5a9f 000d                         .Z...Z..

000d7184 <_ZTV7TwoWire>:
	...
   d718c:	5bc5 000d 5c0f 000d 5be7 000d 5bc7 000d     .[...\...[...[..
   d719c:	5bef 000d 5bf7 000d 5bff 000d 5c07 000d     .[...[...[...\..

000d71ac <_ZTVN5spark9MeshClassE>:
	...
   d71b4:	5ca7 000d 5c9d 000d 5c93 000d 5c89 000d     .\...\...\...\..
   d71c4:	5c7d 000d 5c71 000d 5c65 000d 5c5d 000d     }\..q\..e\..]\..
   d71d4:	5c53 000d 5c49 000d 5ea9 000d               S\..I\...^..

000d71e0 <_ZTVN5spark9WiFiClassE>:
	...
   d71e8:	5e23 000d 5e19 000d 5e0f 000d 5dc5 000d     #^...^...^...]..
   d71f8:	5e03 000d 5df7 000d 5deb 000d 5de3 000d     .^...]...]...]..
   d7208:	5dd9 000d 5dcf 000d 5ea9 000d               .]...]...^..

000d7214 <_ZTVN5spark12NetworkClassE>:
	...
   d721c:	5e41 000d 5e4b 000d 5e55 000d 5e5f 000d     A^..K^..U^.._^..
   d722c:	5e69 000d 5e75 000d 5e81 000d 5e8d 000d     i^..u^...^...^..
   d723c:	5e95 000d 5e9f 000d 5ea9 000d               .^...^...^..

000d7248 <_ZSt7nothrow>:
	...

000d7249 <day_name.4725>:
   d7249:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   d7259:	6972 6153 4a74                                   riSat

000d725e <mon_name.4726>:
   d725e:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   d726e:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   d727e:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
   d728e:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
   d729e:	6425 000a                                   %d..

000d72a2 <_ctype_>:
   d72a2:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   d72b2:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d72c2:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   d72d2:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   d72e2:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   d72f2:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   d7302:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   d7312:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   d7322:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000d73a4 <__sf_fake_stdin>:
	...

000d73c4 <__sf_fake_stdout>:
	...

000d73e4 <__sf_fake_stderr>:
	...
   d7404:	0043 0000                                   C...

000d7408 <__month_lengths>:
   d7408:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   d7418:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d7428:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d7438:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   d7448:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d7458:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d7468:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
   d7478:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
   d7488:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
   d7498:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

000d74a4 <link_const_variable_data_end>:
   d74a4:	000d441d 	.word	0x000d441d
   d74a8:	000d4715 	.word	0x000d4715
   d74ac:	000d4c39 	.word	0x000d4c39
   d74b0:	000d4c9d 	.word	0x000d4c9d
   d74b4:	000d4f45 	.word	0x000d4f45
   d74b8:	000d50a1 	.word	0x000d50a1
   d74bc:	000d5199 	.word	0x000d5199
   d74c0:	000d51f1 	.word	0x000d51f1
   d74c4:	000d5d75 	.word	0x000d5d75
   d74c8:	000d5e2d 	.word	0x000d5e2d
   d74cc:	000d5f75 	.word	0x000d5f75
   d74d0:	000d6159 	.word	0x000d6159
   d74d4:	000d61dd 	.word	0x000d61dd
   d74d8:	000d62a1 	.word	0x000d62a1
   d74dc:	000d6365 	.word	0x000d6365
