
c:/Users/iotpa/Documents/jarvis/PlantWater/target/1.5.0/argon/PlantWater.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003544  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d7560  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000000d0  2003e270  000d7564  0001e270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000004b0  2003e340  2003e340  0002e340  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d7634  000d7634  00027634  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d765c  000d765c  0002765c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000f1088  00000000  00000000  00027660  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00012a8c  00000000  00000000  001186e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00022d82  00000000  00000000  0012b174  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000028d8  00000000  00000000  0014def6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004e60  00000000  00000000  001507ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00036a3b  00000000  00000000  0015562e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002cae1  00000000  00000000  0018c069  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00106d40  00000000  00000000  001b8b4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000df00  00000000  00000000  002bf88c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fb3f 	bl	d66b0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fb44 	bl	d66c6 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e270 	.word	0x2003e270
   d4048:	000d7564 	.word	0x000d7564
   d404c:	2003e340 	.word	0x2003e340
   d4050:	2003e340 	.word	0x2003e340
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 f955 	bl	d5308 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d755c 	.word	0x000d755c
   d4080:	000d7520 	.word	0x000d7520

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b82c 	b.w	d40e0 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f977 	bl	d437c <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 b8fb 	b.w	d528c <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 bd7d 	b.w	d4b94 <malloc>

000d409a <_ZdlPv>:
   d409a:	f000 bd83 	b.w	d4ba4 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 bd81 	b.w	d4ba4 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr
	...

000d40b4 <_ZN16JsonWriterStaticILj256EED1Ev>:
 * variable.
 *
 * @param BUFFER_SIZE The size of the buffer to reserve.
 */
template <size_t BUFFER_SIZE>
class JsonWriterStatic : public JsonWriter {
   d40b4:	b510      	push	{r4, lr}
   d40b6:	4b03      	ldr	r3, [pc, #12]	; (d40c4 <_ZN16JsonWriterStaticILj256EED1Ev+0x10>)
   d40b8:	6003      	str	r3, [r0, #0]
   d40ba:	4604      	mov	r4, r0
   d40bc:	f000 fa14 	bl	d44e8 <_ZN10JsonWriterD1Ev>
   d40c0:	4620      	mov	r0, r4
   d40c2:	bd10      	pop	{r4, pc}
   d40c4:	000d6f34 	.word	0x000d6f34

000d40c8 <_ZN16JsonWriterStaticILj256EED0Ev>:
   d40c8:	b510      	push	{r4, lr}
   d40ca:	4604      	mov	r4, r0
   d40cc:	f7ff fff2 	bl	d40b4 <_ZN16JsonWriterStaticILj256EED1Ev>
   d40d0:	4620      	mov	r0, r4
   d40d2:	f44f 7198 	mov.w	r1, #304	; 0x130
   d40d6:	f002 f84b 	bl	d6170 <_ZdlPvj>
   d40da:	4620      	mov	r0, r4
   d40dc:	bd10      	pop	{r4, pc}
	...

000d40e0 <setup>:
char currentTime[25];
char current[9];
String t;
String t2;

void setup() {
   d40e0:	b510      	push	{r4, lr}
  Serial.begin(9600);
   d40e2:	f001 fcd5 	bl	d5a90 <_Z16_fetch_usbserialv>
   d40e6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40ea:	f001 fcc5 	bl	d5a78 <_ZN9USBSerial5beginEl>
  pinMode(soilPin,INPUT);
   d40ee:	4b16      	ldr	r3, [pc, #88]	; (d4148 <setup+0x68>)
  pinMode(pumpPin,OUTPUT);
   d40f0:	4c16      	ldr	r4, [pc, #88]	; (d414c <setup+0x6c>)
String t;
String t2;

void setup() {
  Serial.begin(9600);
  pinMode(soilPin,INPUT);
   d40f2:	8818      	ldrh	r0, [r3, #0]
   d40f4:	2100      	movs	r1, #0
   d40f6:	f001 ff8b 	bl	d6010 <pinMode>
  pinMode(pumpPin,OUTPUT);
   d40fa:	2101      	movs	r1, #1
   d40fc:	8820      	ldrh	r0, [r4, #0]
   d40fe:	f001 ff87 	bl	d6010 <pinMode>
  digitalWrite(pumpPin,LOW);
   d4102:	2100      	movs	r1, #0
   d4104:	8820      	ldrh	r0, [r4, #0]
   d4106:	f001 ff94 	bl	d6032 <digitalWrite>
  Time.zone(-6); // set timezone to MDT
   d410a:	eeb9 0a08 	vmov.f32	s0, #152	; 0xc0c00000 -6.0
   d410e:	f000 ffff 	bl	d5110 <_ZN9TimeClass4zoneEf>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4112:	f000 fd17 	bl	d4b44 <spark_cloud_flag_connected>
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
    {
        if (!connected()) {
   d4116:	b110      	cbz	r0, d411e <setup+0x3e>
            return false;
        }
        return spark_sync_time(NULL);
   d4118:	2000      	movs	r0, #0
   d411a:	f000 fd23 	bl	d4b64 <spark_sync_time>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d411e:	2300      	movs	r3, #0
   d4120:	2202      	movs	r2, #2
   d4122:	490b      	ldr	r1, [pc, #44]	; (d4150 <setup+0x70>)
   d4124:	480b      	ldr	r0, [pc, #44]	; (d4154 <setup+0x74>)
   d4126:	f000 fcfd 	bl	d4b24 <spark_variable>
   d412a:	2300      	movs	r3, #0
   d412c:	2202      	movs	r2, #2
   d412e:	490a      	ldr	r1, [pc, #40]	; (d4158 <setup+0x78>)
   d4130:	480a      	ldr	r0, [pc, #40]	; (d415c <setup+0x7c>)
   d4132:	f000 fcf7 	bl	d4b24 <spark_variable>
   d4136:	2300      	movs	r3, #0
   d4138:	2201      	movs	r2, #1
   d413a:	4909      	ldr	r1, [pc, #36]	; (d4160 <setup+0x80>)
   d413c:	4809      	ldr	r0, [pc, #36]	; (d4164 <setup+0x84>)
  Particle.syncTime(); 
  Particle.variable("Moisture", moist);
  Particle.variable("Temperature", temp);
  Particle.variable("Plant Watered", watered);
}
   d413e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4142:	f000 bcef 	b.w	d4b24 <spark_variable>
   d4146:	bf00      	nop
   d4148:	2003e274 	.word	0x2003e274
   d414c:	2003e27c 	.word	0x2003e27c
   d4150:	2003e37c 	.word	0x2003e37c
   d4154:	000d6f3c 	.word	0x000d6f3c
   d4158:	2003e350 	.word	0x2003e350
   d415c:	000d6f45 	.word	0x000d6f45
   d4160:	2003e378 	.word	0x2003e378
   d4164:	000d6f51 	.word	0x000d6f51

000d4168 <_Z10waterPlanti>:
  createEventPayLoad(moist,temp,watered);

  delay(soilDelay);
}

bool waterPlant(int moistVal) {
   d4168:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(moistVal > threshold) {
   d416a:	4c16      	ldr	r4, [pc, #88]	; (d41c4 <_Z10waterPlanti+0x5c>)
   d416c:	4d16      	ldr	r5, [pc, #88]	; (d41c8 <_Z10waterPlanti+0x60>)
   d416e:	6823      	ldr	r3, [r4, #0]
   d4170:	4283      	cmp	r3, r0
   d4172:	da1b      	bge.n	d41ac <_Z10waterPlanti+0x44>
    Serial.printlnf("The %i > %i, turning on pump", moist, threshold);
   d4174:	f001 fc8c 	bl	d5a90 <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d4178:	6823      	ldr	r3, [r4, #0]
   d417a:	4a14      	ldr	r2, [pc, #80]	; (d41cc <_Z10waterPlanti+0x64>)
   d417c:	9300      	str	r3, [sp, #0]
   d417e:	2101      	movs	r1, #1
   d4180:	682b      	ldr	r3, [r5, #0]
    delay(1000);
    digitalWrite(pumpPin,HIGH);
   d4182:	4c13      	ldr	r4, [pc, #76]	; (d41d0 <_Z10waterPlanti+0x68>)
   d4184:	f000 ff73 	bl	d506e <_ZN5Print11printf_implEbPKcz>
}

bool waterPlant(int moistVal) {
  if(moistVal > threshold) {
    Serial.printlnf("The %i > %i, turning on pump", moist, threshold);
    delay(1000);
   d4188:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d418c:	f001 f830 	bl	d51f0 <delay>
    digitalWrite(pumpPin,HIGH);
   d4190:	2101      	movs	r1, #1
   d4192:	8820      	ldrh	r0, [r4, #0]
   d4194:	f001 ff4d 	bl	d6032 <digitalWrite>
    delay(waterTime);
   d4198:	4b0e      	ldr	r3, [pc, #56]	; (d41d4 <_Z10waterPlanti+0x6c>)
   d419a:	6818      	ldr	r0, [r3, #0]
   d419c:	f001 f828 	bl	d51f0 <delay>
    digitalWrite(pumpPin,LOW);
   d41a0:	8820      	ldrh	r0, [r4, #0]
   d41a2:	2100      	movs	r1, #0
   d41a4:	f001 ff45 	bl	d6032 <digitalWrite>
   d41a8:	2001      	movs	r0, #1
   d41aa:	e009      	b.n	d41c0 <_Z10waterPlanti+0x58>
    return true;
  }
  else
  {
    Serial.printlnf("The %i < %i no water needed", moist, threshold);
   d41ac:	f001 fc70 	bl	d5a90 <_Z16_fetch_usbserialv>
   d41b0:	6823      	ldr	r3, [r4, #0]
   d41b2:	9300      	str	r3, [sp, #0]
   d41b4:	4a08      	ldr	r2, [pc, #32]	; (d41d8 <_Z10waterPlanti+0x70>)
   d41b6:	682b      	ldr	r3, [r5, #0]
   d41b8:	2101      	movs	r1, #1
   d41ba:	f000 ff58 	bl	d506e <_ZN5Print11printf_implEbPKcz>
    return false;
   d41be:	2000      	movs	r0, #0
  }
    
}
   d41c0:	b003      	add	sp, #12
   d41c2:	bd30      	pop	{r4, r5, pc}
   d41c4:	2003e270 	.word	0x2003e270
   d41c8:	2003e37c 	.word	0x2003e37c
   d41cc:	000d6f5f 	.word	0x000d6f5f
   d41d0:	2003e27c 	.word	0x2003e27c
   d41d4:	2003e280 	.word	0x2003e280
   d41d8:	000d6f7c 	.word	0x000d6f7c

000d41dc <_Z10printMoisti>:


void printMoist(int moistVal) {
   d41dc:	b570      	push	{r4, r5, r6, lr}
   d41de:	b086      	sub	sp, #24
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   d41e0:	f000 fff5 	bl	d51ce <_ZN9TimeClass3nowEv>
  t = Time.timeStr(); 
   d41e4:	4c1f      	ldr	r4, [pc, #124]	; (d4264 <_Z10printMoisti+0x88>)
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d41e6:	4e20      	ldr	r6, [pc, #128]	; (d4268 <_Z10printMoisti+0x8c>)
   d41e8:	4d20      	ldr	r5, [pc, #128]	; (d426c <_Z10printMoisti+0x90>)
   d41ea:	4601      	mov	r1, r0
   d41ec:	a802      	add	r0, sp, #8
   d41ee:	f000 ffab 	bl	d5148 <_ZN9TimeClass7timeStrEl>
   d41f2:	a902      	add	r1, sp, #8
   d41f4:	4620      	mov	r0, r4
   d41f6:	f000 fe53 	bl	d4ea0 <_ZN6StringaSEOS_>
   d41fa:	a802      	add	r0, sp, #8
   d41fc:	f000 fdd9 	bl	d4db2 <_ZN6StringD1Ev>
   d4200:	4631      	mov	r1, r6
   d4202:	4620      	mov	r0, r4
   d4204:	2300      	movs	r3, #0
   d4206:	2219      	movs	r2, #25
   d4208:	f000 fe76 	bl	d4ef8 <_ZNK6String8getBytesEPhjj>
  t.toCharArray(currentTime,25);
  t2 = t.substring(11,19);
   d420c:	4621      	mov	r1, r4
   d420e:	4c18      	ldr	r4, [pc, #96]	; (d4270 <_Z10printMoisti+0x94>)
   d4210:	2313      	movs	r3, #19
   d4212:	220b      	movs	r2, #11
   d4214:	a802      	add	r0, sp, #8
   d4216:	f000 fe87 	bl	d4f28 <_ZNK6String9substringEjj>
   d421a:	a902      	add	r1, sp, #8
   d421c:	4620      	mov	r0, r4
   d421e:	f000 fe3f 	bl	d4ea0 <_ZN6StringaSEOS_>
   d4222:	a802      	add	r0, sp, #8
   d4224:	f000 fdc5 	bl	d4db2 <_ZN6StringD1Ev>
   d4228:	2300      	movs	r3, #0
   d422a:	2209      	movs	r2, #9
   d422c:	4629      	mov	r1, r5
   d422e:	4620      	mov	r0, r4
   d4230:	f000 fe62 	bl	d4ef8 <_ZNK6String8getBytesEPhjj>
  t2.toCharArray(current,9);
  Serial.println(t2);
   d4234:	f001 fc2c 	bl	d5a90 <_Z16_fetch_usbserialv>
   d4238:	6821      	ldr	r1, [r4, #0]
   d423a:	f000 feee 	bl	d501a <_ZN5Print7printlnEPKc>
  Serial.printf("At %s the moisture reading is %i \n",currentTime,moist);
   d423e:	f001 fc27 	bl	d5a90 <_Z16_fetch_usbserialv>
   d4242:	4b0c      	ldr	r3, [pc, #48]	; (d4274 <_Z10printMoisti+0x98>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d4244:	4a0c      	ldr	r2, [pc, #48]	; (d4278 <_Z10printMoisti+0x9c>)
   d4246:	681b      	ldr	r3, [r3, #0]
   d4248:	9300      	str	r3, [sp, #0]
   d424a:	2100      	movs	r1, #0
   d424c:	4633      	mov	r3, r6
   d424e:	f000 ff0e 	bl	d506e <_ZN5Print11printf_implEbPKcz>
  //Serial.printf("At %s the moisture reading is %i \n",Time.timeStr().c_str(),moist);
  Serial.printf("The time is %s \n",current);
   d4252:	f001 fc1d 	bl	d5a90 <_Z16_fetch_usbserialv>
   d4256:	462b      	mov	r3, r5
   d4258:	4a08      	ldr	r2, [pc, #32]	; (d427c <_Z10printMoisti+0xa0>)
   d425a:	2100      	movs	r1, #0
   d425c:	f000 ff07 	bl	d506e <_ZN5Print11printf_implEbPKcz>
}
   d4260:	b006      	add	sp, #24
   d4262:	bd70      	pop	{r4, r5, r6, pc}
   d4264:	2003e368 	.word	0x2003e368
   d4268:	2003e380 	.word	0x2003e380
   d426c:	2003e344 	.word	0x2003e344
   d4270:	2003e354 	.word	0x2003e354
   d4274:	2003e37c 	.word	0x2003e37c
   d4278:	000d6f98 	.word	0x000d6f98
   d427c:	000d6fbb 	.word	0x000d6fbb

000d4280 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4280:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4282:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4284:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d4286:	b17c      	cbz	r4, d42a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4288:	6863      	ldr	r3, [r4, #4]
   d428a:	3b01      	subs	r3, #1
   d428c:	6063      	str	r3, [r4, #4]
   d428e:	b95b      	cbnz	r3, d42a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d4290:	6823      	ldr	r3, [r4, #0]
   d4292:	4620      	mov	r0, r4
   d4294:	689b      	ldr	r3, [r3, #8]
   d4296:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4298:	68a3      	ldr	r3, [r4, #8]
   d429a:	3b01      	subs	r3, #1
   d429c:	60a3      	str	r3, [r4, #8]
   d429e:	b91b      	cbnz	r3, d42a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d42a0:	6823      	ldr	r3, [r4, #0]
   d42a2:	4620      	mov	r0, r4
   d42a4:	68db      	ldr	r3, [r3, #12]
   d42a6:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d42a8:	4628      	mov	r0, r5
   d42aa:	bd38      	pop	{r3, r4, r5, pc}

000d42ac <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>:
	 *
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
   d42ac:	b570      	push	{r4, r5, r6, lr}
   d42ae:	4604      	mov	r4, r0
   d42b0:	460e      	mov	r6, r1
   d42b2:	4615      	mov	r5, r2
		insertCheckSeparator();
   d42b4:	f000 fa20 	bl	d46f8 <_ZN10JsonWriter20insertCheckSeparatorEv>
	 * @brief Inserts a quoted string value. This escapes special characters and encodes utf-8.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const char *value) { insertString(value, true); }
   d42b8:	2201      	movs	r2, #1
   d42ba:	4631      	mov	r1, r6
   d42bc:	4620      	mov	r0, r4
   d42be:	f000 f98f 	bl	d45e0 <_ZN10JsonWriter12insertStringEPKcb>
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
   d42c2:	4620      	mov	r0, r4
   d42c4:	213a      	movs	r1, #58	; 0x3a
   d42c6:	f000 f93f 	bl	d4548 <_ZN10JsonWriter10insertCharEc>
	 * @brief Inserts an integer value.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separators between items.
	 */
	void insertValue(int value) { insertsprintf("%d", value); }
   d42ca:	462a      	mov	r2, r5
   d42cc:	4620      	mov	r0, r4
   d42ce:	4902      	ldr	r1, [pc, #8]	; (d42d8 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_+0x2c>)
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
		insertValue(value);
	}
   d42d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	 * @brief Inserts an integer value.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separators between items.
	 */
	void insertValue(int value) { insertsprintf("%d", value); }
   d42d4:	f000 b977 	b.w	d45c6 <_ZN10JsonWriter13insertsprintfEPKcz>
   d42d8:	000d6fcc 	.word	0x000d6fcc

000d42dc <_Z18createEventPayLoadiib>:

void createEventPayLoad(int moistValue, int tempValue, bool waterED) {
   d42dc:	b570      	push	{r4, r5, r6, lr}
   d42de:	b0d2      	sub	sp, #328	; 0x148
   d42e0:	4606      	mov	r6, r0
   d42e2:	460d      	mov	r5, r1
   d42e4:	4614      	mov	r4, r2
 * @param BUFFER_SIZE The size of the buffer to reserve.
 */
template <size_t BUFFER_SIZE>
class JsonWriterStatic : public JsonWriter {
public:
	explicit JsonWriterStatic() : JsonWriter(staticBuffer, BUFFER_SIZE) {};
   d42e6:	a912      	add	r1, sp, #72	; 0x48
   d42e8:	f44f 7280 	mov.w	r2, #256	; 0x100
   d42ec:	a806      	add	r0, sp, #24
   d42ee:	f000 f919 	bl	d4524 <_ZN10JsonWriterC1EPcj>
   d42f2:	4b1c      	ldr	r3, [pc, #112]	; (d4364 <_Z18createEventPayLoadiib+0x88>)
   d42f4:	9306      	str	r3, [sp, #24]
	void init();

	/**
	 * @brief Start a new JSON object. Make sure you finish it with finishObjectOrArray()
	 */
	bool startObject() { return startObjectOrArray('{', '}'); };
   d42f6:	227d      	movs	r2, #125	; 0x7d
   d42f8:	217b      	movs	r1, #123	; 0x7b
   d42fa:	a806      	add	r0, sp, #24
   d42fc:	f000 fa07 	bl	d470e <_ZN10JsonWriter18startObjectOrArrayEcc>
  JsonWriterStatic<256> jw;
  {
    JsonWriterAutoObject obj(&jw);

    jw.insertKeyValue("Moisture", moistValue);
   d4300:	4632      	mov	r2, r6
   d4302:	a806      	add	r0, sp, #24
   d4304:	4918      	ldr	r1, [pc, #96]	; (d4368 <_Z18createEventPayLoadiib+0x8c>)
   d4306:	f7ff ffd1 	bl	d42ac <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
    jw.insertKeyValue("Temperature", tempValue);
   d430a:	462a      	mov	r2, r5
   d430c:	4917      	ldr	r1, [pc, #92]	; (d436c <_Z18createEventPayLoadiib+0x90>)
   d430e:	a806      	add	r0, sp, #24
   d4310:	f7ff ffcc 	bl	d42ac <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
   d4314:	a806      	add	r0, sp, #24
   d4316:	f000 f9ef 	bl	d46f8 <_ZN10JsonWriter20insertCheckSeparatorEv>
	 * @brief Inserts a quoted string value. This escapes special characters and encodes utf-8.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const char *value) { insertString(value, true); }
   d431a:	2201      	movs	r2, #1
   d431c:	a806      	add	r0, sp, #24
   d431e:	4914      	ldr	r1, [pc, #80]	; (d4370 <_Z18createEventPayLoadiib+0x94>)
   d4320:	f000 f95e 	bl	d45e0 <_ZN10JsonWriter12insertStringEPKcb>
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
   d4324:	a806      	add	r0, sp, #24
   d4326:	213a      	movs	r1, #58	; 0x3a
   d4328:	f000 f90e 	bl	d4548 <_ZN10JsonWriter10insertCharEc>
		insertValue(value);
   d432c:	4621      	mov	r1, r4
   d432e:	a806      	add	r0, sp, #24
   d4330:	f000 fa06 	bl	d4740 <_ZN10JsonWriter11insertValueEb>

	/**
	 * @brief End the object
	 */
	~JsonWriterAutoObject() {
		jw->finishObjectOrArray();
   d4334:	a806      	add	r0, sp, #24
   d4336:	f000 f915 	bl	d4564 <_ZN10JsonWriter19finishObjectOrArrayEv>
   d433a:	9b07      	ldr	r3, [sp, #28]
   d433c:	9303      	str	r3, [sp, #12]
   d433e:	4b0d      	ldr	r3, [pc, #52]	; (d4374 <_Z18createEventPayLoadiib+0x98>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4340:	9a03      	ldr	r2, [sp, #12]
   d4342:	781b      	ldrb	r3, [r3, #0]
   d4344:	490c      	ldr	r1, [pc, #48]	; (d4378 <_Z18createEventPayLoadiib+0x9c>)
   d4346:	f88d 3000 	strb.w	r3, [sp]
   d434a:	a804      	add	r0, sp, #16
   d434c:	233c      	movs	r3, #60	; 0x3c
   d434e:	f001 f949 	bl	d55e4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4352:	a805      	add	r0, sp, #20
   d4354:	f7ff ff94 	bl	d4280 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  //Serial.printf("At %s the moisture reading is %i \n",Time.timeStr().c_str(),moist);
  Serial.printf("The time is %s \n",current);
}

void createEventPayLoad(int moistValue, int tempValue, bool waterED) {
  JsonWriterStatic<256> jw;
   d4358:	a806      	add	r0, sp, #24
   d435a:	f7ff feab 	bl	d40b4 <_ZN16JsonWriterStaticILj256EED1Ev>
    jw.insertKeyValue("Moisture", moistValue);
    jw.insertKeyValue("Temperature", tempValue);
    jw.insertKeyValue("Plant Watered", waterED);
  }
  Particle.publish("env-vals",jw.getBuffer(), PRIVATE);
   d435e:	b052      	add	sp, #328	; 0x148
   d4360:	bd70      	pop	{r4, r5, r6, pc}
   d4362:	bf00      	nop
   d4364:	000d6f34 	.word	0x000d6f34
   d4368:	000d6f3c 	.word	0x000d6f3c
   d436c:	000d6f45 	.word	0x000d6f45
   d4370:	000d6f51 	.word	0x000d6f51
   d4374:	2003e364 	.word	0x2003e364
   d4378:	000d6fcf 	.word	0x000d6fcf

000d437c <loop>:
  Particle.variable("Moisture", moist);
  Particle.variable("Temperature", temp);
  Particle.variable("Plant Watered", watered);
}

void loop() {
   d437c:	b5f0      	push	{r4, r5, r6, r7, lr}
  moist = analogRead(soilPin);
   d437e:	4b2e      	ldr	r3, [pc, #184]	; (d4438 <loop+0xbc>)
   d4380:	4c2e      	ldr	r4, [pc, #184]	; (d443c <loop+0xc0>)
   d4382:	8818      	ldrh	r0, [r3, #0]
  watered = waterPlant(moist);
   d4384:	4e2e      	ldr	r6, [pc, #184]	; (d4440 <loop+0xc4>)

  temp = analogRead(tempPin);
   d4386:	4d2f      	ldr	r5, [pc, #188]	; (d4444 <loop+0xc8>)
   d4388:	4f2f      	ldr	r7, [pc, #188]	; (d4448 <loop+0xcc>)
  Particle.variable("Moisture", moist);
  Particle.variable("Temperature", temp);
  Particle.variable("Plant Watered", watered);
}

void loop() {
   d438a:	b089      	sub	sp, #36	; 0x24
  moist = analogRead(soilPin);
   d438c:	f001 fe6a 	bl	d6064 <analogRead>
   d4390:	6020      	str	r0, [r4, #0]
  watered = waterPlant(moist);
   d4392:	f7ff fee9 	bl	d4168 <_Z10waterPlanti>

  temp = analogRead(tempPin);
   d4396:	4b2d      	ldr	r3, [pc, #180]	; (d444c <loop+0xd0>)
  Particle.variable("Plant Watered", watered);
}

void loop() {
  moist = analogRead(soilPin);
  watered = waterPlant(moist);
   d4398:	7030      	strb	r0, [r6, #0]

  temp = analogRead(tempPin);
   d439a:	8818      	ldrh	r0, [r3, #0]
   d439c:	f001 fe62 	bl	d6064 <analogRead>
   d43a0:	6028      	str	r0, [r5, #0]
  printMoist(moist);
   d43a2:	6820      	ldr	r0, [r4, #0]
   d43a4:	f7ff ff1a 	bl	d41dc <_Z10printMoisti>
  Particle.publish("Moisture", String(moist),PRIVATE);
   d43a8:	6821      	ldr	r1, [r4, #0]
   d43aa:	220a      	movs	r2, #10
   d43ac:	a804      	add	r0, sp, #16
   d43ae:	f000 fd90 	bl	d4ed2 <_ZN6StringC1Eih>
   d43b2:	783b      	ldrb	r3, [r7, #0]
   d43b4:	9a04      	ldr	r2, [sp, #16]
   d43b6:	4926      	ldr	r1, [pc, #152]	; (d4450 <loop+0xd4>)
   d43b8:	f88d 3000 	strb.w	r3, [sp]
   d43bc:	a802      	add	r0, sp, #8
   d43be:	233c      	movs	r3, #60	; 0x3c
   d43c0:	f001 f910 	bl	d55e4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d43c4:	a803      	add	r0, sp, #12
   d43c6:	f7ff ff5b 	bl	d4280 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d43ca:	a804      	add	r0, sp, #16
   d43cc:	f000 fcf1 	bl	d4db2 <_ZN6StringD1Ev>
  Particle.publish("Temperature", String(temp),PRIVATE);
   d43d0:	6829      	ldr	r1, [r5, #0]
   d43d2:	220a      	movs	r2, #10
   d43d4:	a804      	add	r0, sp, #16
   d43d6:	f000 fd7c 	bl	d4ed2 <_ZN6StringC1Eih>
   d43da:	783b      	ldrb	r3, [r7, #0]
   d43dc:	9a04      	ldr	r2, [sp, #16]
   d43de:	491d      	ldr	r1, [pc, #116]	; (d4454 <loop+0xd8>)
   d43e0:	f88d 3000 	strb.w	r3, [sp]
   d43e4:	a802      	add	r0, sp, #8
   d43e6:	233c      	movs	r3, #60	; 0x3c
   d43e8:	f001 f8fc 	bl	d55e4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d43ec:	a803      	add	r0, sp, #12
   d43ee:	f7ff ff47 	bl	d4280 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d43f2:	a804      	add	r0, sp, #16
   d43f4:	f000 fcdd 	bl	d4db2 <_ZN6StringD1Ev>
  Particle.publish("Plant Watered", String(watered),PRIVATE);
   d43f8:	7831      	ldrb	r1, [r6, #0]
   d43fa:	220a      	movs	r2, #10
   d43fc:	a804      	add	r0, sp, #16
   d43fe:	f000 fd68 	bl	d4ed2 <_ZN6StringC1Eih>
   d4402:	783b      	ldrb	r3, [r7, #0]
   d4404:	9a04      	ldr	r2, [sp, #16]
   d4406:	4914      	ldr	r1, [pc, #80]	; (d4458 <loop+0xdc>)
   d4408:	f88d 3000 	strb.w	r3, [sp]
   d440c:	a802      	add	r0, sp, #8
   d440e:	233c      	movs	r3, #60	; 0x3c
   d4410:	f001 f8e8 	bl	d55e4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4414:	a803      	add	r0, sp, #12
   d4416:	f7ff ff33 	bl	d4280 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d441a:	a804      	add	r0, sp, #16
   d441c:	f000 fcc9 	bl	d4db2 <_ZN6StringD1Ev>
  createEventPayLoad(moist,temp,watered);
   d4420:	7832      	ldrb	r2, [r6, #0]
   d4422:	6829      	ldr	r1, [r5, #0]
   d4424:	6820      	ldr	r0, [r4, #0]
   d4426:	f7ff ff59 	bl	d42dc <_Z18createEventPayLoadiib>

  delay(soilDelay);
   d442a:	4b0c      	ldr	r3, [pc, #48]	; (d445c <loop+0xe0>)
   d442c:	6818      	ldr	r0, [r3, #0]
   d442e:	f000 fedf 	bl	d51f0 <delay>
}
   d4432:	b009      	add	sp, #36	; 0x24
   d4434:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4436:	bf00      	nop
   d4438:	2003e274 	.word	0x2003e274
   d443c:	2003e37c 	.word	0x2003e37c
   d4440:	2003e378 	.word	0x2003e378
   d4444:	2003e350 	.word	0x2003e350
   d4448:	2003e364 	.word	0x2003e364
   d444c:	2003e278 	.word	0x2003e278
   d4450:	000d6f3c 	.word	0x000d6f3c
   d4454:	000d6f45 	.word	0x000d6f45
   d4458:	000d6f51 	.word	0x000d6f51
   d445c:	2003e284 	.word	0x2003e284

000d4460 <_GLOBAL__sub_I_soilPin>:
    jw.insertKeyValue("Moisture", moistValue);
    jw.insertKeyValue("Temperature", tempValue);
    jw.insertKeyValue("Plant Watered", waterED);
  }
  Particle.publish("env-vals",jw.getBuffer(), PRIVATE);
   d4460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4462:	4b0f      	ldr	r3, [pc, #60]	; (d44a0 <_GLOBAL__sub_I_soilPin+0x40>)
int tempPin = A3;
int temp;

char currentTime[25];
char current[9];
String t;
   d4464:	4f0f      	ldr	r7, [pc, #60]	; (d44a4 <_GLOBAL__sub_I_soilPin+0x44>)
   d4466:	4c10      	ldr	r4, [pc, #64]	; (d44a8 <_GLOBAL__sub_I_soilPin+0x48>)
   d4468:	4e10      	ldr	r6, [pc, #64]	; (d44ac <_GLOBAL__sub_I_soilPin+0x4c>)
   d446a:	4d11      	ldr	r5, [pc, #68]	; (d44b0 <_GLOBAL__sub_I_soilPin+0x50>)
   d446c:	2201      	movs	r2, #1
   d446e:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4470:	f000 f984 	bl	d477c <HAL_Pin_Map>
   d4474:	4639      	mov	r1, r7
   d4476:	4620      	mov	r0, r4
   d4478:	f000 fce2 	bl	d4e40 <_ZN6StringC1EPK19__FlashStringHelper>
   d447c:	4620      	mov	r0, r4
String t2;
   d447e:	4c0d      	ldr	r4, [pc, #52]	; (d44b4 <_GLOBAL__sub_I_soilPin+0x54>)
int tempPin = A3;
int temp;

char currentTime[25];
char current[9];
String t;
   d4480:	4632      	mov	r2, r6
   d4482:	4629      	mov	r1, r5
   d4484:	f001 fe66 	bl	d6154 <__aeabi_atexit>
String t2;
   d4488:	4639      	mov	r1, r7
   d448a:	4620      	mov	r0, r4
   d448c:	f000 fcd8 	bl	d4e40 <_ZN6StringC1EPK19__FlashStringHelper>
   d4490:	4632      	mov	r2, r6
   d4492:	4629      	mov	r1, r5
   d4494:	4620      	mov	r0, r4
    jw.insertKeyValue("Moisture", moistValue);
    jw.insertKeyValue("Temperature", tempValue);
    jw.insertKeyValue("Plant Watered", waterED);
  }
  Particle.publish("env-vals",jw.getBuffer(), PRIVATE);
   d4496:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
int temp;

char currentTime[25];
char current[9];
String t;
String t2;
   d449a:	f001 be5b 	b.w	d6154 <__aeabi_atexit>
   d449e:	bf00      	nop
   d44a0:	2003e364 	.word	0x2003e364
   d44a4:	000d7110 	.word	0x000d7110
   d44a8:	2003e368 	.word	0x2003e368
   d44ac:	2003e340 	.word	0x2003e340
   d44b0:	000d4db3 	.word	0x000d4db3
   d44b4:	2003e354 	.word	0x2003e354

000d44b8 <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d44b8:	b510      	push	{r4, lr}
   d44ba:	4b05      	ldr	r3, [pc, #20]	; (d44d0 <_ZN10JsonBufferD1Ev+0x18>)
   d44bc:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   d44be:	7c03      	ldrb	r3, [r0, #16]


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d44c0:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   d44c2:	b91b      	cbnz	r3, d44cc <_ZN10JsonBufferD1Ev+0x14>
   d44c4:	6840      	ldr	r0, [r0, #4]
   d44c6:	b108      	cbz	r0, d44cc <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   d44c8:	f000 fb6c 	bl	d4ba4 <free>
	}
}
   d44cc:	4620      	mov	r0, r4
   d44ce:	bd10      	pop	{r4, pc}
   d44d0:	000d6fe0 	.word	0x000d6fe0

000d44d4 <_ZN10JsonBufferD0Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d44d4:	b510      	push	{r4, lr}
   d44d6:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}
   d44d8:	f7ff ffee 	bl	d44b8 <_ZN10JsonBufferD1Ev>
   d44dc:	4620      	mov	r0, r4
   d44de:	2114      	movs	r1, #20
   d44e0:	f001 fe46 	bl	d6170 <_ZdlPvj>
   d44e4:	4620      	mov	r0, r4
   d44e6:	bd10      	pop	{r4, pc}

000d44e8 <_ZN10JsonWriterD1Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
   d44e8:	b510      	push	{r4, lr}
   d44ea:	4b03      	ldr	r3, [pc, #12]	; (d44f8 <_ZN10JsonWriterD1Ev+0x10>)
   d44ec:	6003      	str	r3, [r0, #0]
   d44ee:	4604      	mov	r4, r0
   d44f0:	f7ff ffe2 	bl	d44b8 <_ZN10JsonBufferD1Ev>

}
   d44f4:	4620      	mov	r0, r4
   d44f6:	bd10      	pop	{r4, pc}
   d44f8:	000d6ff0 	.word	0x000d6ff0

000d44fc <_ZN10JsonWriterD0Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
   d44fc:	b510      	push	{r4, lr}
   d44fe:	4604      	mov	r4, r0

}
   d4500:	f7ff fff2 	bl	d44e8 <_ZN10JsonWriterD1Ev>
   d4504:	4620      	mov	r0, r4
   d4506:	2130      	movs	r1, #48	; 0x30
   d4508:	f001 fe32 	bl	d6170 <_ZdlPvj>
   d450c:	4620      	mov	r0, r4
   d450e:	bd10      	pop	{r4, pc}

000d4510 <_ZN10JsonWriter4initEv>:
	init();
}

void JsonWriter::init() {
	// Save start of insertion point for later
	offset = 0;
   d4510:	2300      	movs	r3, #0

	contextIndex = 0;
	context[contextIndex].isFirst = true;
   d4512:	2201      	movs	r2, #1
	init();
}

void JsonWriter::init() {
	// Save start of insertion point for later
	offset = 0;
   d4514:	60c3      	str	r3, [r0, #12]

	contextIndex = 0;
   d4516:	6143      	str	r3, [r0, #20]
	context[contextIndex].isFirst = true;
   d4518:	7602      	strb	r2, [r0, #24]
	context[contextIndex].terminator = 0;
   d451a:	7643      	strb	r3, [r0, #25]

	truncated = false;
   d451c:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
   d4520:	4770      	bx	lr
	...

000d4524 <_ZN10JsonWriterC1EPcj>:
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d4524:	2300      	movs	r3, #0

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d4526:	b510      	push	{r4, lr}
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d4528:	60c3      	str	r3, [r0, #12]
   d452a:	2301      	movs	r3, #1
   d452c:	7403      	strb	r3, [r0, #16]

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d452e:	4b05      	ldr	r3, [pc, #20]	; (d4544 <_ZN10JsonWriterC1EPcj+0x20>)
   d4530:	6003      	str	r3, [r0, #0]
   d4532:	f04f 33ff 	mov.w	r3, #4294967295
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d4536:	6041      	str	r1, [r0, #4]
   d4538:	6082      	str	r2, [r0, #8]

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d453a:	62c3      	str	r3, [r0, #44]	; 0x2c
	init();
   d453c:	f7ff ffe8 	bl	d4510 <_ZN10JsonWriter4initEv>
}
   d4540:	bd10      	pop	{r4, pc}
   d4542:	bf00      	nop
   d4544:	000d6ff0 	.word	0x000d6ff0

000d4548 <_ZN10JsonWriter10insertCharEc>:
	}
}


void JsonWriter::insertChar(char ch) {
	if (offset < bufferLen) {
   d4548:	68c3      	ldr	r3, [r0, #12]
   d454a:	6882      	ldr	r2, [r0, #8]
		buffer[bufferLen - 1] = 0;
	}
}


void JsonWriter::insertChar(char ch) {
   d454c:	b510      	push	{r4, lr}
	if (offset < bufferLen) {
   d454e:	4293      	cmp	r3, r2
		buffer[offset++] = ch;
   d4550:	bf3f      	itttt	cc
   d4552:	6842      	ldrcc	r2, [r0, #4]
   d4554:	1c5c      	addcc	r4, r3, #1
   d4556:	60c4      	strcc	r4, [r0, #12]
   d4558:	54d1      	strbcc	r1, [r2, r3]
	}
	else {
		truncated = true;
   d455a:	bf24      	itt	cs
   d455c:	2301      	movcs	r3, #1
   d455e:	f880 302a 	strbcs.w	r3, [r0, #42]	; 0x2a
   d4562:	bd10      	pop	{r4, pc}

000d4564 <_ZN10JsonWriter19finishObjectOrArrayEv>:
	insertChar(startChar);
	return true;
}


void JsonWriter::finishObjectOrArray() {
   d4564:	b510      	push	{r4, lr}
	if (contextIndex > 0) {
   d4566:	6943      	ldr	r3, [r0, #20]
	insertChar(startChar);
	return true;
}


void JsonWriter::finishObjectOrArray() {
   d4568:	4604      	mov	r4, r0
	if (contextIndex > 0) {
   d456a:	b143      	cbz	r3, d457e <_ZN10JsonWriter19finishObjectOrArrayEv+0x1a>
		if (context[contextIndex].terminator != 0) {
   d456c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
   d4570:	7e59      	ldrb	r1, [r3, #25]
   d4572:	b109      	cbz	r1, d4578 <_ZN10JsonWriter19finishObjectOrArrayEv+0x14>
			insertChar(context[contextIndex].terminator);
   d4574:	f7ff ffe8 	bl	d4548 <_ZN10JsonWriter10insertCharEc>
		}
		contextIndex--;
   d4578:	6963      	ldr	r3, [r4, #20]
   d457a:	3b01      	subs	r3, #1
   d457c:	6163      	str	r3, [r4, #20]
	}
	// Make sure buffer is null terminated
	if (offset < bufferLen) {
   d457e:	68a3      	ldr	r3, [r4, #8]
   d4580:	68e0      	ldr	r0, [r4, #12]
   d4582:	6861      	ldr	r1, [r4, #4]
   d4584:	4298      	cmp	r0, r3
   d4586:	f04f 0200 	mov.w	r2, #0
		buffer[offset] = 0;
	}
	else {
		buffer[bufferLen - 1] = 0;
   d458a:	bf2a      	itet	cs
   d458c:	185b      	addcs	r3, r3, r1
		}
		contextIndex--;
	}
	// Make sure buffer is null terminated
	if (offset < bufferLen) {
		buffer[offset] = 0;
   d458e:	540a      	strbcc	r2, [r1, r0]
	}
	else {
		buffer[bufferLen - 1] = 0;
   d4590:	f803 2c01 	strbcs.w	r2, [r3, #-1]
   d4594:	bd10      	pop	{r4, pc}

000d4596 <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>:
	va_start(ap, fmt);
	insertvsprintf(fmt, ap);
	va_end(ap);
}

void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
   d4596:	b570      	push	{r4, r5, r6, lr}
   d4598:	4604      	mov	r4, r0
	size_t spaceAvailable = bufferLen - offset;
   d459a:	68c0      	ldr	r0, [r0, #12]
   d459c:	68a5      	ldr	r5, [r4, #8]

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   d459e:	6866      	ldr	r6, [r4, #4]
	insertvsprintf(fmt, ap);
	va_end(ap);
}

void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;
   d45a0:	1a2d      	subs	r5, r5, r0

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   d45a2:	4613      	mov	r3, r2
   d45a4:	4430      	add	r0, r6
   d45a6:	460a      	mov	r2, r1
   d45a8:	4629      	mov	r1, r5
   d45aa:	f000 fb1b 	bl	d4be4 <vsnprintf>
	if (count <= spaceAvailable) {
   d45ae:	4285      	cmp	r5, r0
		offset += count;
   d45b0:	bf2d      	iteet	cs
   d45b2:	68e3      	ldrcs	r3, [r4, #12]
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
   d45b4:	68a3      	ldrcc	r3, [r4, #8]
   d45b6:	60e3      	strcc	r3, [r4, #12]
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
	if (count <= spaceAvailable) {
		offset += count;
   d45b8:	18c0      	addcs	r0, r0, r3
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
		truncated = true;
   d45ba:	bf36      	itet	cc
   d45bc:	2301      	movcc	r3, #1
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
	if (count <= spaceAvailable) {
		offset += count;
   d45be:	60e0      	strcs	r0, [r4, #12]
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
		truncated = true;
   d45c0:	f884 302a 	strbcc.w	r3, [r4, #42]	; 0x2a
   d45c4:	bd70      	pop	{r4, r5, r6, pc}

000d45c6 <_ZN10JsonWriter13insertsprintfEPKcz>:

}



void JsonWriter::insertsprintf(const char *fmt, ...) {
   d45c6:	b40e      	push	{r1, r2, r3}
   d45c8:	b503      	push	{r0, r1, lr}
   d45ca:	aa03      	add	r2, sp, #12
   d45cc:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list ap;
	va_start(ap, fmt);
   d45d0:	9201      	str	r2, [sp, #4]
	insertvsprintf(fmt, ap);
   d45d2:	f7ff ffe0 	bl	d4596 <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>
	va_end(ap);
}
   d45d6:	b002      	add	sp, #8
   d45d8:	f85d eb04 	ldr.w	lr, [sp], #4
   d45dc:	b003      	add	sp, #12
   d45de:	4770      	bx	lr

000d45e0 <_ZN10JsonWriter12insertStringEPKcb>:
	else {
		truncated = true;
	}
}

void JsonWriter::insertString(const char *s, bool quoted) {
   d45e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d45e4:	4604      	mov	r4, r0
   d45e6:	460e      	mov	r6, r1
	// 110xxxxx 10xxxxxx

	// 0x00000800 - 0x0000FFFF:
	// 1110xxxx 10xxxxxx 10xxxxxx

	if (quoted) {
   d45e8:	4617      	mov	r7, r2
   d45ea:	b112      	cbz	r2, d45f2 <_ZN10JsonWriter12insertStringEPKcb+0x12>
		insertChar('"');
   d45ec:	2122      	movs	r1, #34	; 0x22
   d45ee:	f7ff ffab 	bl	d4548 <_ZN10JsonWriter10insertCharEc>
	else {
		truncated = true;
	}
}

void JsonWriter::insertString(const char *s, bool quoted) {
   d45f2:	2500      	movs	r5, #0

	if (quoted) {
		insertChar('"');
	}

	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   d45f4:	5d71      	ldrb	r1, [r6, r5]
   d45f6:	eb06 0805 	add.w	r8, r6, r5
   d45fa:	2900      	cmp	r1, #0
   d45fc:	d071      	beq.n	d46e2 <_ZN10JsonWriter12insertStringEPKcb+0x102>
   d45fe:	68e2      	ldr	r2, [r4, #12]
   d4600:	68a3      	ldr	r3, [r4, #8]
   d4602:	429a      	cmp	r2, r3
   d4604:	d26d      	bcs.n	d46e2 <_ZN10JsonWriter12insertStringEPKcb+0x102>
		if (s[ii] & 0x80) {
   d4606:	060b      	lsls	r3, r1, #24
   d4608:	d533      	bpl.n	d4672 <_ZN10JsonWriter12insertStringEPKcb+0x92>
			// High bit set: convert UTF-8 to JSON Unicode escape
			if (((s[ii] & 0b11110000) == 0b11100000) && ((s[ii+1] & 0b11000000) == 0b10000000) && ((s[ii+2] & 0b11000000) == 0b10000000)) {
   d460a:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
   d460e:	2be0      	cmp	r3, #224	; 0xe0
   d4610:	d117      	bne.n	d4642 <_ZN10JsonWriter12insertStringEPKcb+0x62>
   d4612:	f898 3001 	ldrb.w	r3, [r8, #1]
   d4616:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   d461a:	2a80      	cmp	r2, #128	; 0x80
   d461c:	d111      	bne.n	d4642 <_ZN10JsonWriter12insertStringEPKcb+0x62>
   d461e:	f105 0802 	add.w	r8, r5, #2
   d4622:	f816 2008 	ldrb.w	r2, [r6, r8]
   d4626:	f002 00c0 	and.w	r0, r2, #192	; 0xc0
   d462a:	2880      	cmp	r0, #128	; 0x80
   d462c:	d109      	bne.n	d4642 <_ZN10JsonWriter12insertStringEPKcb+0x62>
				// 3-byte
				uint16_t utf16 = ((s[ii] & 0b1111) << 12) | ((s[ii+1] & 0b111111) << 6) | (s[ii+2] & 0b111111);
				insertsprintf("\\u%04X", utf16);
   d462e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   d4632:	019b      	lsls	r3, r3, #6
   d4634:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
   d4638:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
   d463c:	431a      	orrs	r2, r3
   d463e:	b292      	uxth	r2, r2
   d4640:	e011      	b.n	d4666 <_ZN10JsonWriter12insertStringEPKcb+0x86>
				ii += 2; // plus one more in loop increment
			}
			else
			if (((s[ii] & 0b11100000) == 0b11000000) && ((s[ii+1] & 0b11000000) == 0b10000000)) {
   d4642:	f001 03e0 	and.w	r3, r1, #224	; 0xe0
   d4646:	2bc0      	cmp	r3, #192	; 0xc0
   d4648:	d146      	bne.n	d46d8 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
   d464a:	f105 0801 	add.w	r8, r5, #1
   d464e:	f816 3008 	ldrb.w	r3, [r6, r8]
   d4652:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   d4656:	2a80      	cmp	r2, #128	; 0x80
   d4658:	d13e      	bne.n	d46d8 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				// 2-byte
				uint16_t utf16 = ((s[ii] & 0b11111) << 6) | (s[ii+1] & 0b111111);
				insertsprintf("\\u%04X", utf16);
   d465a:	0189      	lsls	r1, r1, #6
   d465c:	f401 62f8 	and.w	r2, r1, #1984	; 0x7c0
   d4660:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   d4664:	431a      	orrs	r2, r3
   d4666:	4923      	ldr	r1, [pc, #140]	; (d46f4 <_ZN10JsonWriter12insertStringEPKcb+0x114>)
   d4668:	4620      	mov	r0, r4
   d466a:	f7ff ffac 	bl	d45c6 <_ZN10JsonWriter13insertsprintfEPKcz>
				ii++; // plus one more in loop increment
   d466e:	4645      	mov	r5, r8
   d4670:	e035      	b.n	d46de <_ZN10JsonWriter12insertStringEPKcb+0xfe>
				// Not valid unicode, just pass characters through
				insertChar(s[ii]);
			}
		}
		else {
			switch(s[ii]) {
   d4672:	290c      	cmp	r1, #12
   d4674:	d018      	beq.n	d46a8 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
   d4676:	d80b      	bhi.n	d4690 <_ZN10JsonWriter12insertStringEPKcb+0xb0>
   d4678:	2909      	cmp	r1, #9
   d467a:	d021      	beq.n	d46c0 <_ZN10JsonWriter12insertStringEPKcb+0xe0>
   d467c:	290a      	cmp	r1, #10
   d467e:	d019      	beq.n	d46b4 <_ZN10JsonWriter12insertStringEPKcb+0xd4>
   d4680:	2908      	cmp	r1, #8
   d4682:	d129      	bne.n	d46d8 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
			case '\b':
				insertChar('\\');
   d4684:	215c      	movs	r1, #92	; 0x5c
   d4686:	4620      	mov	r0, r4
   d4688:	f7ff ff5e 	bl	d4548 <_ZN10JsonWriter10insertCharEc>
				insertChar('b');
   d468c:	2162      	movs	r1, #98	; 0x62
   d468e:	e023      	b.n	d46d8 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				// Not valid unicode, just pass characters through
				insertChar(s[ii]);
			}
		}
		else {
			switch(s[ii]) {
   d4690:	2922      	cmp	r1, #34	; 0x22
   d4692:	d01b      	beq.n	d46cc <_ZN10JsonWriter12insertStringEPKcb+0xec>
   d4694:	295c      	cmp	r1, #92	; 0x5c
   d4696:	d019      	beq.n	d46cc <_ZN10JsonWriter12insertStringEPKcb+0xec>
   d4698:	290d      	cmp	r1, #13
   d469a:	d11d      	bne.n	d46d8 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('n');
				break;

			case '\r':
				insertChar('\\');
   d469c:	215c      	movs	r1, #92	; 0x5c
   d469e:	4620      	mov	r0, r4
   d46a0:	f7ff ff52 	bl	d4548 <_ZN10JsonWriter10insertCharEc>
				insertChar('r');
   d46a4:	2172      	movs	r1, #114	; 0x72
   d46a6:	e017      	b.n	d46d8 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('b');
				break;

			case '\f':
				insertChar('\\');
   d46a8:	215c      	movs	r1, #92	; 0x5c
   d46aa:	4620      	mov	r0, r4
   d46ac:	f7ff ff4c 	bl	d4548 <_ZN10JsonWriter10insertCharEc>
				insertChar('f');
   d46b0:	2166      	movs	r1, #102	; 0x66
   d46b2:	e011      	b.n	d46d8 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				break;

			case '\n':
				insertChar('\\');
   d46b4:	215c      	movs	r1, #92	; 0x5c
   d46b6:	4620      	mov	r0, r4
   d46b8:	f7ff ff46 	bl	d4548 <_ZN10JsonWriter10insertCharEc>
				insertChar('n');
   d46bc:	216e      	movs	r1, #110	; 0x6e
   d46be:	e00b      	b.n	d46d8 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('r');
				break;

			case '\t':
				insertChar('\\');
   d46c0:	215c      	movs	r1, #92	; 0x5c
   d46c2:	4620      	mov	r0, r4
   d46c4:	f7ff ff40 	bl	d4548 <_ZN10JsonWriter10insertCharEc>
				insertChar('t');
   d46c8:	2174      	movs	r1, #116	; 0x74
   d46ca:	e005      	b.n	d46d8 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				break;

			case '"':
			case '\\':
				insertChar('\\');
   d46cc:	215c      	movs	r1, #92	; 0x5c
   d46ce:	4620      	mov	r0, r4
   d46d0:	f7ff ff3a 	bl	d4548 <_ZN10JsonWriter10insertCharEc>
				insertChar(s[ii]);
   d46d4:	f898 1000 	ldrb.w	r1, [r8]
				break;

			default:
				insertChar(s[ii]);
   d46d8:	4620      	mov	r0, r4
   d46da:	f7ff ff35 	bl	d4548 <_ZN10JsonWriter10insertCharEc>

	if (quoted) {
		insertChar('"');
	}

	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   d46de:	3501      	adds	r5, #1
   d46e0:	e788      	b.n	d45f4 <_ZN10JsonWriter12insertStringEPKcb+0x14>
				insertChar(s[ii]);
				break;
			}
		}
	}
	if (quoted) {
   d46e2:	b12f      	cbz	r7, d46f0 <_ZN10JsonWriter12insertStringEPKcb+0x110>
		insertChar('"');
   d46e4:	4620      	mov	r0, r4
   d46e6:	2122      	movs	r1, #34	; 0x22
	}

}
   d46e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				break;
			}
		}
	}
	if (quoted) {
		insertChar('"');
   d46ec:	f7ff bf2c 	b.w	d4548 <_ZN10JsonWriter10insertCharEc>
   d46f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d46f4:	000d7001 	.word	0x000d7001

000d46f8 <_ZN10JsonWriter20insertCheckSeparatorEv>:
		offset = bufferLen;
		truncated = true;
	}
}

void JsonWriter::insertCheckSeparator() {
   d46f8:	6942      	ldr	r2, [r0, #20]
   d46fa:	eb00 0342 	add.w	r3, r0, r2, lsl #1
	if (context[contextIndex].isFirst) {
   d46fe:	7e1a      	ldrb	r2, [r3, #24]
   d4700:	b112      	cbz	r2, d4708 <_ZN10JsonWriter20insertCheckSeparatorEv+0x10>
		context[contextIndex].isFirst = false;
   d4702:	2200      	movs	r2, #0
   d4704:	761a      	strb	r2, [r3, #24]
   d4706:	4770      	bx	lr
	}
	else {
		insertChar(',');
   d4708:	212c      	movs	r1, #44	; 0x2c
   d470a:	f7ff bf1d 	b.w	d4548 <_ZN10JsonWriter10insertCharEc>

000d470e <_ZN10JsonWriter18startObjectOrArrayEcc>:

	truncated = false;

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   d470e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   d4710:	6943      	ldr	r3, [r0, #20]
   d4712:	3301      	adds	r3, #1
   d4714:	2b08      	cmp	r3, #8

	truncated = false;

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   d4716:	460e      	mov	r6, r1
   d4718:	4617      	mov	r7, r2
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   d471a:	d80e      	bhi.n	d473a <_ZN10JsonWriter18startObjectOrArrayEcc+0x2c>
		return false;
	}
	insertCheckSeparator();
   d471c:	f7ff ffec 	bl	d46f8 <_ZN10JsonWriter20insertCheckSeparatorEv>

	contextIndex++;
   d4720:	6943      	ldr	r3, [r0, #20]
   d4722:	1c5a      	adds	r2, r3, #1
   d4724:	eb00 0343 	add.w	r3, r0, r3, lsl #1

	context[contextIndex].isFirst = true;
   d4728:	2401      	movs	r4, #1
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
		return false;
	}
	insertCheckSeparator();

	contextIndex++;
   d472a:	6142      	str	r2, [r0, #20]

	context[contextIndex].isFirst = true;
	context[contextIndex].terminator = endChar;

	insertChar(startChar);
   d472c:	4631      	mov	r1, r6
	}
	insertCheckSeparator();

	contextIndex++;

	context[contextIndex].isFirst = true;
   d472e:	769c      	strb	r4, [r3, #26]
	context[contextIndex].terminator = endChar;
   d4730:	76df      	strb	r7, [r3, #27]

	insertChar(startChar);
   d4732:	f7ff ff09 	bl	d4548 <_ZN10JsonWriter10insertCharEc>
   d4736:	4620      	mov	r0, r4
   d4738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
		return false;
   d473a:	2000      	movs	r0, #0
	context[contextIndex].isFirst = true;
	context[contextIndex].terminator = endChar;

	insertChar(startChar);
	return true;
}
   d473c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d4740 <_ZN10JsonWriter11insertValueEb>:
		insertChar(',');
	}
}

void JsonWriter::insertValue(bool value) {
	if (value) {
   d4740:	460a      	mov	r2, r1
   d4742:	b111      	cbz	r1, d474a <_ZN10JsonWriter11insertValueEb+0xa>
		insertString("true");
   d4744:	2200      	movs	r2, #0
   d4746:	4902      	ldr	r1, [pc, #8]	; (d4750 <_ZN10JsonWriter11insertValueEb+0x10>)
   d4748:	e000      	b.n	d474c <_ZN10JsonWriter11insertValueEb+0xc>
	}
	else {
		insertString("false");
   d474a:	4902      	ldr	r1, [pc, #8]	; (d4754 <_ZN10JsonWriter11insertValueEb+0x14>)
   d474c:	f7ff bf48 	b.w	d45e0 <_ZN10JsonWriter12insertStringEPKcb>
   d4750:	000d7008 	.word	0x000d7008
   d4754:	000d700d 	.word	0x000d700d

000d4758 <_GLOBAL__sub_I__ZN10JsonBufferC2Ev>:
   d4758:	f000 b810 	b.w	d477c <HAL_Pin_Map>

000d475c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d475c:	b508      	push	{r3, lr}
   d475e:	4b02      	ldr	r3, [pc, #8]	; (d4768 <netdb_freeaddrinfo+0xc>)
   d4760:	681b      	ldr	r3, [r3, #0]
   d4762:	689b      	ldr	r3, [r3, #8]
   d4764:	9301      	str	r3, [sp, #4]
   d4766:	bd08      	pop	{r3, pc}
   d4768:	00030268 	.word	0x00030268

000d476c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d476c:	b508      	push	{r3, lr}
   d476e:	4b02      	ldr	r3, [pc, #8]	; (d4778 <netdb_getaddrinfo+0xc>)
   d4770:	681b      	ldr	r3, [r3, #0]
   d4772:	68db      	ldr	r3, [r3, #12]
   d4774:	9301      	str	r3, [sp, #4]
   d4776:	bd08      	pop	{r3, pc}
   d4778:	00030268 	.word	0x00030268

000d477c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d477c:	b508      	push	{r3, lr}
   d477e:	4b02      	ldr	r3, [pc, #8]	; (d4788 <HAL_Pin_Map+0xc>)
   d4780:	681b      	ldr	r3, [r3, #0]
   d4782:	681b      	ldr	r3, [r3, #0]
   d4784:	9301      	str	r3, [sp, #4]
   d4786:	bd08      	pop	{r3, pc}
   d4788:	0003022c 	.word	0x0003022c

000d478c <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d478c:	b508      	push	{r3, lr}
   d478e:	4b02      	ldr	r3, [pc, #8]	; (d4798 <HAL_Validate_Pin_Function+0xc>)
   d4790:	681b      	ldr	r3, [r3, #0]
   d4792:	685b      	ldr	r3, [r3, #4]
   d4794:	9301      	str	r3, [sp, #4]
   d4796:	bd08      	pop	{r3, pc}
   d4798:	0003022c 	.word	0x0003022c

000d479c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d479c:	b508      	push	{r3, lr}
   d479e:	4b02      	ldr	r3, [pc, #8]	; (d47a8 <HAL_Pin_Mode+0xc>)
   d47a0:	681b      	ldr	r3, [r3, #0]
   d47a2:	689b      	ldr	r3, [r3, #8]
   d47a4:	9301      	str	r3, [sp, #4]
   d47a6:	bd08      	pop	{r3, pc}
   d47a8:	0003022c 	.word	0x0003022c

000d47ac <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d47ac:	b508      	push	{r3, lr}
   d47ae:	4b02      	ldr	r3, [pc, #8]	; (d47b8 <HAL_Get_Pin_Mode+0xc>)
   d47b0:	681b      	ldr	r3, [r3, #0]
   d47b2:	68db      	ldr	r3, [r3, #12]
   d47b4:	9301      	str	r3, [sp, #4]
   d47b6:	bd08      	pop	{r3, pc}
   d47b8:	0003022c 	.word	0x0003022c

000d47bc <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d47bc:	b508      	push	{r3, lr}
   d47be:	4b02      	ldr	r3, [pc, #8]	; (d47c8 <HAL_GPIO_Write+0xc>)
   d47c0:	681b      	ldr	r3, [r3, #0]
   d47c2:	691b      	ldr	r3, [r3, #16]
   d47c4:	9301      	str	r3, [sp, #4]
   d47c6:	bd08      	pop	{r3, pc}
   d47c8:	0003022c 	.word	0x0003022c

000d47cc <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d47cc:	b508      	push	{r3, lr}
   d47ce:	4b02      	ldr	r3, [pc, #8]	; (d47d8 <HAL_ADC_Read+0xc>)
   d47d0:	681b      	ldr	r3, [r3, #0]
   d47d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d47d4:	9301      	str	r3, [sp, #4]
   d47d6:	bd08      	pop	{r3, pc}
   d47d8:	0003022c 	.word	0x0003022c

000d47dc <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d47dc:	b508      	push	{r3, lr}
   d47de:	4b02      	ldr	r3, [pc, #8]	; (d47e8 <HAL_SPI_Init+0xc>)
   d47e0:	681b      	ldr	r3, [r3, #0]
   d47e2:	69db      	ldr	r3, [r3, #28]
   d47e4:	9301      	str	r3, [sp, #4]
   d47e6:	bd08      	pop	{r3, pc}
   d47e8:	00030230 	.word	0x00030230

000d47ec <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d47ec:	b508      	push	{r3, lr}
   d47ee:	4b02      	ldr	r3, [pc, #8]	; (d47f8 <HAL_SPI_Is_Enabled+0xc>)
   d47f0:	681b      	ldr	r3, [r3, #0]
   d47f2:	6a1b      	ldr	r3, [r3, #32]
   d47f4:	9301      	str	r3, [sp, #4]
   d47f6:	bd08      	pop	{r3, pc}
   d47f8:	00030230 	.word	0x00030230

000d47fc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d47fc:	b508      	push	{r3, lr}
   d47fe:	4b02      	ldr	r3, [pc, #8]	; (d4808 <HAL_RNG_GetRandomNumber+0xc>)
   d4800:	681b      	ldr	r3, [r3, #0]
   d4802:	685b      	ldr	r3, [r3, #4]
   d4804:	9301      	str	r3, [sp, #4]
   d4806:	bd08      	pop	{r3, pc}
   d4808:	00030218 	.word	0x00030218

000d480c <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d480c:	b508      	push	{r3, lr}
   d480e:	4b02      	ldr	r3, [pc, #8]	; (d4818 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4810:	681b      	ldr	r3, [r3, #0]
   d4812:	695b      	ldr	r3, [r3, #20]
   d4814:	9301      	str	r3, [sp, #4]
   d4816:	bd08      	pop	{r3, pc}
   d4818:	00030218 	.word	0x00030218

000d481c <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d481c:	b508      	push	{r3, lr}
   d481e:	4b02      	ldr	r3, [pc, #8]	; (d4828 <HAL_RTC_Get_UnixTime+0xc>)
   d4820:	681b      	ldr	r3, [r3, #0]
   d4822:	69db      	ldr	r3, [r3, #28]
   d4824:	9301      	str	r3, [sp, #4]
   d4826:	bd08      	pop	{r3, pc}
   d4828:	00030218 	.word	0x00030218

000d482c <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d482c:	b508      	push	{r3, lr}
   d482e:	4b02      	ldr	r3, [pc, #8]	; (d4838 <HAL_RTC_Time_Is_Valid+0xc>)
   d4830:	681b      	ldr	r3, [r3, #0]
   d4832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4834:	9301      	str	r3, [sp, #4]
   d4836:	bd08      	pop	{r3, pc}
   d4838:	00030218 	.word	0x00030218

000d483c <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d483c:	b508      	push	{r3, lr}
   d483e:	4b02      	ldr	r3, [pc, #8]	; (d4848 <os_thread_is_current+0xc>)
   d4840:	681b      	ldr	r3, [r3, #0]
   d4842:	689b      	ldr	r3, [r3, #8]
   d4844:	9301      	str	r3, [sp, #4]
   d4846:	bd08      	pop	{r3, pc}
   d4848:	00030248 	.word	0x00030248

000d484c <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d484c:	b508      	push	{r3, lr}
   d484e:	4b02      	ldr	r3, [pc, #8]	; (d4858 <os_thread_join+0xc>)
   d4850:	681b      	ldr	r3, [r3, #0]
   d4852:	691b      	ldr	r3, [r3, #16]
   d4854:	9301      	str	r3, [sp, #4]
   d4856:	bd08      	pop	{r3, pc}
   d4858:	00030248 	.word	0x00030248

000d485c <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d485c:	b508      	push	{r3, lr}
   d485e:	4b02      	ldr	r3, [pc, #8]	; (d4868 <os_thread_cleanup+0xc>)
   d4860:	681b      	ldr	r3, [r3, #0]
   d4862:	695b      	ldr	r3, [r3, #20]
   d4864:	9301      	str	r3, [sp, #4]
   d4866:	bd08      	pop	{r3, pc}
   d4868:	00030248 	.word	0x00030248

000d486c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d486c:	b508      	push	{r3, lr}
   d486e:	4b02      	ldr	r3, [pc, #8]	; (d4878 <os_mutex_recursive_create+0xc>)
   d4870:	681b      	ldr	r3, [r3, #0]
   d4872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4874:	9301      	str	r3, [sp, #4]
   d4876:	bd08      	pop	{r3, pc}
   d4878:	00030248 	.word	0x00030248

000d487c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d487c:	b508      	push	{r3, lr}
   d487e:	4b02      	ldr	r3, [pc, #8]	; (d4888 <os_mutex_recursive_destroy+0xc>)
   d4880:	681b      	ldr	r3, [r3, #0]
   d4882:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4884:	9301      	str	r3, [sp, #4]
   d4886:	bd08      	pop	{r3, pc}
   d4888:	00030248 	.word	0x00030248

000d488c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d488c:	b508      	push	{r3, lr}
   d488e:	4b02      	ldr	r3, [pc, #8]	; (d4898 <inet_inet_ntop+0xc>)
   d4890:	681b      	ldr	r3, [r3, #0]
   d4892:	695b      	ldr	r3, [r3, #20]
   d4894:	9301      	str	r3, [sp, #4]
   d4896:	bd08      	pop	{r3, pc}
   d4898:	00030264 	.word	0x00030264

000d489c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d489c:	b508      	push	{r3, lr}
   d489e:	4b02      	ldr	r3, [pc, #8]	; (d48a8 <HAL_USART_Init+0xc>)
   d48a0:	681b      	ldr	r3, [r3, #0]
   d48a2:	681b      	ldr	r3, [r3, #0]
   d48a4:	9301      	str	r3, [sp, #4]
   d48a6:	bd08      	pop	{r3, pc}
   d48a8:	0003023c 	.word	0x0003023c

000d48ac <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d48ac:	b508      	push	{r3, lr}
   d48ae:	4b02      	ldr	r3, [pc, #8]	; (d48b8 <HAL_USART_Write_Data+0xc>)
   d48b0:	681b      	ldr	r3, [r3, #0]
   d48b2:	68db      	ldr	r3, [r3, #12]
   d48b4:	9301      	str	r3, [sp, #4]
   d48b6:	bd08      	pop	{r3, pc}
   d48b8:	0003023c 	.word	0x0003023c

000d48bc <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d48bc:	b508      	push	{r3, lr}
   d48be:	4b02      	ldr	r3, [pc, #8]	; (d48c8 <HAL_USART_Available_Data+0xc>)
   d48c0:	681b      	ldr	r3, [r3, #0]
   d48c2:	691b      	ldr	r3, [r3, #16]
   d48c4:	9301      	str	r3, [sp, #4]
   d48c6:	bd08      	pop	{r3, pc}
   d48c8:	0003023c 	.word	0x0003023c

000d48cc <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d48cc:	b508      	push	{r3, lr}
   d48ce:	4b02      	ldr	r3, [pc, #8]	; (d48d8 <HAL_USART_Read_Data+0xc>)
   d48d0:	681b      	ldr	r3, [r3, #0]
   d48d2:	695b      	ldr	r3, [r3, #20]
   d48d4:	9301      	str	r3, [sp, #4]
   d48d6:	bd08      	pop	{r3, pc}
   d48d8:	0003023c 	.word	0x0003023c

000d48dc <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d48dc:	b508      	push	{r3, lr}
   d48de:	4b02      	ldr	r3, [pc, #8]	; (d48e8 <HAL_USART_Peek_Data+0xc>)
   d48e0:	681b      	ldr	r3, [r3, #0]
   d48e2:	699b      	ldr	r3, [r3, #24]
   d48e4:	9301      	str	r3, [sp, #4]
   d48e6:	bd08      	pop	{r3, pc}
   d48e8:	0003023c 	.word	0x0003023c

000d48ec <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d48ec:	b508      	push	{r3, lr}
   d48ee:	4b02      	ldr	r3, [pc, #8]	; (d48f8 <HAL_USART_Flush_Data+0xc>)
   d48f0:	681b      	ldr	r3, [r3, #0]
   d48f2:	69db      	ldr	r3, [r3, #28]
   d48f4:	9301      	str	r3, [sp, #4]
   d48f6:	bd08      	pop	{r3, pc}
   d48f8:	0003023c 	.word	0x0003023c

000d48fc <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d48fc:	b508      	push	{r3, lr}
   d48fe:	4b02      	ldr	r3, [pc, #8]	; (d4908 <HAL_USART_Is_Enabled+0xc>)
   d4900:	681b      	ldr	r3, [r3, #0]
   d4902:	6a1b      	ldr	r3, [r3, #32]
   d4904:	9301      	str	r3, [sp, #4]
   d4906:	bd08      	pop	{r3, pc}
   d4908:	0003023c 	.word	0x0003023c

000d490c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d490c:	b508      	push	{r3, lr}
   d490e:	4b02      	ldr	r3, [pc, #8]	; (d4918 <HAL_USART_Available_Data_For_Write+0xc>)
   d4910:	681b      	ldr	r3, [r3, #0]
   d4912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4914:	9301      	str	r3, [sp, #4]
   d4916:	bd08      	pop	{r3, pc}
   d4918:	0003023c 	.word	0x0003023c

000d491c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d491c:	b508      	push	{r3, lr}
   d491e:	4b02      	ldr	r3, [pc, #8]	; (d4928 <HAL_I2C_Write_Data+0xc>)
   d4920:	681b      	ldr	r3, [r3, #0]
   d4922:	6a1b      	ldr	r3, [r3, #32]
   d4924:	9301      	str	r3, [sp, #4]
   d4926:	bd08      	pop	{r3, pc}
   d4928:	00030228 	.word	0x00030228

000d492c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d492c:	b508      	push	{r3, lr}
   d492e:	4b02      	ldr	r3, [pc, #8]	; (d4938 <HAL_I2C_Available_Data+0xc>)
   d4930:	681b      	ldr	r3, [r3, #0]
   d4932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4934:	9301      	str	r3, [sp, #4]
   d4936:	bd08      	pop	{r3, pc}
   d4938:	00030228 	.word	0x00030228

000d493c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d493c:	b508      	push	{r3, lr}
   d493e:	4b02      	ldr	r3, [pc, #8]	; (d4948 <HAL_I2C_Read_Data+0xc>)
   d4940:	681b      	ldr	r3, [r3, #0]
   d4942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4944:	9301      	str	r3, [sp, #4]
   d4946:	bd08      	pop	{r3, pc}
   d4948:	00030228 	.word	0x00030228

000d494c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d494c:	b508      	push	{r3, lr}
   d494e:	4b02      	ldr	r3, [pc, #8]	; (d4958 <HAL_I2C_Peek_Data+0xc>)
   d4950:	681b      	ldr	r3, [r3, #0]
   d4952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4954:	9301      	str	r3, [sp, #4]
   d4956:	bd08      	pop	{r3, pc}
   d4958:	00030228 	.word	0x00030228

000d495c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d495c:	b508      	push	{r3, lr}
   d495e:	4b02      	ldr	r3, [pc, #8]	; (d4968 <HAL_I2C_Flush_Data+0xc>)
   d4960:	681b      	ldr	r3, [r3, #0]
   d4962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4964:	9301      	str	r3, [sp, #4]
   d4966:	bd08      	pop	{r3, pc}
   d4968:	00030228 	.word	0x00030228

000d496c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d496c:	b508      	push	{r3, lr}
   d496e:	4b02      	ldr	r3, [pc, #8]	; (d4978 <HAL_I2C_Is_Enabled+0xc>)
   d4970:	681b      	ldr	r3, [r3, #0]
   d4972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4974:	9301      	str	r3, [sp, #4]
   d4976:	bd08      	pop	{r3, pc}
   d4978:	00030228 	.word	0x00030228

000d497c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d497c:	b508      	push	{r3, lr}
   d497e:	4b02      	ldr	r3, [pc, #8]	; (d4988 <HAL_I2C_Init+0xc>)
   d4980:	681b      	ldr	r3, [r3, #0]
   d4982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4984:	9301      	str	r3, [sp, #4]
   d4986:	bd08      	pop	{r3, pc}
   d4988:	00030228 	.word	0x00030228

000d498c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d498c:	b508      	push	{r3, lr}
   d498e:	4b02      	ldr	r3, [pc, #8]	; (d4998 <HAL_USB_USART_Init+0xc>)
   d4990:	681b      	ldr	r3, [r3, #0]
   d4992:	681b      	ldr	r3, [r3, #0]
   d4994:	9301      	str	r3, [sp, #4]
   d4996:	bd08      	pop	{r3, pc}
   d4998:	0003024c 	.word	0x0003024c

000d499c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d499c:	b508      	push	{r3, lr}
   d499e:	4b02      	ldr	r3, [pc, #8]	; (d49a8 <HAL_USB_USART_Begin+0xc>)
   d49a0:	681b      	ldr	r3, [r3, #0]
   d49a2:	685b      	ldr	r3, [r3, #4]
   d49a4:	9301      	str	r3, [sp, #4]
   d49a6:	bd08      	pop	{r3, pc}
   d49a8:	0003024c 	.word	0x0003024c

000d49ac <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d49ac:	b508      	push	{r3, lr}
   d49ae:	4b02      	ldr	r3, [pc, #8]	; (d49b8 <HAL_USB_USART_Available_Data+0xc>)
   d49b0:	681b      	ldr	r3, [r3, #0]
   d49b2:	691b      	ldr	r3, [r3, #16]
   d49b4:	9301      	str	r3, [sp, #4]
   d49b6:	bd08      	pop	{r3, pc}
   d49b8:	0003024c 	.word	0x0003024c

000d49bc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d49bc:	b508      	push	{r3, lr}
   d49be:	4b02      	ldr	r3, [pc, #8]	; (d49c8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d49c0:	681b      	ldr	r3, [r3, #0]
   d49c2:	695b      	ldr	r3, [r3, #20]
   d49c4:	9301      	str	r3, [sp, #4]
   d49c6:	bd08      	pop	{r3, pc}
   d49c8:	0003024c 	.word	0x0003024c

000d49cc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d49cc:	b508      	push	{r3, lr}
   d49ce:	4b02      	ldr	r3, [pc, #8]	; (d49d8 <HAL_USB_USART_Receive_Data+0xc>)
   d49d0:	681b      	ldr	r3, [r3, #0]
   d49d2:	699b      	ldr	r3, [r3, #24]
   d49d4:	9301      	str	r3, [sp, #4]
   d49d6:	bd08      	pop	{r3, pc}
   d49d8:	0003024c 	.word	0x0003024c

000d49dc <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d49dc:	b508      	push	{r3, lr}
   d49de:	4b02      	ldr	r3, [pc, #8]	; (d49e8 <HAL_USB_USART_Send_Data+0xc>)
   d49e0:	681b      	ldr	r3, [r3, #0]
   d49e2:	69db      	ldr	r3, [r3, #28]
   d49e4:	9301      	str	r3, [sp, #4]
   d49e6:	bd08      	pop	{r3, pc}
   d49e8:	0003024c 	.word	0x0003024c

000d49ec <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d49ec:	b508      	push	{r3, lr}
   d49ee:	4b02      	ldr	r3, [pc, #8]	; (d49f8 <HAL_USB_USART_Flush_Data+0xc>)
   d49f0:	681b      	ldr	r3, [r3, #0]
   d49f2:	6a1b      	ldr	r3, [r3, #32]
   d49f4:	9301      	str	r3, [sp, #4]
   d49f6:	bd08      	pop	{r3, pc}
   d49f8:	0003024c 	.word	0x0003024c

000d49fc <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d49fc:	b508      	push	{r3, lr}
   d49fe:	4b02      	ldr	r3, [pc, #8]	; (d4a08 <system_mode+0xc>)
   d4a00:	681b      	ldr	r3, [r3, #0]
   d4a02:	681b      	ldr	r3, [r3, #0]
   d4a04:	9301      	str	r3, [sp, #4]
   d4a06:	bd08      	pop	{r3, pc}
   d4a08:	00030220 	.word	0x00030220

000d4a0c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4a0c:	b508      	push	{r3, lr}
   d4a0e:	4b02      	ldr	r3, [pc, #8]	; (d4a18 <set_system_mode+0xc>)
   d4a10:	681b      	ldr	r3, [r3, #0]
   d4a12:	685b      	ldr	r3, [r3, #4]
   d4a14:	9301      	str	r3, [sp, #4]
   d4a16:	bd08      	pop	{r3, pc}
   d4a18:	00030220 	.word	0x00030220

000d4a1c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4a1c:	b508      	push	{r3, lr}
   d4a1e:	4b02      	ldr	r3, [pc, #8]	; (d4a28 <system_delay_ms+0xc>)
   d4a20:	681b      	ldr	r3, [r3, #0]
   d4a22:	695b      	ldr	r3, [r3, #20]
   d4a24:	9301      	str	r3, [sp, #4]
   d4a26:	bd08      	pop	{r3, pc}
   d4a28:	00030220 	.word	0x00030220

000d4a2c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4a2c:	b508      	push	{r3, lr}
   d4a2e:	4b02      	ldr	r3, [pc, #8]	; (d4a38 <application_thread_current+0xc>)
   d4a30:	681b      	ldr	r3, [r3, #0]
   d4a32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4a34:	9301      	str	r3, [sp, #4]
   d4a36:	bd08      	pop	{r3, pc}
   d4a38:	00030220 	.word	0x00030220

000d4a3c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4a3c:	b508      	push	{r3, lr}
   d4a3e:	4b02      	ldr	r3, [pc, #8]	; (d4a48 <application_thread_invoke+0xc>)
   d4a40:	681b      	ldr	r3, [r3, #0]
   d4a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4a44:	9301      	str	r3, [sp, #4]
   d4a46:	bd08      	pop	{r3, pc}
   d4a48:	00030220 	.word	0x00030220

000d4a4c <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d4a4c:	b508      	push	{r3, lr}
   d4a4e:	4b02      	ldr	r3, [pc, #8]	; (d4a58 <system_thread_get_state+0xc>)
   d4a50:	681b      	ldr	r3, [r3, #0]
   d4a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4a54:	9301      	str	r3, [sp, #4]
   d4a56:	bd08      	pop	{r3, pc}
   d4a58:	00030220 	.word	0x00030220

000d4a5c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4a5c:	b508      	push	{r3, lr}
   d4a5e:	4b03      	ldr	r3, [pc, #12]	; (d4a6c <system_ctrl_set_app_request_handler+0x10>)
   d4a60:	681b      	ldr	r3, [r3, #0]
   d4a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4a66:	9301      	str	r3, [sp, #4]
   d4a68:	bd08      	pop	{r3, pc}
   d4a6a:	0000      	.short	0x0000
   d4a6c:	00030220 	.word	0x00030220

000d4a70 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4a70:	b508      	push	{r3, lr}
   d4a72:	4b03      	ldr	r3, [pc, #12]	; (d4a80 <system_ctrl_set_result+0x10>)
   d4a74:	681b      	ldr	r3, [r3, #0]
   d4a76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4a7a:	9301      	str	r3, [sp, #4]
   d4a7c:	bd08      	pop	{r3, pc}
   d4a7e:	0000      	.short	0x0000
   d4a80:	00030220 	.word	0x00030220

000d4a84 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4a84:	b508      	push	{r3, lr}
   d4a86:	4b02      	ldr	r3, [pc, #8]	; (d4a90 <network_connect+0xc>)
   d4a88:	681b      	ldr	r3, [r3, #0]
   d4a8a:	685b      	ldr	r3, [r3, #4]
   d4a8c:	9301      	str	r3, [sp, #4]
   d4a8e:	bd08      	pop	{r3, pc}
   d4a90:	00030240 	.word	0x00030240

000d4a94 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4a94:	b508      	push	{r3, lr}
   d4a96:	4b02      	ldr	r3, [pc, #8]	; (d4aa0 <network_connecting+0xc>)
   d4a98:	681b      	ldr	r3, [r3, #0]
   d4a9a:	689b      	ldr	r3, [r3, #8]
   d4a9c:	9301      	str	r3, [sp, #4]
   d4a9e:	bd08      	pop	{r3, pc}
   d4aa0:	00030240 	.word	0x00030240

000d4aa4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4aa4:	b508      	push	{r3, lr}
   d4aa6:	4b02      	ldr	r3, [pc, #8]	; (d4ab0 <network_disconnect+0xc>)
   d4aa8:	681b      	ldr	r3, [r3, #0]
   d4aaa:	68db      	ldr	r3, [r3, #12]
   d4aac:	9301      	str	r3, [sp, #4]
   d4aae:	bd08      	pop	{r3, pc}
   d4ab0:	00030240 	.word	0x00030240

000d4ab4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4ab4:	b508      	push	{r3, lr}
   d4ab6:	4b02      	ldr	r3, [pc, #8]	; (d4ac0 <network_ready+0xc>)
   d4ab8:	681b      	ldr	r3, [r3, #0]
   d4aba:	691b      	ldr	r3, [r3, #16]
   d4abc:	9301      	str	r3, [sp, #4]
   d4abe:	bd08      	pop	{r3, pc}
   d4ac0:	00030240 	.word	0x00030240

000d4ac4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4ac4:	b508      	push	{r3, lr}
   d4ac6:	4b02      	ldr	r3, [pc, #8]	; (d4ad0 <network_on+0xc>)
   d4ac8:	681b      	ldr	r3, [r3, #0]
   d4aca:	695b      	ldr	r3, [r3, #20]
   d4acc:	9301      	str	r3, [sp, #4]
   d4ace:	bd08      	pop	{r3, pc}
   d4ad0:	00030240 	.word	0x00030240

000d4ad4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4ad4:	b508      	push	{r3, lr}
   d4ad6:	4b02      	ldr	r3, [pc, #8]	; (d4ae0 <network_off+0xc>)
   d4ad8:	681b      	ldr	r3, [r3, #0]
   d4ada:	699b      	ldr	r3, [r3, #24]
   d4adc:	9301      	str	r3, [sp, #4]
   d4ade:	bd08      	pop	{r3, pc}
   d4ae0:	00030240 	.word	0x00030240

000d4ae4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4ae4:	b508      	push	{r3, lr}
   d4ae6:	4b02      	ldr	r3, [pc, #8]	; (d4af0 <network_listen+0xc>)
   d4ae8:	681b      	ldr	r3, [r3, #0]
   d4aea:	69db      	ldr	r3, [r3, #28]
   d4aec:	9301      	str	r3, [sp, #4]
   d4aee:	bd08      	pop	{r3, pc}
   d4af0:	00030240 	.word	0x00030240

000d4af4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4af4:	b508      	push	{r3, lr}
   d4af6:	4b02      	ldr	r3, [pc, #8]	; (d4b00 <network_listening+0xc>)
   d4af8:	681b      	ldr	r3, [r3, #0]
   d4afa:	6a1b      	ldr	r3, [r3, #32]
   d4afc:	9301      	str	r3, [sp, #4]
   d4afe:	bd08      	pop	{r3, pc}
   d4b00:	00030240 	.word	0x00030240

000d4b04 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4b04:	b508      	push	{r3, lr}
   d4b06:	4b02      	ldr	r3, [pc, #8]	; (d4b10 <network_set_listen_timeout+0xc>)
   d4b08:	681b      	ldr	r3, [r3, #0]
   d4b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4b0c:	9301      	str	r3, [sp, #4]
   d4b0e:	bd08      	pop	{r3, pc}
   d4b10:	00030240 	.word	0x00030240

000d4b14 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4b14:	b508      	push	{r3, lr}
   d4b16:	4b02      	ldr	r3, [pc, #8]	; (d4b20 <network_get_listen_timeout+0xc>)
   d4b18:	681b      	ldr	r3, [r3, #0]
   d4b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4b1c:	9301      	str	r3, [sp, #4]
   d4b1e:	bd08      	pop	{r3, pc}
   d4b20:	00030240 	.word	0x00030240

000d4b24 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d4b24:	b508      	push	{r3, lr}
   d4b26:	4b02      	ldr	r3, [pc, #8]	; (d4b30 <spark_variable+0xc>)
   d4b28:	681b      	ldr	r3, [r3, #0]
   d4b2a:	681b      	ldr	r3, [r3, #0]
   d4b2c:	9301      	str	r3, [sp, #4]
   d4b2e:	bd08      	pop	{r3, pc}
   d4b30:	00030244 	.word	0x00030244

000d4b34 <spark_process>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d4b34:	b508      	push	{r3, lr}
   d4b36:	4b02      	ldr	r3, [pc, #8]	; (d4b40 <spark_process+0xc>)
   d4b38:	681b      	ldr	r3, [r3, #0]
   d4b3a:	689b      	ldr	r3, [r3, #8]
   d4b3c:	9301      	str	r3, [sp, #4]
   d4b3e:	bd08      	pop	{r3, pc}
   d4b40:	00030244 	.word	0x00030244

000d4b44 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4b44:	b508      	push	{r3, lr}
   d4b46:	4b02      	ldr	r3, [pc, #8]	; (d4b50 <spark_cloud_flag_connected+0xc>)
   d4b48:	681b      	ldr	r3, [r3, #0]
   d4b4a:	695b      	ldr	r3, [r3, #20]
   d4b4c:	9301      	str	r3, [sp, #4]
   d4b4e:	bd08      	pop	{r3, pc}
   d4b50:	00030244 	.word	0x00030244

000d4b54 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d4b54:	b508      	push	{r3, lr}
   d4b56:	4b02      	ldr	r3, [pc, #8]	; (d4b60 <spark_send_event+0xc>)
   d4b58:	681b      	ldr	r3, [r3, #0]
   d4b5a:	6a1b      	ldr	r3, [r3, #32]
   d4b5c:	9301      	str	r3, [sp, #4]
   d4b5e:	bd08      	pop	{r3, pc}
   d4b60:	00030244 	.word	0x00030244

000d4b64 <spark_sync_time>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d4b64:	b508      	push	{r3, lr}
   d4b66:	4b02      	ldr	r3, [pc, #8]	; (d4b70 <spark_sync_time+0xc>)
   d4b68:	681b      	ldr	r3, [r3, #0]
   d4b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4b6c:	9301      	str	r3, [sp, #4]
   d4b6e:	bd08      	pop	{r3, pc}
   d4b70:	00030244 	.word	0x00030244

000d4b74 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d4b74:	b508      	push	{r3, lr}
   d4b76:	4b02      	ldr	r3, [pc, #8]	; (d4b80 <spark_sync_time_pending+0xc>)
   d4b78:	681b      	ldr	r3, [r3, #0]
   d4b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4b7c:	9301      	str	r3, [sp, #4]
   d4b7e:	bd08      	pop	{r3, pc}
   d4b80:	00030244 	.word	0x00030244

000d4b84 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4b84:	b508      	push	{r3, lr}
   d4b86:	4b02      	ldr	r3, [pc, #8]	; (d4b90 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4b88:	681b      	ldr	r3, [r3, #0]
   d4b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4b8c:	9301      	str	r3, [sp, #4]
   d4b8e:	bd08      	pop	{r3, pc}
   d4b90:	00030244 	.word	0x00030244

000d4b94 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4b94:	b508      	push	{r3, lr}
   d4b96:	4b02      	ldr	r3, [pc, #8]	; (d4ba0 <malloc+0xc>)
   d4b98:	681b      	ldr	r3, [r3, #0]
   d4b9a:	681b      	ldr	r3, [r3, #0]
   d4b9c:	9301      	str	r3, [sp, #4]
   d4b9e:	bd08      	pop	{r3, pc}
   d4ba0:	0003021c 	.word	0x0003021c

000d4ba4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4ba4:	b508      	push	{r3, lr}
   d4ba6:	4b02      	ldr	r3, [pc, #8]	; (d4bb0 <free+0xc>)
   d4ba8:	681b      	ldr	r3, [r3, #0]
   d4baa:	685b      	ldr	r3, [r3, #4]
   d4bac:	9301      	str	r3, [sp, #4]
   d4bae:	bd08      	pop	{r3, pc}
   d4bb0:	0003021c 	.word	0x0003021c

000d4bb4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4bb4:	b508      	push	{r3, lr}
   d4bb6:	4b02      	ldr	r3, [pc, #8]	; (d4bc0 <realloc+0xc>)
   d4bb8:	681b      	ldr	r3, [r3, #0]
   d4bba:	689b      	ldr	r3, [r3, #8]
   d4bbc:	9301      	str	r3, [sp, #4]
   d4bbe:	bd08      	pop	{r3, pc}
   d4bc0:	0003021c 	.word	0x0003021c

000d4bc4 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d4bc4:	b508      	push	{r3, lr}
   d4bc6:	4b02      	ldr	r3, [pc, #8]	; (d4bd0 <siprintf+0xc>)
   d4bc8:	681b      	ldr	r3, [r3, #0]
   d4bca:	691b      	ldr	r3, [r3, #16]
   d4bcc:	9301      	str	r3, [sp, #4]
   d4bce:	bd08      	pop	{r3, pc}
   d4bd0:	0003021c 	.word	0x0003021c

000d4bd4 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d4bd4:	b508      	push	{r3, lr}
   d4bd6:	4b02      	ldr	r3, [pc, #8]	; (d4be0 <siscanf+0xc>)
   d4bd8:	681b      	ldr	r3, [r3, #0]
   d4bda:	699b      	ldr	r3, [r3, #24]
   d4bdc:	9301      	str	r3, [sp, #4]
   d4bde:	bd08      	pop	{r3, pc}
   d4be0:	0003021c 	.word	0x0003021c

000d4be4 <vsnprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4be4:	b508      	push	{r3, lr}
   d4be6:	4b02      	ldr	r3, [pc, #8]	; (d4bf0 <vsnprintf+0xc>)
   d4be8:	681b      	ldr	r3, [r3, #0]
   d4bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4bec:	9301      	str	r3, [sp, #4]
   d4bee:	bd08      	pop	{r3, pc}
   d4bf0:	0003021c 	.word	0x0003021c

000d4bf4 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4bf4:	b508      	push	{r3, lr}
   d4bf6:	4b02      	ldr	r3, [pc, #8]	; (d4c00 <abort+0xc>)
   d4bf8:	681b      	ldr	r3, [r3, #0]
   d4bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4bfc:	9301      	str	r3, [sp, #4]
   d4bfe:	bd08      	pop	{r3, pc}
   d4c00:	0003021c 	.word	0x0003021c

000d4c04 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4c04:	b508      	push	{r3, lr}
   d4c06:	4b02      	ldr	r3, [pc, #8]	; (d4c10 <_malloc_r+0xc>)
   d4c08:	681b      	ldr	r3, [r3, #0]
   d4c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4c0c:	9301      	str	r3, [sp, #4]
   d4c0e:	bd08      	pop	{r3, pc}
   d4c10:	0003021c 	.word	0x0003021c

000d4c14 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4c14:	2200      	movs	r2, #0
   d4c16:	4611      	mov	r1, r2
   d4c18:	6840      	ldr	r0, [r0, #4]
   d4c1a:	f7ff bf6b 	b.w	d4af4 <network_listening>

000d4c1e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4c1e:	2200      	movs	r2, #0
   d4c20:	4611      	mov	r1, r2
   d4c22:	6840      	ldr	r0, [r0, #4]
   d4c24:	f7ff bf76 	b.w	d4b14 <network_get_listen_timeout>

000d4c28 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4c28:	2200      	movs	r2, #0
   d4c2a:	6840      	ldr	r0, [r0, #4]
   d4c2c:	f7ff bf6a 	b.w	d4b04 <network_set_listen_timeout>

000d4c30 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4c30:	2200      	movs	r2, #0
   d4c32:	f081 0101 	eor.w	r1, r1, #1
   d4c36:	6840      	ldr	r0, [r0, #4]
   d4c38:	f7ff bf54 	b.w	d4ae4 <network_listen>

000d4c3c <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4c3c:	2300      	movs	r3, #0
   d4c3e:	461a      	mov	r2, r3
   d4c40:	4619      	mov	r1, r3
   d4c42:	6840      	ldr	r0, [r0, #4]
   d4c44:	f7ff bf46 	b.w	d4ad4 <network_off>

000d4c48 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4c48:	2300      	movs	r3, #0
   d4c4a:	461a      	mov	r2, r3
   d4c4c:	4619      	mov	r1, r3
   d4c4e:	6840      	ldr	r0, [r0, #4]
   d4c50:	f7ff bf38 	b.w	d4ac4 <network_on>

000d4c54 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4c54:	2200      	movs	r2, #0
   d4c56:	4611      	mov	r1, r2
   d4c58:	6840      	ldr	r0, [r0, #4]
   d4c5a:	f7ff bf2b 	b.w	d4ab4 <network_ready>

000d4c5e <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4c5e:	2200      	movs	r2, #0
   d4c60:	4611      	mov	r1, r2
   d4c62:	6840      	ldr	r0, [r0, #4]
   d4c64:	f7ff bf16 	b.w	d4a94 <network_connecting>

000d4c68 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4c68:	2200      	movs	r2, #0
   d4c6a:	2102      	movs	r1, #2
   d4c6c:	6840      	ldr	r0, [r0, #4]
   d4c6e:	f7ff bf19 	b.w	d4aa4 <network_disconnect>

000d4c72 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4c72:	2300      	movs	r3, #0
   d4c74:	461a      	mov	r2, r3
   d4c76:	6840      	ldr	r0, [r0, #4]
   d4c78:	f7ff bf04 	b.w	d4a84 <network_connect>

000d4c7c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4c7c:	4b02      	ldr	r3, [pc, #8]	; (d4c88 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4c7e:	2203      	movs	r2, #3
   d4c80:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4c82:	4a02      	ldr	r2, [pc, #8]	; (d4c8c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4c84:	601a      	str	r2, [r3, #0]
   d4c86:	4770      	bx	lr
   d4c88:	2003e39c 	.word	0x2003e39c
   d4c8c:	000d7030 	.word	0x000d7030

000d4c90 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d4c90:	4770      	bx	lr

000d4c92 <_ZN8SPIClassD0Ev>:
   d4c92:	b510      	push	{r4, lr}
   d4c94:	210c      	movs	r1, #12
   d4c96:	4604      	mov	r4, r0
   d4c98:	f001 fa6a 	bl	d6170 <_ZdlPvj>
   d4c9c:	4620      	mov	r0, r4
   d4c9e:	bd10      	pop	{r4, pc}

000d4ca0 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d4ca0:	b510      	push	{r4, lr}
   d4ca2:	4b05      	ldr	r3, [pc, #20]	; (d4cb8 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x18>)
   d4ca4:	6003      	str	r3, [r0, #0]
   d4ca6:	4604      	mov	r4, r0
{
    _spi = spi;
   d4ca8:	7101      	strb	r1, [r0, #4]
    HAL_SPI_Init(_spi);
   d4caa:	4608      	mov	r0, r1
   d4cac:	f7ff fd96 	bl	d47dc <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d4cb0:	2300      	movs	r3, #0
   d4cb2:	60a3      	str	r3, [r4, #8]
}
   d4cb4:	4620      	mov	r0, r4
   d4cb6:	bd10      	pop	{r4, pc}
   d4cb8:	000d7064 	.word	0x000d7064

000d4cbc <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d4cbc:	7900      	ldrb	r0, [r0, #4]
   d4cbe:	f7ff bd95 	b.w	d47ec <HAL_SPI_Is_Enabled>

000d4cc2 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d4cc2:	b510      	push	{r4, lr}
   d4cc4:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4cc6:	6800      	ldr	r0, [r0, #0]
   d4cc8:	b118      	cbz	r0, d4cd2 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d4cca:	f7ff ff6b 	bl	d4ba4 <free>
            wakeupSource_ = nullptr;
   d4cce:	2300      	movs	r3, #0
   d4cd0:	6023      	str	r3, [r4, #0]
   d4cd2:	bd10      	pop	{r4, pc}

000d4cd4 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4cd4:	b510      	push	{r4, lr}
   d4cd6:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d4cd8:	f7ff fff3 	bl	d4cc2 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4cdc:	4620      	mov	r0, r4
   d4cde:	bd10      	pop	{r4, pc}

000d4ce0 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4ce0:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4ce2:	4c09      	ldr	r4, [pc, #36]	; (d4d08 <_GLOBAL__sub_I_System+0x28>)
   d4ce4:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4ce6:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4cea:	6020      	str	r0, [r4, #0]
   d4cec:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4cee:	71a0      	strb	r0, [r4, #6]
   d4cf0:	8120      	strh	r0, [r4, #8]
   d4cf2:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4cf4:	f7ff fe8a 	bl	d4a0c <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4cf8:	4620      	mov	r0, r4
   d4cfa:	4a04      	ldr	r2, [pc, #16]	; (d4d0c <_GLOBAL__sub_I_System+0x2c>)
   d4cfc:	4904      	ldr	r1, [pc, #16]	; (d4d10 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4cfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4d02:	f001 ba27 	b.w	d6154 <__aeabi_atexit>
   d4d06:	bf00      	nop
   d4d08:	2003e3a4 	.word	0x2003e3a4
   d4d0c:	2003e340 	.word	0x2003e340
   d4d10:	000d4cd5 	.word	0x000d4cd5

000d4d14 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d4d14:	b510      	push	{r4, lr}
   d4d16:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d4d18:	f001 fd33 	bl	d6782 <strlen>
   d4d1c:	3801      	subs	r0, #1
   d4d1e:	1823      	adds	r3, r4, r0
   d4d20:	4620      	mov	r0, r4
	while(i<j){
   d4d22:	4298      	cmp	r0, r3
   d4d24:	d206      	bcs.n	d4d34 <_Z11str_reversePc+0x20>
		c = *i;
   d4d26:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d4d28:	7819      	ldrb	r1, [r3, #0]
   d4d2a:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d4d2e:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   d4d32:	e7f6      	b.n	d4d22 <_Z11str_reversePc+0xe>
   d4d34:	bd10      	pop	{r4, pc}

000d4d36 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d4d36:	b570      	push	{r4, r5, r6, lr}
   d4d38:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d4d3a:	1e91      	subs	r1, r2, #2
   d4d3c:	2922      	cmp	r1, #34	; 0x22
   d4d3e:	d820      	bhi.n	d4d82 <ultoa+0x4c>
   d4d40:	4625      	mov	r5, r4
   d4d42:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d4d44:	b910      	cbnz	r0, d4d4c <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d4d46:	4423      	add	r3, r4
            *ptr++ = '0';
   d4d48:	2230      	movs	r2, #48	; 0x30
   d4d4a:	e00e      	b.n	d4d6a <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d4d4c:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   d4d50:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   d4d54:	b2c1      	uxtb	r1, r0
   d4d56:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   d4d5a:	2809      	cmp	r0, #9
                *ptr += '0';
   d4d5c:	bf94      	ite	ls
   d4d5e:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d4d60:	3157      	addhi	r1, #87	; 0x57
   d4d62:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   d4d66:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d4d68:	e7eb      	b.n	d4d42 <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d4d6a:	4299      	cmp	r1, r3
   d4d6c:	d202      	bcs.n	d4d74 <ultoa+0x3e>
            *ptr++ = '0';
   d4d6e:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d4d72:	e7fa      	b.n	d4d6a <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   d4d74:	2300      	movs	r3, #0
	str_reverse(buffer);
   d4d76:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   d4d78:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   d4d7a:	f7ff ffcb 	bl	d4d14 <_Z11str_reversePc>
	return buffer;
   d4d7e:	4620      	mov	r0, r4
   d4d80:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   d4d82:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   d4d84:	bd70      	pop	{r4, r5, r6, pc}

000d4d86 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d4d86:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d4d88:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d4d8a:	460c      	mov	r4, r1
   d4d8c:	4615      	mov	r5, r2
	if(a<0){
   d4d8e:	da0b      	bge.n	d4da8 <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d4d90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d4d94:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d4d98:	bf14      	ite	ne
   d4d9a:	4258      	negne	r0, r3
   d4d9c:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d4d9e:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d4da0:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
   d4da2:	462a      	mov	r2, r5
   d4da4:	4419      	add	r1, r3
   d4da6:	e000      	b.n	d4daa <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
   d4da8:	2301      	movs	r3, #1
   d4daa:	f7ff ffc4 	bl	d4d36 <ultoa>
	}
	return buffer;
}
   d4dae:	4620      	mov	r0, r4
   d4db0:	bd38      	pop	{r3, r4, r5, pc}

000d4db2 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d4db2:	b510      	push	{r4, lr}
   d4db4:	4604      	mov	r4, r0
{
	free(buffer);
   d4db6:	6800      	ldr	r0, [r0, #0]
   d4db8:	f7ff fef4 	bl	d4ba4 <free>
}
   d4dbc:	4620      	mov	r0, r4
   d4dbe:	bd10      	pop	{r4, pc}

000d4dc0 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d4dc0:	b510      	push	{r4, lr}
   d4dc2:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d4dc4:	6800      	ldr	r0, [r0, #0]
   d4dc6:	b108      	cbz	r0, d4dcc <_ZN6String10invalidateEv+0xc>
   d4dc8:	f7ff feec 	bl	d4ba4 <free>
	buffer = NULL;
   d4dcc:	2300      	movs	r3, #0
   d4dce:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d4dd0:	60a3      	str	r3, [r4, #8]
   d4dd2:	6063      	str	r3, [r4, #4]
   d4dd4:	bd10      	pop	{r4, pc}

000d4dd6 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d4dd6:	b538      	push	{r3, r4, r5, lr}
   d4dd8:	4604      	mov	r4, r0
   d4dda:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d4ddc:	6800      	ldr	r0, [r0, #0]
   d4dde:	3101      	adds	r1, #1
   d4de0:	f7ff fee8 	bl	d4bb4 <realloc>
	if (newbuffer) {
   d4de4:	b110      	cbz	r0, d4dec <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d4de6:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d4dea:	2001      	movs	r0, #1
	}
	return 0;
}
   d4dec:	bd38      	pop	{r3, r4, r5, pc}

000d4dee <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4dee:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d4df0:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4df2:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d4df4:	b113      	cbz	r3, d4dfc <_ZN6String7reserveEj+0xe>
   d4df6:	6843      	ldr	r3, [r0, #4]
   d4df8:	428b      	cmp	r3, r1
   d4dfa:	d207      	bcs.n	d4e0c <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d4dfc:	4620      	mov	r0, r4
   d4dfe:	f7ff ffea 	bl	d4dd6 <_ZN6String12changeBufferEj>
   d4e02:	b120      	cbz	r0, d4e0e <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d4e04:	68a3      	ldr	r3, [r4, #8]
   d4e06:	b90b      	cbnz	r3, d4e0c <_ZN6String7reserveEj+0x1e>
   d4e08:	6822      	ldr	r2, [r4, #0]
   d4e0a:	7013      	strb	r3, [r2, #0]
   d4e0c:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d4e0e:	bd10      	pop	{r4, pc}

000d4e10 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4e10:	b570      	push	{r4, r5, r6, lr}
   d4e12:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d4e14:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4e16:	4604      	mov	r4, r0
   d4e18:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d4e1a:	f7ff ffe8 	bl	d4dee <_ZN6String7reserveEj>
   d4e1e:	b918      	cbnz	r0, d4e28 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d4e20:	4620      	mov	r0, r4
   d4e22:	f7ff ffcd 	bl	d4dc0 <_ZN6String10invalidateEv>
		return *this;
   d4e26:	e009      	b.n	d4e3c <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d4e28:	462a      	mov	r2, r5
   d4e2a:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d4e2c:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d4e2e:	6820      	ldr	r0, [r4, #0]
   d4e30:	f001 fc3e 	bl	d66b0 <memcpy>
	buffer[len] = 0;
   d4e34:	6822      	ldr	r2, [r4, #0]
   d4e36:	68a3      	ldr	r3, [r4, #8]
   d4e38:	2100      	movs	r1, #0
   d4e3a:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d4e3c:	4620      	mov	r0, r4
   d4e3e:	bd70      	pop	{r4, r5, r6, pc}

000d4e40 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d4e40:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4e42:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d4e44:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4e46:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d4e48:	6043      	str	r3, [r0, #4]
	len = 0;
   d4e4a:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4e4c:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d4e4e:	460d      	mov	r5, r1
   d4e50:	b139      	cbz	r1, d4e62 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d4e52:	4608      	mov	r0, r1
   d4e54:	f001 fc95 	bl	d6782 <strlen>
   d4e58:	4629      	mov	r1, r5
   d4e5a:	4602      	mov	r2, r0
   d4e5c:	4620      	mov	r0, r4
   d4e5e:	f7ff ffd7 	bl	d4e10 <_ZN6String4copyEPKcj>
}
   d4e62:	4620      	mov	r0, r4
   d4e64:	bd38      	pop	{r3, r4, r5, pc}

000d4e66 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d4e66:	b538      	push	{r3, r4, r5, lr}
   d4e68:	4605      	mov	r5, r0
	if (buffer) {
   d4e6a:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d4e6c:	460c      	mov	r4, r1
	if (buffer) {
   d4e6e:	b160      	cbz	r0, d4e8a <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
   d4e70:	686a      	ldr	r2, [r5, #4]
   d4e72:	688b      	ldr	r3, [r1, #8]
   d4e74:	429a      	cmp	r2, r3
   d4e76:	d306      	bcc.n	d4e86 <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
   d4e78:	6809      	ldr	r1, [r1, #0]
   d4e7a:	f001 fc5f 	bl	d673c <strcpy>
			len = rhs.len;
   d4e7e:	68a3      	ldr	r3, [r4, #8]
   d4e80:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d4e82:	2300      	movs	r3, #0
   d4e84:	e00a      	b.n	d4e9c <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
   d4e86:	f7ff fe8d 	bl	d4ba4 <free>
		}
	}
	buffer = rhs.buffer;
   d4e8a:	6823      	ldr	r3, [r4, #0]
   d4e8c:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d4e8e:	6863      	ldr	r3, [r4, #4]
   d4e90:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d4e92:	68a3      	ldr	r3, [r4, #8]
   d4e94:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d4e96:	2300      	movs	r3, #0
   d4e98:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
   d4e9a:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
   d4e9c:	60a3      	str	r3, [r4, #8]
   d4e9e:	bd38      	pop	{r3, r4, r5, pc}

000d4ea0 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d4ea0:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
   d4ea2:	b510      	push	{r4, lr}
   d4ea4:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d4ea6:	d001      	beq.n	d4eac <_ZN6StringaSEOS_+0xc>
   d4ea8:	f7ff ffdd 	bl	d4e66 <_ZN6String4moveERS_>
	return *this;
}
   d4eac:	4620      	mov	r0, r4
   d4eae:	bd10      	pop	{r4, pc}

000d4eb0 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d4eb0:	b538      	push	{r3, r4, r5, lr}
   d4eb2:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d4eb4:	460c      	mov	r4, r1
   d4eb6:	b141      	cbz	r1, d4eca <_ZN6StringaSEPKc+0x1a>
   d4eb8:	4608      	mov	r0, r1
   d4eba:	f001 fc62 	bl	d6782 <strlen>
   d4ebe:	4621      	mov	r1, r4
   d4ec0:	4602      	mov	r2, r0
   d4ec2:	4628      	mov	r0, r5
   d4ec4:	f7ff ffa4 	bl	d4e10 <_ZN6String4copyEPKcj>
   d4ec8:	e001      	b.n	d4ece <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d4eca:	f7ff ff79 	bl	d4dc0 <_ZN6String10invalidateEv>

	return *this;
}
   d4ece:	4628      	mov	r0, r5
   d4ed0:	bd38      	pop	{r3, r4, r5, pc}

000d4ed2 <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d4ed2:	b510      	push	{r4, lr}
   d4ed4:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4ed6:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d4ed8:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4eda:	6023      	str	r3, [r4, #0]
	capacity = 0;
   d4edc:	6063      	str	r3, [r4, #4]
	len = 0;
   d4ede:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d4ee0:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d4ee2:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
   d4ee4:	a901      	add	r1, sp, #4
   d4ee6:	f7ff ff4e 	bl	d4d86 <itoa>
	*this = buf;
   d4eea:	a901      	add	r1, sp, #4
   d4eec:	4620      	mov	r0, r4
   d4eee:	f7ff ffdf 	bl	d4eb0 <_ZN6StringaSEPKc>
}
   d4ef2:	4620      	mov	r0, r4
   d4ef4:	b00a      	add	sp, #40	; 0x28
   d4ef6:	bd10      	pop	{r4, pc}

000d4ef8 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d4ef8:	b570      	push	{r4, r5, r6, lr}
   d4efa:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d4efc:	b19a      	cbz	r2, d4f26 <_ZNK6String8getBytesEPhjj+0x2e>
   d4efe:	b191      	cbz	r1, d4f26 <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
   d4f00:	6885      	ldr	r5, [r0, #8]
   d4f02:	429d      	cmp	r5, r3
   d4f04:	d802      	bhi.n	d4f0c <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d4f06:	2300      	movs	r3, #0
   d4f08:	700b      	strb	r3, [r1, #0]
		return;
   d4f0a:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
   d4f0c:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
   d4f0e:	1aed      	subs	r5, r5, r3
	strncpy((char *)buf, buffer + index, n);
   d4f10:	6801      	ldr	r1, [r0, #0]
   d4f12:	42ac      	cmp	r4, r5
   d4f14:	bf28      	it	cs
   d4f16:	462c      	movcs	r4, r5
   d4f18:	4419      	add	r1, r3
   d4f1a:	4622      	mov	r2, r4
   d4f1c:	4630      	mov	r0, r6
   d4f1e:	f001 fc4d 	bl	d67bc <strncpy>
	buf[n] = 0;
   d4f22:	2300      	movs	r3, #0
   d4f24:	5533      	strb	r3, [r6, r4]
   d4f26:	bd70      	pop	{r4, r5, r6, pc}

000d4f28 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d4f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   d4f2a:	429a      	cmp	r2, r3
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d4f2c:	460f      	mov	r7, r1
   d4f2e:	461d      	mov	r5, r3
	if (left > right) {
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d4f30:	490c      	ldr	r1, [pc, #48]	; (d4f64 <_ZNK6String9substringEjj+0x3c>)
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
   d4f32:	bf88      	it	hi
   d4f34:	4613      	movhi	r3, r2
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d4f36:	4614      	mov	r4, r2
   d4f38:	4606      	mov	r6, r0
	if (left > right) {
   d4f3a:	bf84      	itt	hi
   d4f3c:	462c      	movhi	r4, r5
   d4f3e:	461d      	movhi	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d4f40:	f7ff ff7e 	bl	d4e40 <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   d4f44:	68ba      	ldr	r2, [r7, #8]
   d4f46:	4294      	cmp	r4, r2
   d4f48:	d80a      	bhi.n	d4f60 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   d4f4a:	6839      	ldr	r1, [r7, #0]
   d4f4c:	4295      	cmp	r5, r2
   d4f4e:	bf94      	ite	ls
   d4f50:	ebc4 0205 	rsbls	r2, r4, r5
   d4f54:	ebc4 0202 	rsbhi	r2, r4, r2
   d4f58:	4421      	add	r1, r4
   d4f5a:	4630      	mov	r0, r6
   d4f5c:	f7ff ff58 	bl	d4e10 <_ZN6String4copyEPKcj>
	return out;
}
   d4f60:	4630      	mov	r0, r6
   d4f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4f64:	000d7110 	.word	0x000d7110

000d4f68 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4f68:	b510      	push	{r4, lr}
   d4f6a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4f6c:	6800      	ldr	r0, [r0, #0]
   d4f6e:	b108      	cbz	r0, d4f74 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4f70:	f7ff fc84 	bl	d487c <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d4f74:	4620      	mov	r0, r4
   d4f76:	bd10      	pop	{r4, pc}

000d4f78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d4f78:	680b      	ldr	r3, [r1, #0]
   d4f7a:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d4f7c:	b113      	cbz	r3, d4f84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d4f7e:	685a      	ldr	r2, [r3, #4]
   d4f80:	3201      	adds	r2, #1
   d4f82:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d4f84:	4770      	bx	lr
	...

000d4f88 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4f88:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4f8a:	4c06      	ldr	r4, [pc, #24]	; (d4fa4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4f8c:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d4f8e:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4f90:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4f92:	f7ff fc6b 	bl	d486c <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4f96:	4620      	mov	r0, r4
   d4f98:	4a03      	ldr	r2, [pc, #12]	; (d4fa8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4f9a:	4904      	ldr	r1, [pc, #16]	; (d4fac <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4f9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4fa0:	f001 b8d8 	b.w	d6154 <__aeabi_atexit>
   d4fa4:	2003e3b0 	.word	0x2003e3b0
   d4fa8:	2003e340 	.word	0x2003e340
   d4fac:	000d4f69 	.word	0x000d4f69

000d4fb0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4fb2:	4606      	mov	r6, r0
   d4fb4:	460d      	mov	r5, r1
   d4fb6:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d4fb8:	2400      	movs	r4, #0
  while (size--) {
   d4fba:	42bd      	cmp	r5, r7
   d4fbc:	d00c      	beq.n	d4fd8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4fbe:	6833      	ldr	r3, [r6, #0]
   d4fc0:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4fc4:	689b      	ldr	r3, [r3, #8]
   d4fc6:	4630      	mov	r0, r6
   d4fc8:	4798      	blx	r3
     if (chunk>=0)
   d4fca:	2800      	cmp	r0, #0
   d4fcc:	db01      	blt.n	d4fd2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4fce:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d4fd0:	e7f3      	b.n	d4fba <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4fd2:	2c00      	cmp	r4, #0
   d4fd4:	bf08      	it	eq
   d4fd6:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d4fd8:	4620      	mov	r0, r4
   d4fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4fdc <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4fdc:	b570      	push	{r4, r5, r6, lr}
   d4fde:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d4fe0:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d4fe2:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d4fe4:	b149      	cbz	r1, d4ffa <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d4fe6:	f001 fbcc 	bl	d6782 <strlen>
   d4fea:	682b      	ldr	r3, [r5, #0]
   d4fec:	4602      	mov	r2, r0
   d4fee:	4621      	mov	r1, r4
   d4ff0:	4628      	mov	r0, r5
   d4ff2:	68db      	ldr	r3, [r3, #12]
    }
   d4ff4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4ff8:	4718      	bx	r3
    }
   d4ffa:	bd70      	pop	{r4, r5, r6, pc}

000d4ffc <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4ffc:	6803      	ldr	r3, [r0, #0]
   d4ffe:	689b      	ldr	r3, [r3, #8]
   d5000:	4718      	bx	r3

000d5002 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5002:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5004:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5006:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5008:	f7ff fff8 	bl	d4ffc <_ZN5Print5printEc>
  n += print('\n');
   d500c:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d500e:	4604      	mov	r4, r0
  n += print('\n');
   d5010:	4628      	mov	r0, r5
   d5012:	f7ff fff3 	bl	d4ffc <_ZN5Print5printEc>
  return n;
}
   d5016:	4420      	add	r0, r4
   d5018:	bd38      	pop	{r3, r4, r5, pc}

000d501a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d501a:	b538      	push	{r3, r4, r5, lr}
   d501c:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d501e:	f7ff ffdd 	bl	d4fdc <_ZN5Print5writeEPKc>
   d5022:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d5024:	4628      	mov	r0, r5
   d5026:	f7ff ffec 	bl	d5002 <_ZN5Print7printlnEv>
  return n;
}
   d502a:	4420      	add	r0, r4
   d502c:	bd38      	pop	{r3, r4, r5, pc}

000d502e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d502e:	b530      	push	{r4, r5, lr}
   d5030:	b08b      	sub	sp, #44	; 0x2c
   d5032:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5034:	2100      	movs	r1, #0
   d5036:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d503a:	2a01      	cmp	r2, #1
   d503c:	bf98      	it	ls
   d503e:	220a      	movls	r2, #10
   d5040:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d5044:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d5048:	fb05 3312 	mls	r3, r5, r2, r3
   d504c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5050:	2b09      	cmp	r3, #9
   d5052:	bf94      	ite	ls
   d5054:	3330      	addls	r3, #48	; 0x30
   d5056:	3337      	addhi	r3, #55	; 0x37
   d5058:	b2db      	uxtb	r3, r3
   d505a:	4621      	mov	r1, r4
   d505c:	f804 3901 	strb.w	r3, [r4], #-1
   d5060:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d5062:	2d00      	cmp	r5, #0
   d5064:	d1ee      	bne.n	d5044 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d5066:	f7ff ffb9 	bl	d4fdc <_ZN5Print5writeEPKc>
}
   d506a:	b00b      	add	sp, #44	; 0x2c
   d506c:	bd30      	pop	{r4, r5, pc}

000d506e <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d506e:	b40c      	push	{r2, r3}
   d5070:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5074:	b087      	sub	sp, #28
   d5076:	af00      	add	r7, sp, #0
   d5078:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d507c:	4605      	mov	r5, r0
   d507e:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d5082:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d5084:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d5086:	4623      	mov	r3, r4
   d5088:	464a      	mov	r2, r9
   d508a:	2114      	movs	r1, #20
   d508c:	1d38      	adds	r0, r7, #4
   d508e:	f7ff fda9 	bl	d4be4 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d5092:	2813      	cmp	r0, #19
   d5094:	d805      	bhi.n	d50a2 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5096:	1d39      	adds	r1, r7, #4
   d5098:	4628      	mov	r0, r5
   d509a:	f7ff ff9f 	bl	d4fdc <_ZN5Print5writeEPKc>
   d509e:	4604      	mov	r4, r0
   d50a0:	e013      	b.n	d50ca <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d50a2:	f100 0308 	add.w	r3, r0, #8
   d50a6:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d50aa:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d50ac:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d50b0:	1c41      	adds	r1, r0, #1
   d50b2:	4623      	mov	r3, r4
   d50b4:	464a      	mov	r2, r9
   d50b6:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d50b8:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d50ba:	f7ff fd93 	bl	d4be4 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d50be:	4669      	mov	r1, sp
   d50c0:	4628      	mov	r0, r5
   d50c2:	f7ff ff8b 	bl	d4fdc <_ZN5Print5writeEPKc>
   d50c6:	4604      	mov	r4, r0
   d50c8:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d50ca:	b11e      	cbz	r6, d50d4 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d50cc:	4628      	mov	r0, r5
   d50ce:	f7ff ff98 	bl	d5002 <_ZN5Print7printlnEv>
   d50d2:	4404      	add	r4, r0
    return n;
}
   d50d4:	4620      	mov	r0, r4
   d50d6:	371c      	adds	r7, #28
   d50d8:	46bd      	mov	sp, r7
   d50da:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d50de:	b002      	add	sp, #8
   d50e0:	4770      	bx	lr
	...

000d50e4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d50e4:	4b01      	ldr	r3, [pc, #4]	; (d50ec <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d50e6:	4a02      	ldr	r2, [pc, #8]	; (d50f0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d50e8:	601a      	str	r2, [r3, #0]
   d50ea:	4770      	bx	lr
   d50ec:	2003e3b4 	.word	0x2003e3b4
   d50f0:	000d70df 	.word	0x000d70df

000d50f4 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d50f4:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d50f6:	2000      	movs	r0, #0
   d50f8:	f7ff fd3c 	bl	d4b74 <spark_sync_time_pending>
   d50fc:	b128      	cbz	r0, d510a <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d50fe:	f7ff fd21 	bl	d4b44 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d5102:	f080 0001 	eor.w	r0, r0, #1
   d5106:	b2c0      	uxtb	r0, r0
   d5108:	bd08      	pop	{r3, pc}
   d510a:	2001      	movs	r0, #1
    }
   d510c:	bd08      	pop	{r3, pc}
	...

000d5110 <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d5110:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   d5114:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d5118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d511c:	d40f      	bmi.n	d513e <_ZN9TimeClass4zoneEf+0x2e>
   d511e:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   d5122:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d5126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d512a:	dc08      	bgt.n	d513e <_ZN9TimeClass4zoneEf+0x2e>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   d512c:	eddf 7a04 	vldr	s15, [pc, #16]	; d5140 <_ZN9TimeClass4zoneEf+0x30>
   d5130:	4b04      	ldr	r3, [pc, #16]	; (d5144 <_ZN9TimeClass4zoneEf+0x34>)
   d5132:	ee20 0a27 	vmul.f32	s0, s0, s15
   d5136:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d513a:	ed83 0a00 	vstr	s0, [r3]
   d513e:	4770      	bx	lr
   d5140:	45610000 	.word	0x45610000
   d5144:	2003e3c0 	.word	0x2003e3c0

000d5148 <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d5148:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
   d514a:	4b0e      	ldr	r3, [pc, #56]	; (d5184 <_ZN9TimeClass7timeStrEl+0x3c>)
   d514c:	681b      	ldr	r3, [r3, #0]
   d514e:	4419      	add	r1, r3
   d5150:	4b0d      	ldr	r3, [pc, #52]	; (d5188 <_ZN9TimeClass7timeStrEl+0x40>)
   d5152:	681b      	ldr	r3, [r3, #0]
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d5154:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
   d5156:	a802      	add	r0, sp, #8
   d5158:	4419      	add	r1, r3
   d515a:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
   d515e:	f001 f9af 	bl	d64c0 <localtime>
        char* ascstr = asctime(calendar_time);
   d5162:	f001 f963 	bl	d642c <asctime>
   d5166:	4605      	mov	r5, r0
        int len = strlen(ascstr);
   d5168:	f001 fb0b 	bl	d6782 <strlen>
        ascstr[len-1] = 0; // remove final newline
   d516c:	4428      	add	r0, r5
   d516e:	2300      	movs	r3, #0
   d5170:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
   d5174:	4629      	mov	r1, r5
   d5176:	4620      	mov	r0, r4
   d5178:	f7ff fe62 	bl	d4e40 <_ZN6StringC1EPK19__FlashStringHelper>
}
   d517c:	4620      	mov	r0, r4
   d517e:	b003      	add	sp, #12
   d5180:	bd30      	pop	{r4, r5, pc}
   d5182:	bf00      	nop
   d5184:	2003e3c0 	.word	0x2003e3c0
   d5188:	2003e3bc 	.word	0x2003e3bc

000d518c <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d518c:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d518e:	2000      	movs	r0, #0
   d5190:	f7ff fb4c 	bl	d482c <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d5194:	4604      	mov	r4, r0
   d5196:	b968      	cbnz	r0, d51b4 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d5198:	f7ff fc30 	bl	d49fc <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d519c:	2801      	cmp	r0, #1
   d519e:	d10b      	bne.n	d51b8 <_ZN9TimeClass7isValidEv+0x2c>
   d51a0:	4620      	mov	r0, r4
   d51a2:	f7ff fc53 	bl	d4a4c <system_thread_get_state>
   d51a6:	b938      	cbnz	r0, d51b8 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d51a8:	f7ff ffa4 	bl	d50f4 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d51ac:	b930      	cbnz	r0, d51bc <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d51ae:	f7ff fcc1 	bl	d4b34 <spark_process>
   d51b2:	e7f9      	b.n	d51a8 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d51b4:	2001      	movs	r0, #1
   d51b6:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d51b8:	2000      	movs	r0, #0
   d51ba:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d51bc:	f7ff ff9a 	bl	d50f4 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d51c0:	2000      	movs	r0, #0
   d51c2:	f7ff fb33 	bl	d482c <HAL_RTC_Time_Is_Valid>
   d51c6:	3000      	adds	r0, #0
   d51c8:	bf18      	it	ne
   d51ca:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d51cc:	bd10      	pop	{r4, pc}

000d51ce <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d51ce:	b508      	push	{r3, lr}
    (void)isValid();
   d51d0:	f7ff ffdc 	bl	d518c <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d51d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d51d8:	f7ff bb20 	b.w	d481c <HAL_RTC_Get_UnixTime>

000d51dc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d51dc:	4b02      	ldr	r3, [pc, #8]	; (d51e8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d51de:	681a      	ldr	r2, [r3, #0]
   d51e0:	4b02      	ldr	r3, [pc, #8]	; (d51ec <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d51e2:	601a      	str	r2, [r3, #0]
   d51e4:	4770      	bx	lr
   d51e6:	bf00      	nop
   d51e8:	2003e288 	.word	0x2003e288
   d51ec:	2003e3b8 	.word	0x2003e3b8

000d51f0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d51f0:	2100      	movs	r1, #0
   d51f2:	f7ff bc13 	b.w	d4a1c <system_delay_ms>

000d51f6 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d51f6:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d51f8:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d51fa:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d51fc:	b113      	cbz	r3, d5204 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d51fe:	2203      	movs	r2, #3
   d5200:	4601      	mov	r1, r0
   d5202:	4798      	blx	r3
    }
   d5204:	4620      	mov	r0, r4
   d5206:	bd10      	pop	{r4, pc}

000d5208 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5208:	b510      	push	{r4, lr}
   d520a:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d520c:	f7ff fff3 	bl	d51f6 <_ZNSt14_Function_baseD1Ev>
   d5210:	4620      	mov	r0, r4
   d5212:	bd10      	pop	{r4, pc}

000d5214 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d5214:	b513      	push	{r0, r1, r4, lr}
   d5216:	460b      	mov	r3, r1
   d5218:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d521a:	c803      	ldmia	r0, {r0, r1}
   d521c:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5220:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5224:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5228:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d522c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d5230:	b002      	add	sp, #8
   d5232:	bd10      	pop	{r4, pc}

000d5234 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5234:	4803      	ldr	r0, [pc, #12]	; (d5244 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5236:	4a04      	ldr	r2, [pc, #16]	; (d5248 <_GLOBAL__sub_I_RGB+0x14>)
   d5238:	4904      	ldr	r1, [pc, #16]	; (d524c <_GLOBAL__sub_I_RGB+0x18>)
   d523a:	2300      	movs	r3, #0
   d523c:	6083      	str	r3, [r0, #8]
   d523e:	f000 bf89 	b.w	d6154 <__aeabi_atexit>
   d5242:	bf00      	nop
   d5244:	2003e3c4 	.word	0x2003e3c4
   d5248:	2003e340 	.word	0x2003e340
   d524c:	000d5209 	.word	0x000d5209

000d5250 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5250:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5252:	4b0c      	ldr	r3, [pc, #48]	; (d5284 <serialEventRun+0x34>)
   d5254:	b133      	cbz	r3, d5264 <serialEventRun+0x14>
   d5256:	f000 fc1b 	bl	d5a90 <_Z16_fetch_usbserialv>
   d525a:	6803      	ldr	r3, [r0, #0]
   d525c:	691b      	ldr	r3, [r3, #16]
   d525e:	4798      	blx	r3
   d5260:	2800      	cmp	r0, #0
   d5262:	dc09      	bgt.n	d5278 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d5264:	4b08      	ldr	r3, [pc, #32]	; (d5288 <serialEventRun+0x38>)
   d5266:	b163      	cbz	r3, d5282 <serialEventRun+0x32>
   d5268:	f000 fc94 	bl	d5b94 <_Z22__fetch_global_Serial1v>
   d526c:	6803      	ldr	r3, [r0, #0]
   d526e:	691b      	ldr	r3, [r3, #16]
   d5270:	4798      	blx	r3
   d5272:	2800      	cmp	r0, #0
   d5274:	dc03      	bgt.n	d527e <serialEventRun+0x2e>
   d5276:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5278:	f3af 8000 	nop.w
   d527c:	e7f2      	b.n	d5264 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d527e:	f3af 8000 	nop.w
   d5282:	bd08      	pop	{r3, pc}
	...

000d528c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d528c:	b508      	push	{r3, lr}
	serialEventRun();
   d528e:	f7ff ffdf 	bl	d5250 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5292:	f7ff fabb 	bl	d480c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5296:	4b01      	ldr	r3, [pc, #4]	; (d529c <_post_loop+0x10>)
   d5298:	6018      	str	r0, [r3, #0]
   d529a:	bd08      	pop	{r3, pc}
   d529c:	2003e708 	.word	0x2003e708

000d52a0 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d52a0:	4802      	ldr	r0, [pc, #8]	; (d52ac <_Z33system_initialize_user_backup_ramv+0xc>)
   d52a2:	4a03      	ldr	r2, [pc, #12]	; (d52b0 <_Z33system_initialize_user_backup_ramv+0x10>)
   d52a4:	4903      	ldr	r1, [pc, #12]	; (d52b4 <_Z33system_initialize_user_backup_ramv+0x14>)
   d52a6:	1a12      	subs	r2, r2, r0
   d52a8:	f001 ba02 	b.w	d66b0 <memcpy>
   d52ac:	2003f400 	.word	0x2003f400
   d52b0:	2003f404 	.word	0x2003f404
   d52b4:	000d7560 	.word	0x000d7560

000d52b8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d52b8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d52ba:	2300      	movs	r3, #0
   d52bc:	9300      	str	r3, [sp, #0]
   d52be:	461a      	mov	r2, r3
   d52c0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d52c4:	f7ff fbd4 	bl	d4a70 <system_ctrl_set_result>
}
   d52c8:	b003      	add	sp, #12
   d52ca:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d52d0 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d52d0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d52d2:	8843      	ldrh	r3, [r0, #2]
   d52d4:	2b0a      	cmp	r3, #10
   d52d6:	d008      	beq.n	d52ea <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d52d8:	2b50      	cmp	r3, #80	; 0x50
   d52da:	d109      	bne.n	d52f0 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d52dc:	4b09      	ldr	r3, [pc, #36]	; (d5304 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d52de:	681b      	ldr	r3, [r3, #0]
   d52e0:	b13b      	cbz	r3, d52f2 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d52e2:	b003      	add	sp, #12
   d52e4:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d52e8:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d52ea:	f7ff ffe5 	bl	d52b8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d52ee:	e006      	b.n	d52fe <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d52f0:	2300      	movs	r3, #0
   d52f2:	9300      	str	r3, [sp, #0]
   d52f4:	461a      	mov	r2, r3
   d52f6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d52fa:	f7ff fbb9 	bl	d4a70 <system_ctrl_set_result>
        break;
    }
}
   d52fe:	b003      	add	sp, #12
   d5300:	f85d fb04 	ldr.w	pc, [sp], #4
   d5304:	2003e3d4 	.word	0x2003e3d4

000d5308 <module_user_init_hook>:

void module_user_init_hook()
{
   d5308:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d530a:	4c10      	ldr	r4, [pc, #64]	; (d534c <module_user_init_hook+0x44>)
   d530c:	4d10      	ldr	r5, [pc, #64]	; (d5350 <module_user_init_hook+0x48>)
   d530e:	6823      	ldr	r3, [r4, #0]
   d5310:	42ab      	cmp	r3, r5
   d5312:	4b10      	ldr	r3, [pc, #64]	; (d5354 <module_user_init_hook+0x4c>)
   d5314:	bf0c      	ite	eq
   d5316:	2201      	moveq	r2, #1
   d5318:	2200      	movne	r2, #0
   d531a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d531c:	d002      	beq.n	d5324 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d531e:	f7ff ffbf 	bl	d52a0 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d5322:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5324:	f7ff fa6a 	bl	d47fc <HAL_RNG_GetRandomNumber>
   d5328:	4604      	mov	r4, r0
    srand(seed);
   d532a:	f001 f9d5 	bl	d66d8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d532e:	4b0a      	ldr	r3, [pc, #40]	; (d5358 <module_user_init_hook+0x50>)
   d5330:	b113      	cbz	r3, d5338 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d5332:	4620      	mov	r0, r4
   d5334:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5338:	2100      	movs	r1, #0
   d533a:	4807      	ldr	r0, [pc, #28]	; (d5358 <module_user_init_hook+0x50>)
   d533c:	f7ff fc22 	bl	d4b84 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5340:	2100      	movs	r1, #0
   d5342:	4806      	ldr	r0, [pc, #24]	; (d535c <module_user_init_hook+0x54>)
}
   d5344:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5348:	f7ff bb88 	b.w	d4a5c <system_ctrl_set_app_request_handler>
   d534c:	2003f400 	.word	0x2003f400
   d5350:	9a271c1e 	.word	0x9a271c1e
   d5354:	2003e3d8 	.word	0x2003e3d8
   d5358:	00000000 	.word	0x00000000
   d535c:	000d52d1 	.word	0x000d52d1

000d5360 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5360:	4770      	bx	lr

000d5362 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d5362:	2000      	movs	r0, #0
   d5364:	4770      	bx	lr

000d5366 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5366:	b510      	push	{r4, lr}
   d5368:	2110      	movs	r1, #16
   d536a:	4604      	mov	r4, r0
   d536c:	f000 ff00 	bl	d6170 <_ZdlPvj>
   d5370:	4620      	mov	r0, r4
   d5372:	bd10      	pop	{r4, pc}

000d5374 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d5374:	b508      	push	{r3, lr}
      { delete this; }
   d5376:	b108      	cbz	r0, d537c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d5378:	f7ff fff5 	bl	d5366 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d537c:	bd08      	pop	{r3, pc}

000d537e <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d537e:	2200      	movs	r2, #0
   d5380:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d5382:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5384:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d5388:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d538a:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d538e:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d5390:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5392:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5394:	680c      	ldr	r4, [r1, #0]
   d5396:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d5398:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d539a:	bd10      	pop	{r4, pc}

000d539c <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d539c:	b510      	push	{r4, lr}
   d539e:	4604      	mov	r4, r0
    free((void*)msg_);
   d53a0:	6800      	ldr	r0, [r0, #0]
   d53a2:	f7ff fbff 	bl	d4ba4 <free>
}
   d53a6:	4620      	mov	r0, r4
   d53a8:	bd10      	pop	{r4, pc}

000d53aa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d53aa:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d53ac:	68c4      	ldr	r4, [r0, #12]
   d53ae:	b1f4      	cbz	r4, d53ee <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d53b0:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d53b2:	2b02      	cmp	r3, #2
   d53b4:	d103      	bne.n	d53be <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d53b6:	f104 000c 	add.w	r0, r4, #12
   d53ba:	f7ff ffef 	bl	d539c <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d53be:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d53c0:	b135      	cbz	r5, d53d0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d53c2:	4628      	mov	r0, r5
   d53c4:	f7ff ff17 	bl	d51f6 <_ZNSt14_Function_baseD1Ev>
   d53c8:	2110      	movs	r1, #16
   d53ca:	4628      	mov	r0, r5
   d53cc:	f000 fed0 	bl	d6170 <_ZdlPvj>
   d53d0:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d53d2:	b135      	cbz	r5, d53e2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d53d4:	4628      	mov	r0, r5
   d53d6:	f7ff ff0e 	bl	d51f6 <_ZNSt14_Function_baseD1Ev>
   d53da:	2110      	movs	r1, #16
   d53dc:	4628      	mov	r0, r5
   d53de:	f000 fec7 	bl	d6170 <_ZdlPvj>
   d53e2:	4620      	mov	r0, r4
   d53e4:	2114      	movs	r1, #20
   d53e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d53ea:	f000 bec1 	b.w	d6170 <_ZdlPvj>
   d53ee:	bd38      	pop	{r3, r4, r5, pc}

000d53f0 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d53f0:	b513      	push	{r0, r1, r4, lr}
   d53f2:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d53f4:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d53f8:	2300      	movs	r3, #0
   d53fa:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d53fc:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d53fe:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d5400:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5402:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d5404:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5406:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5408:	f7fe ff3a 	bl	d4280 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d540c:	4620      	mov	r0, r4
   d540e:	b002      	add	sp, #8
   d5410:	bd10      	pop	{r4, pc}

000d5412 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d5412:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5414:	460c      	mov	r4, r1
   d5416:	ad02      	add	r5, sp, #8
   d5418:	f854 3b04 	ldr.w	r3, [r4], #4
   d541c:	f845 3d08 	str.w	r3, [r5, #-8]!
   d5420:	4606      	mov	r6, r0
   d5422:	460f      	mov	r7, r1
   d5424:	a801      	add	r0, sp, #4
   d5426:	4621      	mov	r1, r4
   d5428:	f7ff fda6 	bl	d4f78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d542c:	4629      	mov	r1, r5
   d542e:	4630      	mov	r0, r6
   d5430:	f7ff ffde 	bl	d53f0 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5434:	a801      	add	r0, sp, #4
   d5436:	f7fe ff23 	bl	d4280 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d543a:	4620      	mov	r0, r4
   d543c:	f7fe ff20 	bl	d4280 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d5440:	4638      	mov	r0, r7
   d5442:	2108      	movs	r1, #8
   d5444:	f000 fe94 	bl	d6170 <_ZdlPvj>
        return p;
    }
   d5448:	4630      	mov	r0, r6
   d544a:	b003      	add	sp, #12
   d544c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d5450 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d5450:	b538      	push	{r3, r4, r5, lr}
   d5452:	2300      	movs	r3, #0
   d5454:	4604      	mov	r4, r0
   d5456:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5458:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d545a:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d545c:	f7fe fe1b 	bl	d4096 <_Znwj>
   d5460:	b128      	cbz	r0, d546e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d5462:	2301      	movs	r3, #1
   d5464:	6043      	str	r3, [r0, #4]
   d5466:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d5468:	4b02      	ldr	r3, [pc, #8]	; (d5474 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d546a:	6003      	str	r3, [r0, #0]
   d546c:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d546e:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d5470:	4620      	mov	r0, r4
   d5472:	bd38      	pop	{r3, r4, r5, pc}
   d5474:	000d7178 	.word	0x000d7178

000d5478 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5478:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d547a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d547c:	b90a      	cbnz	r2, d5482 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d547e:	f000 fe8a 	bl	d6196 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5482:	68c3      	ldr	r3, [r0, #12]
    }
   d5484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5488:	4718      	bx	r3

000d548a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d548a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d548c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d548e:	f100 0110 	add.w	r1, r0, #16
   d5492:	f7ff fff1 	bl	d5478 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5496:	bd08      	pop	{r3, pc}

000d5498 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5498:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d549a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d549c:	b90a      	cbnz	r2, d54a2 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d549e:	f000 fe7a 	bl	d6196 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d54a2:	68c3      	ldr	r3, [r0, #12]
    }
   d54a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d54a8:	4718      	bx	r3

000d54aa <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d54aa:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d54ac:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d54ae:	f100 0110 	add.w	r1, r0, #16
   d54b2:	f7ff fff1 	bl	d5498 <_ZNKSt8functionIFvRKbEEclES1_>
   d54b6:	bd08      	pop	{r3, pc}

000d54b8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d54b8:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d54ba:	2300      	movs	r3, #0
   d54bc:	6083      	str	r3, [r0, #8]
   d54be:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d54c0:	4604      	mov	r4, r0
   d54c2:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d54c4:	b12b      	cbz	r3, d54d2 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d54c6:	2202      	movs	r2, #2
   d54c8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d54ca:	68eb      	ldr	r3, [r5, #12]
   d54cc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d54ce:	68ab      	ldr	r3, [r5, #8]
   d54d0:	60a3      	str	r3, [r4, #8]
	}
    }
   d54d2:	4620      	mov	r0, r4
   d54d4:	bd38      	pop	{r3, r4, r5, pc}
	...

000d54d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d54d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d54da:	b089      	sub	sp, #36	; 0x24
   d54dc:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d54de:	4668      	mov	r0, sp
   d54e0:	f7ff ff4d 	bl	d537e <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d54e4:	2300      	movs	r3, #0
   d54e6:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d54ea:	f04f 0202 	mov.w	r2, #2
   d54ee:	e8d4 3f4f 	ldrexb	r3, [r4]
   d54f2:	2b00      	cmp	r3, #0
   d54f4:	d103      	bne.n	d54fe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d54f6:	e8c4 2f41 	strexb	r1, r2, [r4]
   d54fa:	2900      	cmp	r1, #0
   d54fc:	d1f7      	bne.n	d54ee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d54fe:	d002      	beq.n	d5506 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d5500:	f88d 3008 	strb.w	r3, [sp, #8]
   d5504:	e063      	b.n	d55ce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d5506:	f114 050c 	adds.w	r5, r4, #12
   d550a:	d003      	beq.n	d5514 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d550c:	4669      	mov	r1, sp
   d550e:	4628      	mov	r0, r5
   d5510:	f7ff ff35 	bl	d537e <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5514:	f3bf 8f5f 	dmb	sy
   d5518:	2301      	movs	r3, #1
   d551a:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d551c:	2000      	movs	r0, #0
   d551e:	f104 0308 	add.w	r3, r4, #8
   d5522:	f3bf 8f5f 	dmb	sy
   d5526:	e853 6f00 	ldrex	r6, [r3]
   d552a:	e843 0200 	strex	r2, r0, [r3]
   d552e:	2a00      	cmp	r2, #0
   d5530:	d1f9      	bne.n	d5526 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d5532:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5536:	2e00      	cmp	r6, #0
   d5538:	d049      	beq.n	d55ce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d553a:	f7ff fa77 	bl	d4a2c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d553e:	b120      	cbz	r0, d554a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5540:	4629      	mov	r1, r5
   d5542:	4630      	mov	r0, r6
   d5544:	f7ff ff98 	bl	d5478 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5548:	e03a      	b.n	d55c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d554a:	4631      	mov	r1, r6
   d554c:	a802      	add	r0, sp, #8
   d554e:	f7ff ffb3 	bl	d54b8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d5552:	68e0      	ldr	r0, [r4, #12]
   d5554:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5558:	b108      	cbz	r0, d555e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d555a:	f001 f8f7 	bl	d674c <strdup>
   d555e:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5560:	2010      	movs	r0, #16
   d5562:	f8ad 501c 	strh.w	r5, [sp, #28]
   d5566:	f7fe fd96 	bl	d4096 <_Znwj>
   d556a:	4605      	mov	r5, r0
   d556c:	b1e8      	cbz	r0, d55aa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d556e:	2700      	movs	r7, #0
   d5570:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5572:	2018      	movs	r0, #24
   d5574:	f7fe fd8f 	bl	d4096 <_Znwj>
   d5578:	4604      	mov	r4, r0
   d557a:	b188      	cbz	r0, d55a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d557c:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d557e:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5580:	a802      	add	r0, sp, #8
   d5582:	f7ff fe47 	bl	d5214 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5586:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5588:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d558a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d558c:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d558e:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5590:	a906      	add	r1, sp, #24
   d5592:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5594:	60e3      	str	r3, [r4, #12]
   d5596:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d559a:	9205      	str	r2, [sp, #20]
   d559c:	f7ff feef 	bl	d537e <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d55a0:	4b0d      	ldr	r3, [pc, #52]	; (d55d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d55a2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d55a4:	4b0d      	ldr	r3, [pc, #52]	; (d55dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d55a6:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d55a8:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d55aa:	a806      	add	r0, sp, #24
   d55ac:	f7ff fef6 	bl	d539c <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d55b0:	a802      	add	r0, sp, #8
   d55b2:	f7ff fe20 	bl	d51f6 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d55b6:	2200      	movs	r2, #0
   d55b8:	4629      	mov	r1, r5
   d55ba:	4809      	ldr	r0, [pc, #36]	; (d55e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d55bc:	f7ff fa3e 	bl	d4a3c <application_thread_invoke>
   d55c0:	4630      	mov	r0, r6
   d55c2:	f7ff fe18 	bl	d51f6 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d55c6:	2110      	movs	r1, #16
   d55c8:	4630      	mov	r0, r6
   d55ca:	f000 fdd1 	bl	d6170 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d55ce:	4668      	mov	r0, sp
   d55d0:	f7ff fee4 	bl	d539c <_ZN8particle5ErrorD1Ev>
    }
   d55d4:	b009      	add	sp, #36	; 0x24
   d55d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d55d8:	000d548b 	.word	0x000d548b
   d55dc:	000d5701 	.word	0x000d5701
   d55e0:	000d5be1 	.word	0x000d5be1

000d55e4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d55e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d55e8:	b08b      	sub	sp, #44	; 0x2c
   d55ea:	4606      	mov	r6, r0
   d55ec:	460f      	mov	r7, r1
   d55ee:	4690      	mov	r8, r2
   d55f0:	4699      	mov	r9, r3
   d55f2:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d55f6:	f7ff faa5 	bl	d4b44 <spark_cloud_flag_connected>
   d55fa:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d55fc:	4683      	mov	fp, r0
   d55fe:	bb30      	cbnz	r0, d564e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5600:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d5604:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5606:	a905      	add	r1, sp, #20
   d5608:	4628      	mov	r0, r5
   d560a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d560e:	f7ff feb6 	bl	d537e <_ZN8particle5ErrorC1EOS0_>
   d5612:	2014      	movs	r0, #20
   d5614:	f7fe fd3f 	bl	d4096 <_Znwj>
   d5618:	4604      	mov	r4, r0
   d561a:	b158      	cbz	r0, d5634 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d561c:	2302      	movs	r3, #2
   d561e:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5620:	2301      	movs	r3, #1
   d5622:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5624:	f8c0 b004 	str.w	fp, [r0, #4]
   d5628:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d562c:	4629      	mov	r1, r5
   d562e:	300c      	adds	r0, #12
   d5630:	f7ff fea5 	bl	d537e <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d5634:	4630      	mov	r0, r6
   d5636:	4621      	mov	r1, r4
   d5638:	f840 4b04 	str.w	r4, [r0], #4
   d563c:	f7ff ff08 	bl	d5450 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5640:	4628      	mov	r0, r5
   d5642:	f7ff feab 	bl	d539c <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d5646:	a805      	add	r0, sp, #20
   d5648:	f7ff fea8 	bl	d539c <_ZN8particle5ErrorD1Ev>
   d564c:	e052      	b.n	d56f4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d564e:	2400      	movs	r4, #0
   d5650:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d5652:	2014      	movs	r0, #20
   d5654:	606c      	str	r4, [r5, #4]
   d5656:	60ac      	str	r4, [r5, #8]
   d5658:	9307      	str	r3, [sp, #28]
   d565a:	f7fe fd1c 	bl	d4096 <_Znwj>
   d565e:	4601      	mov	r1, r0
   d5660:	b118      	cbz	r0, d566a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d5662:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5664:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5666:	6044      	str	r4, [r0, #4]
   d5668:	6084      	str	r4, [r0, #8]
   d566a:	a804      	add	r0, sp, #16
   d566c:	9103      	str	r1, [sp, #12]
   d566e:	f7ff feef 	bl	d5450 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d5672:	4b22      	ldr	r3, [pc, #136]	; (d56fc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d5674:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d5676:	2008      	movs	r0, #8
   d5678:	f7fe fd0d 	bl	d4096 <_Znwj>
   d567c:	4604      	mov	r4, r0
   d567e:	b128      	cbz	r0, d568c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5680:	9b03      	ldr	r3, [sp, #12]
   d5682:	f840 3b04 	str.w	r3, [r0], #4
   d5686:	a904      	add	r1, sp, #16
   d5688:	f7ff fc76 	bl	d4f78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d568c:	9500      	str	r5, [sp, #0]
   d568e:	fa5f f38a 	uxtb.w	r3, sl
   d5692:	464a      	mov	r2, r9
   d5694:	4641      	mov	r1, r8
   d5696:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d5698:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d569a:	f7ff fa5b 	bl	d4b54 <spark_send_event>
   d569e:	b920      	cbnz	r0, d56aa <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d56a0:	9b03      	ldr	r3, [sp, #12]
   d56a2:	785b      	ldrb	r3, [r3, #1]
   d56a4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d56a8:	b183      	cbz	r3, d56cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d56aa:	9b03      	ldr	r3, [sp, #12]
   d56ac:	9305      	str	r3, [sp, #20]
   d56ae:	a904      	add	r1, sp, #16
   d56b0:	a806      	add	r0, sp, #24
   d56b2:	f7ff fc61 	bl	d4f78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d56b6:	a905      	add	r1, sp, #20
   d56b8:	4630      	mov	r0, r6
   d56ba:	f7ff fe99 	bl	d53f0 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d56be:	a806      	add	r0, sp, #24
   d56c0:	f7fe fdde 	bl	d4280 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d56c4:	a804      	add	r0, sp, #16
   d56c6:	f7fe fddb 	bl	d4280 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d56ca:	e013      	b.n	d56f4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d56cc:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d56d0:	a905      	add	r1, sp, #20
   d56d2:	a803      	add	r0, sp, #12
   d56d4:	9205      	str	r2, [sp, #20]
   d56d6:	f8ad 3018 	strh.w	r3, [sp, #24]
   d56da:	f7ff fefd 	bl	d54d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d56de:	a805      	add	r0, sp, #20
   d56e0:	f7ff fe5c 	bl	d539c <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d56e4:	a805      	add	r0, sp, #20
   d56e6:	9909      	ldr	r1, [sp, #36]	; 0x24
   d56e8:	f7ff fe93 	bl	d5412 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d56ec:	a806      	add	r0, sp, #24
   d56ee:	f7fe fdc7 	bl	d4280 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d56f2:	e7da      	b.n	d56aa <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d56f4:	4630      	mov	r0, r6
   d56f6:	b00b      	add	sp, #44	; 0x2c
   d56f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d56fc:	000d5871 	.word	0x000d5871

000d5700 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5700:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5702:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5704:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d5706:	d006      	beq.n	d5716 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d5708:	2a03      	cmp	r2, #3
   d570a:	d017      	beq.n	d573c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d570c:	2a01      	cmp	r2, #1
   d570e:	d122      	bne.n	d5756 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5710:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5712:	6003      	str	r3, [r0, #0]
	      break;
   d5714:	e01f      	b.n	d5756 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5716:	2018      	movs	r0, #24
   d5718:	680e      	ldr	r6, [r1, #0]
   d571a:	f7fe fcbc 	bl	d4096 <_Znwj>
   d571e:	4605      	mov	r5, r0
   d5720:	b150      	cbz	r0, d5738 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5722:	4631      	mov	r1, r6
   d5724:	f7ff fec8 	bl	d54b8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d5728:	6930      	ldr	r0, [r6, #16]
   d572a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d572e:	b108      	cbz	r0, d5734 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d5730:	f001 f80c 	bl	d674c <strdup>
   d5734:	6128      	str	r0, [r5, #16]
   d5736:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5738:	6025      	str	r5, [r4, #0]
   d573a:	e00c      	b.n	d5756 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d573c:	6804      	ldr	r4, [r0, #0]
   d573e:	b154      	cbz	r4, d5756 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d5740:	f104 0010 	add.w	r0, r4, #16
   d5744:	f7ff fe2a 	bl	d539c <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5748:	4620      	mov	r0, r4
   d574a:	f7ff fd54 	bl	d51f6 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d574e:	2118      	movs	r1, #24
   d5750:	4620      	mov	r0, r4
   d5752:	f000 fd0d 	bl	d6170 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5756:	2000      	movs	r0, #0
   d5758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d575a <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d575a:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d575c:	2300      	movs	r3, #0
   d575e:	6083      	str	r3, [r0, #8]
   d5760:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5762:	4604      	mov	r4, r0
   d5764:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5766:	b12b      	cbz	r3, d5774 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5768:	2202      	movs	r2, #2
   d576a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d576c:	68eb      	ldr	r3, [r5, #12]
   d576e:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5770:	68ab      	ldr	r3, [r5, #8]
   d5772:	60a3      	str	r3, [r4, #8]
	}
    }
   d5774:	4620      	mov	r0, r4
   d5776:	bd38      	pop	{r3, r4, r5, pc}

000d5778 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5778:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d577a:	b570      	push	{r4, r5, r6, lr}
   d577c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d577e:	d006      	beq.n	d578e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d5780:	2a03      	cmp	r2, #3
   d5782:	d011      	beq.n	d57a8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d5784:	2a01      	cmp	r2, #1
   d5786:	d118      	bne.n	d57ba <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5788:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d578a:	6003      	str	r3, [r0, #0]
	      break;
   d578c:	e015      	b.n	d57ba <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d578e:	2014      	movs	r0, #20
   d5790:	680e      	ldr	r6, [r1, #0]
   d5792:	f7fe fc80 	bl	d4096 <_Znwj>
   d5796:	4605      	mov	r5, r0
   d5798:	b120      	cbz	r0, d57a4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d579a:	4631      	mov	r1, r6
   d579c:	f7ff ffdd 	bl	d575a <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d57a0:	7c33      	ldrb	r3, [r6, #16]
   d57a2:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d57a4:	6025      	str	r5, [r4, #0]
   d57a6:	e008      	b.n	d57ba <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d57a8:	6804      	ldr	r4, [r0, #0]
   d57aa:	b134      	cbz	r4, d57ba <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d57ac:	4620      	mov	r0, r4
   d57ae:	f7ff fd22 	bl	d51f6 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d57b2:	2114      	movs	r1, #20
   d57b4:	4620      	mov	r0, r4
   d57b6:	f000 fcdb 	bl	d6170 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d57ba:	2000      	movs	r0, #0
   d57bc:	bd70      	pop	{r4, r5, r6, pc}
	...

000d57c0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d57c0:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d57c2:	2300      	movs	r3, #0
   d57c4:	b087      	sub	sp, #28
   d57c6:	460c      	mov	r4, r1
   d57c8:	f3bf 8f5f 	dmb	sy
   d57cc:	e850 6f00 	ldrex	r6, [r0]
   d57d0:	e840 3200 	strex	r2, r3, [r0]
   d57d4:	2a00      	cmp	r2, #0
   d57d6:	d1f9      	bne.n	d57cc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d57d8:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d57dc:	2e00      	cmp	r6, #0
   d57de:	d03f      	beq.n	d5860 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d57e0:	4618      	mov	r0, r3
   d57e2:	f7ff f923 	bl	d4a2c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d57e6:	4607      	mov	r7, r0
   d57e8:	b120      	cbz	r0, d57f4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d57ea:	4621      	mov	r1, r4
   d57ec:	4630      	mov	r0, r6
   d57ee:	f7ff fe53 	bl	d5498 <_ZNKSt8functionIFvRKbEEclES1_>
   d57f2:	e02e      	b.n	d5852 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d57f4:	4631      	mov	r1, r6
   d57f6:	a801      	add	r0, sp, #4
   d57f8:	f7ff ffaf 	bl	d575a <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d57fc:	7823      	ldrb	r3, [r4, #0]
   d57fe:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5802:	2010      	movs	r0, #16
   d5804:	f7fe fc47 	bl	d4096 <_Znwj>
   d5808:	4605      	mov	r5, r0
   d580a:	b1d0      	cbz	r0, d5842 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d580c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d580e:	2014      	movs	r0, #20
   d5810:	f7fe fc41 	bl	d4096 <_Znwj>
   d5814:	4604      	mov	r4, r0
   d5816:	b178      	cbz	r0, d5838 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5818:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d581a:	4601      	mov	r1, r0
   d581c:	a801      	add	r0, sp, #4
   d581e:	f7ff fcf9 	bl	d5214 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5822:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5824:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5826:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5828:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d582a:	9203      	str	r2, [sp, #12]
   d582c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d582e:	60e3      	str	r3, [r4, #12]
   d5830:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5834:	9204      	str	r2, [sp, #16]
   d5836:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5838:	4b0a      	ldr	r3, [pc, #40]	; (d5864 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d583a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d583c:	4b0a      	ldr	r3, [pc, #40]	; (d5868 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d583e:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5840:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5842:	a801      	add	r0, sp, #4
   d5844:	f7ff fcd7 	bl	d51f6 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5848:	2200      	movs	r2, #0
   d584a:	4629      	mov	r1, r5
   d584c:	4807      	ldr	r0, [pc, #28]	; (d586c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d584e:	f7ff f8f5 	bl	d4a3c <application_thread_invoke>
   d5852:	4630      	mov	r0, r6
   d5854:	f7ff fccf 	bl	d51f6 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5858:	2110      	movs	r1, #16
   d585a:	4630      	mov	r0, r6
   d585c:	f000 fc88 	bl	d6170 <_ZdlPvj>
        }
    }
   d5860:	b007      	add	sp, #28
   d5862:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5864:	000d54ab 	.word	0x000d54ab
   d5868:	000d5779 	.word	0x000d5779
   d586c:	000d5be1 	.word	0x000d5be1

000d5870 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d5870:	b530      	push	{r4, r5, lr}
   d5872:	b085      	sub	sp, #20
   d5874:	4604      	mov	r4, r0
   d5876:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d5878:	4668      	mov	r0, sp
   d587a:	4611      	mov	r1, r2
   d587c:	f7ff fdc9 	bl	d5412 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d5880:	b17c      	cbz	r4, d58a2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d5882:	b224      	sxth	r4, r4
   d5884:	4628      	mov	r0, r5
   d5886:	b10d      	cbz	r5, d588c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d5888:	f000 ff60 	bl	d674c <strdup>
   d588c:	9002      	str	r0, [sp, #8]
   d588e:	a902      	add	r1, sp, #8
   d5890:	4668      	mov	r0, sp
   d5892:	f8ad 400c 	strh.w	r4, [sp, #12]
   d5896:	f7ff fe1f 	bl	d54d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d589a:	a802      	add	r0, sp, #8
   d589c:	f7ff fd7e 	bl	d539c <_ZN8particle5ErrorD1Ev>
   d58a0:	e01d      	b.n	d58de <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d58a2:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d58a4:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d58a8:	f04f 0201 	mov.w	r2, #1
   d58ac:	e8d0 3f4f 	ldrexb	r3, [r0]
   d58b0:	42a3      	cmp	r3, r4
   d58b2:	d103      	bne.n	d58bc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d58b4:	e8c0 2f41 	strexb	r1, r2, [r0]
   d58b8:	2900      	cmp	r1, #0
   d58ba:	d1f7      	bne.n	d58ac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d58bc:	d002      	beq.n	d58c4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d58be:	f88d 3008 	strb.w	r3, [sp, #8]
   d58c2:	e00c      	b.n	d58de <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d58c4:	f110 010c 	adds.w	r1, r0, #12
   d58c8:	f04f 0301 	mov.w	r3, #1
   d58cc:	bf18      	it	ne
   d58ce:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d58d0:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d58d4:	3004      	adds	r0, #4
   d58d6:	f800 3c03 	strb.w	r3, [r0, #-3]
   d58da:	f7ff ff71 	bl	d57c0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d58de:	a801      	add	r0, sp, #4
   d58e0:	f7fe fcce 	bl	d4280 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d58e4:	b005      	add	sp, #20
   d58e6:	bd30      	pop	{r4, r5, pc}

000d58e8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d58e8:	4770      	bx	lr

000d58ea <_ZN9IPAddressD0Ev>:
   d58ea:	b510      	push	{r4, lr}
   d58ec:	2118      	movs	r1, #24
   d58ee:	4604      	mov	r4, r0
   d58f0:	f000 fc3e 	bl	d6170 <_ZdlPvj>
   d58f4:	4620      	mov	r0, r4
   d58f6:	bd10      	pop	{r4, pc}

000d58f8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d58f8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d58fa:	7d03      	ldrb	r3, [r0, #20]
   d58fc:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d58fe:	b08d      	sub	sp, #52	; 0x34
   d5900:	460e      	mov	r6, r1
   d5902:	f100 0704 	add.w	r7, r0, #4
   d5906:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d590a:	d002      	beq.n	d5912 <_ZNK9IPAddress7printToER5Print+0x1a>
   d590c:	f100 0508 	add.w	r5, r0, #8
   d5910:	e018      	b.n	d5944 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5912:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5914:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5916:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d591a:	232f      	movs	r3, #47	; 0x2f
   d591c:	462a      	mov	r2, r5
   d591e:	200a      	movs	r0, #10
   d5920:	f7fe ffb4 	bl	d488c <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5924:	4628      	mov	r0, r5
   d5926:	f000 ff2c 	bl	d6782 <strlen>
   d592a:	6833      	ldr	r3, [r6, #0]
   d592c:	4602      	mov	r2, r0
   d592e:	68db      	ldr	r3, [r3, #12]
   d5930:	4629      	mov	r1, r5
   d5932:	4630      	mov	r0, r6
   d5934:	4798      	blx	r3
   d5936:	e00f      	b.n	d5958 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5938:	b124      	cbz	r4, d5944 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d593a:	212e      	movs	r1, #46	; 0x2e
   d593c:	4630      	mov	r0, r6
   d593e:	f7ff fb5d 	bl	d4ffc <_ZN5Print5printEc>
   d5942:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5944:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5948:	220a      	movs	r2, #10
   d594a:	4630      	mov	r0, r6
   d594c:	f7ff fb6f 	bl	d502e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5950:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5952:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5954:	d1f0      	bne.n	d5938 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5956:	4620      	mov	r0, r4
    }
    return n;
}
   d5958:	b00d      	add	sp, #52	; 0x34
   d595a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d595c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d595c:	b510      	push	{r4, lr}
   d595e:	4b05      	ldr	r3, [pc, #20]	; (d5974 <_ZN9IPAddressC1Ev+0x18>)
   d5960:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5962:	2211      	movs	r2, #17
   d5964:	f840 3b04 	str.w	r3, [r0], #4
   d5968:	2100      	movs	r1, #0
   d596a:	f000 feac 	bl	d66c6 <memset>
{
    clear();
}
   d596e:	4620      	mov	r0, r4
   d5970:	bd10      	pop	{r4, pc}
   d5972:	bf00      	nop
   d5974:	000d7194 	.word	0x000d7194

000d5978 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5978:	4603      	mov	r3, r0
   d597a:	4a07      	ldr	r2, [pc, #28]	; (d5998 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d597c:	b510      	push	{r4, lr}
   d597e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d5982:	f101 0210 	add.w	r2, r1, #16
   d5986:	f851 4b04 	ldr.w	r4, [r1], #4
   d598a:	f843 4b04 	str.w	r4, [r3], #4
   d598e:	4291      	cmp	r1, r2
   d5990:	d1f9      	bne.n	d5986 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5992:	780a      	ldrb	r2, [r1, #0]
   d5994:	701a      	strb	r2, [r3, #0]
}
   d5996:	bd10      	pop	{r4, pc}
   d5998:	000d7194 	.word	0x000d7194

000d599c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d599c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d599e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d59a2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d59a6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d59aa:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d59ae:	2304      	movs	r3, #4
   d59b0:	6041      	str	r1, [r0, #4]
   d59b2:	7503      	strb	r3, [r0, #20]
   d59b4:	bd10      	pop	{r4, pc}

000d59b6 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d59b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d59b8:	780d      	ldrb	r5, [r1, #0]
   d59ba:	788b      	ldrb	r3, [r1, #2]
   d59bc:	784a      	ldrb	r2, [r1, #1]
   d59be:	78c9      	ldrb	r1, [r1, #3]
   d59c0:	9100      	str	r1, [sp, #0]
   d59c2:	4629      	mov	r1, r5
   d59c4:	f7ff ffea 	bl	d599c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d59c8:	b003      	add	sp, #12
   d59ca:	bd30      	pop	{r4, r5, pc}

000d59cc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d59cc:	7441      	strb	r1, [r0, #17]
   d59ce:	4770      	bx	lr

000d59d0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d59d0:	4770      	bx	lr

000d59d2 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d59d2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d59d4:	2100      	movs	r1, #0
   d59d6:	7c00      	ldrb	r0, [r0, #16]
   d59d8:	f7fe fff8 	bl	d49cc <HAL_USB_USART_Receive_Data>
}
   d59dc:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d59e0:	bf28      	it	cs
   d59e2:	f04f 30ff 	movcs.w	r0, #4294967295
   d59e6:	bd08      	pop	{r3, pc}

000d59e8 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d59e8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d59ea:	2101      	movs	r1, #1
   d59ec:	7c00      	ldrb	r0, [r0, #16]
   d59ee:	f7fe ffed 	bl	d49cc <HAL_USB_USART_Receive_Data>
}
   d59f2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d59f6:	bf28      	it	cs
   d59f8:	f04f 30ff 	movcs.w	r0, #4294967295
   d59fc:	bd08      	pop	{r3, pc}

000d59fe <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d59fe:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5a00:	7c00      	ldrb	r0, [r0, #16]
   d5a02:	f7fe ffdb 	bl	d49bc <HAL_USB_USART_Available_Data_For_Write>
}
   d5a06:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5a0a:	bd08      	pop	{r3, pc}

000d5a0c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d5a0c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5a0e:	7c00      	ldrb	r0, [r0, #16]
   d5a10:	f7fe ffcc 	bl	d49ac <HAL_USB_USART_Available_Data>
}
   d5a14:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5a18:	bd08      	pop	{r3, pc}

000d5a1a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5a1a:	7c00      	ldrb	r0, [r0, #16]
   d5a1c:	f7fe bfe6 	b.w	d49ec <HAL_USB_USART_Flush_Data>

000d5a20 <_ZN9USBSerialD0Ev>:
   d5a20:	b510      	push	{r4, lr}
   d5a22:	2114      	movs	r1, #20
   d5a24:	4604      	mov	r4, r0
   d5a26:	f000 fba3 	bl	d6170 <_ZdlPvj>
   d5a2a:	4620      	mov	r0, r4
   d5a2c:	bd10      	pop	{r4, pc}

000d5a2e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5a2e:	b538      	push	{r3, r4, r5, lr}
   d5a30:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5a32:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5a34:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5a36:	f7fe ffc1 	bl	d49bc <HAL_USB_USART_Available_Data_For_Write>
   d5a3a:	2800      	cmp	r0, #0
   d5a3c:	dc01      	bgt.n	d5a42 <_ZN9USBSerial5writeEh+0x14>
   d5a3e:	7c60      	ldrb	r0, [r4, #17]
   d5a40:	b128      	cbz	r0, d5a4e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5a42:	4629      	mov	r1, r5
   d5a44:	7c20      	ldrb	r0, [r4, #16]
   d5a46:	f7fe ffc9 	bl	d49dc <HAL_USB_USART_Send_Data>
   d5a4a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d5a4e:	bd38      	pop	{r3, r4, r5, pc}

000d5a50 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5a50:	b510      	push	{r4, lr}
   d5a52:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5a54:	2300      	movs	r3, #0
   d5a56:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5a58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5a5c:	60a3      	str	r3, [r4, #8]
   d5a5e:	4b05      	ldr	r3, [pc, #20]	; (d5a74 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5a60:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5a62:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5a64:	4608      	mov	r0, r1
{
  _serial = serial;
   d5a66:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5a68:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d5a6a:	4611      	mov	r1, r2
   d5a6c:	f7fe ff8e 	bl	d498c <HAL_USB_USART_Init>
}
   d5a70:	4620      	mov	r0, r4
   d5a72:	bd10      	pop	{r4, pc}
   d5a74:	000d71a8 	.word	0x000d71a8

000d5a78 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5a78:	2200      	movs	r2, #0
   d5a7a:	7c00      	ldrb	r0, [r0, #16]
   d5a7c:	f7fe bf8e 	b.w	d499c <HAL_USB_USART_Begin>

000d5a80 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5a80:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5a82:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5a84:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5a86:	2100      	movs	r1, #0
   d5a88:	f000 fe1d 	bl	d66c6 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5a8c:	4620      	mov	r0, r4
   d5a8e:	bd10      	pop	{r4, pc}

000d5a90 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5a90:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5a92:	4d0e      	ldr	r5, [pc, #56]	; (d5acc <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5a94:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5a96:	a801      	add	r0, sp, #4
   d5a98:	f7ff fff2 	bl	d5a80 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5a9c:	6829      	ldr	r1, [r5, #0]
   d5a9e:	f011 0401 	ands.w	r4, r1, #1
   d5aa2:	d110      	bne.n	d5ac6 <_Z16_fetch_usbserialv+0x36>
   d5aa4:	4628      	mov	r0, r5
   d5aa6:	f7fe fafc 	bl	d40a2 <__cxa_guard_acquire>
   d5aaa:	b160      	cbz	r0, d5ac6 <_Z16_fetch_usbserialv+0x36>
   d5aac:	aa01      	add	r2, sp, #4
   d5aae:	4621      	mov	r1, r4
   d5ab0:	4807      	ldr	r0, [pc, #28]	; (d5ad0 <_Z16_fetch_usbserialv+0x40>)
   d5ab2:	f7ff ffcd 	bl	d5a50 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5ab6:	4628      	mov	r0, r5
   d5ab8:	f7fe faf8 	bl	d40ac <__cxa_guard_release>
   d5abc:	4a05      	ldr	r2, [pc, #20]	; (d5ad4 <_Z16_fetch_usbserialv+0x44>)
   d5abe:	4906      	ldr	r1, [pc, #24]	; (d5ad8 <_Z16_fetch_usbserialv+0x48>)
   d5ac0:	4803      	ldr	r0, [pc, #12]	; (d5ad0 <_Z16_fetch_usbserialv+0x40>)
   d5ac2:	f000 fb47 	bl	d6154 <__aeabi_atexit>
	return _usbserial;
}
   d5ac6:	4802      	ldr	r0, [pc, #8]	; (d5ad0 <_Z16_fetch_usbserialv+0x40>)
   d5ac8:	b007      	add	sp, #28
   d5aca:	bd30      	pop	{r4, r5, pc}
   d5acc:	2003e3dc 	.word	0x2003e3dc
   d5ad0:	2003e3e0 	.word	0x2003e3e0
   d5ad4:	2003e340 	.word	0x2003e340
   d5ad8:	000d59d1 	.word	0x000d59d1

000d5adc <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5adc:	4770      	bx	lr

000d5ade <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5ade:	7441      	strb	r1, [r0, #17]
   d5ae0:	4770      	bx	lr

000d5ae2 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d5ae2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d5ae4:	7c00      	ldrb	r0, [r0, #16]
   d5ae6:	f7fe ff11 	bl	d490c <HAL_USART_Available_Data_For_Write>
}
   d5aea:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5aee:	bd08      	pop	{r3, pc}

000d5af0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5af0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d5af2:	7c00      	ldrb	r0, [r0, #16]
   d5af4:	f7fe fee2 	bl	d48bc <HAL_USART_Available_Data>
}
   d5af8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5afc:	bd08      	pop	{r3, pc}

000d5afe <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5afe:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d5b00:	7c00      	ldrb	r0, [r0, #16]
   d5b02:	f7fe feeb 	bl	d48dc <HAL_USART_Peek_Data>
}
   d5b06:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5b0a:	bf28      	it	cs
   d5b0c:	f04f 30ff 	movcs.w	r0, #4294967295
   d5b10:	bd08      	pop	{r3, pc}

000d5b12 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5b12:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d5b14:	7c00      	ldrb	r0, [r0, #16]
   d5b16:	f7fe fed9 	bl	d48cc <HAL_USART_Read_Data>
}
   d5b1a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5b1e:	bf28      	it	cs
   d5b20:	f04f 30ff 	movcs.w	r0, #4294967295
   d5b24:	bd08      	pop	{r3, pc}

000d5b26 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d5b26:	7c00      	ldrb	r0, [r0, #16]
   d5b28:	f7fe bee0 	b.w	d48ec <HAL_USART_Flush_Data>

000d5b2c <_ZN11USARTSerialD0Ev>:
   d5b2c:	b510      	push	{r4, lr}
   d5b2e:	2114      	movs	r1, #20
   d5b30:	4604      	mov	r4, r0
   d5b32:	f000 fb1d 	bl	d6170 <_ZdlPvj>
   d5b36:	4620      	mov	r0, r4
   d5b38:	bd10      	pop	{r4, pc}

000d5b3a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5b3a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5b3c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d5b3e:	4604      	mov	r4, r0
   d5b40:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5b42:	b925      	cbnz	r5, d5b4e <_ZN11USARTSerial5writeEh+0x14>
   d5b44:	7c00      	ldrb	r0, [r0, #16]
   d5b46:	f7fe fee1 	bl	d490c <HAL_USART_Available_Data_For_Write>
   d5b4a:	2800      	cmp	r0, #0
   d5b4c:	dd05      	ble.n	d5b5a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5b4e:	4631      	mov	r1, r6
   d5b50:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5b52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5b56:	f7fe bea9 	b.w	d48ac <HAL_USART_Write_Data>
  }
  return 0;
}
   d5b5a:	4628      	mov	r0, r5
   d5b5c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5b60 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5b60:	b510      	push	{r4, lr}
   d5b62:	4604      	mov	r4, r0
   d5b64:	4608      	mov	r0, r1
   d5b66:	4611      	mov	r1, r2
   d5b68:	2200      	movs	r2, #0
   d5b6a:	6062      	str	r2, [r4, #4]
   d5b6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5b70:	60a2      	str	r2, [r4, #8]
   d5b72:	4a05      	ldr	r2, [pc, #20]	; (d5b88 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5b74:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d5b76:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5b78:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d5b7a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5b7c:	461a      	mov	r2, r3
   d5b7e:	f7fe fe8d 	bl	d489c <HAL_USART_Init>
}
   d5b82:	4620      	mov	r0, r4
   d5b84:	bd10      	pop	{r4, pc}
   d5b86:	bf00      	nop
   d5b88:	000d71d8 	.word	0x000d71d8

000d5b8c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d5b8c:	7c00      	ldrb	r0, [r0, #16]
   d5b8e:	f7fe beb5 	b.w	d48fc <HAL_USART_Is_Enabled>
	...

000d5b94 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5b94:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5b96:	4d0c      	ldr	r5, [pc, #48]	; (d5bc8 <_Z22__fetch_global_Serial1v+0x34>)
   d5b98:	6829      	ldr	r1, [r5, #0]
   d5b9a:	f011 0401 	ands.w	r4, r1, #1
   d5b9e:	d111      	bne.n	d5bc4 <_Z22__fetch_global_Serial1v+0x30>
   d5ba0:	4628      	mov	r0, r5
   d5ba2:	f7fe fa7e 	bl	d40a2 <__cxa_guard_acquire>
   d5ba6:	b168      	cbz	r0, d5bc4 <_Z22__fetch_global_Serial1v+0x30>
   d5ba8:	4a08      	ldr	r2, [pc, #32]	; (d5bcc <_Z22__fetch_global_Serial1v+0x38>)
   d5baa:	4b09      	ldr	r3, [pc, #36]	; (d5bd0 <_Z22__fetch_global_Serial1v+0x3c>)
   d5bac:	4809      	ldr	r0, [pc, #36]	; (d5bd4 <_Z22__fetch_global_Serial1v+0x40>)
   d5bae:	4621      	mov	r1, r4
   d5bb0:	f7ff ffd6 	bl	d5b60 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5bb4:	4628      	mov	r0, r5
   d5bb6:	f7fe fa79 	bl	d40ac <__cxa_guard_release>
   d5bba:	4a07      	ldr	r2, [pc, #28]	; (d5bd8 <_Z22__fetch_global_Serial1v+0x44>)
   d5bbc:	4907      	ldr	r1, [pc, #28]	; (d5bdc <_Z22__fetch_global_Serial1v+0x48>)
   d5bbe:	4805      	ldr	r0, [pc, #20]	; (d5bd4 <_Z22__fetch_global_Serial1v+0x40>)
   d5bc0:	f000 fac8 	bl	d6154 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5bc4:	4803      	ldr	r0, [pc, #12]	; (d5bd4 <_Z22__fetch_global_Serial1v+0x40>)
   d5bc6:	bd38      	pop	{r3, r4, r5, pc}
   d5bc8:	2003e48c 	.word	0x2003e48c
   d5bcc:	2003e490 	.word	0x2003e490
   d5bd0:	2003e408 	.word	0x2003e408
   d5bd4:	2003e3f4 	.word	0x2003e3f4
   d5bd8:	2003e340 	.word	0x2003e340
   d5bdc:	000d5add 	.word	0x000d5add

000d5be0 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d5be0:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5be2:	6883      	ldr	r3, [r0, #8]
   d5be4:	4604      	mov	r4, r0
   d5be6:	b90b      	cbnz	r3, d5bec <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d5be8:	f000 fad5 	bl	d6196 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5bec:	68c3      	ldr	r3, [r0, #12]
   d5bee:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5bf0:	68a3      	ldr	r3, [r4, #8]
   d5bf2:	b11b      	cbz	r3, d5bfc <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5bf4:	2203      	movs	r2, #3
   d5bf6:	4621      	mov	r1, r4
   d5bf8:	4620      	mov	r0, r4
   d5bfa:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5bfc:	4620      	mov	r0, r4
   d5bfe:	2110      	movs	r1, #16
}
   d5c00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5c04:	f000 bab4 	b.w	d6170 <_ZdlPvj>

000d5c08 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d5c08:	4770      	bx	lr

000d5c0a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5c0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5c0c:	4606      	mov	r6, r0
   d5c0e:	4615      	mov	r5, r2
   d5c10:	460c      	mov	r4, r1
   d5c12:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5c14:	42bc      	cmp	r4, r7
   d5c16:	d006      	beq.n	d5c26 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5c18:	6833      	ldr	r3, [r6, #0]
   d5c1a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5c1e:	689b      	ldr	r3, [r3, #8]
   d5c20:	4630      	mov	r0, r6
   d5c22:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5c24:	e7f6      	b.n	d5c14 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d5c26:	4628      	mov	r0, r5
   d5c28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5c2a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d5c2a:	2200      	movs	r2, #0
   d5c2c:	7c00      	ldrb	r0, [r0, #16]
   d5c2e:	f7fe be75 	b.w	d491c <HAL_I2C_Write_Data>

000d5c32 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d5c32:	2100      	movs	r1, #0
   d5c34:	7c00      	ldrb	r0, [r0, #16]
   d5c36:	f7fe be79 	b.w	d492c <HAL_I2C_Available_Data>

000d5c3a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d5c3a:	2100      	movs	r1, #0
   d5c3c:	7c00      	ldrb	r0, [r0, #16]
   d5c3e:	f7fe be7d 	b.w	d493c <HAL_I2C_Read_Data>

000d5c42 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d5c42:	2100      	movs	r1, #0
   d5c44:	7c00      	ldrb	r0, [r0, #16]
   d5c46:	f7fe be81 	b.w	d494c <HAL_I2C_Peek_Data>

000d5c4a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d5c4a:	2100      	movs	r1, #0
   d5c4c:	7c00      	ldrb	r0, [r0, #16]
   d5c4e:	f7fe be85 	b.w	d495c <HAL_I2C_Flush_Data>

000d5c52 <_ZN7TwoWireD0Ev>:
   d5c52:	b510      	push	{r4, lr}
   d5c54:	2114      	movs	r1, #20
   d5c56:	4604      	mov	r4, r0
   d5c58:	f000 fa8a 	bl	d6170 <_ZdlPvj>
   d5c5c:	4620      	mov	r0, r4
   d5c5e:	bd10      	pop	{r4, pc}

000d5c60 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d5c60:	b510      	push	{r4, lr}
   d5c62:	4604      	mov	r4, r0
   d5c64:	2300      	movs	r3, #0
   d5c66:	6063      	str	r3, [r4, #4]
   d5c68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5c6c:	60a3      	str	r3, [r4, #8]
   d5c6e:	4b04      	ldr	r3, [pc, #16]	; (d5c80 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d5c70:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d5c72:	4608      	mov	r0, r1
   d5c74:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d5c76:	4611      	mov	r1, r2
   d5c78:	f7fe fe80 	bl	d497c <HAL_I2C_Init>
}
   d5c7c:	4620      	mov	r0, r4
   d5c7e:	bd10      	pop	{r4, pc}
   d5c80:	000d7208 	.word	0x000d7208

000d5c84 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d5c84:	2100      	movs	r1, #0
   d5c86:	7c00      	ldrb	r0, [r0, #16]
   d5c88:	f7fe be70 	b.w	d496c <HAL_I2C_Is_Enabled>

000d5c8c <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5c8c:	2200      	movs	r2, #0
   d5c8e:	4611      	mov	r1, r2
   d5c90:	6840      	ldr	r0, [r0, #4]
   d5c92:	f7fe bf2f 	b.w	d4af4 <network_listening>

000d5c96 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5c96:	2200      	movs	r2, #0
   d5c98:	4611      	mov	r1, r2
   d5c9a:	6840      	ldr	r0, [r0, #4]
   d5c9c:	f7fe bf3a 	b.w	d4b14 <network_get_listen_timeout>

000d5ca0 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5ca0:	2200      	movs	r2, #0
   d5ca2:	6840      	ldr	r0, [r0, #4]
   d5ca4:	f7fe bf2e 	b.w	d4b04 <network_set_listen_timeout>

000d5ca8 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5ca8:	2200      	movs	r2, #0
   d5caa:	f081 0101 	eor.w	r1, r1, #1
   d5cae:	6840      	ldr	r0, [r0, #4]
   d5cb0:	f7fe bf18 	b.w	d4ae4 <network_listen>

000d5cb4 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d5cb4:	2300      	movs	r3, #0
   d5cb6:	461a      	mov	r2, r3
   d5cb8:	2101      	movs	r1, #1
   d5cba:	6840      	ldr	r0, [r0, #4]
   d5cbc:	f7fe bf0a 	b.w	d4ad4 <network_off>

000d5cc0 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5cc0:	2300      	movs	r3, #0
   d5cc2:	461a      	mov	r2, r3
   d5cc4:	4619      	mov	r1, r3
   d5cc6:	6840      	ldr	r0, [r0, #4]
   d5cc8:	f7fe befc 	b.w	d4ac4 <network_on>

000d5ccc <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5ccc:	2200      	movs	r2, #0
   d5cce:	4611      	mov	r1, r2
   d5cd0:	6840      	ldr	r0, [r0, #4]
   d5cd2:	f7fe beef 	b.w	d4ab4 <network_ready>

000d5cd6 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5cd6:	2200      	movs	r2, #0
   d5cd8:	4611      	mov	r1, r2
   d5cda:	6840      	ldr	r0, [r0, #4]
   d5cdc:	f7fe beda 	b.w	d4a94 <network_connecting>

000d5ce0 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5ce0:	2200      	movs	r2, #0
   d5ce2:	2102      	movs	r1, #2
   d5ce4:	6840      	ldr	r0, [r0, #4]
   d5ce6:	f7fe bedd 	b.w	d4aa4 <network_disconnect>

000d5cea <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5cea:	2300      	movs	r3, #0
   d5cec:	461a      	mov	r2, r3
   d5cee:	6840      	ldr	r0, [r0, #4]
   d5cf0:	f7fe bec8 	b.w	d4a84 <network_connect>

000d5cf4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5cf4:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5cf6:	4605      	mov	r5, r0
   d5cf8:	b188      	cbz	r0, d5d1e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5cfa:	6804      	ldr	r4, [r0, #0]
   d5cfc:	b14c      	cbz	r4, d5d12 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5cfe:	68a3      	ldr	r3, [r4, #8]
   d5d00:	b11b      	cbz	r3, d5d0a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5d02:	2203      	movs	r2, #3
   d5d04:	4621      	mov	r1, r4
   d5d06:	4620      	mov	r0, r4
   d5d08:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5d0a:	2110      	movs	r1, #16
   d5d0c:	4620      	mov	r0, r4
   d5d0e:	f000 fa2f 	bl	d6170 <_ZdlPvj>
   d5d12:	4628      	mov	r0, r5
   d5d14:	2114      	movs	r1, #20
      }
   d5d16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5d1a:	f000 ba29 	b.w	d6170 <_ZdlPvj>
   d5d1e:	bd38      	pop	{r3, r4, r5, pc}

000d5d20 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d5d20:	b110      	cbz	r0, d5d28 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d5d22:	6803      	ldr	r3, [r0, #0]
   d5d24:	685b      	ldr	r3, [r3, #4]
   d5d26:	4718      	bx	r3
   d5d28:	4770      	bx	lr

000d5d2a <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d5d2a:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5d2c:	6803      	ldr	r3, [r0, #0]
   d5d2e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d5d30:	b1bb      	cbz	r3, d5d62 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d5d32:	6858      	ldr	r0, [r3, #4]
   d5d34:	f7fe fd82 	bl	d483c <os_thread_is_current>
   d5d38:	b978      	cbnz	r0, d5d5a <_ZN6ThreadD1Ev+0x30>
   d5d3a:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d5d3c:	7c5a      	ldrb	r2, [r3, #17]
   d5d3e:	b912      	cbnz	r2, d5d46 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d5d40:	6858      	ldr	r0, [r3, #4]
   d5d42:	f7fe fd83 	bl	d484c <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d5d46:	6823      	ldr	r3, [r4, #0]
   d5d48:	6858      	ldr	r0, [r3, #4]
   d5d4a:	f7fe fd87 	bl	d485c <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5d4e:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5d50:	2300      	movs	r3, #0
   d5d52:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5d54:	b128      	cbz	r0, d5d62 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d5d56:	f7ff ffcd 	bl	d5cf4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5d5a:	6820      	ldr	r0, [r4, #0]
   d5d5c:	b108      	cbz	r0, d5d62 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d5d5e:	f7ff ffc9 	bl	d5cf4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d5d62:	4620      	mov	r0, r4
   d5d64:	bd10      	pop	{r4, pc}

000d5d66 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d5d66:	b538      	push	{r3, r4, r5, lr}
   d5d68:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5d6a:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d5d6e:	b108      	cbz	r0, d5d74 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5d70:	f7fe f995 	bl	d409e <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5d74:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d5d78:	b108      	cbz	r0, d5d7e <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d5d7a:	f7fe fd7f 	bl	d487c <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5d7e:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d5d82:	b135      	cbz	r5, d5d92 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5d84:	4628      	mov	r0, r5
   d5d86:	f7ff ffd0 	bl	d5d2a <_ZN6ThreadD1Ev>
   d5d8a:	2104      	movs	r1, #4
   d5d8c:	4628      	mov	r0, r5
   d5d8e:	f000 f9ef 	bl	d6170 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5d92:	6820      	ldr	r0, [r4, #0]
   d5d94:	b108      	cbz	r0, d5d9a <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d5d96:	f7ff ffc3 	bl	d5d20 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d5d9a:	4620      	mov	r0, r4
   d5d9c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5da0 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5da0:	b510      	push	{r4, lr}
   d5da2:	4b04      	ldr	r3, [pc, #16]	; (d5db4 <_ZN5spark9MeshClassD1Ev+0x14>)
   d5da4:	4604      	mov	r4, r0
   d5da6:	f840 3b08 	str.w	r3, [r0], #8
   d5daa:	f7ff ffdc 	bl	d5d66 <_ZN5spark11MeshPublishD1Ev>
   d5dae:	4620      	mov	r0, r4
   d5db0:	bd10      	pop	{r4, pc}
   d5db2:	bf00      	nop
   d5db4:	000d7230 	.word	0x000d7230

000d5db8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5db8:	b538      	push	{r3, r4, r5, lr}
   d5dba:	4c0e      	ldr	r4, [pc, #56]	; (d5df4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d5dbc:	4b0e      	ldr	r3, [pc, #56]	; (d5df8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d5dbe:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5dc0:	2500      	movs	r5, #0
   d5dc2:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5dc4:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5dc8:	6063      	str	r3, [r4, #4]
   d5dca:	60a5      	str	r5, [r4, #8]
   d5dcc:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5dd0:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5dd4:	f7fe fd4a 	bl	d486c <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5dd8:	4b08      	ldr	r3, [pc, #32]	; (d5dfc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d5dda:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5dde:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d5de2:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5de4:	4620      	mov	r0, r4
   d5de6:	4a06      	ldr	r2, [pc, #24]	; (d5e00 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d5de8:	4906      	ldr	r1, [pc, #24]	; (d5e04 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d5dea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d5dee:	f000 b9b1 	b.w	d6154 <__aeabi_atexit>
   d5df2:	bf00      	nop
   d5df4:	2003e514 	.word	0x2003e514
   d5df8:	000d7298 	.word	0x000d7298
   d5dfc:	000d7230 	.word	0x000d7230
   d5e00:	2003e340 	.word	0x2003e340
   d5e04:	000d5da1 	.word	0x000d5da1

000d5e08 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5e08:	2200      	movs	r2, #0
   d5e0a:	4611      	mov	r1, r2
   d5e0c:	6840      	ldr	r0, [r0, #4]
   d5e0e:	f7fe be51 	b.w	d4ab4 <network_ready>

000d5e12 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5e12:	2200      	movs	r2, #0
   d5e14:	4611      	mov	r1, r2
   d5e16:	6840      	ldr	r0, [r0, #4]
   d5e18:	f7fe be6c 	b.w	d4af4 <network_listening>

000d5e1c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5e1c:	2200      	movs	r2, #0
   d5e1e:	4611      	mov	r1, r2
   d5e20:	6840      	ldr	r0, [r0, #4]
   d5e22:	f7fe be77 	b.w	d4b14 <network_get_listen_timeout>

000d5e26 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5e26:	2200      	movs	r2, #0
   d5e28:	6840      	ldr	r0, [r0, #4]
   d5e2a:	f7fe be6b 	b.w	d4b04 <network_set_listen_timeout>

000d5e2e <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5e2e:	2200      	movs	r2, #0
   d5e30:	f081 0101 	eor.w	r1, r1, #1
   d5e34:	6840      	ldr	r0, [r0, #4]
   d5e36:	f7fe be55 	b.w	d4ae4 <network_listen>

000d5e3a <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d5e3a:	2300      	movs	r3, #0
   d5e3c:	461a      	mov	r2, r3
   d5e3e:	4619      	mov	r1, r3
   d5e40:	6840      	ldr	r0, [r0, #4]
   d5e42:	f7fe be47 	b.w	d4ad4 <network_off>

000d5e46 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d5e46:	2300      	movs	r3, #0
   d5e48:	461a      	mov	r2, r3
   d5e4a:	4619      	mov	r1, r3
   d5e4c:	6840      	ldr	r0, [r0, #4]
   d5e4e:	f7fe be39 	b.w	d4ac4 <network_on>

000d5e52 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5e52:	2200      	movs	r2, #0
   d5e54:	4611      	mov	r1, r2
   d5e56:	6840      	ldr	r0, [r0, #4]
   d5e58:	f7fe be1c 	b.w	d4a94 <network_connecting>

000d5e5c <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5e5c:	2200      	movs	r2, #0
   d5e5e:	2102      	movs	r1, #2
   d5e60:	6840      	ldr	r0, [r0, #4]
   d5e62:	f7fe be1f 	b.w	d4aa4 <network_disconnect>

000d5e66 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5e66:	2300      	movs	r3, #0
   d5e68:	461a      	mov	r2, r3
   d5e6a:	6840      	ldr	r0, [r0, #4]
   d5e6c:	f7fe be0a 	b.w	d4a84 <network_connect>

000d5e70 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5e70:	4b02      	ldr	r3, [pc, #8]	; (d5e7c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d5e72:	2204      	movs	r2, #4
   d5e74:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d5e76:	4a02      	ldr	r2, [pc, #8]	; (d5e80 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5e78:	601a      	str	r2, [r3, #0]
   d5e7a:	4770      	bx	lr
   d5e7c:	2003e6e8 	.word	0x2003e6e8
   d5e80:	000d7264 	.word	0x000d7264

000d5e84 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5e84:	2300      	movs	r3, #0
   d5e86:	461a      	mov	r2, r3
   d5e88:	6840      	ldr	r0, [r0, #4]
   d5e8a:	f7fe bdfb 	b.w	d4a84 <network_connect>

000d5e8e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5e8e:	2200      	movs	r2, #0
   d5e90:	2102      	movs	r1, #2
   d5e92:	6840      	ldr	r0, [r0, #4]
   d5e94:	f7fe be06 	b.w	d4aa4 <network_disconnect>

000d5e98 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5e98:	2200      	movs	r2, #0
   d5e9a:	4611      	mov	r1, r2
   d5e9c:	6840      	ldr	r0, [r0, #4]
   d5e9e:	f7fe bdf9 	b.w	d4a94 <network_connecting>

000d5ea2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5ea2:	2200      	movs	r2, #0
   d5ea4:	4611      	mov	r1, r2
   d5ea6:	6840      	ldr	r0, [r0, #4]
   d5ea8:	f7fe be04 	b.w	d4ab4 <network_ready>

000d5eac <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5eac:	2300      	movs	r3, #0
   d5eae:	461a      	mov	r2, r3
   d5eb0:	4619      	mov	r1, r3
   d5eb2:	6840      	ldr	r0, [r0, #4]
   d5eb4:	f7fe be06 	b.w	d4ac4 <network_on>

000d5eb8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5eb8:	2300      	movs	r3, #0
   d5eba:	461a      	mov	r2, r3
   d5ebc:	4619      	mov	r1, r3
   d5ebe:	6840      	ldr	r0, [r0, #4]
   d5ec0:	f7fe be08 	b.w	d4ad4 <network_off>

000d5ec4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5ec4:	2200      	movs	r2, #0
   d5ec6:	f081 0101 	eor.w	r1, r1, #1
   d5eca:	6840      	ldr	r0, [r0, #4]
   d5ecc:	f7fe be0a 	b.w	d4ae4 <network_listen>

000d5ed0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5ed0:	2200      	movs	r2, #0
   d5ed2:	6840      	ldr	r0, [r0, #4]
   d5ed4:	f7fe be16 	b.w	d4b04 <network_set_listen_timeout>

000d5ed8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5ed8:	2200      	movs	r2, #0
   d5eda:	4611      	mov	r1, r2
   d5edc:	6840      	ldr	r0, [r0, #4]
   d5ede:	f7fe be19 	b.w	d4b14 <network_get_listen_timeout>

000d5ee2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5ee2:	2200      	movs	r2, #0
   d5ee4:	4611      	mov	r1, r2
   d5ee6:	6840      	ldr	r0, [r0, #4]
   d5ee8:	f7fe be04 	b.w	d4af4 <network_listening>

000d5eec <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5eec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5ef0:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d5ef2:	b095      	sub	sp, #84	; 0x54
   d5ef4:	4616      	mov	r6, r2
   d5ef6:	460d      	mov	r5, r1
   d5ef8:	4607      	mov	r7, r0
    IPAddress addr;
   d5efa:	f7ff fd2f 	bl	d595c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d5efe:	4621      	mov	r1, r4
   d5f00:	2220      	movs	r2, #32
   d5f02:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5f04:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5f06:	f000 fbde 	bl	d66c6 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5f0a:	2340      	movs	r3, #64	; 0x40
   d5f0c:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5f0e:	4621      	mov	r1, r4
   d5f10:	466b      	mov	r3, sp
   d5f12:	aa0c      	add	r2, sp, #48	; 0x30
   d5f14:	4630      	mov	r0, r6
   d5f16:	f7fe fc29 	bl	d476c <netdb_getaddrinfo>
    if (!r) {
   d5f1a:	4604      	mov	r4, r0
   d5f1c:	2800      	cmp	r0, #0
   d5f1e:	d144      	bne.n	d5faa <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5f20:	4602      	mov	r2, r0
   d5f22:	2101      	movs	r1, #1
   d5f24:	6868      	ldr	r0, [r5, #4]
   d5f26:	f7fe fdc5 	bl	d4ab4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5f2a:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5f2c:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5f2e:	4622      	mov	r2, r4
   d5f30:	6868      	ldr	r0, [r5, #4]
   d5f32:	f7fe fdbf 	bl	d4ab4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5f36:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5f38:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d5f3a:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5f3c:	2e00      	cmp	r6, #0
   d5f3e:	d034      	beq.n	d5faa <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d5f40:	2900      	cmp	r1, #0
   d5f42:	d132      	bne.n	d5faa <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5f44:	6873      	ldr	r3, [r6, #4]
   d5f46:	2b02      	cmp	r3, #2
   d5f48:	d002      	beq.n	d5f50 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d5f4a:	2b0a      	cmp	r3, #10
   d5f4c:	d009      	beq.n	d5f62 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d5f4e:	e02a      	b.n	d5fa6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d5f50:	f1b8 0f00 	cmp.w	r8, #0
   d5f54:	d027      	beq.n	d5fa6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5f56:	6971      	ldr	r1, [r6, #20]
   d5f58:	4638      	mov	r0, r7
   d5f5a:	3104      	adds	r1, #4
   d5f5c:	f7ff fd2b 	bl	d59b6 <_ZN9IPAddressaSEPKh>
   d5f60:	e020      	b.n	d5fa4 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5f62:	f1b9 0f00 	cmp.w	r9, #0
   d5f66:	d01e      	beq.n	d5fa6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5f68:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5f6a:	2211      	movs	r2, #17
   d5f6c:	a801      	add	r0, sp, #4
   d5f6e:	f000 fbaa 	bl	d66c6 <memset>
                    a.v = 6;
   d5f72:	2306      	movs	r3, #6
   d5f74:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5f78:	ad01      	add	r5, sp, #4
   d5f7a:	f104 0308 	add.w	r3, r4, #8
   d5f7e:	3418      	adds	r4, #24
   d5f80:	6818      	ldr	r0, [r3, #0]
   d5f82:	6859      	ldr	r1, [r3, #4]
   d5f84:	462a      	mov	r2, r5
   d5f86:	c203      	stmia	r2!, {r0, r1}
   d5f88:	3308      	adds	r3, #8
   d5f8a:	42a3      	cmp	r3, r4
   d5f8c:	4615      	mov	r5, r2
   d5f8e:	d1f7      	bne.n	d5f80 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5f90:	a901      	add	r1, sp, #4
   d5f92:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5f94:	ad07      	add	r5, sp, #28
   d5f96:	f7ff fcef 	bl	d5978 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5f9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5f9c:	1d3c      	adds	r4, r7, #4
   d5f9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5fa0:	682b      	ldr	r3, [r5, #0]
   d5fa2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d5fa4:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5fa6:	69f6      	ldr	r6, [r6, #28]
   d5fa8:	e7c8      	b.n	d5f3c <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5faa:	9800      	ldr	r0, [sp, #0]
   d5fac:	f7fe fbd6 	bl	d475c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5fb0:	4638      	mov	r0, r7
   d5fb2:	b015      	add	sp, #84	; 0x54
   d5fb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5fb8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5fb8:	4b02      	ldr	r3, [pc, #8]	; (d5fc4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5fba:	4a03      	ldr	r2, [pc, #12]	; (d5fc8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5fbc:	601a      	str	r2, [r3, #0]
   d5fbe:	2200      	movs	r2, #0
   d5fc0:	605a      	str	r2, [r3, #4]
   d5fc2:	4770      	bx	lr
   d5fc4:	2003e6f0 	.word	0x2003e6f0
   d5fc8:	000d7298 	.word	0x000d7298

000d5fcc <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d5fcc:	b510      	push	{r4, lr}
   d5fce:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d5fd0:	f000 f860 	bl	d6094 <_ZN8particle7globals11instanceSpiEv>
   d5fd4:	f7fe fe72 	bl	d4cbc <_ZN8SPIClass9isEnabledEv>
   d5fd8:	b128      	cbz	r0, d5fe6 <pinAvailable+0x1a>
   d5fda:	f1a4 030b 	sub.w	r3, r4, #11
   d5fde:	2b02      	cmp	r3, #2
   d5fe0:	d801      	bhi.n	d5fe6 <pinAvailable+0x1a>
  {
    return 0; // 'pin' is used
   d5fe2:	2000      	movs	r0, #0
   d5fe4:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d5fe6:	f000 f88f 	bl	d6108 <_Z19__fetch_global_Wirev>
   d5fea:	f7ff fe4b 	bl	d5c84 <_ZN7TwoWire9isEnabledEv>
   d5fee:	b108      	cbz	r0, d5ff4 <pinAvailable+0x28>
   d5ff0:	2c01      	cmp	r4, #1
   d5ff2:	d9f6      	bls.n	d5fe2 <pinAvailable+0x16>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d5ff4:	f7ff fdce 	bl	d5b94 <_Z22__fetch_global_Serial1v>
   d5ff8:	f7ff fdc8 	bl	d5b8c <_ZN11USARTSerial9isEnabledEv>
   d5ffc:	b118      	cbz	r0, d6006 <pinAvailable+0x3a>
   d5ffe:	f1a4 0309 	sub.w	r3, r4, #9
   d6002:	2b01      	cmp	r3, #1
   d6004:	d9ed      	bls.n	d5fe2 <pinAvailable+0x16>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d6006:	2c23      	cmp	r4, #35	; 0x23
   d6008:	bf8c      	ite	hi
   d600a:	2000      	movhi	r0, #0
   d600c:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d600e:	bd10      	pop	{r4, pc}

000d6010 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6010:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d6012:	b538      	push	{r3, r4, r5, lr}
   d6014:	4604      	mov	r4, r0
   d6016:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6018:	d80a      	bhi.n	d6030 <pinMode+0x20>
   d601a:	29ff      	cmp	r1, #255	; 0xff
   d601c:	d008      	beq.n	d6030 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d601e:	f7ff ffd5 	bl	d5fcc <pinAvailable>
   d6022:	b128      	cbz	r0, d6030 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6024:	4629      	mov	r1, r5
   d6026:	4620      	mov	r0, r4
}
   d6028:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d602c:	f7fe bbb6 	b.w	d479c <HAL_Pin_Mode>
   d6030:	bd38      	pop	{r3, r4, r5, pc}

000d6032 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d6032:	b538      	push	{r3, r4, r5, lr}
   d6034:	4604      	mov	r4, r0
   d6036:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6038:	f7fe fbb8 	bl	d47ac <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d603c:	28ff      	cmp	r0, #255	; 0xff
   d603e:	d010      	beq.n	d6062 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d6040:	2806      	cmp	r0, #6
   d6042:	d804      	bhi.n	d604e <digitalWrite+0x1c>
   d6044:	234d      	movs	r3, #77	; 0x4d
   d6046:	fa23 f000 	lsr.w	r0, r3, r0
   d604a:	07c3      	lsls	r3, r0, #31
   d604c:	d409      	bmi.n	d6062 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d604e:	4620      	mov	r0, r4
   d6050:	f7ff ffbc 	bl	d5fcc <pinAvailable>
   d6054:	b128      	cbz	r0, d6062 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6056:	4629      	mov	r1, r5
   d6058:	4620      	mov	r0, r4
}
   d605a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d605e:	f7fe bbad 	b.w	d47bc <HAL_GPIO_Write>
   d6062:	bd38      	pop	{r3, r4, r5, pc}

000d6064 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d6064:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d6066:	b510      	push	{r4, lr}
   d6068:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d606a:	bf9c      	itt	ls
   d606c:	340e      	addls	r4, #14
   d606e:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6070:	4620      	mov	r0, r4
   d6072:	f7ff ffab 	bl	d5fcc <pinAvailable>
   d6076:	b150      	cbz	r0, d608e <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d6078:	2103      	movs	r1, #3
   d607a:	4620      	mov	r0, r4
   d607c:	f7fe fb86 	bl	d478c <HAL_Validate_Pin_Function>
   d6080:	2803      	cmp	r0, #3
   d6082:	d104      	bne.n	d608e <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d6084:	4620      	mov	r0, r4
}
   d6086:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d608a:	f7fe bb9f 	b.w	d47cc <HAL_ADC_Read>
}
   d608e:	2000      	movs	r0, #0
   d6090:	bd10      	pop	{r4, pc}
	...

000d6094 <_ZN8particle7globals11instanceSpiEv>:
#ifndef SPARK_WIRING_NO_SPI

namespace particle {
namespace globals {

SPIClass& instanceSpi() {
   d6094:	b538      	push	{r3, r4, r5, lr}
    static SPIClass instance(HAL_SPI_INTERFACE1);
   d6096:	4d0b      	ldr	r5, [pc, #44]	; (d60c4 <_ZN8particle7globals11instanceSpiEv+0x30>)
   d6098:	6829      	ldr	r1, [r5, #0]
   d609a:	f011 0401 	ands.w	r4, r1, #1
   d609e:	d10f      	bne.n	d60c0 <_ZN8particle7globals11instanceSpiEv+0x2c>
   d60a0:	4628      	mov	r0, r5
   d60a2:	f7fd fffe 	bl	d40a2 <__cxa_guard_acquire>
   d60a6:	b158      	cbz	r0, d60c0 <_ZN8particle7globals11instanceSpiEv+0x2c>
   d60a8:	4621      	mov	r1, r4
   d60aa:	4807      	ldr	r0, [pc, #28]	; (d60c8 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d60ac:	f7fe fdf8 	bl	d4ca0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d60b0:	4628      	mov	r0, r5
   d60b2:	f7fd fffb 	bl	d40ac <__cxa_guard_release>
   d60b6:	4a05      	ldr	r2, [pc, #20]	; (d60cc <_ZN8particle7globals11instanceSpiEv+0x38>)
   d60b8:	4905      	ldr	r1, [pc, #20]	; (d60d0 <_ZN8particle7globals11instanceSpiEv+0x3c>)
   d60ba:	4803      	ldr	r0, [pc, #12]	; (d60c8 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d60bc:	f000 f84a 	bl	d6154 <__aeabi_atexit>
    return instance;
}
   d60c0:	4801      	ldr	r0, [pc, #4]	; (d60c8 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d60c2:	bd38      	pop	{r3, r4, r5, pc}
   d60c4:	2003e704 	.word	0x2003e704
   d60c8:	2003e6f8 	.word	0x2003e6f8
   d60cc:	2003e340 	.word	0x2003e340
   d60d0:	000d4c91 	.word	0x000d4c91

000d60d4 <_Z17acquireWireBufferv>:
   d60d4:	b570      	push	{r4, r5, r6, lr}
   d60d6:	4604      	mov	r4, r0
   d60d8:	2514      	movs	r5, #20
   d60da:	462a      	mov	r2, r5
   d60dc:	4e09      	ldr	r6, [pc, #36]	; (d6104 <_Z17acquireWireBufferv+0x30>)
   d60de:	2100      	movs	r1, #0
   d60e0:	f000 faf1 	bl	d66c6 <memset>
   d60e4:	8025      	strh	r5, [r4, #0]
   d60e6:	2520      	movs	r5, #32
   d60e8:	4631      	mov	r1, r6
   d60ea:	60a5      	str	r5, [r4, #8]
   d60ec:	6125      	str	r5, [r4, #16]
   d60ee:	4628      	mov	r0, r5
   d60f0:	f000 f840 	bl	d6174 <_ZnajRKSt9nothrow_t>
   d60f4:	4631      	mov	r1, r6
   d60f6:	6060      	str	r0, [r4, #4]
   d60f8:	4628      	mov	r0, r5
   d60fa:	f000 f83b 	bl	d6174 <_ZnajRKSt9nothrow_t>
   d60fe:	60e0      	str	r0, [r4, #12]
   d6100:	4620      	mov	r0, r4
   d6102:	bd70      	pop	{r4, r5, r6, pc}
   d6104:	000d72c4 	.word	0x000d72c4

000d6108 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d6108:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d610a:	4d0e      	ldr	r5, [pc, #56]	; (d6144 <_Z19__fetch_global_Wirev+0x3c>)
   d610c:	6829      	ldr	r1, [r5, #0]
   d610e:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d6112:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6114:	d113      	bne.n	d613e <_Z19__fetch_global_Wirev+0x36>
   d6116:	4628      	mov	r0, r5
   d6118:	f7fd ffc3 	bl	d40a2 <__cxa_guard_acquire>
   d611c:	b178      	cbz	r0, d613e <_Z19__fetch_global_Wirev+0x36>
   d611e:	a801      	add	r0, sp, #4
   d6120:	f7ff ffd8 	bl	d60d4 <_Z17acquireWireBufferv>
   d6124:	aa01      	add	r2, sp, #4
   d6126:	4621      	mov	r1, r4
   d6128:	4807      	ldr	r0, [pc, #28]	; (d6148 <_Z19__fetch_global_Wirev+0x40>)
   d612a:	f7ff fd99 	bl	d5c60 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d612e:	4628      	mov	r0, r5
   d6130:	f7fd ffbc 	bl	d40ac <__cxa_guard_release>
   d6134:	4a05      	ldr	r2, [pc, #20]	; (d614c <_Z19__fetch_global_Wirev+0x44>)
   d6136:	4906      	ldr	r1, [pc, #24]	; (d6150 <_Z19__fetch_global_Wirev+0x48>)
   d6138:	4803      	ldr	r0, [pc, #12]	; (d6148 <_Z19__fetch_global_Wirev+0x40>)
   d613a:	f000 f80b 	bl	d6154 <__aeabi_atexit>
	return wire;
}
   d613e:	4802      	ldr	r0, [pc, #8]	; (d6148 <_Z19__fetch_global_Wirev+0x40>)
   d6140:	b007      	add	sp, #28
   d6142:	bd30      	pop	{r4, r5, pc}
   d6144:	2003e70c 	.word	0x2003e70c
   d6148:	2003e710 	.word	0x2003e710
   d614c:	2003e340 	.word	0x2003e340
   d6150:	000d5c09 	.word	0x000d5c09

000d6154 <__aeabi_atexit>:
   d6154:	460b      	mov	r3, r1
   d6156:	4601      	mov	r1, r0
   d6158:	4618      	mov	r0, r3
   d615a:	f000 b9a3 	b.w	d64a4 <__cxa_atexit>
	...

000d6160 <_ZSt15get_new_handlerv>:
   d6160:	4b02      	ldr	r3, [pc, #8]	; (d616c <_ZSt15get_new_handlerv+0xc>)
   d6162:	6818      	ldr	r0, [r3, #0]
   d6164:	f3bf 8f5f 	dmb	sy
   d6168:	4770      	bx	lr
   d616a:	bf00      	nop
   d616c:	2003e724 	.word	0x2003e724

000d6170 <_ZdlPvj>:
   d6170:	f7fd bf93 	b.w	d409a <_ZdlPv>

000d6174 <_ZnajRKSt9nothrow_t>:
   d6174:	f000 b800 	b.w	d6178 <_ZnwjRKSt9nothrow_t>

000d6178 <_ZnwjRKSt9nothrow_t>:
   d6178:	b510      	push	{r4, lr}
   d617a:	2800      	cmp	r0, #0
   d617c:	bf14      	ite	ne
   d617e:	4604      	movne	r4, r0
   d6180:	2401      	moveq	r4, #1
   d6182:	4620      	mov	r0, r4
   d6184:	f7fe fd06 	bl	d4b94 <malloc>
   d6188:	b920      	cbnz	r0, d6194 <_ZnwjRKSt9nothrow_t+0x1c>
   d618a:	f7ff ffe9 	bl	d6160 <_ZSt15get_new_handlerv>
   d618e:	b108      	cbz	r0, d6194 <_ZnwjRKSt9nothrow_t+0x1c>
   d6190:	4780      	blx	r0
   d6192:	e7f6      	b.n	d6182 <_ZnwjRKSt9nothrow_t+0xa>
   d6194:	bd10      	pop	{r4, pc}

000d6196 <_ZSt25__throw_bad_function_callv>:
   d6196:	b508      	push	{r3, lr}
   d6198:	f7fe fd2c 	bl	d4bf4 <abort>

000d619c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d619c:	4b18      	ldr	r3, [pc, #96]	; (d6200 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d619e:	681a      	ldr	r2, [r3, #0]
   d61a0:	07d1      	lsls	r1, r2, #31
   d61a2:	bf5c      	itt	pl
   d61a4:	2201      	movpl	r2, #1
   d61a6:	601a      	strpl	r2, [r3, #0]
   d61a8:	4b16      	ldr	r3, [pc, #88]	; (d6204 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d61aa:	681a      	ldr	r2, [r3, #0]
   d61ac:	07d2      	lsls	r2, r2, #31
   d61ae:	bf5c      	itt	pl
   d61b0:	2201      	movpl	r2, #1
   d61b2:	601a      	strpl	r2, [r3, #0]
   d61b4:	4b14      	ldr	r3, [pc, #80]	; (d6208 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d61b6:	681a      	ldr	r2, [r3, #0]
   d61b8:	07d0      	lsls	r0, r2, #31
   d61ba:	bf5c      	itt	pl
   d61bc:	2201      	movpl	r2, #1
   d61be:	601a      	strpl	r2, [r3, #0]
   d61c0:	4b12      	ldr	r3, [pc, #72]	; (d620c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d61c2:	681a      	ldr	r2, [r3, #0]
   d61c4:	07d1      	lsls	r1, r2, #31
   d61c6:	bf5c      	itt	pl
   d61c8:	2201      	movpl	r2, #1
   d61ca:	601a      	strpl	r2, [r3, #0]
   d61cc:	4b10      	ldr	r3, [pc, #64]	; (d6210 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d61ce:	681a      	ldr	r2, [r3, #0]
   d61d0:	07d2      	lsls	r2, r2, #31
   d61d2:	bf5c      	itt	pl
   d61d4:	2201      	movpl	r2, #1
   d61d6:	601a      	strpl	r2, [r3, #0]
   d61d8:	4b0e      	ldr	r3, [pc, #56]	; (d6214 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d61da:	681a      	ldr	r2, [r3, #0]
   d61dc:	07d0      	lsls	r0, r2, #31
   d61de:	bf5c      	itt	pl
   d61e0:	2201      	movpl	r2, #1
   d61e2:	601a      	strpl	r2, [r3, #0]
   d61e4:	4b0c      	ldr	r3, [pc, #48]	; (d6218 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d61e6:	681a      	ldr	r2, [r3, #0]
   d61e8:	07d1      	lsls	r1, r2, #31
   d61ea:	bf5c      	itt	pl
   d61ec:	2201      	movpl	r2, #1
   d61ee:	601a      	strpl	r2, [r3, #0]
   d61f0:	4b0a      	ldr	r3, [pc, #40]	; (d621c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d61f2:	681a      	ldr	r2, [r3, #0]
   d61f4:	07d2      	lsls	r2, r2, #31
   d61f6:	bf5c      	itt	pl
   d61f8:	2201      	movpl	r2, #1
   d61fa:	601a      	strpl	r2, [r3, #0]
   d61fc:	4770      	bx	lr
   d61fe:	bf00      	nop
   d6200:	2003e744 	.word	0x2003e744
   d6204:	2003e740 	.word	0x2003e740
   d6208:	2003e73c 	.word	0x2003e73c
   d620c:	2003e738 	.word	0x2003e738
   d6210:	2003e734 	.word	0x2003e734
   d6214:	2003e730 	.word	0x2003e730
   d6218:	2003e72c 	.word	0x2003e72c
   d621c:	2003e728 	.word	0x2003e728

000d6220 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d6220:	4b24      	ldr	r3, [pc, #144]	; (d62b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d6222:	681a      	ldr	r2, [r3, #0]
   d6224:	07d0      	lsls	r0, r2, #31
   d6226:	bf5c      	itt	pl
   d6228:	2201      	movpl	r2, #1
   d622a:	601a      	strpl	r2, [r3, #0]
   d622c:	4b22      	ldr	r3, [pc, #136]	; (d62b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d622e:	681a      	ldr	r2, [r3, #0]
   d6230:	07d1      	lsls	r1, r2, #31
   d6232:	bf5c      	itt	pl
   d6234:	2201      	movpl	r2, #1
   d6236:	601a      	strpl	r2, [r3, #0]
   d6238:	4b20      	ldr	r3, [pc, #128]	; (d62bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d623a:	681a      	ldr	r2, [r3, #0]
   d623c:	07d2      	lsls	r2, r2, #31
   d623e:	bf5c      	itt	pl
   d6240:	2201      	movpl	r2, #1
   d6242:	601a      	strpl	r2, [r3, #0]
   d6244:	4b1e      	ldr	r3, [pc, #120]	; (d62c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d6246:	681a      	ldr	r2, [r3, #0]
   d6248:	07d0      	lsls	r0, r2, #31
   d624a:	bf5c      	itt	pl
   d624c:	2201      	movpl	r2, #1
   d624e:	601a      	strpl	r2, [r3, #0]
   d6250:	4b1c      	ldr	r3, [pc, #112]	; (d62c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d6252:	681a      	ldr	r2, [r3, #0]
   d6254:	07d1      	lsls	r1, r2, #31
   d6256:	bf5c      	itt	pl
   d6258:	2201      	movpl	r2, #1
   d625a:	601a      	strpl	r2, [r3, #0]
   d625c:	4b1a      	ldr	r3, [pc, #104]	; (d62c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d625e:	681a      	ldr	r2, [r3, #0]
   d6260:	07d2      	lsls	r2, r2, #31
   d6262:	bf5c      	itt	pl
   d6264:	2201      	movpl	r2, #1
   d6266:	601a      	strpl	r2, [r3, #0]
   d6268:	4b18      	ldr	r3, [pc, #96]	; (d62cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d626a:	681a      	ldr	r2, [r3, #0]
   d626c:	07d0      	lsls	r0, r2, #31
   d626e:	bf5c      	itt	pl
   d6270:	2201      	movpl	r2, #1
   d6272:	601a      	strpl	r2, [r3, #0]
   d6274:	4b16      	ldr	r3, [pc, #88]	; (d62d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d6276:	681a      	ldr	r2, [r3, #0]
   d6278:	07d1      	lsls	r1, r2, #31
   d627a:	bf5c      	itt	pl
   d627c:	2201      	movpl	r2, #1
   d627e:	601a      	strpl	r2, [r3, #0]
   d6280:	4b14      	ldr	r3, [pc, #80]	; (d62d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d6282:	681a      	ldr	r2, [r3, #0]
   d6284:	07d2      	lsls	r2, r2, #31
   d6286:	bf5c      	itt	pl
   d6288:	2201      	movpl	r2, #1
   d628a:	601a      	strpl	r2, [r3, #0]
   d628c:	4b12      	ldr	r3, [pc, #72]	; (d62d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d628e:	681a      	ldr	r2, [r3, #0]
   d6290:	07d0      	lsls	r0, r2, #31
   d6292:	bf5c      	itt	pl
   d6294:	2201      	movpl	r2, #1
   d6296:	601a      	strpl	r2, [r3, #0]
   d6298:	4b10      	ldr	r3, [pc, #64]	; (d62dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d629a:	681a      	ldr	r2, [r3, #0]
   d629c:	07d1      	lsls	r1, r2, #31
   d629e:	bf5c      	itt	pl
   d62a0:	2201      	movpl	r2, #1
   d62a2:	601a      	strpl	r2, [r3, #0]
   d62a4:	4b0e      	ldr	r3, [pc, #56]	; (d62e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d62a6:	681a      	ldr	r2, [r3, #0]
   d62a8:	07d2      	lsls	r2, r2, #31
   d62aa:	bf5c      	itt	pl
   d62ac:	2201      	movpl	r2, #1
   d62ae:	601a      	strpl	r2, [r3, #0]
   d62b0:	4770      	bx	lr
   d62b2:	bf00      	nop
   d62b4:	2003e774 	.word	0x2003e774
   d62b8:	2003e770 	.word	0x2003e770
   d62bc:	2003e76c 	.word	0x2003e76c
   d62c0:	2003e768 	.word	0x2003e768
   d62c4:	2003e764 	.word	0x2003e764
   d62c8:	2003e760 	.word	0x2003e760
   d62cc:	2003e75c 	.word	0x2003e75c
   d62d0:	2003e758 	.word	0x2003e758
   d62d4:	2003e754 	.word	0x2003e754
   d62d8:	2003e750 	.word	0x2003e750
   d62dc:	2003e74c 	.word	0x2003e74c
   d62e0:	2003e748 	.word	0x2003e748

000d62e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d62e4:	4b24      	ldr	r3, [pc, #144]	; (d6378 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d62e6:	681a      	ldr	r2, [r3, #0]
   d62e8:	07d0      	lsls	r0, r2, #31
   d62ea:	bf5c      	itt	pl
   d62ec:	2201      	movpl	r2, #1
   d62ee:	601a      	strpl	r2, [r3, #0]
   d62f0:	4b22      	ldr	r3, [pc, #136]	; (d637c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d62f2:	681a      	ldr	r2, [r3, #0]
   d62f4:	07d1      	lsls	r1, r2, #31
   d62f6:	bf5c      	itt	pl
   d62f8:	2201      	movpl	r2, #1
   d62fa:	601a      	strpl	r2, [r3, #0]
   d62fc:	4b20      	ldr	r3, [pc, #128]	; (d6380 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d62fe:	681a      	ldr	r2, [r3, #0]
   d6300:	07d2      	lsls	r2, r2, #31
   d6302:	bf5c      	itt	pl
   d6304:	2201      	movpl	r2, #1
   d6306:	601a      	strpl	r2, [r3, #0]
   d6308:	4b1e      	ldr	r3, [pc, #120]	; (d6384 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d630a:	681a      	ldr	r2, [r3, #0]
   d630c:	07d0      	lsls	r0, r2, #31
   d630e:	bf5c      	itt	pl
   d6310:	2201      	movpl	r2, #1
   d6312:	601a      	strpl	r2, [r3, #0]
   d6314:	4b1c      	ldr	r3, [pc, #112]	; (d6388 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d6316:	681a      	ldr	r2, [r3, #0]
   d6318:	07d1      	lsls	r1, r2, #31
   d631a:	bf5c      	itt	pl
   d631c:	2201      	movpl	r2, #1
   d631e:	601a      	strpl	r2, [r3, #0]
   d6320:	4b1a      	ldr	r3, [pc, #104]	; (d638c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d6322:	681a      	ldr	r2, [r3, #0]
   d6324:	07d2      	lsls	r2, r2, #31
   d6326:	bf5c      	itt	pl
   d6328:	2201      	movpl	r2, #1
   d632a:	601a      	strpl	r2, [r3, #0]
   d632c:	4b18      	ldr	r3, [pc, #96]	; (d6390 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d632e:	681a      	ldr	r2, [r3, #0]
   d6330:	07d0      	lsls	r0, r2, #31
   d6332:	bf5c      	itt	pl
   d6334:	2201      	movpl	r2, #1
   d6336:	601a      	strpl	r2, [r3, #0]
   d6338:	4b16      	ldr	r3, [pc, #88]	; (d6394 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d633a:	681a      	ldr	r2, [r3, #0]
   d633c:	07d1      	lsls	r1, r2, #31
   d633e:	bf5c      	itt	pl
   d6340:	2201      	movpl	r2, #1
   d6342:	601a      	strpl	r2, [r3, #0]
   d6344:	4b14      	ldr	r3, [pc, #80]	; (d6398 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d6346:	681a      	ldr	r2, [r3, #0]
   d6348:	07d2      	lsls	r2, r2, #31
   d634a:	bf5c      	itt	pl
   d634c:	2201      	movpl	r2, #1
   d634e:	601a      	strpl	r2, [r3, #0]
   d6350:	4b12      	ldr	r3, [pc, #72]	; (d639c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d6352:	681a      	ldr	r2, [r3, #0]
   d6354:	07d0      	lsls	r0, r2, #31
   d6356:	bf5c      	itt	pl
   d6358:	2201      	movpl	r2, #1
   d635a:	601a      	strpl	r2, [r3, #0]
   d635c:	4b10      	ldr	r3, [pc, #64]	; (d63a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d635e:	681a      	ldr	r2, [r3, #0]
   d6360:	07d1      	lsls	r1, r2, #31
   d6362:	bf5c      	itt	pl
   d6364:	2201      	movpl	r2, #1
   d6366:	601a      	strpl	r2, [r3, #0]
   d6368:	4b0e      	ldr	r3, [pc, #56]	; (d63a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d636a:	681a      	ldr	r2, [r3, #0]
   d636c:	07d2      	lsls	r2, r2, #31
   d636e:	bf5c      	itt	pl
   d6370:	2201      	movpl	r2, #1
   d6372:	601a      	strpl	r2, [r3, #0]
   d6374:	4770      	bx	lr
   d6376:	bf00      	nop
   d6378:	2003e7a4 	.word	0x2003e7a4
   d637c:	2003e7a0 	.word	0x2003e7a0
   d6380:	2003e79c 	.word	0x2003e79c
   d6384:	2003e798 	.word	0x2003e798
   d6388:	2003e794 	.word	0x2003e794
   d638c:	2003e790 	.word	0x2003e790
   d6390:	2003e78c 	.word	0x2003e78c
   d6394:	2003e788 	.word	0x2003e788
   d6398:	2003e784 	.word	0x2003e784
   d639c:	2003e780 	.word	0x2003e780
   d63a0:	2003e77c 	.word	0x2003e77c
   d63a4:	2003e778 	.word	0x2003e778

000d63a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d63a8:	4b18      	ldr	r3, [pc, #96]	; (d640c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d63aa:	681a      	ldr	r2, [r3, #0]
   d63ac:	07d1      	lsls	r1, r2, #31
   d63ae:	bf5c      	itt	pl
   d63b0:	2201      	movpl	r2, #1
   d63b2:	601a      	strpl	r2, [r3, #0]
   d63b4:	4b16      	ldr	r3, [pc, #88]	; (d6410 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d63b6:	681a      	ldr	r2, [r3, #0]
   d63b8:	07d2      	lsls	r2, r2, #31
   d63ba:	bf5c      	itt	pl
   d63bc:	2201      	movpl	r2, #1
   d63be:	601a      	strpl	r2, [r3, #0]
   d63c0:	4b14      	ldr	r3, [pc, #80]	; (d6414 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d63c2:	681a      	ldr	r2, [r3, #0]
   d63c4:	07d0      	lsls	r0, r2, #31
   d63c6:	bf5c      	itt	pl
   d63c8:	2201      	movpl	r2, #1
   d63ca:	601a      	strpl	r2, [r3, #0]
   d63cc:	4b12      	ldr	r3, [pc, #72]	; (d6418 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d63ce:	681a      	ldr	r2, [r3, #0]
   d63d0:	07d1      	lsls	r1, r2, #31
   d63d2:	bf5c      	itt	pl
   d63d4:	2201      	movpl	r2, #1
   d63d6:	601a      	strpl	r2, [r3, #0]
   d63d8:	4b10      	ldr	r3, [pc, #64]	; (d641c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d63da:	681a      	ldr	r2, [r3, #0]
   d63dc:	07d2      	lsls	r2, r2, #31
   d63de:	bf5c      	itt	pl
   d63e0:	2201      	movpl	r2, #1
   d63e2:	601a      	strpl	r2, [r3, #0]
   d63e4:	4b0e      	ldr	r3, [pc, #56]	; (d6420 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d63e6:	681a      	ldr	r2, [r3, #0]
   d63e8:	07d0      	lsls	r0, r2, #31
   d63ea:	bf5c      	itt	pl
   d63ec:	2201      	movpl	r2, #1
   d63ee:	601a      	strpl	r2, [r3, #0]
   d63f0:	4b0c      	ldr	r3, [pc, #48]	; (d6424 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d63f2:	681a      	ldr	r2, [r3, #0]
   d63f4:	07d1      	lsls	r1, r2, #31
   d63f6:	bf5c      	itt	pl
   d63f8:	2201      	movpl	r2, #1
   d63fa:	601a      	strpl	r2, [r3, #0]
   d63fc:	4b0a      	ldr	r3, [pc, #40]	; (d6428 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d63fe:	681a      	ldr	r2, [r3, #0]
   d6400:	07d2      	lsls	r2, r2, #31
   d6402:	bf5c      	itt	pl
   d6404:	2201      	movpl	r2, #1
   d6406:	601a      	strpl	r2, [r3, #0]
   d6408:	4770      	bx	lr
   d640a:	bf00      	nop
   d640c:	2003e7c4 	.word	0x2003e7c4
   d6410:	2003e7c0 	.word	0x2003e7c0
   d6414:	2003e7bc 	.word	0x2003e7bc
   d6418:	2003e7b8 	.word	0x2003e7b8
   d641c:	2003e7b4 	.word	0x2003e7b4
   d6420:	2003e7b0 	.word	0x2003e7b0
   d6424:	2003e7ac 	.word	0x2003e7ac
   d6428:	2003e7a8 	.word	0x2003e7a8

000d642c <asctime>:
   d642c:	4b09      	ldr	r3, [pc, #36]	; (d6454 <asctime+0x28>)
   d642e:	b570      	push	{r4, r5, r6, lr}
   d6430:	681c      	ldr	r4, [r3, #0]
   d6432:	6c25      	ldr	r5, [r4, #64]	; 0x40
   d6434:	4606      	mov	r6, r0
   d6436:	b93d      	cbnz	r5, d6448 <asctime+0x1c>
   d6438:	201a      	movs	r0, #26
   d643a:	f7fe fbab 	bl	d4b94 <malloc>
   d643e:	221a      	movs	r2, #26
   d6440:	6420      	str	r0, [r4, #64]	; 0x40
   d6442:	4629      	mov	r1, r5
   d6444:	f000 f93f 	bl	d66c6 <memset>
   d6448:	6c21      	ldr	r1, [r4, #64]	; 0x40
   d644a:	4630      	mov	r0, r6
   d644c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d6450:	f000 b802 	b.w	d6458 <asctime_r>
   d6454:	2003e2f0 	.word	0x2003e2f0

000d6458 <asctime_r>:
   d6458:	b510      	push	{r4, lr}
   d645a:	460c      	mov	r4, r1
   d645c:	6941      	ldr	r1, [r0, #20]
   d645e:	6903      	ldr	r3, [r0, #16]
   d6460:	6982      	ldr	r2, [r0, #24]
   d6462:	b086      	sub	sp, #24
   d6464:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   d6468:	9104      	str	r1, [sp, #16]
   d646a:	6801      	ldr	r1, [r0, #0]
   d646c:	9103      	str	r1, [sp, #12]
   d646e:	6841      	ldr	r1, [r0, #4]
   d6470:	9102      	str	r1, [sp, #8]
   d6472:	6881      	ldr	r1, [r0, #8]
   d6474:	9101      	str	r1, [sp, #4]
   d6476:	68c1      	ldr	r1, [r0, #12]
   d6478:	9100      	str	r1, [sp, #0]
   d647a:	4907      	ldr	r1, [pc, #28]	; (d6498 <asctime_r+0x40>)
   d647c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d6480:	440b      	add	r3, r1
   d6482:	4906      	ldr	r1, [pc, #24]	; (d649c <asctime_r+0x44>)
   d6484:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   d6488:	440a      	add	r2, r1
   d648a:	4620      	mov	r0, r4
   d648c:	4904      	ldr	r1, [pc, #16]	; (d64a0 <asctime_r+0x48>)
   d648e:	f7fe fb99 	bl	d4bc4 <siprintf>
   d6492:	4620      	mov	r0, r4
   d6494:	b006      	add	sp, #24
   d6496:	bd10      	pop	{r4, pc}
   d6498:	000d72da 	.word	0x000d72da
   d649c:	000d72c5 	.word	0x000d72c5
   d64a0:	000d72fe 	.word	0x000d72fe

000d64a4 <__cxa_atexit>:
   d64a4:	b510      	push	{r4, lr}
   d64a6:	4c05      	ldr	r4, [pc, #20]	; (d64bc <__cxa_atexit+0x18>)
   d64a8:	4613      	mov	r3, r2
   d64aa:	b12c      	cbz	r4, d64b8 <__cxa_atexit+0x14>
   d64ac:	460a      	mov	r2, r1
   d64ae:	4601      	mov	r1, r0
   d64b0:	2002      	movs	r0, #2
   d64b2:	f3af 8000 	nop.w
   d64b6:	bd10      	pop	{r4, pc}
   d64b8:	4620      	mov	r0, r4
   d64ba:	bd10      	pop	{r4, pc}
   d64bc:	00000000 	.word	0x00000000

000d64c0 <localtime>:
   d64c0:	b538      	push	{r3, r4, r5, lr}
   d64c2:	4b07      	ldr	r3, [pc, #28]	; (d64e0 <localtime+0x20>)
   d64c4:	681c      	ldr	r4, [r3, #0]
   d64c6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d64c8:	4605      	mov	r5, r0
   d64ca:	b91b      	cbnz	r3, d64d4 <localtime+0x14>
   d64cc:	2024      	movs	r0, #36	; 0x24
   d64ce:	f7fe fb61 	bl	d4b94 <malloc>
   d64d2:	63e0      	str	r0, [r4, #60]	; 0x3c
   d64d4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d64d6:	4628      	mov	r0, r5
   d64d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d64dc:	f000 b802 	b.w	d64e4 <localtime_r>
   d64e0:	2003e2f0 	.word	0x2003e2f0

000d64e4 <localtime_r>:
   d64e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d64e8:	460c      	mov	r4, r1
   d64ea:	4680      	mov	r8, r0
   d64ec:	f000 fc76 	bl	d6ddc <__gettzinfo>
   d64f0:	4621      	mov	r1, r4
   d64f2:	4607      	mov	r7, r0
   d64f4:	4640      	mov	r0, r8
   d64f6:	f000 fc75 	bl	d6de4 <gmtime_r>
   d64fa:	6946      	ldr	r6, [r0, #20]
   d64fc:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   d6500:	07b3      	lsls	r3, r6, #30
   d6502:	4604      	mov	r4, r0
   d6504:	d105      	bne.n	d6512 <localtime_r+0x2e>
   d6506:	2264      	movs	r2, #100	; 0x64
   d6508:	fb96 f3f2 	sdiv	r3, r6, r2
   d650c:	fb02 6313 	mls	r3, r2, r3, r6
   d6510:	b94b      	cbnz	r3, d6526 <localtime_r+0x42>
   d6512:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d6516:	fb96 f3f5 	sdiv	r3, r6, r5
   d651a:	fb05 6513 	mls	r5, r5, r3, r6
   d651e:	fab5 f385 	clz	r3, r5
   d6522:	095b      	lsrs	r3, r3, #5
   d6524:	e000      	b.n	d6528 <localtime_r+0x44>
   d6526:	2301      	movs	r3, #1
   d6528:	4a5f      	ldr	r2, [pc, #380]	; (d66a8 <localtime_r+0x1c4>)
   d652a:	2530      	movs	r5, #48	; 0x30
   d652c:	fb05 2503 	mla	r5, r5, r3, r2
   d6530:	f000 fa88 	bl	d6a44 <__tz_lock>
   d6534:	f000 fa88 	bl	d6a48 <_tzset_unlocked>
   d6538:	4b5c      	ldr	r3, [pc, #368]	; (d66ac <localtime_r+0x1c8>)
   d653a:	681b      	ldr	r3, [r3, #0]
   d653c:	b1f3      	cbz	r3, d657c <localtime_r+0x98>
   d653e:	687b      	ldr	r3, [r7, #4]
   d6540:	429e      	cmp	r6, r3
   d6542:	d105      	bne.n	d6550 <localtime_r+0x6c>
   d6544:	6839      	ldr	r1, [r7, #0]
   d6546:	f8d8 3000 	ldr.w	r3, [r8]
   d654a:	69fa      	ldr	r2, [r7, #28]
   d654c:	b941      	cbnz	r1, d6560 <localtime_r+0x7c>
   d654e:	e00a      	b.n	d6566 <localtime_r+0x82>
   d6550:	4630      	mov	r0, r6
   d6552:	f000 f9cf 	bl	d68f4 <__tzcalc_limits>
   d6556:	2800      	cmp	r0, #0
   d6558:	d1f4      	bne.n	d6544 <localtime_r+0x60>
   d655a:	f04f 33ff 	mov.w	r3, #4294967295
   d655e:	e00d      	b.n	d657c <localtime_r+0x98>
   d6560:	4293      	cmp	r3, r2
   d6562:	db08      	blt.n	d6576 <localtime_r+0x92>
   d6564:	e001      	b.n	d656a <localtime_r+0x86>
   d6566:	4293      	cmp	r3, r2
   d6568:	da07      	bge.n	d657a <localtime_r+0x96>
   d656a:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d656c:	4293      	cmp	r3, r2
   d656e:	bfac      	ite	ge
   d6570:	2300      	movge	r3, #0
   d6572:	2301      	movlt	r3, #1
   d6574:	e002      	b.n	d657c <localtime_r+0x98>
   d6576:	2300      	movs	r3, #0
   d6578:	e000      	b.n	d657c <localtime_r+0x98>
   d657a:	2301      	movs	r3, #1
   d657c:	6223      	str	r3, [r4, #32]
   d657e:	6a23      	ldr	r3, [r4, #32]
   d6580:	2b01      	cmp	r3, #1
   d6582:	bf0c      	ite	eq
   d6584:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   d6586:	6a39      	ldrne	r1, [r7, #32]
   d6588:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d658c:	203c      	movs	r0, #60	; 0x3c
   d658e:	fb91 f6f3 	sdiv	r6, r1, r3
   d6592:	fb03 1316 	mls	r3, r3, r6, r1
   d6596:	6861      	ldr	r1, [r4, #4]
   d6598:	fb93 f2f0 	sdiv	r2, r3, r0
   d659c:	fb00 3012 	mls	r0, r0, r2, r3
   d65a0:	6823      	ldr	r3, [r4, #0]
   d65a2:	1a89      	subs	r1, r1, r2
   d65a4:	68a2      	ldr	r2, [r4, #8]
   d65a6:	6061      	str	r1, [r4, #4]
   d65a8:	1a1b      	subs	r3, r3, r0
   d65aa:	1b92      	subs	r2, r2, r6
   d65ac:	2b3b      	cmp	r3, #59	; 0x3b
   d65ae:	6023      	str	r3, [r4, #0]
   d65b0:	60a2      	str	r2, [r4, #8]
   d65b2:	dd03      	ble.n	d65bc <localtime_r+0xd8>
   d65b4:	3101      	adds	r1, #1
   d65b6:	6061      	str	r1, [r4, #4]
   d65b8:	3b3c      	subs	r3, #60	; 0x3c
   d65ba:	e004      	b.n	d65c6 <localtime_r+0xe2>
   d65bc:	2b00      	cmp	r3, #0
   d65be:	da03      	bge.n	d65c8 <localtime_r+0xe4>
   d65c0:	3901      	subs	r1, #1
   d65c2:	6061      	str	r1, [r4, #4]
   d65c4:	333c      	adds	r3, #60	; 0x3c
   d65c6:	6023      	str	r3, [r4, #0]
   d65c8:	6863      	ldr	r3, [r4, #4]
   d65ca:	2b3b      	cmp	r3, #59	; 0x3b
   d65cc:	dd03      	ble.n	d65d6 <localtime_r+0xf2>
   d65ce:	3201      	adds	r2, #1
   d65d0:	60a2      	str	r2, [r4, #8]
   d65d2:	3b3c      	subs	r3, #60	; 0x3c
   d65d4:	e004      	b.n	d65e0 <localtime_r+0xfc>
   d65d6:	2b00      	cmp	r3, #0
   d65d8:	da03      	bge.n	d65e2 <localtime_r+0xfe>
   d65da:	3a01      	subs	r2, #1
   d65dc:	60a2      	str	r2, [r4, #8]
   d65de:	333c      	adds	r3, #60	; 0x3c
   d65e0:	6063      	str	r3, [r4, #4]
   d65e2:	68a3      	ldr	r3, [r4, #8]
   d65e4:	2b17      	cmp	r3, #23
   d65e6:	dd22      	ble.n	d662e <localtime_r+0x14a>
   d65e8:	69e2      	ldr	r2, [r4, #28]
   d65ea:	3201      	adds	r2, #1
   d65ec:	61e2      	str	r2, [r4, #28]
   d65ee:	69a2      	ldr	r2, [r4, #24]
   d65f0:	3201      	adds	r2, #1
   d65f2:	2a06      	cmp	r2, #6
   d65f4:	bfc8      	it	gt
   d65f6:	2200      	movgt	r2, #0
   d65f8:	61a2      	str	r2, [r4, #24]
   d65fa:	68e2      	ldr	r2, [r4, #12]
   d65fc:	3b18      	subs	r3, #24
   d65fe:	3201      	adds	r2, #1
   d6600:	60a3      	str	r3, [r4, #8]
   d6602:	6923      	ldr	r3, [r4, #16]
   d6604:	60e2      	str	r2, [r4, #12]
   d6606:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   d660a:	428a      	cmp	r2, r1
   d660c:	dd46      	ble.n	d669c <localtime_r+0x1b8>
   d660e:	3301      	adds	r3, #1
   d6610:	2b0c      	cmp	r3, #12
   d6612:	bf0c      	ite	eq
   d6614:	6963      	ldreq	r3, [r4, #20]
   d6616:	6123      	strne	r3, [r4, #16]
   d6618:	eba2 0201 	sub.w	r2, r2, r1
   d661c:	60e2      	str	r2, [r4, #12]
   d661e:	bf01      	itttt	eq
   d6620:	3301      	addeq	r3, #1
   d6622:	2200      	moveq	r2, #0
   d6624:	6122      	streq	r2, [r4, #16]
   d6626:	6163      	streq	r3, [r4, #20]
   d6628:	bf08      	it	eq
   d662a:	61e2      	streq	r2, [r4, #28]
   d662c:	e036      	b.n	d669c <localtime_r+0x1b8>
   d662e:	2b00      	cmp	r3, #0
   d6630:	da34      	bge.n	d669c <localtime_r+0x1b8>
   d6632:	69e2      	ldr	r2, [r4, #28]
   d6634:	3a01      	subs	r2, #1
   d6636:	61e2      	str	r2, [r4, #28]
   d6638:	69a2      	ldr	r2, [r4, #24]
   d663a:	3a01      	subs	r2, #1
   d663c:	bf48      	it	mi
   d663e:	2206      	movmi	r2, #6
   d6640:	61a2      	str	r2, [r4, #24]
   d6642:	68e2      	ldr	r2, [r4, #12]
   d6644:	3318      	adds	r3, #24
   d6646:	3a01      	subs	r2, #1
   d6648:	60e2      	str	r2, [r4, #12]
   d664a:	60a3      	str	r3, [r4, #8]
   d664c:	bb32      	cbnz	r2, d669c <localtime_r+0x1b8>
   d664e:	6923      	ldr	r3, [r4, #16]
   d6650:	3b01      	subs	r3, #1
   d6652:	d401      	bmi.n	d6658 <localtime_r+0x174>
   d6654:	6123      	str	r3, [r4, #16]
   d6656:	e01d      	b.n	d6694 <localtime_r+0x1b0>
   d6658:	230b      	movs	r3, #11
   d665a:	6123      	str	r3, [r4, #16]
   d665c:	6963      	ldr	r3, [r4, #20]
   d665e:	1e5a      	subs	r2, r3, #1
   d6660:	f012 0f03 	tst.w	r2, #3
   d6664:	6162      	str	r2, [r4, #20]
   d6666:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d666a:	d105      	bne.n	d6678 <localtime_r+0x194>
   d666c:	2164      	movs	r1, #100	; 0x64
   d666e:	fb93 f2f1 	sdiv	r2, r3, r1
   d6672:	fb01 3212 	mls	r2, r1, r2, r3
   d6676:	b94a      	cbnz	r2, d668c <localtime_r+0x1a8>
   d6678:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d667c:	fb93 f2f1 	sdiv	r2, r3, r1
   d6680:	fb01 3312 	mls	r3, r1, r2, r3
   d6684:	fab3 f383 	clz	r3, r3
   d6688:	095b      	lsrs	r3, r3, #5
   d668a:	e000      	b.n	d668e <localtime_r+0x1aa>
   d668c:	2301      	movs	r3, #1
   d668e:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   d6692:	61e3      	str	r3, [r4, #28]
   d6694:	6923      	ldr	r3, [r4, #16]
   d6696:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d669a:	60e3      	str	r3, [r4, #12]
   d669c:	f000 f9d3 	bl	d6a46 <__tz_unlock>
   d66a0:	4620      	mov	r0, r4
   d66a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d66a6:	bf00      	nop
   d66a8:	000d7484 	.word	0x000d7484
   d66ac:	2003e7e4 	.word	0x2003e7e4

000d66b0 <memcpy>:
   d66b0:	b510      	push	{r4, lr}
   d66b2:	1e43      	subs	r3, r0, #1
   d66b4:	440a      	add	r2, r1
   d66b6:	4291      	cmp	r1, r2
   d66b8:	d004      	beq.n	d66c4 <memcpy+0x14>
   d66ba:	f811 4b01 	ldrb.w	r4, [r1], #1
   d66be:	f803 4f01 	strb.w	r4, [r3, #1]!
   d66c2:	e7f8      	b.n	d66b6 <memcpy+0x6>
   d66c4:	bd10      	pop	{r4, pc}

000d66c6 <memset>:
   d66c6:	4402      	add	r2, r0
   d66c8:	4603      	mov	r3, r0
   d66ca:	4293      	cmp	r3, r2
   d66cc:	d002      	beq.n	d66d4 <memset+0xe>
   d66ce:	f803 1b01 	strb.w	r1, [r3], #1
   d66d2:	e7fa      	b.n	d66ca <memset+0x4>
   d66d4:	4770      	bx	lr
	...

000d66d8 <srand>:
   d66d8:	b538      	push	{r3, r4, r5, lr}
   d66da:	4b12      	ldr	r3, [pc, #72]	; (d6724 <srand+0x4c>)
   d66dc:	681c      	ldr	r4, [r3, #0]
   d66de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d66e0:	4605      	mov	r5, r0
   d66e2:	b9d3      	cbnz	r3, d671a <srand+0x42>
   d66e4:	2018      	movs	r0, #24
   d66e6:	f7fe fa55 	bl	d4b94 <malloc>
   d66ea:	f243 330e 	movw	r3, #13070	; 0x330e
   d66ee:	63a0      	str	r0, [r4, #56]	; 0x38
   d66f0:	8003      	strh	r3, [r0, #0]
   d66f2:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d66f6:	8043      	strh	r3, [r0, #2]
   d66f8:	f241 2334 	movw	r3, #4660	; 0x1234
   d66fc:	8083      	strh	r3, [r0, #4]
   d66fe:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d6702:	80c3      	strh	r3, [r0, #6]
   d6704:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d6708:	8103      	strh	r3, [r0, #8]
   d670a:	2305      	movs	r3, #5
   d670c:	8143      	strh	r3, [r0, #10]
   d670e:	230b      	movs	r3, #11
   d6710:	8183      	strh	r3, [r0, #12]
   d6712:	2201      	movs	r2, #1
   d6714:	2300      	movs	r3, #0
   d6716:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d671a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d671c:	2200      	movs	r2, #0
   d671e:	611d      	str	r5, [r3, #16]
   d6720:	615a      	str	r2, [r3, #20]
   d6722:	bd38      	pop	{r3, r4, r5, pc}
   d6724:	2003e2f0 	.word	0x2003e2f0

000d6728 <strcmp>:
   d6728:	f810 2b01 	ldrb.w	r2, [r0], #1
   d672c:	f811 3b01 	ldrb.w	r3, [r1], #1
   d6730:	2a01      	cmp	r2, #1
   d6732:	bf28      	it	cs
   d6734:	429a      	cmpcs	r2, r3
   d6736:	d0f7      	beq.n	d6728 <strcmp>
   d6738:	1ad0      	subs	r0, r2, r3
   d673a:	4770      	bx	lr

000d673c <strcpy>:
   d673c:	4603      	mov	r3, r0
   d673e:	f811 2b01 	ldrb.w	r2, [r1], #1
   d6742:	f803 2b01 	strb.w	r2, [r3], #1
   d6746:	2a00      	cmp	r2, #0
   d6748:	d1f9      	bne.n	d673e <strcpy+0x2>
   d674a:	4770      	bx	lr

000d674c <strdup>:
   d674c:	4b02      	ldr	r3, [pc, #8]	; (d6758 <strdup+0xc>)
   d674e:	4601      	mov	r1, r0
   d6750:	6818      	ldr	r0, [r3, #0]
   d6752:	f000 b803 	b.w	d675c <_strdup_r>
   d6756:	bf00      	nop
   d6758:	2003e2f0 	.word	0x2003e2f0

000d675c <_strdup_r>:
   d675c:	b570      	push	{r4, r5, r6, lr}
   d675e:	4606      	mov	r6, r0
   d6760:	4608      	mov	r0, r1
   d6762:	460c      	mov	r4, r1
   d6764:	f000 f80d 	bl	d6782 <strlen>
   d6768:	1c45      	adds	r5, r0, #1
   d676a:	4629      	mov	r1, r5
   d676c:	4630      	mov	r0, r6
   d676e:	f7fe fa49 	bl	d4c04 <_malloc_r>
   d6772:	4606      	mov	r6, r0
   d6774:	b118      	cbz	r0, d677e <_strdup_r+0x22>
   d6776:	462a      	mov	r2, r5
   d6778:	4621      	mov	r1, r4
   d677a:	f7ff ff99 	bl	d66b0 <memcpy>
   d677e:	4630      	mov	r0, r6
   d6780:	bd70      	pop	{r4, r5, r6, pc}

000d6782 <strlen>:
   d6782:	4603      	mov	r3, r0
   d6784:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6788:	2a00      	cmp	r2, #0
   d678a:	d1fb      	bne.n	d6784 <strlen+0x2>
   d678c:	1a18      	subs	r0, r3, r0
   d678e:	3801      	subs	r0, #1
   d6790:	4770      	bx	lr

000d6792 <strncmp>:
   d6792:	b530      	push	{r4, r5, lr}
   d6794:	b182      	cbz	r2, d67b8 <strncmp+0x26>
   d6796:	1e45      	subs	r5, r0, #1
   d6798:	3901      	subs	r1, #1
   d679a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d679e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d67a2:	42a3      	cmp	r3, r4
   d67a4:	d106      	bne.n	d67b4 <strncmp+0x22>
   d67a6:	43ec      	mvns	r4, r5
   d67a8:	4414      	add	r4, r2
   d67aa:	42e0      	cmn	r0, r4
   d67ac:	d001      	beq.n	d67b2 <strncmp+0x20>
   d67ae:	2b00      	cmp	r3, #0
   d67b0:	d1f3      	bne.n	d679a <strncmp+0x8>
   d67b2:	461c      	mov	r4, r3
   d67b4:	1b18      	subs	r0, r3, r4
   d67b6:	bd30      	pop	{r4, r5, pc}
   d67b8:	4610      	mov	r0, r2
   d67ba:	bd30      	pop	{r4, r5, pc}

000d67bc <strncpy>:
   d67bc:	b510      	push	{r4, lr}
   d67be:	4603      	mov	r3, r0
   d67c0:	b142      	cbz	r2, d67d4 <strncpy+0x18>
   d67c2:	f811 4b01 	ldrb.w	r4, [r1], #1
   d67c6:	f803 4b01 	strb.w	r4, [r3], #1
   d67ca:	3a01      	subs	r2, #1
   d67cc:	2c00      	cmp	r4, #0
   d67ce:	d1f7      	bne.n	d67c0 <strncpy+0x4>
   d67d0:	441a      	add	r2, r3
   d67d2:	e000      	b.n	d67d6 <strncpy+0x1a>
   d67d4:	bd10      	pop	{r4, pc}
   d67d6:	4293      	cmp	r3, r2
   d67d8:	d002      	beq.n	d67e0 <strncpy+0x24>
   d67da:	f803 4b01 	strb.w	r4, [r3], #1
   d67de:	e7fa      	b.n	d67d6 <strncpy+0x1a>
   d67e0:	bd10      	pop	{r4, pc}
	...

000d67e4 <_strtoul_r>:
   d67e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d67e8:	4680      	mov	r8, r0
   d67ea:	483c      	ldr	r0, [pc, #240]	; (d68dc <_strtoul_r+0xf8>)
   d67ec:	f8d0 9000 	ldr.w	r9, [r0]
   d67f0:	460e      	mov	r6, r1
   d67f2:	4635      	mov	r5, r6
   d67f4:	f815 4b01 	ldrb.w	r4, [r5], #1
   d67f8:	eb09 0004 	add.w	r0, r9, r4
   d67fc:	7840      	ldrb	r0, [r0, #1]
   d67fe:	f000 0008 	and.w	r0, r0, #8
   d6802:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   d6806:	b108      	cbz	r0, d680c <_strtoul_r+0x28>
   d6808:	462e      	mov	r6, r5
   d680a:	e7f2      	b.n	d67f2 <_strtoul_r+0xe>
   d680c:	2c2d      	cmp	r4, #45	; 0x2d
   d680e:	d103      	bne.n	d6818 <_strtoul_r+0x34>
   d6810:	1cb5      	adds	r5, r6, #2
   d6812:	7874      	ldrb	r4, [r6, #1]
   d6814:	2701      	movs	r7, #1
   d6816:	e003      	b.n	d6820 <_strtoul_r+0x3c>
   d6818:	2c2b      	cmp	r4, #43	; 0x2b
   d681a:	bf04      	itt	eq
   d681c:	7874      	ldrbeq	r4, [r6, #1]
   d681e:	1cb5      	addeq	r5, r6, #2
   d6820:	b113      	cbz	r3, d6828 <_strtoul_r+0x44>
   d6822:	2b10      	cmp	r3, #16
   d6824:	d10a      	bne.n	d683c <_strtoul_r+0x58>
   d6826:	e053      	b.n	d68d0 <_strtoul_r+0xec>
   d6828:	2c30      	cmp	r4, #48	; 0x30
   d682a:	d14f      	bne.n	d68cc <_strtoul_r+0xe8>
   d682c:	7828      	ldrb	r0, [r5, #0]
   d682e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d6832:	2858      	cmp	r0, #88	; 0x58
   d6834:	d145      	bne.n	d68c2 <_strtoul_r+0xde>
   d6836:	786c      	ldrb	r4, [r5, #1]
   d6838:	2310      	movs	r3, #16
   d683a:	3502      	adds	r5, #2
   d683c:	f04f 3cff 	mov.w	ip, #4294967295
   d6840:	2600      	movs	r6, #0
   d6842:	fbbc fcf3 	udiv	ip, ip, r3
   d6846:	fb03 fa0c 	mul.w	sl, r3, ip
   d684a:	ea6f 0a0a 	mvn.w	sl, sl
   d684e:	4630      	mov	r0, r6
   d6850:	eb09 0e04 	add.w	lr, r9, r4
   d6854:	f89e e001 	ldrb.w	lr, [lr, #1]
   d6858:	f01e 0f04 	tst.w	lr, #4
   d685c:	d001      	beq.n	d6862 <_strtoul_r+0x7e>
   d685e:	3c30      	subs	r4, #48	; 0x30
   d6860:	e00b      	b.n	d687a <_strtoul_r+0x96>
   d6862:	f01e 0e03 	ands.w	lr, lr, #3
   d6866:	d01a      	beq.n	d689e <_strtoul_r+0xba>
   d6868:	f1be 0f01 	cmp.w	lr, #1
   d686c:	bf0c      	ite	eq
   d686e:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d6872:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d6876:	ebce 0404 	rsb	r4, lr, r4
   d687a:	42a3      	cmp	r3, r4
   d687c:	dd0f      	ble.n	d689e <_strtoul_r+0xba>
   d687e:	2e00      	cmp	r6, #0
   d6880:	db08      	blt.n	d6894 <_strtoul_r+0xb0>
   d6882:	4560      	cmp	r0, ip
   d6884:	d806      	bhi.n	d6894 <_strtoul_r+0xb0>
   d6886:	d101      	bne.n	d688c <_strtoul_r+0xa8>
   d6888:	4554      	cmp	r4, sl
   d688a:	dc03      	bgt.n	d6894 <_strtoul_r+0xb0>
   d688c:	fb03 4000 	mla	r0, r3, r0, r4
   d6890:	2601      	movs	r6, #1
   d6892:	e001      	b.n	d6898 <_strtoul_r+0xb4>
   d6894:	f04f 36ff 	mov.w	r6, #4294967295
   d6898:	f815 4b01 	ldrb.w	r4, [r5], #1
   d689c:	e7d8      	b.n	d6850 <_strtoul_r+0x6c>
   d689e:	2e00      	cmp	r6, #0
   d68a0:	da07      	bge.n	d68b2 <_strtoul_r+0xce>
   d68a2:	2322      	movs	r3, #34	; 0x22
   d68a4:	f8c8 3000 	str.w	r3, [r8]
   d68a8:	f04f 30ff 	mov.w	r0, #4294967295
   d68ac:	b92a      	cbnz	r2, d68ba <_strtoul_r+0xd6>
   d68ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d68b2:	b107      	cbz	r7, d68b6 <_strtoul_r+0xd2>
   d68b4:	4240      	negs	r0, r0
   d68b6:	b172      	cbz	r2, d68d6 <_strtoul_r+0xf2>
   d68b8:	b106      	cbz	r6, d68bc <_strtoul_r+0xd8>
   d68ba:	1e69      	subs	r1, r5, #1
   d68bc:	6011      	str	r1, [r2, #0]
   d68be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d68c2:	2430      	movs	r4, #48	; 0x30
   d68c4:	2b00      	cmp	r3, #0
   d68c6:	d1b9      	bne.n	d683c <_strtoul_r+0x58>
   d68c8:	2308      	movs	r3, #8
   d68ca:	e7b7      	b.n	d683c <_strtoul_r+0x58>
   d68cc:	230a      	movs	r3, #10
   d68ce:	e7b5      	b.n	d683c <_strtoul_r+0x58>
   d68d0:	2c30      	cmp	r4, #48	; 0x30
   d68d2:	d0ab      	beq.n	d682c <_strtoul_r+0x48>
   d68d4:	e7b2      	b.n	d683c <_strtoul_r+0x58>
   d68d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d68da:	bf00      	nop
   d68dc:	2003e28c 	.word	0x2003e28c

000d68e0 <strtoul>:
   d68e0:	4613      	mov	r3, r2
   d68e2:	460a      	mov	r2, r1
   d68e4:	4601      	mov	r1, r0
   d68e6:	4802      	ldr	r0, [pc, #8]	; (d68f0 <strtoul+0x10>)
   d68e8:	6800      	ldr	r0, [r0, #0]
   d68ea:	f7ff bf7b 	b.w	d67e4 <_strtoul_r>
   d68ee:	bf00      	nop
   d68f0:	2003e2f0 	.word	0x2003e2f0

000d68f4 <__tzcalc_limits>:
   d68f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d68f8:	4604      	mov	r4, r0
   d68fa:	f000 fa6f 	bl	d6ddc <__gettzinfo>
   d68fe:	f240 73b1 	movw	r3, #1969	; 0x7b1
   d6902:	429c      	cmp	r4, r3
   d6904:	f340 8096 	ble.w	d6a34 <__tzcalc_limits+0x140>
   d6908:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   d690c:	18e3      	adds	r3, r4, r3
   d690e:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   d6912:	109b      	asrs	r3, r3, #2
   d6914:	f240 156d 	movw	r5, #365	; 0x16d
   d6918:	fb05 3502 	mla	r5, r5, r2, r3
   d691c:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   d6920:	f06f 0363 	mvn.w	r3, #99	; 0x63
   d6924:	fb92 f3f3 	sdiv	r3, r2, r3
   d6928:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   d692c:	442b      	add	r3, r5
   d692e:	18a5      	adds	r5, r4, r2
   d6930:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d6934:	fb95 f5f2 	sdiv	r5, r5, r2
   d6938:	441d      	add	r5, r3
   d693a:	2364      	movs	r3, #100	; 0x64
   d693c:	fb94 f7f2 	sdiv	r7, r4, r2
   d6940:	fb94 f6f3 	sdiv	r6, r4, r3
   d6944:	fb02 4717 	mls	r7, r2, r7, r4
   d6948:	fb03 4616 	mls	r6, r3, r6, r4
   d694c:	f100 0338 	add.w	r3, r0, #56	; 0x38
   d6950:	fab7 fe87 	clz	lr, r7
   d6954:	9301      	str	r3, [sp, #4]
   d6956:	f004 0303 	and.w	r3, r4, #3
   d695a:	6044      	str	r4, [r0, #4]
   d695c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   d6960:	4601      	mov	r1, r0
   d6962:	9300      	str	r3, [sp, #0]
   d6964:	f04f 0c07 	mov.w	ip, #7
   d6968:	7a0b      	ldrb	r3, [r1, #8]
   d696a:	2b4a      	cmp	r3, #74	; 0x4a
   d696c:	d10e      	bne.n	d698c <__tzcalc_limits+0x98>
   d696e:	694b      	ldr	r3, [r1, #20]
   d6970:	9a00      	ldr	r2, [sp, #0]
   d6972:	18ec      	adds	r4, r5, r3
   d6974:	b902      	cbnz	r2, d6978 <__tzcalc_limits+0x84>
   d6976:	b906      	cbnz	r6, d697a <__tzcalc_limits+0x86>
   d6978:	b927      	cbnz	r7, d6984 <__tzcalc_limits+0x90>
   d697a:	2b3b      	cmp	r3, #59	; 0x3b
   d697c:	bfd4      	ite	le
   d697e:	2300      	movle	r3, #0
   d6980:	2301      	movgt	r3, #1
   d6982:	e000      	b.n	d6986 <__tzcalc_limits+0x92>
   d6984:	2300      	movs	r3, #0
   d6986:	4423      	add	r3, r4
   d6988:	3b01      	subs	r3, #1
   d698a:	e03f      	b.n	d6a0c <__tzcalc_limits+0x118>
   d698c:	2b44      	cmp	r3, #68	; 0x44
   d698e:	d102      	bne.n	d6996 <__tzcalc_limits+0xa2>
   d6990:	694b      	ldr	r3, [r1, #20]
   d6992:	442b      	add	r3, r5
   d6994:	e03a      	b.n	d6a0c <__tzcalc_limits+0x118>
   d6996:	9b00      	ldr	r3, [sp, #0]
   d6998:	b92b      	cbnz	r3, d69a6 <__tzcalc_limits+0xb2>
   d699a:	2e00      	cmp	r6, #0
   d699c:	bf0c      	ite	eq
   d699e:	46f0      	moveq	r8, lr
   d69a0:	f04f 0801 	movne.w	r8, #1
   d69a4:	e000      	b.n	d69a8 <__tzcalc_limits+0xb4>
   d69a6:	46f0      	mov	r8, lr
   d69a8:	4b24      	ldr	r3, [pc, #144]	; (d6a3c <__tzcalc_limits+0x148>)
   d69aa:	68cc      	ldr	r4, [r1, #12]
   d69ac:	2230      	movs	r2, #48	; 0x30
   d69ae:	fb02 3808 	mla	r8, r2, r8, r3
   d69b2:	f1a8 0a04 	sub.w	sl, r8, #4
   d69b6:	46a9      	mov	r9, r5
   d69b8:	2301      	movs	r3, #1
   d69ba:	42a3      	cmp	r3, r4
   d69bc:	da04      	bge.n	d69c8 <__tzcalc_limits+0xd4>
   d69be:	f85a bf04 	ldr.w	fp, [sl, #4]!
   d69c2:	3301      	adds	r3, #1
   d69c4:	44d9      	add	r9, fp
   d69c6:	e7f8      	b.n	d69ba <__tzcalc_limits+0xc6>
   d69c8:	f109 0304 	add.w	r3, r9, #4
   d69cc:	fb93 fbfc 	sdiv	fp, r3, ip
   d69d0:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   d69d4:	2c01      	cmp	r4, #1
   d69d6:	ebca 0a03 	rsb	sl, sl, r3
   d69da:	694b      	ldr	r3, [r1, #20]
   d69dc:	bfb8      	it	lt
   d69de:	2401      	movlt	r4, #1
   d69e0:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   d69e4:	ebb3 0a0a 	subs.w	sl, r3, sl
   d69e8:	690b      	ldr	r3, [r1, #16]
   d69ea:	f104 34ff 	add.w	r4, r4, #4294967295
   d69ee:	f103 33ff 	add.w	r3, r3, #4294967295
   d69f2:	bf48      	it	mi
   d69f4:	f10a 0a07 	addmi.w	sl, sl, #7
   d69f8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d69fc:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   d6a00:	4453      	add	r3, sl
   d6a02:	42a3      	cmp	r3, r4
   d6a04:	db01      	blt.n	d6a0a <__tzcalc_limits+0x116>
   d6a06:	3b07      	subs	r3, #7
   d6a08:	e7fb      	b.n	d6a02 <__tzcalc_limits+0x10e>
   d6a0a:	444b      	add	r3, r9
   d6a0c:	698c      	ldr	r4, [r1, #24]
   d6a0e:	4a0c      	ldr	r2, [pc, #48]	; (d6a40 <__tzcalc_limits+0x14c>)
   d6a10:	fb02 4303 	mla	r3, r2, r3, r4
   d6a14:	6a0c      	ldr	r4, [r1, #32]
   d6a16:	4423      	add	r3, r4
   d6a18:	f841 3f1c 	str.w	r3, [r1, #28]!
   d6a1c:	9b01      	ldr	r3, [sp, #4]
   d6a1e:	4299      	cmp	r1, r3
   d6a20:	d1a2      	bne.n	d6968 <__tzcalc_limits+0x74>
   d6a22:	69c3      	ldr	r3, [r0, #28]
   d6a24:	6b82      	ldr	r2, [r0, #56]	; 0x38
   d6a26:	4293      	cmp	r3, r2
   d6a28:	bfac      	ite	ge
   d6a2a:	2300      	movge	r3, #0
   d6a2c:	2301      	movlt	r3, #1
   d6a2e:	6003      	str	r3, [r0, #0]
   d6a30:	2001      	movs	r0, #1
   d6a32:	e000      	b.n	d6a36 <__tzcalc_limits+0x142>
   d6a34:	2000      	movs	r0, #0
   d6a36:	b003      	add	sp, #12
   d6a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6a3c:	000d7484 	.word	0x000d7484
   d6a40:	00015180 	.word	0x00015180

000d6a44 <__tz_lock>:
   d6a44:	4770      	bx	lr

000d6a46 <__tz_unlock>:
   d6a46:	4770      	bx	lr

000d6a48 <_tzset_unlocked>:
   d6a48:	4b01      	ldr	r3, [pc, #4]	; (d6a50 <_tzset_unlocked+0x8>)
   d6a4a:	6818      	ldr	r0, [r3, #0]
   d6a4c:	f000 b802 	b.w	d6a54 <_tzset_unlocked_r>
   d6a50:	2003e2f0 	.word	0x2003e2f0

000d6a54 <_tzset_unlocked_r>:
   d6a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6a58:	b08d      	sub	sp, #52	; 0x34
   d6a5a:	4607      	mov	r7, r0
   d6a5c:	f000 f9be 	bl	d6ddc <__gettzinfo>
   d6a60:	49b0      	ldr	r1, [pc, #704]	; (d6d24 <_tzset_unlocked_r+0x2d0>)
   d6a62:	4eb1      	ldr	r6, [pc, #708]	; (d6d28 <_tzset_unlocked_r+0x2d4>)
   d6a64:	4604      	mov	r4, r0
   d6a66:	4638      	mov	r0, r7
   d6a68:	f000 f9b0 	bl	d6dcc <_getenv_r>
   d6a6c:	4605      	mov	r5, r0
   d6a6e:	b960      	cbnz	r0, d6a8a <_tzset_unlocked_r+0x36>
   d6a70:	4bae      	ldr	r3, [pc, #696]	; (d6d2c <_tzset_unlocked_r+0x2d8>)
   d6a72:	4aaf      	ldr	r2, [pc, #700]	; (d6d30 <_tzset_unlocked_r+0x2dc>)
   d6a74:	6018      	str	r0, [r3, #0]
   d6a76:	4baf      	ldr	r3, [pc, #700]	; (d6d34 <_tzset_unlocked_r+0x2e0>)
   d6a78:	6018      	str	r0, [r3, #0]
   d6a7a:	4baf      	ldr	r3, [pc, #700]	; (d6d38 <_tzset_unlocked_r+0x2e4>)
   d6a7c:	6830      	ldr	r0, [r6, #0]
   d6a7e:	601a      	str	r2, [r3, #0]
   d6a80:	605a      	str	r2, [r3, #4]
   d6a82:	f7fe f88f 	bl	d4ba4 <free>
   d6a86:	6035      	str	r5, [r6, #0]
   d6a88:	e148      	b.n	d6d1c <_tzset_unlocked_r+0x2c8>
   d6a8a:	6831      	ldr	r1, [r6, #0]
   d6a8c:	b979      	cbnz	r1, d6aae <_tzset_unlocked_r+0x5a>
   d6a8e:	6830      	ldr	r0, [r6, #0]
   d6a90:	f7fe f888 	bl	d4ba4 <free>
   d6a94:	4628      	mov	r0, r5
   d6a96:	f7ff fe74 	bl	d6782 <strlen>
   d6a9a:	1c41      	adds	r1, r0, #1
   d6a9c:	4638      	mov	r0, r7
   d6a9e:	f7fe f8b1 	bl	d4c04 <_malloc_r>
   d6aa2:	6030      	str	r0, [r6, #0]
   d6aa4:	b148      	cbz	r0, d6aba <_tzset_unlocked_r+0x66>
   d6aa6:	4629      	mov	r1, r5
   d6aa8:	f7ff fe48 	bl	d673c <strcpy>
   d6aac:	e005      	b.n	d6aba <_tzset_unlocked_r+0x66>
   d6aae:	f7ff fe3b 	bl	d6728 <strcmp>
   d6ab2:	2800      	cmp	r0, #0
   d6ab4:	f000 8132 	beq.w	d6d1c <_tzset_unlocked_r+0x2c8>
   d6ab8:	e7e9      	b.n	d6a8e <_tzset_unlocked_r+0x3a>
   d6aba:	782b      	ldrb	r3, [r5, #0]
   d6abc:	4a9f      	ldr	r2, [pc, #636]	; (d6d3c <_tzset_unlocked_r+0x2e8>)
   d6abe:	49a0      	ldr	r1, [pc, #640]	; (d6d40 <_tzset_unlocked_r+0x2ec>)
   d6ac0:	2b3a      	cmp	r3, #58	; 0x3a
   d6ac2:	bf08      	it	eq
   d6ac4:	3501      	addeq	r5, #1
   d6ac6:	ae0a      	add	r6, sp, #40	; 0x28
   d6ac8:	4633      	mov	r3, r6
   d6aca:	4628      	mov	r0, r5
   d6acc:	f7fe f882 	bl	d4bd4 <siscanf>
   d6ad0:	2800      	cmp	r0, #0
   d6ad2:	f340 8123 	ble.w	d6d1c <_tzset_unlocked_r+0x2c8>
   d6ad6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6ad8:	18ef      	adds	r7, r5, r3
   d6ada:	5ceb      	ldrb	r3, [r5, r3]
   d6adc:	2b2d      	cmp	r3, #45	; 0x2d
   d6ade:	d103      	bne.n	d6ae8 <_tzset_unlocked_r+0x94>
   d6ae0:	3701      	adds	r7, #1
   d6ae2:	f04f 35ff 	mov.w	r5, #4294967295
   d6ae6:	e003      	b.n	d6af0 <_tzset_unlocked_r+0x9c>
   d6ae8:	2b2b      	cmp	r3, #43	; 0x2b
   d6aea:	bf08      	it	eq
   d6aec:	3701      	addeq	r7, #1
   d6aee:	2501      	movs	r5, #1
   d6af0:	f10d 0a20 	add.w	sl, sp, #32
   d6af4:	f10d 0b1e 	add.w	fp, sp, #30
   d6af8:	f04f 0800 	mov.w	r8, #0
   d6afc:	9603      	str	r6, [sp, #12]
   d6afe:	f8cd a008 	str.w	sl, [sp, #8]
   d6b02:	9601      	str	r6, [sp, #4]
   d6b04:	f8cd b000 	str.w	fp, [sp]
   d6b08:	4633      	mov	r3, r6
   d6b0a:	aa07      	add	r2, sp, #28
   d6b0c:	498d      	ldr	r1, [pc, #564]	; (d6d44 <_tzset_unlocked_r+0x2f0>)
   d6b0e:	f8ad 801e 	strh.w	r8, [sp, #30]
   d6b12:	4638      	mov	r0, r7
   d6b14:	f8ad 8020 	strh.w	r8, [sp, #32]
   d6b18:	f7fe f85c 	bl	d4bd4 <siscanf>
   d6b1c:	4540      	cmp	r0, r8
   d6b1e:	f340 80fd 	ble.w	d6d1c <_tzset_unlocked_r+0x2c8>
   d6b22:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d6b26:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d6b2a:	f8df 9224 	ldr.w	r9, [pc, #548]	; d6d50 <_tzset_unlocked_r+0x2fc>
   d6b2e:	213c      	movs	r1, #60	; 0x3c
   d6b30:	fb01 3302 	mla	r3, r1, r2, r3
   d6b34:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d6b38:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d6b3c:	fb01 3302 	mla	r3, r1, r2, r3
   d6b40:	435d      	muls	r5, r3
   d6b42:	6225      	str	r5, [r4, #32]
   d6b44:	4d7c      	ldr	r5, [pc, #496]	; (d6d38 <_tzset_unlocked_r+0x2e4>)
   d6b46:	4b7d      	ldr	r3, [pc, #500]	; (d6d3c <_tzset_unlocked_r+0x2e8>)
   d6b48:	602b      	str	r3, [r5, #0]
   d6b4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6b4c:	497c      	ldr	r1, [pc, #496]	; (d6d40 <_tzset_unlocked_r+0x2ec>)
   d6b4e:	441f      	add	r7, r3
   d6b50:	464a      	mov	r2, r9
   d6b52:	4633      	mov	r3, r6
   d6b54:	4638      	mov	r0, r7
   d6b56:	f7fe f83d 	bl	d4bd4 <siscanf>
   d6b5a:	4540      	cmp	r0, r8
   d6b5c:	dc08      	bgt.n	d6b70 <_tzset_unlocked_r+0x11c>
   d6b5e:	682b      	ldr	r3, [r5, #0]
   d6b60:	606b      	str	r3, [r5, #4]
   d6b62:	4b72      	ldr	r3, [pc, #456]	; (d6d2c <_tzset_unlocked_r+0x2d8>)
   d6b64:	6a22      	ldr	r2, [r4, #32]
   d6b66:	601a      	str	r2, [r3, #0]
   d6b68:	4b72      	ldr	r3, [pc, #456]	; (d6d34 <_tzset_unlocked_r+0x2e0>)
   d6b6a:	f8c3 8000 	str.w	r8, [r3]
   d6b6e:	e0d5      	b.n	d6d1c <_tzset_unlocked_r+0x2c8>
   d6b70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6b72:	f8c5 9004 	str.w	r9, [r5, #4]
   d6b76:	18fd      	adds	r5, r7, r3
   d6b78:	5cfb      	ldrb	r3, [r7, r3]
   d6b7a:	2b2d      	cmp	r3, #45	; 0x2d
   d6b7c:	d103      	bne.n	d6b86 <_tzset_unlocked_r+0x132>
   d6b7e:	3501      	adds	r5, #1
   d6b80:	f04f 37ff 	mov.w	r7, #4294967295
   d6b84:	e003      	b.n	d6b8e <_tzset_unlocked_r+0x13a>
   d6b86:	2b2b      	cmp	r3, #43	; 0x2b
   d6b88:	bf08      	it	eq
   d6b8a:	3501      	addeq	r5, #1
   d6b8c:	2701      	movs	r7, #1
   d6b8e:	2300      	movs	r3, #0
   d6b90:	f8ad 301c 	strh.w	r3, [sp, #28]
   d6b94:	f8ad 301e 	strh.w	r3, [sp, #30]
   d6b98:	f8ad 3020 	strh.w	r3, [sp, #32]
   d6b9c:	930a      	str	r3, [sp, #40]	; 0x28
   d6b9e:	9603      	str	r6, [sp, #12]
   d6ba0:	f8cd a008 	str.w	sl, [sp, #8]
   d6ba4:	9601      	str	r6, [sp, #4]
   d6ba6:	f8cd b000 	str.w	fp, [sp]
   d6baa:	4633      	mov	r3, r6
   d6bac:	aa07      	add	r2, sp, #28
   d6bae:	4965      	ldr	r1, [pc, #404]	; (d6d44 <_tzset_unlocked_r+0x2f0>)
   d6bb0:	4628      	mov	r0, r5
   d6bb2:	f7fe f80f 	bl	d4bd4 <siscanf>
   d6bb6:	2800      	cmp	r0, #0
   d6bb8:	dc04      	bgt.n	d6bc4 <_tzset_unlocked_r+0x170>
   d6bba:	6a23      	ldr	r3, [r4, #32]
   d6bbc:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   d6bc0:	63e3      	str	r3, [r4, #60]	; 0x3c
   d6bc2:	e00e      	b.n	d6be2 <_tzset_unlocked_r+0x18e>
   d6bc4:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d6bc8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d6bcc:	213c      	movs	r1, #60	; 0x3c
   d6bce:	fb01 3302 	mla	r3, r1, r2, r3
   d6bd2:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d6bd6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d6bda:	fb01 3302 	mla	r3, r1, r2, r3
   d6bde:	435f      	muls	r7, r3
   d6be0:	63e7      	str	r7, [r4, #60]	; 0x3c
   d6be2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6be4:	4627      	mov	r7, r4
   d6be6:	441d      	add	r5, r3
   d6be8:	f04f 0900 	mov.w	r9, #0
   d6bec:	782b      	ldrb	r3, [r5, #0]
   d6bee:	2b2c      	cmp	r3, #44	; 0x2c
   d6bf0:	bf08      	it	eq
   d6bf2:	3501      	addeq	r5, #1
   d6bf4:	f895 8000 	ldrb.w	r8, [r5]
   d6bf8:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   d6bfc:	d126      	bne.n	d6c4c <_tzset_unlocked_r+0x1f8>
   d6bfe:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   d6c02:	9302      	str	r3, [sp, #8]
   d6c04:	ab09      	add	r3, sp, #36	; 0x24
   d6c06:	9300      	str	r3, [sp, #0]
   d6c08:	9603      	str	r6, [sp, #12]
   d6c0a:	9601      	str	r6, [sp, #4]
   d6c0c:	4633      	mov	r3, r6
   d6c0e:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   d6c12:	494d      	ldr	r1, [pc, #308]	; (d6d48 <_tzset_unlocked_r+0x2f4>)
   d6c14:	4628      	mov	r0, r5
   d6c16:	f7fd ffdd 	bl	d4bd4 <siscanf>
   d6c1a:	2803      	cmp	r0, #3
   d6c1c:	d17e      	bne.n	d6d1c <_tzset_unlocked_r+0x2c8>
   d6c1e:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   d6c22:	1e4b      	subs	r3, r1, #1
   d6c24:	2b0b      	cmp	r3, #11
   d6c26:	d879      	bhi.n	d6d1c <_tzset_unlocked_r+0x2c8>
   d6c28:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   d6c2c:	1e53      	subs	r3, r2, #1
   d6c2e:	2b04      	cmp	r3, #4
   d6c30:	d874      	bhi.n	d6d1c <_tzset_unlocked_r+0x2c8>
   d6c32:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   d6c36:	2b06      	cmp	r3, #6
   d6c38:	d870      	bhi.n	d6d1c <_tzset_unlocked_r+0x2c8>
   d6c3a:	f887 8008 	strb.w	r8, [r7, #8]
   d6c3e:	60f9      	str	r1, [r7, #12]
   d6c40:	613a      	str	r2, [r7, #16]
   d6c42:	617b      	str	r3, [r7, #20]
   d6c44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6c46:	eb05 0803 	add.w	r8, r5, r3
   d6c4a:	e02a      	b.n	d6ca2 <_tzset_unlocked_r+0x24e>
   d6c4c:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   d6c50:	bf06      	itte	eq
   d6c52:	3501      	addeq	r5, #1
   d6c54:	4643      	moveq	r3, r8
   d6c56:	2344      	movne	r3, #68	; 0x44
   d6c58:	220a      	movs	r2, #10
   d6c5a:	a90b      	add	r1, sp, #44	; 0x2c
   d6c5c:	4628      	mov	r0, r5
   d6c5e:	9305      	str	r3, [sp, #20]
   d6c60:	f7ff fe3e 	bl	d68e0 <strtoul>
   d6c64:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   d6c68:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   d6c6c:	4545      	cmp	r5, r8
   d6c6e:	9b05      	ldr	r3, [sp, #20]
   d6c70:	d114      	bne.n	d6c9c <_tzset_unlocked_r+0x248>
   d6c72:	234d      	movs	r3, #77	; 0x4d
   d6c74:	f1b9 0f00 	cmp.w	r9, #0
   d6c78:	d107      	bne.n	d6c8a <_tzset_unlocked_r+0x236>
   d6c7a:	7223      	strb	r3, [r4, #8]
   d6c7c:	2303      	movs	r3, #3
   d6c7e:	60e3      	str	r3, [r4, #12]
   d6c80:	2302      	movs	r3, #2
   d6c82:	6123      	str	r3, [r4, #16]
   d6c84:	f8c4 9014 	str.w	r9, [r4, #20]
   d6c88:	e00b      	b.n	d6ca2 <_tzset_unlocked_r+0x24e>
   d6c8a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   d6c8e:	230b      	movs	r3, #11
   d6c90:	62a3      	str	r3, [r4, #40]	; 0x28
   d6c92:	2301      	movs	r3, #1
   d6c94:	62e3      	str	r3, [r4, #44]	; 0x2c
   d6c96:	2300      	movs	r3, #0
   d6c98:	6323      	str	r3, [r4, #48]	; 0x30
   d6c9a:	e002      	b.n	d6ca2 <_tzset_unlocked_r+0x24e>
   d6c9c:	b280      	uxth	r0, r0
   d6c9e:	723b      	strb	r3, [r7, #8]
   d6ca0:	6178      	str	r0, [r7, #20]
   d6ca2:	2302      	movs	r3, #2
   d6ca4:	f8ad 301c 	strh.w	r3, [sp, #28]
   d6ca8:	2300      	movs	r3, #0
   d6caa:	f8ad 301e 	strh.w	r3, [sp, #30]
   d6cae:	f8ad 3020 	strh.w	r3, [sp, #32]
   d6cb2:	930a      	str	r3, [sp, #40]	; 0x28
   d6cb4:	f898 3000 	ldrb.w	r3, [r8]
   d6cb8:	2b2f      	cmp	r3, #47	; 0x2f
   d6cba:	d10b      	bne.n	d6cd4 <_tzset_unlocked_r+0x280>
   d6cbc:	9603      	str	r6, [sp, #12]
   d6cbe:	f8cd a008 	str.w	sl, [sp, #8]
   d6cc2:	9601      	str	r6, [sp, #4]
   d6cc4:	f8cd b000 	str.w	fp, [sp]
   d6cc8:	4633      	mov	r3, r6
   d6cca:	aa07      	add	r2, sp, #28
   d6ccc:	491f      	ldr	r1, [pc, #124]	; (d6d4c <_tzset_unlocked_r+0x2f8>)
   d6cce:	4640      	mov	r0, r8
   d6cd0:	f7fd ff80 	bl	d4bd4 <siscanf>
   d6cd4:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d6cd8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d6cdc:	213c      	movs	r1, #60	; 0x3c
   d6cde:	fb01 3302 	mla	r3, r1, r2, r3
   d6ce2:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d6ce6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d6cea:	fb01 3302 	mla	r3, r1, r2, r3
   d6cee:	61bb      	str	r3, [r7, #24]
   d6cf0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d6cf2:	f109 0901 	add.w	r9, r9, #1
   d6cf6:	f1b9 0f02 	cmp.w	r9, #2
   d6cfa:	4445      	add	r5, r8
   d6cfc:	f107 071c 	add.w	r7, r7, #28
   d6d00:	f47f af74 	bne.w	d6bec <_tzset_unlocked_r+0x198>
   d6d04:	6860      	ldr	r0, [r4, #4]
   d6d06:	f7ff fdf5 	bl	d68f4 <__tzcalc_limits>
   d6d0a:	4b08      	ldr	r3, [pc, #32]	; (d6d2c <_tzset_unlocked_r+0x2d8>)
   d6d0c:	6a22      	ldr	r2, [r4, #32]
   d6d0e:	601a      	str	r2, [r3, #0]
   d6d10:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d6d12:	1a9b      	subs	r3, r3, r2
   d6d14:	4a07      	ldr	r2, [pc, #28]	; (d6d34 <_tzset_unlocked_r+0x2e0>)
   d6d16:	bf18      	it	ne
   d6d18:	2301      	movne	r3, #1
   d6d1a:	6013      	str	r3, [r2, #0]
   d6d1c:	b00d      	add	sp, #52	; 0x34
   d6d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6d22:	bf00      	nop
   d6d24:	000d74e4 	.word	0x000d74e4
   d6d28:	2003e7e0 	.word	0x2003e7e0
   d6d2c:	2003e7e8 	.word	0x2003e7e8
   d6d30:	000d74e7 	.word	0x000d74e7
   d6d34:	2003e7e4 	.word	0x2003e7e4
   d6d38:	2003e2f4 	.word	0x2003e2f4
   d6d3c:	2003e7d3 	.word	0x2003e7d3
   d6d40:	000d74eb 	.word	0x000d74eb
   d6d44:	000d750e 	.word	0x000d750e
   d6d48:	000d74fa 	.word	0x000d74fa
   d6d4c:	000d750d 	.word	0x000d750d
   d6d50:	2003e7c8 	.word	0x2003e7c8

000d6d54 <_findenv_r>:
   d6d54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6d58:	4607      	mov	r7, r0
   d6d5a:	468b      	mov	fp, r1
   d6d5c:	4690      	mov	r8, r2
   d6d5e:	f000 f8d9 	bl	d6f14 <__env_lock>
   d6d62:	4b19      	ldr	r3, [pc, #100]	; (d6dc8 <_findenv_r+0x74>)
   d6d64:	681d      	ldr	r5, [r3, #0]
   d6d66:	469a      	mov	sl, r3
   d6d68:	b13d      	cbz	r5, d6d7a <_findenv_r+0x26>
   d6d6a:	465c      	mov	r4, fp
   d6d6c:	4623      	mov	r3, r4
   d6d6e:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6d72:	b142      	cbz	r2, d6d86 <_findenv_r+0x32>
   d6d74:	2a3d      	cmp	r2, #61	; 0x3d
   d6d76:	461c      	mov	r4, r3
   d6d78:	d1f8      	bne.n	d6d6c <_findenv_r+0x18>
   d6d7a:	4638      	mov	r0, r7
   d6d7c:	f000 f8cb 	bl	d6f16 <__env_unlock>
   d6d80:	2000      	movs	r0, #0
   d6d82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6d86:	ebcb 0404 	rsb	r4, fp, r4
   d6d8a:	46a9      	mov	r9, r5
   d6d8c:	f859 0b04 	ldr.w	r0, [r9], #4
   d6d90:	2800      	cmp	r0, #0
   d6d92:	d0f2      	beq.n	d6d7a <_findenv_r+0x26>
   d6d94:	4622      	mov	r2, r4
   d6d96:	4659      	mov	r1, fp
   d6d98:	f7ff fcfb 	bl	d6792 <strncmp>
   d6d9c:	b988      	cbnz	r0, d6dc2 <_findenv_r+0x6e>
   d6d9e:	f859 3c04 	ldr.w	r3, [r9, #-4]
   d6da2:	191e      	adds	r6, r3, r4
   d6da4:	5d1b      	ldrb	r3, [r3, r4]
   d6da6:	2b3d      	cmp	r3, #61	; 0x3d
   d6da8:	d10b      	bne.n	d6dc2 <_findenv_r+0x6e>
   d6daa:	f8da 3000 	ldr.w	r3, [sl]
   d6dae:	1aed      	subs	r5, r5, r3
   d6db0:	10ad      	asrs	r5, r5, #2
   d6db2:	4638      	mov	r0, r7
   d6db4:	f8c8 5000 	str.w	r5, [r8]
   d6db8:	f000 f8ad 	bl	d6f16 <__env_unlock>
   d6dbc:	1c70      	adds	r0, r6, #1
   d6dbe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6dc2:	464d      	mov	r5, r9
   d6dc4:	e7e1      	b.n	d6d8a <_findenv_r+0x36>
   d6dc6:	bf00      	nop
   d6dc8:	2003e33c 	.word	0x2003e33c

000d6dcc <_getenv_r>:
   d6dcc:	b507      	push	{r0, r1, r2, lr}
   d6dce:	aa01      	add	r2, sp, #4
   d6dd0:	f7ff ffc0 	bl	d6d54 <_findenv_r>
   d6dd4:	b003      	add	sp, #12
   d6dd6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6ddc <__gettzinfo>:
   d6ddc:	4800      	ldr	r0, [pc, #0]	; (d6de0 <__gettzinfo+0x4>)
   d6dde:	4770      	bx	lr
   d6de0:	2003e2fc 	.word	0x2003e2fc

000d6de4 <gmtime_r>:
   d6de4:	6802      	ldr	r2, [r0, #0]
   d6de6:	4b47      	ldr	r3, [pc, #284]	; (d6f04 <gmtime_r+0x120>)
   d6de8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6dea:	fb92 f4f3 	sdiv	r4, r2, r3
   d6dee:	fb03 2214 	mls	r2, r3, r4, r2
   d6df2:	2a00      	cmp	r2, #0
   d6df4:	bfbc      	itt	lt
   d6df6:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   d6dfa:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   d6dfe:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   d6e02:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   d6e06:	fb92 f3f0 	sdiv	r3, r2, r0
   d6e0a:	fb00 2213 	mls	r2, r0, r3, r2
   d6e0e:	f04f 003c 	mov.w	r0, #60	; 0x3c
   d6e12:	bfac      	ite	ge
   d6e14:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   d6e18:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   d6e1c:	608b      	str	r3, [r1, #8]
   d6e1e:	fb92 f3f0 	sdiv	r3, r2, r0
   d6e22:	fb00 2213 	mls	r2, r0, r3, r2
   d6e26:	604b      	str	r3, [r1, #4]
   d6e28:	600a      	str	r2, [r1, #0]
   d6e2a:	2307      	movs	r3, #7
   d6e2c:	1ce2      	adds	r2, r4, #3
   d6e2e:	fb92 f3f3 	sdiv	r3, r2, r3
   d6e32:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d6e36:	1ad3      	subs	r3, r2, r3
   d6e38:	618b      	str	r3, [r1, #24]
   d6e3a:	4b33      	ldr	r3, [pc, #204]	; (d6f08 <gmtime_r+0x124>)
   d6e3c:	4d33      	ldr	r5, [pc, #204]	; (d6f0c <gmtime_r+0x128>)
   d6e3e:	fb94 f5f5 	sdiv	r5, r4, r5
   d6e42:	fb03 4405 	mla	r4, r3, r5, r4
   d6e46:	f648 62ac 	movw	r2, #36524	; 0x8eac
   d6e4a:	fbb4 f2f2 	udiv	r2, r4, r2
   d6e4e:	4422      	add	r2, r4
   d6e50:	f240 57b4 	movw	r7, #1460	; 0x5b4
   d6e54:	fbb4 f3f7 	udiv	r3, r4, r7
   d6e58:	1ad2      	subs	r2, r2, r3
   d6e5a:	482d      	ldr	r0, [pc, #180]	; (d6f10 <gmtime_r+0x12c>)
   d6e5c:	fbb4 f0f0 	udiv	r0, r4, r0
   d6e60:	f648 6694 	movw	r6, #36500	; 0x8e94
   d6e64:	1a13      	subs	r3, r2, r0
   d6e66:	fbb3 f6f6 	udiv	r6, r3, r6
   d6e6a:	4434      	add	r4, r6
   d6e6c:	f240 126d 	movw	r2, #365	; 0x16d
   d6e70:	fbb3 f0f2 	udiv	r0, r3, r2
   d6e74:	fbb3 f3f7 	udiv	r3, r3, r7
   d6e78:	1ae3      	subs	r3, r4, r3
   d6e7a:	fb02 3310 	mls	r3, r2, r0, r3
   d6e7e:	2499      	movs	r4, #153	; 0x99
   d6e80:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   d6e84:	3202      	adds	r2, #2
   d6e86:	fbb2 f2f4 	udiv	r2, r2, r4
   d6e8a:	2a0a      	cmp	r2, #10
   d6e8c:	fb04 f402 	mul.w	r4, r4, r2
   d6e90:	f104 0602 	add.w	r6, r4, #2
   d6e94:	f04f 0405 	mov.w	r4, #5
   d6e98:	fbb6 f4f4 	udiv	r4, r6, r4
   d6e9c:	bf34      	ite	cc
   d6e9e:	2602      	movcc	r6, #2
   d6ea0:	f06f 0609 	mvncs.w	r6, #9
   d6ea4:	4416      	add	r6, r2
   d6ea6:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d6eaa:	fb02 0505 	mla	r5, r2, r5, r0
   d6eae:	1c5f      	adds	r7, r3, #1
   d6eb0:	2e01      	cmp	r6, #1
   d6eb2:	bf98      	it	ls
   d6eb4:	3501      	addls	r5, #1
   d6eb6:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   d6eba:	eba7 0704 	sub.w	r7, r7, r4
   d6ebe:	d302      	bcc.n	d6ec6 <gmtime_r+0xe2>
   d6ec0:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   d6ec4:	e014      	b.n	d6ef0 <gmtime_r+0x10c>
   d6ec6:	0782      	lsls	r2, r0, #30
   d6ec8:	d105      	bne.n	d6ed6 <gmtime_r+0xf2>
   d6eca:	2464      	movs	r4, #100	; 0x64
   d6ecc:	fbb0 f2f4 	udiv	r2, r0, r4
   d6ed0:	fb04 0212 	mls	r2, r4, r2, r0
   d6ed4:	b94a      	cbnz	r2, d6eea <gmtime_r+0x106>
   d6ed6:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d6eda:	fbb0 f4f2 	udiv	r4, r0, r2
   d6ede:	fb02 0014 	mls	r0, r2, r4, r0
   d6ee2:	fab0 f280 	clz	r2, r0
   d6ee6:	0952      	lsrs	r2, r2, #5
   d6ee8:	e000      	b.n	d6eec <gmtime_r+0x108>
   d6eea:	2201      	movs	r2, #1
   d6eec:	333b      	adds	r3, #59	; 0x3b
   d6eee:	441a      	add	r2, r3
   d6ef0:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   d6ef4:	2300      	movs	r3, #0
   d6ef6:	61ca      	str	r2, [r1, #28]
   d6ef8:	614d      	str	r5, [r1, #20]
   d6efa:	610e      	str	r6, [r1, #16]
   d6efc:	60cf      	str	r7, [r1, #12]
   d6efe:	620b      	str	r3, [r1, #32]
   d6f00:	4608      	mov	r0, r1
   d6f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6f04:	00015180 	.word	0x00015180
   d6f08:	fffdc54f 	.word	0xfffdc54f
   d6f0c:	00023ab1 	.word	0x00023ab1
   d6f10:	00023ab0 	.word	0x00023ab0

000d6f14 <__env_lock>:
   d6f14:	4770      	bx	lr

000d6f16 <__env_unlock>:
   d6f16:	4770      	bx	lr

000d6f18 <dynalib_user>:
   d6f18:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d6f28:	0000 0000                                   ....

000d6f2c <_ZTV16JsonWriterStaticILj256EE>:
	...
   d6f34:	40b5 000d 40c9 000d 6f4d 7369 7574 6572     .@...@..Moisture
   d6f44:	5400 6d65 6570 6172 7574 6572 5000 616c     .Temperature.Pla
   d6f54:	746e 5720 7461 7265 6465 5400 6568 2520     nt Watered.The %
   d6f64:	2069 203e 6925 202c 7574 6e72 6e69 2067     i > %i, turning 
   d6f74:	6e6f 7020 6d75 0070 6854 2065 6925 3c20     on pump.The %i <
   d6f84:	2520 2069 6f6e 7720 7461 7265 6e20 6565      %i no water nee
   d6f94:	6564 0064 7441 2520 2073 6874 2065 6f6d     ded.At %s the mo
   d6fa4:	7369 7574 6572 7220 6165 6964 676e 6920     isture reading i
   d6fb4:	2073 6925 0a20 5400 6568 7420 6d69 2065     s %i ..The time 
   d6fc4:	7369 2520 2073 000a 6425 6500 766e 762d     is %s ..%d.env-v
   d6fd4:	6c61 0073                                   als.

000d6fd8 <_ZTV10JsonBuffer>:
	...
   d6fe0:	44b9 000d 44d5 000d                         .D...D..

000d6fe8 <_ZTV10JsonWriter>:
	...
   d6ff0:	44e9 000d 44fd 000d 6c25 0075 3025 7834     .D...D..%lu.%04x
   d7000:	5c00 2575 3430 0058 7274 6575 6600 6c61     .\u%04X.true.fal
   d7010:	6573 2500 2a2e 0066 6625 2500 2a2e 666c     se.%.*f.%f.%.*lf
   d7020:	2500 666c 0000 0000                         .%lf....

000d7028 <_ZTVN5spark13EthernetClassE>:
	...
   d7030:	4c73 000d 4c69 000d 4c5f 000d 4c55 000d     sL..iL.._L..UL..
   d7040:	4c49 000d 4c3d 000d 4c31 000d 4c29 000d     IL..=L..1L..)L..
   d7050:	4c1f 000d 4c15 000d 5eed 000d               .L...L...^..

000d705c <_ZTV8SPIClass>:
	...
   d7064:	4c91 000d 4c93 000d 6162 6475 5300 7265     .L...L..baud.Ser
   d7074:	6169 006c 6553 6972 6c61 0031 7974 6570     ial.Serial1.type
   d7084:	7000 7261 6d61 6300 646d 6900 0064 6e68     .param.cmd.id.hn
   d7094:	0064 7473 6d72 6600 6c69 0074 766c 006c     d.strm.filt.lvl.
   d70a4:	6461 4864 6e61 6c64 7265 7200 6d65 766f     addHandler.remov
   d70b4:	4865 6e61 6c64 7265 6500 756e 486d 6e61     eHandler.enumHan
   d70c4:	6c64 7265 0073 534a 4e4f 7453 6572 6d61     dlers.JSONStream
   d70d4:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   d70e4:	3130 7530 0020 205d 2c00 0020 2928 203a     010u .] ., .(): 
   d70f4:	2000 005b 6f63 6564 3d20 0020 6925 6400     . [.code = .%i.d
   d7104:	7465 6961 736c 3d20 0020 0a0d 6c00 006e     etails = ....ln.
   d7114:	6e66 6300 646f 0065 6564 6174 6c69 6e00     fn.code.detail.n
   d7124:	6e6f 0065 7274 6361 0065 6e69 6f66 7700     one.trace.info.w
   d7134:	7261 006e 7265 6f72 0072 6170 696e 0063     arn.error.panic.
   d7144:	6c61 006c 2b25 3330 3a64 3025 7532 2500     all.%+03d:%02u.%
   d7154:	2d59 6d25 252d 5464 4825 253a 3a4d 5325     Y-%m-%dT%H:%M:%S
   d7164:	7a25 6100 6373 6974 656d 0000               %z.asctime..

000d7170 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d7178:	5361 000d 5367 000d 53ab 000d 5375 000d     aS..gS...S..uS..
   d7188:	5363 000d                                   cS..

000d718c <_ZTV9IPAddress>:
	...
   d7194:	58f9 000d 58e9 000d 58eb 000d               .X...X...X..

000d71a0 <_ZTV9USBSerial>:
	...
   d71a8:	59d1 000d 5a21 000d 5a2f 000d 4fb1 000d     .Y..!Z../Z...O..
   d71b8:	5a0d 000d 59d3 000d 59e9 000d 5a1b 000d     .Z...Y...Y...Z..
   d71c8:	59ff 000d 59cd 000d                         .Y...Y..

000d71d0 <_ZTV11USARTSerial>:
	...
   d71d8:	5add 000d 5b2d 000d 5b3b 000d 4fb1 000d     .Z..-[..;[...O..
   d71e8:	5af1 000d 5b13 000d 5aff 000d 5b27 000d     .Z...[...Z..'[..
   d71f8:	5adf 000d 5ae3 000d                         .Z...Z..

000d7200 <_ZTV7TwoWire>:
	...
   d7208:	5c09 000d 5c53 000d 5c2b 000d 5c0b 000d     .\..S\..+\...\..
   d7218:	5c33 000d 5c3b 000d 5c43 000d 5c4b 000d     3\..;\..C\..K\..

000d7228 <_ZTVN5spark9MeshClassE>:
	...
   d7230:	5ceb 000d 5ce1 000d 5cd7 000d 5ccd 000d     .\...\...\...\..
   d7240:	5cc1 000d 5cb5 000d 5ca9 000d 5ca1 000d     .\...\...\...\..
   d7250:	5c97 000d 5c8d 000d 5eed 000d               .\...\...^..

000d725c <_ZTVN5spark9WiFiClassE>:
	...
   d7264:	5e67 000d 5e5d 000d 5e53 000d 5e09 000d     g^..]^..S^...^..
   d7274:	5e47 000d 5e3b 000d 5e2f 000d 5e27 000d     G^..;^../^..'^..
   d7284:	5e1d 000d 5e13 000d 5eed 000d               .^...^...^..

000d7290 <_ZTVN5spark12NetworkClassE>:
	...
   d7298:	5e85 000d 5e8f 000d 5e99 000d 5ea3 000d     .^...^...^...^..
   d72a8:	5ead 000d 5eb9 000d 5ec5 000d 5ed1 000d     .^...^...^...^..
   d72b8:	5ed9 000d 5ee3 000d 5eed 000d               .^...^...^..

000d72c4 <_ZSt7nothrow>:
	...

000d72c5 <day_name.4725>:
   d72c5:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   d72d5:	6972 6153 4a74                                   riSat

000d72da <mon_name.4726>:
   d72da:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   d72ea:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   d72fa:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
   d730a:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
   d731a:	6425 000a                                   %d..

000d731e <_ctype_>:
   d731e:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   d732e:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d733e:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   d734e:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   d735e:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   d736e:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   d737e:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   d738e:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   d739e:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000d7420 <__sf_fake_stdin>:
	...

000d7440 <__sf_fake_stdout>:
	...

000d7460 <__sf_fake_stderr>:
	...
   d7480:	0043 0000                                   C...

000d7484 <__month_lengths>:
   d7484:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   d7494:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d74a4:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d74b4:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   d74c4:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d74d4:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d74e4:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
   d74f4:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
   d7504:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
   d7514:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

000d7520 <link_const_variable_data_end>:
   d7520:	000d4461 	.word	0x000d4461
   d7524:	000d4759 	.word	0x000d4759
   d7528:	000d4c7d 	.word	0x000d4c7d
   d752c:	000d4ce1 	.word	0x000d4ce1
   d7530:	000d4f89 	.word	0x000d4f89
   d7534:	000d50e5 	.word	0x000d50e5
   d7538:	000d51dd 	.word	0x000d51dd
   d753c:	000d5235 	.word	0x000d5235
   d7540:	000d5db9 	.word	0x000d5db9
   d7544:	000d5e71 	.word	0x000d5e71
   d7548:	000d5fb9 	.word	0x000d5fb9
   d754c:	000d619d 	.word	0x000d619d
   d7550:	000d6221 	.word	0x000d6221
   d7554:	000d62e5 	.word	0x000d62e5
   d7558:	000d63a9 	.word	0x000d63a9

000d755c <link_constructors_end>:
   d755c:	00000000 	.word	0x00000000
