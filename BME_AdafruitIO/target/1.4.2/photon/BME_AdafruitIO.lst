
/home/brian/Particle/BME_AdafruitIO/target/1.4.2/photon/BME_AdafruitIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002424  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a2440  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  20000000  080a2444  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000688  20000068  20000068  00030068  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a24ac  080a24ac  000224ac  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a24d4  080a24d4  000224d4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000af90b  00000000  00000000  000224d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00010342  00000000  00000000  000d1de3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002090  00000000  00000000  000e2125  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00026e81  00000000  00000000  000e41b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00024e3a  00000000  00000000  0010b036  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000a9dad  00000000  00000000  0012fe70  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00012ba7  00000000  00000000  001d9c1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00003268  00000000  00000000  001ec7c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000b874  00000000  00000000  001efa2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f001 fe8f 	bl	80a1d50 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f001 feaf 	bl	80a1d9c <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a2444 	.word	0x080a2444
 80a004c:	20000068 	.word	0x20000068
 80a0050:	20000068 	.word	0x20000068
 80a0054:	200006f0 	.word	0x200006f0
 80a0058:	200006f0 	.word	0x200006f0

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f001 f863 	bl	80a1128 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a23f8 	.word	0x080a23f8
 80a0084:	080a2434 	.word	0x080a2434

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b844 	b.w	80a0114 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f859 	bl	80a0144 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f001 b809 	b.w	80a10ac <_post_loop>

080a009a <_Znwj>:
 80a009a:	f000 bd4f 	b.w	80a0b3c <malloc>

080a009e <_ZdlPv>:
 80a009e:	f000 bd55 	b.w	80a0b4c <free>
	...

080a00a4 <__cxa_pure_virtual>:
        ;
    }
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
 80a00a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 80a00a6:	4a03      	ldr	r2, [pc, #12]	; (80a00b4 <__cxa_pure_virtual+0x10>)
 80a00a8:	2100      	movs	r1, #0
 80a00aa:	200c      	movs	r0, #12
 80a00ac:	f000 fcba 	bl	80a0a24 <panic_>
 80a00b0:	e7fe      	b.n	80a00b0 <__cxa_pure_virtual+0xc>
 80a00b2:	bf00      	nop
 80a00b4:	080a09a5 	.word	0x080a09a5

080a00b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00b8:	7800      	ldrb	r0, [r0, #0]
 80a00ba:	fab0 f080 	clz	r0, r0
 80a00be:	0940      	lsrs	r0, r0, #5
 80a00c0:	4770      	bx	lr

080a00c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00c2:	2301      	movs	r3, #1
 80a00c4:	7003      	strb	r3, [r0, #0]
 80a00c6:	4770      	bx	lr

080a00c8 <_ZN19Adafruit_MQTT_SPARKD1Ev>:


// MQTT client implementation for a generic Arduino Client interface.  Can work
// with almost all Arduino network hardware like ethernet shield, wifi shield,
// and even other platforms like ESP8266.
class Adafruit_MQTT_SPARK : public Adafruit_MQTT {
 80a00c8:	4770      	bx	lr
	...

080a00cc <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 80a00cc:	b538      	push	{r3, r4, r5, lr}
 80a00ce:	4b0b      	ldr	r3, [pc, #44]	; (80a00fc <_ZN9TCPClientD1Ev+0x30>)
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a00d0:	6984      	ldr	r4, [r0, #24]
 80a00d2:	4605      	mov	r5, r0
 80a00d4:	6003      	str	r3, [r0, #0]
 80a00d6:	b17c      	cbz	r4, 80a00f8 <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a00d8:	6863      	ldr	r3, [r4, #4]
 80a00da:	3b01      	subs	r3, #1
 80a00dc:	6063      	str	r3, [r4, #4]
 80a00de:	b95b      	cbnz	r3, 80a00f8 <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
 80a00e0:	6823      	ldr	r3, [r4, #0]
 80a00e2:	4620      	mov	r0, r4
 80a00e4:	689b      	ldr	r3, [r3, #8]
 80a00e6:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a00e8:	68a3      	ldr	r3, [r4, #8]
 80a00ea:	3b01      	subs	r3, #1
 80a00ec:	60a3      	str	r3, [r4, #8]
 80a00ee:	b91b      	cbnz	r3, 80a00f8 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
 80a00f0:	6823      	ldr	r3, [r4, #0]
 80a00f2:	4620      	mov	r0, r4
 80a00f4:	68db      	ldr	r3, [r3, #12]
 80a00f6:	4798      	blx	r3
 80a00f8:	4628      	mov	r0, r5
 80a00fa:	bd38      	pop	{r3, r4, r5, pc}
 80a00fc:	080a2334 	.word	0x080a2334

080a0100 <_ZN9TCPClientD0Ev>:
 80a0100:	b510      	push	{r4, lr}
 80a0102:	4604      	mov	r4, r0
 80a0104:	f7ff ffe2 	bl	80a00cc <_ZN9TCPClientD1Ev>
 80a0108:	4620      	mov	r0, r4
 80a010a:	211c      	movs	r1, #28
 80a010c:	f001 fcb3 	bl	80a1a76 <_ZdlPvj>
 80a0110:	4620      	mov	r0, r4
 80a0112:	bd10      	pop	{r4, pc}

080a0114 <setup>:


/*************************** Sketch Code ************************************/ 
int x = 0; 
void setup()  
{ 
 80a0114:	b508      	push	{r3, lr}
   Serial.begin(115200); 
 80a0116:	f000 fec5 	bl	80a0ea4 <_Z16_fetch_usbserialv>
 80a011a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80a011e:	f000 fea7 	bl	80a0e70 <_ZN9USBSerial5beginEl>
   delay(10); 
 80a0122:	200a      	movs	r0, #10
 80a0124:	f000 ff8d 	bl	80a1042 <delay>
   pinMode(A0,INPUT); 
 80a0128:	2100      	movs	r1, #0
 80a012a:	200a      	movs	r0, #10
 80a012c:	f001 fc76 	bl	80a1a1c <pinMode>
   Serial.println(F("Adafruit MQTT demo")); 
 80a0130:	f000 feb8 	bl	80a0ea4 <_Z16_fetch_usbserialv>
    
} 
 80a0134:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void setup()  
{ 
   Serial.begin(115200); 
   delay(10); 
   pinMode(A0,INPUT); 
   Serial.println(F("Adafruit MQTT demo")); 
 80a0138:	4901      	ldr	r1, [pc, #4]	; (80a0140 <setup+0x2c>)
 80a013a:	f001 b87c 	b.w	80a1236 <_ZN5Print7printlnEPKc>
 80a013e:	bf00      	nop
 80a0140:	080a1e58 	.word	0x080a1e58

080a0144 <loop>:
    
} 
void loop() 
{ 
 80a0144:	b510      	push	{r4, lr}
   int value=analogRead(A0); 
 80a0146:	200a      	movs	r0, #10
 80a0148:	f001 fc79 	bl	80a1a3e <analogRead>
 80a014c:	4604      	mov	r4, r0
 if( mqtt.Update() ){ 
 80a014e:	4807      	ldr	r0, [pc, #28]	; (80a016c <loop+0x28>)
 80a0150:	f000 faf2 	bl	80a0738 <_ZN19Adafruit_MQTT_SPARK6UpdateEv>
 80a0154:	b118      	cbz	r0, 80a015e <loop+0x1a>
       voltage.publish(value); 
 80a0156:	4621      	mov	r1, r4
 80a0158:	4805      	ldr	r0, [pc, #20]	; (80a0170 <loop+0x2c>)
 80a015a:	f000 fa6b 	bl	80a0634 <_ZN21Adafruit_MQTT_Publish7publishEi>
 } 
   delay(10000); 
 80a015e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{ 
   int value=analogRead(A0); 
 if( mqtt.Update() ){ 
       voltage.publish(value); 
 } 
   delay(10000); 
 80a0162:	f242 7010 	movw	r0, #10000	; 0x2710
 80a0166:	f000 bf6c 	b.w	80a1042 <delay>
 80a016a:	bf00      	nop
 80a016c:	20000094 	.word	0x20000094
 80a0170:	20000088 	.word	0x20000088

080a0174 <_ZN19Adafruit_MQTT_SPARKD0Ev>:
 80a0174:	b510      	push	{r4, lr}
 80a0176:	4604      	mov	r4, r0
 80a0178:	21d4      	movs	r1, #212	; 0xd4
 80a017a:	f001 fc7c 	bl	80a1a76 <_ZdlPvj>
 80a017e:	4620      	mov	r0, r4
 80a0180:	bd10      	pop	{r4, pc}
	...

080a0184 <_GLOBAL__sub_I_TheClient>:
 80a0184:	b573      	push	{r0, r1, r4, r5, r6, lr}
#define AIO_USERNAME  "rashap"
#define AIO_KEY       "598169fa3ba94636941a330976e42e2c"


/************ Global State (you don't need to change this!) ***   ***************/ 
TCPClient TheClient; 
 80a0186:	4d14      	ldr	r5, [pc, #80]	; (80a01d8 <_GLOBAL__sub_I_TheClient+0x54>)
 80a0188:	4e14      	ldr	r6, [pc, #80]	; (80a01dc <_GLOBAL__sub_I_TheClient+0x58>)
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a018a:	f000 fc2b 	bl	80a09e4 <HAL_Pin_Map>
 80a018e:	4628      	mov	r0, r5
 80a0190:	f001 fb24 	bl	80a17dc <_ZN9TCPClientC1Ev>
 80a0194:	4632      	mov	r2, r6
 80a0196:	4912      	ldr	r1, [pc, #72]	; (80a01e0 <_GLOBAL__sub_I_TheClient+0x5c>)
 80a0198:	4628      	mov	r0, r5
 80a019a:	f001 fc67 	bl	80a1a6c <__aeabi_atexit>
  {}

  Adafruit_MQTT_SPARK(TCPClient *client, const char *server, uint16_t port,
                       const char *user="", const char *pass=""):
    Adafruit_MQTT(server, port, user, pass),
    client(client)
 80a019e:	4c11      	ldr	r4, [pc, #68]	; (80a01e4 <_GLOBAL__sub_I_TheClient+0x60>)
 80a01a0:	4b11      	ldr	r3, [pc, #68]	; (80a01e8 <_GLOBAL__sub_I_TheClient+0x64>)
 80a01a2:	f240 725b 	movw	r2, #1883	; 0x75b
 80a01a6:	9300      	str	r3, [sp, #0]
 80a01a8:	4910      	ldr	r1, [pc, #64]	; (80a01ec <_GLOBAL__sub_I_TheClient+0x68>)
 80a01aa:	4b11      	ldr	r3, [pc, #68]	; (80a01f0 <_GLOBAL__sub_I_TheClient+0x6c>)
 80a01ac:	4620      	mov	r0, r4
 80a01ae:	f000 f83b 	bl	80a0228 <_ZN13Adafruit_MQTTC1EPKctS1_S1_>
 80a01b2:	4b10      	ldr	r3, [pc, #64]	; (80a01f4 <_GLOBAL__sub_I_TheClient+0x70>)

// Setup the MQTT client class by passing in the WiFi client and MQTT server and login details. 
Adafruit_MQTT_SPARK mqtt(&TheClient,AIO_SERVER,AIO_SERVERPORT,AIO_USERNAME,AIO_KEY); 
 80a01b4:	4632      	mov	r2, r6
 80a01b6:	4910      	ldr	r1, [pc, #64]	; (80a01f8 <_GLOBAL__sub_I_TheClient+0x74>)
 80a01b8:	4620      	mov	r0, r4
 80a01ba:	6023      	str	r3, [r4, #0]
 80a01bc:	f8c4 50d0 	str.w	r5, [r4, #208]	; 0xd0
 80a01c0:	f001 fc54 	bl	80a1a6c <__aeabi_atexit>

/****************************** Feeds ***************************************/ 
// Setup a feed called 'voltage' for publishing. 
// Notice MQTT paths for AIO follow the form: <username>/feeds/<feedname> 

Adafruit_MQTT_Publish voltage = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/TTS Analog"); 
 80a01c4:	4621      	mov	r1, r4
 80a01c6:	4a0d      	ldr	r2, [pc, #52]	; (80a01fc <_GLOBAL__sub_I_TheClient+0x78>)
 80a01c8:	480d      	ldr	r0, [pc, #52]	; (80a0200 <_GLOBAL__sub_I_TheClient+0x7c>)
 80a01ca:	2300      	movs	r3, #0
   int value=analogRead(A0); 
 if( mqtt.Update() ){ 
       voltage.publish(value); 
 } 
   delay(10000); 
 80a01cc:	b002      	add	sp, #8
 80a01ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

/****************************** Feeds ***************************************/ 
// Setup a feed called 'voltage' for publishing. 
// Notice MQTT paths for AIO follow the form: <username>/feeds/<feedname> 

Adafruit_MQTT_Publish voltage = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/TTS Analog"); 
 80a01d2:	f000 ba1b 	b.w	80a060c <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
 80a01d6:	bf00      	nop
 80a01d8:	2000006c 	.word	0x2000006c
 80a01dc:	20000068 	.word	0x20000068
 80a01e0:	080a00cd 	.word	0x080a00cd
 80a01e4:	20000094 	.word	0x20000094
 80a01e8:	080a1e82 	.word	0x080a1e82
 80a01ec:	080a1e72 	.word	0x080a1e72
 80a01f0:	080a1e6b 	.word	0x080a1e6b
 80a01f4:	080a20dc 	.word	0x080a20dc
 80a01f8:	080a00c9 	.word	0x080a00c9
 80a01fc:	080a1ea3 	.word	0x080a1ea3
 80a0200:	20000088 	.word	0x20000088

080a0204 <_ZL11stringprintPhPKct.constprop.2>:
  memmove(p, s, len);
  return p+len;
}
*/

static uint8_t *stringprint(uint8_t *p, const char *s, uint16_t maxlen=0) {
 80a0204:	b570      	push	{r4, r5, r6, lr}
 80a0206:	4604      	mov	r4, r0
  // If maxlen is specified (has a non-zero value) then use it as the maximum
  // length of the source string to write to the buffer.  Otherwise write
  // the entire source string.
  uint16_t len = strlen(s);
 80a0208:	4608      	mov	r0, r1
  memmove(p, s, len);
  return p+len;
}
*/

static uint8_t *stringprint(uint8_t *p, const char *s, uint16_t maxlen=0) {
 80a020a:	460e      	mov	r6, r1
  // If maxlen is specified (has a non-zero value) then use it as the maximum
  // length of the source string to write to the buffer.  Otherwise write
  // the entire source string.
  uint16_t len = strlen(s);
 80a020c:	f001 fdfe 	bl	80a1e0c <strlen>
  /*
  for (uint8_t i=0; i<len; i++) {
    Serial.write(pgm_read_byte(s+i));
  }
  */
  p[0] = len >> 8; p++;
 80a0210:	1203      	asrs	r3, r0, #8
 80a0212:	7023      	strb	r3, [r4, #0]
  p[0] = len & 0xFF; p++;
 80a0214:	7060      	strb	r0, [r4, #1]
 80a0216:	b285      	uxth	r5, r0
 80a0218:	3402      	adds	r4, #2
  strncpy((char *)p, s, len);
 80a021a:	462a      	mov	r2, r5
 80a021c:	4631      	mov	r1, r6
 80a021e:	4620      	mov	r0, r4
 80a0220:	f001 fdfc 	bl	80a1e1c <strncpy>
  return p+len;
}
 80a0224:	1960      	adds	r0, r4, r5
 80a0226:	bd70      	pop	{r4, r5, r6, pc}

080a0228 <_ZN13Adafruit_MQTTC1EPKctS1_S1_>:
  packet_id_counter = 0;

}


Adafruit_MQTT::Adafruit_MQTT(const char *server,
 80a0228:	b530      	push	{r4, r5, lr}
                             const char *user,
                             const char *pass) {
  servername = server;
  portnum = port;
  clientid = "";
  username = user;
 80a022a:	6103      	str	r3, [r0, #16]
  password = pass;
 80a022c:	9b03      	ldr	r3, [sp, #12]


Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
 80a022e:	4d0d      	ldr	r5, [pc, #52]	; (80a0264 <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x3c>)
  servername = server;
  portnum = port;
 80a0230:	8102      	strh	r2, [r0, #8]
  clientid = "";
 80a0232:	4a0d      	ldr	r2, [pc, #52]	; (80a0268 <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x40>)
  username = user;
  password = pass;
 80a0234:	6143      	str	r3, [r0, #20]

  // reset subscriptions
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    subscriptions[i] = 0;
 80a0236:	2300      	movs	r3, #0


Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
 80a0238:	6005      	str	r5, [r0, #0]
  servername = server;
 80a023a:	6041      	str	r1, [r0, #4]
  portnum = port;
  clientid = "";
 80a023c:	60c2      	str	r2, [r0, #12]
  username = user;
  password = pass;

  // reset subscriptions
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    subscriptions[i] = 0;
 80a023e:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
 80a0242:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
 80a0246:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
 80a024a:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
 80a024e:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
  }

  will_topic = 0;
 80a0252:	6183      	str	r3, [r0, #24]
  will_payload = 0;
 80a0254:	61c3      	str	r3, [r0, #28]
  will_qos = 0;
 80a0256:	f880 3020 	strb.w	r3, [r0, #32]
  will_retain = 0;
 80a025a:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

  packet_id_counter = 0;
 80a025e:	f8a0 30b8 	strh.w	r3, [r0, #184]	; 0xb8

}
 80a0262:	bd30      	pop	{r4, r5, pc}
 80a0264:	080a1ec4 	.word	0x080a1ec4
 80a0268:	080a1eed 	.word	0x080a1eed

080a026c <_ZN13Adafruit_MQTT14readFullPacketEPhtt>:
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
 80a026c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
 80a0270:	fa0f fa83 	sxth.w	sl, r3
 80a0274:	6803      	ldr	r3, [r0, #0]
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
 80a0276:	9201      	str	r2, [sp, #4]
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
 80a0278:	699d      	ldr	r5, [r3, #24]
 80a027a:	2201      	movs	r2, #1
 80a027c:	4653      	mov	r3, sl
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
 80a027e:	4606      	mov	r6, r0
 80a0280:	460c      	mov	r4, r1
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
 80a0282:	47a8      	blx	r5
  if (rlen != 1) return 0;
 80a0284:	b2c0      	uxtb	r0, r0
 80a0286:	2801      	cmp	r0, #1
 80a0288:	d001      	beq.n	80a028e <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x22>
 80a028a:	2000      	movs	r0, #0
 80a028c:	e034      	b.n	80a02f8 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x8c>

  DEBUG_PRINT(F("Packet Type:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);
  pbuff++;

  uint32_t value = 0;
  uint32_t multiplier = 1;
 80a028e:	4680      	mov	r8, r0
  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
  if (rlen != 1) return 0;

  DEBUG_PRINT(F("Packet Type:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);
  pbuff++;
 80a0290:	1c65      	adds	r5, r4, #1
 80a0292:	f104 0b05 	add.w	fp, r4, #5

  uint32_t value = 0;
 80a0296:	f04f 0900 	mov.w	r9, #0
  uint32_t multiplier = 1;
  uint8_t encodedByte;

  do {
    rlen = readPacket(pbuff, 1, timeout);
 80a029a:	6833      	ldr	r3, [r6, #0]
 80a029c:	2201      	movs	r2, #1
 80a029e:	699b      	ldr	r3, [r3, #24]
 80a02a0:	4629      	mov	r1, r5
 80a02a2:	461f      	mov	r7, r3
 80a02a4:	4630      	mov	r0, r6
 80a02a6:	4653      	mov	r3, sl
 80a02a8:	47b8      	blx	r7
    if (rlen != 1) return 0;
 80a02aa:	b2c0      	uxtb	r0, r0
 80a02ac:	2801      	cmp	r0, #1
 80a02ae:	d1ec      	bne.n	80a028a <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x1e>
    encodedByte = pbuff[0]; // save the last read val
 80a02b0:	f815 3b01 	ldrb.w	r3, [r5], #1
    pbuff++; // get ready for reading the next byte
    uint32_t intermediate = encodedByte & 0x7F;
 80a02b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
    intermediate *= multiplier;
    value += intermediate;
    multiplier *= 128;
    if (multiplier > (128UL*128UL*128UL)) {
 80a02b8:	455d      	cmp	r5, fp
    if (rlen != 1) return 0;
    encodedByte = pbuff[0]; // save the last read val
    pbuff++; // get ready for reading the next byte
    uint32_t intermediate = encodedByte & 0x7F;
    intermediate *= multiplier;
    value += intermediate;
 80a02ba:	fb02 9908 	mla	r9, r2, r8, r9
    multiplier *= 128;
 80a02be:	ea4f 18c8 	mov.w	r8, r8, lsl #7
    if (multiplier > (128UL*128UL*128UL)) {
 80a02c2:	d0e2      	beq.n	80a028a <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x1e>

  uint32_t value = 0;
  uint32_t multiplier = 1;
  uint8_t encodedByte;

  do {
 80a02c4:	061b      	lsls	r3, r3, #24
 80a02c6:	d4e8      	bmi.n	80a029a <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x2e>
    }
  } while (encodedByte & 0x80);

  DEBUG_PRINT(F("Packet Length:\t")); DEBUG_PRINTLN(value);
  
  if (value > (unsigned)(maxsize - (pbuff-buffer) - 1)) {
 80a02c8:	9b01      	ldr	r3, [sp, #4]
 80a02ca:	1b2c      	subs	r4, r5, r4
 80a02cc:	1b1b      	subs	r3, r3, r4
 80a02ce:	3b01      	subs	r3, #1
 80a02d0:	4599      	cmp	r9, r3
 80a02d2:	6833      	ldr	r3, [r6, #0]
 80a02d4:	d906      	bls.n	80a02e4 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x78>
      DEBUG_PRINTLN(F("Packet too big for buffer"));
      rlen = readPacket(pbuff, (maxsize - (pbuff-buffer) - 1), timeout);
 80a02d6:	9a01      	ldr	r2, [sp, #4]
 80a02d8:	699f      	ldr	r7, [r3, #24]
 80a02da:	3a01      	subs	r2, #1
 80a02dc:	1b12      	subs	r2, r2, r4
 80a02de:	4653      	mov	r3, sl
 80a02e0:	b292      	uxth	r2, r2
 80a02e2:	e003      	b.n	80a02ec <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x80>
  } else {
    rlen = readPacket(pbuff, value, timeout);
 80a02e4:	699f      	ldr	r7, [r3, #24]
 80a02e6:	4653      	mov	r3, sl
 80a02e8:	fa1f f289 	uxth.w	r2, r9
 80a02ec:	4629      	mov	r1, r5
 80a02ee:	4630      	mov	r0, r6
 80a02f0:	47b8      	blx	r7
 80a02f2:	b2c0      	uxtb	r0, r0
  }
  //DEBUG_PRINT(F("Remaining packet:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);

  return ((pbuff - buffer)+rlen);
 80a02f4:	4420      	add	r0, r4
 80a02f6:	b280      	uxth	r0, r0
}
 80a02f8:	b003      	add	sp, #12
 80a02fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080a0300 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>:
  username = user;
  password = pass;
  return connect();
}

uint16_t Adafruit_MQTT::processPacketsUntil(uint8_t *buffer, uint8_t waitforpackettype, uint16_t timeout) {
 80a0300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0302:	4605      	mov	r5, r0
 80a0304:	460c      	mov	r4, r1
 80a0306:	4616      	mov	r6, r2
 80a0308:	461f      	mov	r7, r3
  uint16_t len;
  while ( (len = readFullPacket(buffer, MAXBUFFERSIZE, timeout)) > 0) {
 80a030a:	463b      	mov	r3, r7
 80a030c:	2296      	movs	r2, #150	; 0x96
 80a030e:	4621      	mov	r1, r4
 80a0310:	4628      	mov	r0, r5
 80a0312:	f7ff ffab 	bl	80a026c <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
 80a0316:	b148      	cbz	r0, 80a032c <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x2c>

    //DEBUG_PRINT("Packet read size: "); DEBUG_PRINTLN(len);
    // TODO: add subscription reading & call back processing here

    if ((buffer[0] >> 4) == waitforpackettype) {
 80a0318:	7823      	ldrb	r3, [r4, #0]
 80a031a:	ebb6 1f13 	cmp.w	r6, r3, lsr #4
 80a031e:	d005      	beq.n	80a032c <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x2c>
      //DEBUG_PRINTLN(F("Found right packet")); 
      return len;
    } else {
      ERROR_PRINTLN(F("Dropped a packet"));
 80a0320:	f000 fdc0 	bl	80a0ea4 <_Z16_fetch_usbserialv>
 80a0324:	4902      	ldr	r1, [pc, #8]	; (80a0330 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x30>)
 80a0326:	f000 ff86 	bl	80a1236 <_ZN5Print7printlnEPKc>
  return connect();
}

uint16_t Adafruit_MQTT::processPacketsUntil(uint8_t *buffer, uint8_t waitforpackettype, uint16_t timeout) {
  uint16_t len;
  while ( (len = readFullPacket(buffer, MAXBUFFERSIZE, timeout)) > 0) {
 80a032a:	e7ee      	b.n	80a030a <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0xa>
    } else {
      ERROR_PRINTLN(F("Dropped a packet"));
    }
  }
  return 0;
}
 80a032c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a032e:	bf00      	nop
 80a0330:	080a1eee 	.word	0x080a1eee

080a0334 <_ZN13Adafruit_MQTT10disconnectEv>:
      case -2: return F("Failed to subscribe");
   }
    return F("Unknown error");
}

bool Adafruit_MQTT::disconnect() {
 80a0334:	b510      	push	{r4, lr}
 80a0336:	4604      	mov	r4, r0
  DEBUG_PRINTBUFFER(buffer, 4);
  return 4;
}

uint8_t Adafruit_MQTT::disconnectPacket(uint8_t *packet) {
  packet[0] = MQTT_CTRL_DISCONNECT << 4;
 80a0338:	23e0      	movs	r3, #224	; 0xe0
 80a033a:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
  packet[1] = 0;
 80a033e:	2300      	movs	r3, #0
 80a0340:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23

bool Adafruit_MQTT::disconnect() {

  // Construct and send disconnect packet.
  uint8_t len = disconnectPacket(buffer);
  if (! sendPacket(buffer, len))
 80a0344:	6803      	ldr	r3, [r0, #0]
 80a0346:	2202      	movs	r2, #2
 80a0348:	695b      	ldr	r3, [r3, #20]
 80a034a:	f100 0122 	add.w	r1, r0, #34	; 0x22
 80a034e:	4798      	blx	r3
    DEBUG_PRINTLN(F("Unable to send disconnect packet"));

  return disconnectServer();
 80a0350:	6823      	ldr	r3, [r4, #0]
 80a0352:	4620      	mov	r0, r4

}
 80a0354:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  // Construct and send disconnect packet.
  uint8_t len = disconnectPacket(buffer);
  if (! sendPacket(buffer, len))
    DEBUG_PRINTLN(F("Unable to send disconnect packet"));

  return disconnectServer();
 80a0358:	691b      	ldr	r3, [r3, #16]
 80a035a:	4718      	bx	r3

080a035c <_ZN13Adafruit_MQTT13connectPacketEPh>:
// The current MQTT spec is 3.1.1 and available here:
//   http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718028
// However this connect packet and code follows the MQTT 3.1 spec here (some
// small differences in the protocol):
//   http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html#connect
uint8_t Adafruit_MQTT::connectPacket(uint8_t *packet) {
 80a035c:	b538      	push	{r3, r4, r5, lr}
 80a035e:	4604      	mov	r4, r0
  uint8_t *p = packet;
  uint16_t len;

  // fixed header, connection messsage no flags
  p[0] = (MQTT_CTRL_CONNECT << 4) | 0x0;
 80a0360:	4608      	mov	r0, r1
 80a0362:	2310      	movs	r3, #16
 80a0364:	f800 3b02 	strb.w	r3, [r0], #2
// The current MQTT spec is 3.1.1 and available here:
//   http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718028
// However this connect packet and code follows the MQTT 3.1 spec here (some
// small differences in the protocol):
//   http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html#connect
uint8_t Adafruit_MQTT::connectPacket(uint8_t *packet) {
 80a0368:	460d      	mov	r5, r1
  // fill in packet[1] last

#if MQTT_PROTOCOL_LEVEL == 3
    p = stringprint(p, "MQIsdp");
#elif MQTT_PROTOCOL_LEVEL == 4
    p = stringprint(p, "MQTT");
 80a036a:	4929      	ldr	r1, [pc, #164]	; (80a0410 <_ZN13Adafruit_MQTT13connectPacketEPh+0xb4>)
 80a036c:	f7ff ff4a 	bl	80a0204 <_ZL11stringprintPhPKct.constprop.2>
#else
    #error "MQTT level not supported"
#endif

  p[0] = MQTT_PROTOCOL_LEVEL;
 80a0370:	2304      	movs	r3, #4
 80a0372:	7003      	strb	r3, [r0, #0]
  p++;

  // always clean the session
  p[0] = MQTT_CONN_CLEANSESSION;
 80a0374:	2302      	movs	r3, #2
 80a0376:	7043      	strb	r3, [r0, #1]

  // set the will flags if needed
  if (will_topic && pgm_read_byte(will_topic) != 0) {
 80a0378:	69a3      	ldr	r3, [r4, #24]
 80a037a:	b1ab      	cbz	r3, 80a03a8 <_ZN13Adafruit_MQTT13connectPacketEPh+0x4c>
 80a037c:	781b      	ldrb	r3, [r3, #0]
 80a037e:	b19b      	cbz	r3, 80a03a8 <_ZN13Adafruit_MQTT13connectPacketEPh+0x4c>

    p[0] |= MQTT_CONN_WILLFLAG;
 80a0380:	2306      	movs	r3, #6
 80a0382:	7043      	strb	r3, [r0, #1]

    if(will_qos == 1)
 80a0384:	f894 3020 	ldrb.w	r3, [r4, #32]
 80a0388:	2b01      	cmp	r3, #1
 80a038a:	d101      	bne.n	80a0390 <_ZN13Adafruit_MQTT13connectPacketEPh+0x34>
      p[0] |= MQTT_CONN_WILLQOS_1;
 80a038c:	230e      	movs	r3, #14
 80a038e:	e002      	b.n	80a0396 <_ZN13Adafruit_MQTT13connectPacketEPh+0x3a>
    else if(will_qos == 2)
 80a0390:	2b02      	cmp	r3, #2
 80a0392:	d101      	bne.n	80a0398 <_ZN13Adafruit_MQTT13connectPacketEPh+0x3c>
      p[0] |= MQTT_CONN_WILLQOS_2;
 80a0394:	231e      	movs	r3, #30
 80a0396:	7043      	strb	r3, [r0, #1]

    if(will_retain == 1)
 80a0398:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 80a039c:	2b01      	cmp	r3, #1
      p[0] |= MQTT_CONN_WILLRETAIN;
 80a039e:	bf02      	ittt	eq
 80a03a0:	7843      	ldrbeq	r3, [r0, #1]
 80a03a2:	f043 0320 	orreq.w	r3, r3, #32
 80a03a6:	7043      	strbeq	r3, [r0, #1]

  }

  if (pgm_read_byte(username) != 0)
 80a03a8:	6923      	ldr	r3, [r4, #16]
 80a03aa:	781b      	ldrb	r3, [r3, #0]
 80a03ac:	b11b      	cbz	r3, 80a03b6 <_ZN13Adafruit_MQTT13connectPacketEPh+0x5a>
    p[0] |= MQTT_CONN_USERNAMEFLAG;
 80a03ae:	7843      	ldrb	r3, [r0, #1]
 80a03b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80a03b4:	7043      	strb	r3, [r0, #1]
  if (pgm_read_byte(password) != 0)
 80a03b6:	6963      	ldr	r3, [r4, #20]
 80a03b8:	781b      	ldrb	r3, [r3, #0]
 80a03ba:	b11b      	cbz	r3, 80a03c4 <_ZN13Adafruit_MQTT13connectPacketEPh+0x68>
    p[0] |= MQTT_CONN_PASSWORDFLAG;
 80a03bc:	7843      	ldrb	r3, [r0, #1]
 80a03be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80a03c2:	7043      	strb	r3, [r0, #1]
  p++;

  p[0] = MQTT_CONN_KEEPALIVE >> 8;
 80a03c4:	2301      	movs	r3, #1
 80a03c6:	7083      	strb	r3, [r0, #2]
  p++;
  p[0] = MQTT_CONN_KEEPALIVE & 0xFF;
 80a03c8:	232c      	movs	r3, #44	; 0x2c
 80a03ca:	70c3      	strb	r3, [r0, #3]
  p++;

  if(MQTT_PROTOCOL_LEVEL == 3) {
    p = stringprint(p, clientid, 23);  // Limit client ID to first 23 characters.
  } else {
    if (pgm_read_byte(clientid) != 0) {
 80a03cc:	68e1      	ldr	r1, [r4, #12]
 80a03ce:	780b      	ldrb	r3, [r1, #0]
 80a03d0:	b11b      	cbz	r3, 80a03da <_ZN13Adafruit_MQTT13connectPacketEPh+0x7e>
      p = stringprint(p, clientid);
 80a03d2:	3004      	adds	r0, #4
 80a03d4:	f7ff ff16 	bl	80a0204 <_ZL11stringprintPhPKct.constprop.2>
 80a03d8:	e002      	b.n	80a03e0 <_ZN13Adafruit_MQTT13connectPacketEPh+0x84>
    } else {
      p[0] = 0x0;
 80a03da:	7103      	strb	r3, [r0, #4]
      p++;
      p[0] = 0x0;
 80a03dc:	7143      	strb	r3, [r0, #5]
      p++;
 80a03de:	3006      	adds	r0, #6
      DEBUG_PRINTLN(F("SERVER GENERATING CLIENT ID"));
    }
  }

  if (will_topic && pgm_read_byte(will_topic) != 0) {
 80a03e0:	69a1      	ldr	r1, [r4, #24]
 80a03e2:	b131      	cbz	r1, 80a03f2 <_ZN13Adafruit_MQTT13connectPacketEPh+0x96>
 80a03e4:	780b      	ldrb	r3, [r1, #0]
 80a03e6:	b123      	cbz	r3, 80a03f2 <_ZN13Adafruit_MQTT13connectPacketEPh+0x96>
    p = stringprint(p, will_topic);
 80a03e8:	f7ff ff0c 	bl	80a0204 <_ZL11stringprintPhPKct.constprop.2>
    p = stringprint(p, will_payload);
 80a03ec:	69e1      	ldr	r1, [r4, #28]
 80a03ee:	f7ff ff09 	bl	80a0204 <_ZL11stringprintPhPKct.constprop.2>
  }

  if (pgm_read_byte(username) != 0) {
 80a03f2:	6921      	ldr	r1, [r4, #16]
 80a03f4:	780b      	ldrb	r3, [r1, #0]
 80a03f6:	b10b      	cbz	r3, 80a03fc <_ZN13Adafruit_MQTT13connectPacketEPh+0xa0>
    p = stringprint(p, username);
 80a03f8:	f7ff ff04 	bl	80a0204 <_ZL11stringprintPhPKct.constprop.2>
  }
  if (pgm_read_byte(password) != 0) {
 80a03fc:	6961      	ldr	r1, [r4, #20]
 80a03fe:	780b      	ldrb	r3, [r1, #0]
 80a0400:	b10b      	cbz	r3, 80a0406 <_ZN13Adafruit_MQTT13connectPacketEPh+0xaa>
    p = stringprint(p, password);
 80a0402:	f7ff feff 	bl	80a0204 <_ZL11stringprintPhPKct.constprop.2>
  }

  len = p - packet;

  packet[1] = len-2;  // don't include the 2 bytes of fixed header data
 80a0406:	1b40      	subs	r0, r0, r5
 80a0408:	b2c0      	uxtb	r0, r0
 80a040a:	1e83      	subs	r3, r0, #2
 80a040c:	706b      	strb	r3, [r5, #1]
  DEBUG_PRINTLN(F("MQTT connect packet:"));
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}
 80a040e:	bd38      	pop	{r3, r4, r5, pc}
 80a0410:	080a1f0d 	.word	0x080a1f0d

080a0414 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th>:


// as per http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718040
uint16_t Adafruit_MQTT::publishPacket(uint8_t *packet, const char *topic,
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
 80a0414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a0418:	4605      	mov	r5, r0
  uint8_t *p = packet;
  uint16_t len=0;

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
 80a041a:	4610      	mov	r0, r2
}


// as per http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718040
uint16_t Adafruit_MQTT::publishPacket(uint8_t *packet, const char *topic,
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
 80a041c:	460e      	mov	r6, r1
 80a041e:	4691      	mov	r9, r2
 80a0420:	461f      	mov	r7, r3
  uint8_t *p = packet;
  uint16_t len=0;

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
 80a0422:	f001 fcf3 	bl	80a1e0c <strlen>
}


// as per http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718040
uint16_t Adafruit_MQTT::publishPacket(uint8_t *packet, const char *topic,
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
 80a0426:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
 80a042a:	f8bd 4020 	ldrh.w	r4, [sp, #32]
  uint8_t *p = packet;
  uint16_t len=0;

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
 80a042e:	b280      	uxth	r0, r0
  if(qos > 0) { 
 80a0430:	f1b8 0f00 	cmp.w	r8, #0
 80a0434:	d101      	bne.n	80a043a <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x26>
  uint8_t *p = packet;
  uint16_t len=0;

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
 80a0436:	1c83      	adds	r3, r0, #2
 80a0438:	e000      	b.n	80a043c <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x28>
  if(qos > 0) { 
    len += 2; // qos packet id
 80a043a:	1d03      	adds	r3, r0, #4
  }
  len += bLen; // payload length

  // Now you can start generating the packet!
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
 80a043c:	4630      	mov	r0, r6

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
  if(qos > 0) { 
    len += 2; // qos packet id
 80a043e:	b29b      	uxth	r3, r3
  }
  len += bLen; // payload length

  // Now you can start generating the packet!
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
 80a0440:	ea4f 0248 	mov.w	r2, r8, lsl #1
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
  if(qos > 0) { 
    len += 2; // qos packet id
  }
  len += bLen; // payload length
 80a0444:	4423      	add	r3, r4

  // Now you can start generating the packet!
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
 80a0446:	f042 0230 	orr.w	r2, r2, #48	; 0x30
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
  if(qos > 0) { 
    len += 2; // qos packet id
  }
  len += bLen; // payload length
 80a044a:	b29b      	uxth	r3, r3

  // Now you can start generating the packet!
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
 80a044c:	f800 2b01 	strb.w	r2, [r0], #1
  p++;

  // fill in packet[1] last
  do {
    uint8_t encodedByte = len % 128;
 80a0450:	f003 027f 	and.w	r2, r3, #127	; 0x7f
    len /= 128;
    // if there are more data to encode, set the top bit of this byte
    if ( len > 0 ) {
 80a0454:	09db      	lsrs	r3, r3, #7
      encodedByte |= 0x80;
 80a0456:	bf18      	it	ne
 80a0458:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
    }
    p[0] = encodedByte;
 80a045c:	f800 2b01 	strb.w	r2, [r0], #1
    p++;
  } while ( len > 0 );
 80a0460:	2b00      	cmp	r3, #0
 80a0462:	d1f5      	bne.n	80a0450 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x3c>

  // topic comes before packet identifier
  p = stringprint(p, topic);
 80a0464:	4649      	mov	r1, r9
 80a0466:	f7ff fecd 	bl	80a0204 <_ZL11stringprintPhPKct.constprop.2>
 80a046a:	4603      	mov	r3, r0

  // add packet identifier. used for checking PUBACK in QOS > 0
  if(qos > 0) {
 80a046c:	f1b8 0f00 	cmp.w	r8, #0
 80a0470:	d00c      	beq.n	80a048c <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x78>
    p[0] = (packet_id_counter >> 8) & 0xFF;
 80a0472:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
    p[1] = packet_id_counter & 0xFF;
    p+=2;
 80a0476:	3302      	adds	r3, #2
  // topic comes before packet identifier
  p = stringprint(p, topic);

  // add packet identifier. used for checking PUBACK in QOS > 0
  if(qos > 0) {
    p[0] = (packet_id_counter >> 8) & 0xFF;
 80a0478:	0a12      	lsrs	r2, r2, #8
 80a047a:	7002      	strb	r2, [r0, #0]
    p[1] = packet_id_counter & 0xFF;
 80a047c:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
 80a0480:	7042      	strb	r2, [r0, #1]
    p+=2;

    // increment the packet id
    packet_id_counter++;
 80a0482:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
 80a0486:	3201      	adds	r2, #1
 80a0488:	f8a5 20b8 	strh.w	r2, [r5, #184]	; 0xb8
  }

  memmove(p, data, bLen);
 80a048c:	4622      	mov	r2, r4
 80a048e:	4639      	mov	r1, r7
 80a0490:	4618      	mov	r0, r3
 80a0492:	f001 fc68 	bl	80a1d66 <memmove>
  p+= bLen;
  len = p - packet;
  DEBUG_PRINTLN(F("MQTT publish packet:"));
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
 80a0496:	4420      	add	r0, r4
 80a0498:	1b80      	subs	r0, r0, r6
}
 80a049a:	b280      	uxth	r0, r0
 80a049c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080a04a0 <_ZN13Adafruit_MQTT7publishEPKcPhth>:

bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
}

bool Adafruit_MQTT::publish(const char *topic, uint8_t *data, uint16_t bLen, uint8_t qos) {
 80a04a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a04a2:	f89d 6018 	ldrb.w	r6, [sp, #24]
 80a04a6:	4604      	mov	r4, r0
  // Construct and send publish packet.
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
 80a04a8:	f100 0522 	add.w	r5, r0, #34	; 0x22
 80a04ac:	e88d 0048 	stmia.w	sp, {r3, r6}
 80a04b0:	4613      	mov	r3, r2
 80a04b2:	460a      	mov	r2, r1
 80a04b4:	4629      	mov	r1, r5
 80a04b6:	f7ff ffad 	bl	80a0414 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th>
  if (!sendPacket(buffer, len))
 80a04ba:	6823      	ldr	r3, [r4, #0]
 80a04bc:	4602      	mov	r2, r0
 80a04be:	695b      	ldr	r3, [r3, #20]
 80a04c0:	4629      	mov	r1, r5
 80a04c2:	4620      	mov	r0, r4
 80a04c4:	4798      	blx	r3
 80a04c6:	b908      	cbnz	r0, 80a04cc <_ZN13Adafruit_MQTT7publishEPKcPhth+0x2c>
    return false;
 80a04c8:	2000      	movs	r0, #0
 80a04ca:	e017      	b.n	80a04fc <_ZN13Adafruit_MQTT7publishEPKcPhth+0x5c>

  // If QOS level is high enough verify the response packet.
  if (qos > 0) {
 80a04cc:	b1b6      	cbz	r6, 80a04fc <_ZN13Adafruit_MQTT7publishEPKcPhth+0x5c>
    len = readFullPacket(buffer, MAXBUFFERSIZE, PUBLISH_TIMEOUT_MS);
 80a04ce:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80a04d2:	2296      	movs	r2, #150	; 0x96
 80a04d4:	4629      	mov	r1, r5
 80a04d6:	4620      	mov	r0, r4
 80a04d8:	f7ff fec8 	bl	80a026c <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
    DEBUG_PRINT(F("Publish QOS1+ reply:\t"));
    DEBUG_PRINTBUFFER(buffer, len);
    if (len != 4)
 80a04dc:	2804      	cmp	r0, #4
 80a04de:	d1f3      	bne.n	80a04c8 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x28>
      return false;
    if ((buffer[0] >> 4) != MQTT_CTRL_PUBACK)
 80a04e0:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80a04e4:	111b      	asrs	r3, r3, #4
 80a04e6:	2b04      	cmp	r3, #4
 80a04e8:	d1ee      	bne.n	80a04c8 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x28>
 80a04ea:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    packnum <<= 8;
    packnum |= buffer[3];

    // we increment the packet_id_counter right after publishing so inc here too to match
    packnum++;
    if (packnum != packet_id_counter)
 80a04ec:	f8b4 00b8 	ldrh.w	r0, [r4, #184]	; 0xb8
 80a04f0:	ba5b      	rev16	r3, r3
 80a04f2:	3301      	adds	r3, #1
 80a04f4:	b29b      	uxth	r3, r3
 80a04f6:	1ac3      	subs	r3, r0, r3
 80a04f8:	4258      	negs	r0, r3
 80a04fa:	4158      	adcs	r0, r3
      return false;
  }

  return true;
}
 80a04fc:	b002      	add	sp, #8
 80a04fe:	bd70      	pop	{r4, r5, r6, pc}

080a0500 <_ZN13Adafruit_MQTT7publishEPKcS1_h>:
  return disconnectServer();

}


bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
 80a0500:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a0502:	4605      	mov	r5, r0
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
 80a0504:	4610      	mov	r0, r2
  return disconnectServer();

}


bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
 80a0506:	461f      	mov	r7, r3
 80a0508:	460e      	mov	r6, r1
 80a050a:	4614      	mov	r4, r2
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
 80a050c:	f001 fc7e 	bl	80a1e0c <strlen>
 80a0510:	9700      	str	r7, [sp, #0]
 80a0512:	b283      	uxth	r3, r0
 80a0514:	4622      	mov	r2, r4
 80a0516:	4631      	mov	r1, r6
 80a0518:	4628      	mov	r0, r5
 80a051a:	f7ff ffc1 	bl	80a04a0 <_ZN13Adafruit_MQTT7publishEPKcPhth>
}
 80a051e:	b003      	add	sp, #12
 80a0520:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0522 <_ZN13Adafruit_MQTT15subscribePacketEPhPKch>:
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}

uint8_t Adafruit_MQTT::subscribePacket(uint8_t *packet, const char *topic,
                                       uint8_t qos) {
 80a0522:	b538      	push	{r3, r4, r5, lr}
 80a0524:	460c      	mov	r4, r1
 80a0526:	461d      	mov	r5, r3
  uint8_t *p = packet;
  uint16_t len;

  p[0] = MQTT_CTRL_SUBSCRIBE << 4 | MQTT_QOS_1 << 1;
 80a0528:	2382      	movs	r3, #130	; 0x82
 80a052a:	700b      	strb	r3, [r1, #0]
  // fill in packet[1] last
  p+=2;

  // packet identifier. used for checking SUBACK
  p[0] = (packet_id_counter >> 8) & 0xFF;
 80a052c:	f8b0 10b8 	ldrh.w	r1, [r0, #184]	; 0xb8
 80a0530:	0a09      	lsrs	r1, r1, #8
 80a0532:	70a1      	strb	r1, [r4, #2]
  p[1] = packet_id_counter & 0xFF;
 80a0534:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
 80a0538:	70e3      	strb	r3, [r4, #3]
  p+=2;

  // increment the packet id
  packet_id_counter++;
 80a053a:	f8b0 10b8 	ldrh.w	r1, [r0, #184]	; 0xb8
 80a053e:	3101      	adds	r1, #1
 80a0540:	f8a0 10b8 	strh.w	r1, [r0, #184]	; 0xb8

  p = stringprint(p, topic);
 80a0544:	4611      	mov	r1, r2
 80a0546:	1d20      	adds	r0, r4, #4
 80a0548:	f7ff fe5c 	bl	80a0204 <_ZL11stringprintPhPKct.constprop.2>

  p[0] = qos;
 80a054c:	f800 5b01 	strb.w	r5, [r0], #1
  p++;

  len = p - packet;
  packet[1] = len-2; // don't include the 2 bytes of fixed header data
 80a0550:	1b00      	subs	r0, r0, r4
 80a0552:	b2c0      	uxtb	r0, r0
 80a0554:	1e83      	subs	r3, r0, #2
 80a0556:	7063      	strb	r3, [r4, #1]
  DEBUG_PRINTLN(F("MQTT subscription packet:"));
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}
 80a0558:	bd38      	pop	{r3, r4, r5, pc}

080a055a <_ZN13Adafruit_MQTT7connectEv>:

  packet_id_counter = 0;

}

int8_t Adafruit_MQTT::connect() {
 80a055a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // Connect to the server.
  if (!connectServer())
 80a055e:	6803      	ldr	r3, [r0, #0]

  packet_id_counter = 0;

}

int8_t Adafruit_MQTT::connect() {
 80a0560:	4604      	mov	r4, r0
  // Connect to the server.
  if (!connectServer())
 80a0562:	68db      	ldr	r3, [r3, #12]
 80a0564:	4798      	blx	r3
 80a0566:	b918      	cbnz	r0, 80a0570 <_ZN13Adafruit_MQTT7connectEv+0x16>
    return -1;
 80a0568:	f04f 30ff 	mov.w	r0, #4294967295
 80a056c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  // Construct and send connect packet.
  uint8_t len = connectPacket(buffer);
 80a0570:	f104 0522 	add.w	r5, r4, #34	; 0x22
 80a0574:	4629      	mov	r1, r5
 80a0576:	4620      	mov	r0, r4
 80a0578:	f7ff fef0 	bl	80a035c <_ZN13Adafruit_MQTT13connectPacketEPh>
  if (!sendPacket(buffer, len))
 80a057c:	6823      	ldr	r3, [r4, #0]
 80a057e:	b282      	uxth	r2, r0
 80a0580:	695b      	ldr	r3, [r3, #20]
 80a0582:	4629      	mov	r1, r5
 80a0584:	4620      	mov	r0, r4
 80a0586:	4798      	blx	r3
 80a0588:	2800      	cmp	r0, #0
 80a058a:	d0ed      	beq.n	80a0568 <_ZN13Adafruit_MQTT7connectEv+0xe>
    return -1;

  // Read connect response packet and verify it
  len = readFullPacket(buffer, MAXBUFFERSIZE, CONNECT_TIMEOUT_MS);
 80a058c:	f241 7370 	movw	r3, #6000	; 0x1770
 80a0590:	2296      	movs	r2, #150	; 0x96
 80a0592:	4629      	mov	r1, r5
 80a0594:	4620      	mov	r0, r4
 80a0596:	f7ff fe69 	bl	80a026c <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
  if (len != 4)
 80a059a:	b2c0      	uxtb	r0, r0
 80a059c:	2804      	cmp	r0, #4
 80a059e:	d1e3      	bne.n	80a0568 <_ZN13Adafruit_MQTT7connectEv+0xe>
    return -1;
  if ((buffer[0] != (MQTT_CTRL_CONNECTACK << 4)) || (buffer[1] != 2))
 80a05a0:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 80a05a2:	f5b3 7f08 	cmp.w	r3, #544	; 0x220
 80a05a6:	d1df      	bne.n	80a0568 <_ZN13Adafruit_MQTT7connectEv+0xe>
    return -1;
  if (buffer[3] != 0)
 80a05a8:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 80a05ac:	b110      	cbz	r0, 80a05b4 <_ZN13Adafruit_MQTT7connectEv+0x5a>
    return buffer[3];
 80a05ae:	b240      	sxtb	r0, r0
 80a05b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a05b4:	f104 07b8 	add.w	r7, r4, #184	; 0xb8
 80a05b8:	f104 08cc 	add.w	r8, r4, #204	; 0xcc

  // Setup subscriptions once connected.
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    // Ignore subscriptions that aren't defined.
    if (subscriptions[i] == 0) continue;
 80a05bc:	f857 3f04 	ldr.w	r3, [r7, #4]!
 80a05c0:	b1fb      	cbz	r3, 80a0602 <_ZN13Adafruit_MQTT7connectEv+0xa8>
 80a05c2:	2603      	movs	r6, #3

    boolean success = false;
    for (uint8_t retry=0; (retry<3) && !success; retry++) { // retry until we get a suback    
      // Construct and send subscription packet.
      uint8_t len = subscribePacket(buffer, subscriptions[i]->topic, subscriptions[i]->qos);
 80a05c4:	683a      	ldr	r2, [r7, #0]
 80a05c6:	4629      	mov	r1, r5
 80a05c8:	7913      	ldrb	r3, [r2, #4]
 80a05ca:	4620      	mov	r0, r4
 80a05cc:	6812      	ldr	r2, [r2, #0]
 80a05ce:	f7ff ffa8 	bl	80a0522 <_ZN13Adafruit_MQTT15subscribePacketEPhPKch>
      if (!sendPacket(buffer, len))
 80a05d2:	6823      	ldr	r3, [r4, #0]
 80a05d4:	b282      	uxth	r2, r0
 80a05d6:	695b      	ldr	r3, [r3, #20]
 80a05d8:	4629      	mov	r1, r5
 80a05da:	4620      	mov	r0, r4
 80a05dc:	4798      	blx	r3
 80a05de:	2800      	cmp	r0, #0
 80a05e0:	d0c2      	beq.n	80a0568 <_ZN13Adafruit_MQTT7connectEv+0xe>
      // Check for SUBACK if using MQTT 3.1.1 or higher
      // TODO: The Server is permitted to start sending PUBLISH packets matching the
      // Subscription before the Server sends the SUBACK Packet. (will really need to use callbacks - ada)

      //Serial.println("\t**looking for suback");
      if (processPacketsUntil(buffer, MQTT_CTRL_SUBACK, SUBACK_TIMEOUT_MS)) {
 80a05e2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80a05e6:	2209      	movs	r2, #9
 80a05e8:	4629      	mov	r1, r5
 80a05ea:	4620      	mov	r0, r4
 80a05ec:	f7ff fe88 	bl	80a0300 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>
 80a05f0:	b938      	cbnz	r0, 80a0602 <_ZN13Adafruit_MQTT7connectEv+0xa8>
 80a05f2:	3e01      	subs	r6, #1
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    // Ignore subscriptions that aren't defined.
    if (subscriptions[i] == 0) continue;

    boolean success = false;
    for (uint8_t retry=0; (retry<3) && !success; retry++) { // retry until we get a suback    
 80a05f4:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 80a05f8:	d1e4      	bne.n	80a05c4 <_ZN13Adafruit_MQTT7connectEv+0x6a>
	success = true;
	break;
      }
      //Serial.println("\t**failed, retrying!");
    }
    if (! success) return -2; // failed to sub for some reason
 80a05fa:	f06f 0001 	mvn.w	r0, #1
  }

  return 0;
}
 80a05fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return -1;
  if (buffer[3] != 0)
    return buffer[3];

  // Setup subscriptions once connected.
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
 80a0602:	4547      	cmp	r7, r8
 80a0604:	d1da      	bne.n	80a05bc <_ZN13Adafruit_MQTT7connectEv+0x62>
      //Serial.println("\t**failed, retrying!");
    }
    if (! success) return -2; // failed to sub for some reason
  }

  return 0;
 80a0606:	2000      	movs	r0, #0
 80a0608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a060c <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>:
  return 2;
}

// Adafruit_MQTT_Publish Definition ////////////////////////////////////////////

Adafruit_MQTT_Publish::Adafruit_MQTT_Publish(Adafruit_MQTT *mqttserver,
 80a060c:	b510      	push	{r4, lr}
                                             const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
 80a060e:	e880 0006 	stmia.w	r0, {r1, r2}
  qos = q;
 80a0612:	7203      	strb	r3, [r0, #8]
}
 80a0614:	bd10      	pop	{r4, pc}

080a0616 <_ZN21Adafruit_MQTT_Publish7publishEl>:
  char payload[12];
  ltoa(i, payload, 10);
  return mqtt->publish(topic, payload, qos);
}

bool Adafruit_MQTT_Publish::publish(int32_t i) {
 80a0616:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a0618:	4604      	mov	r4, r0
  char payload[12];
  ltoa(i, payload, 10);
 80a061a:	220a      	movs	r2, #10
  char payload[12];
  ltoa(i, payload, 10);
  return mqtt->publish(topic, payload, qos);
}

bool Adafruit_MQTT_Publish::publish(int32_t i) {
 80a061c:	4608      	mov	r0, r1
  char payload[12];
  ltoa(i, payload, 10);
 80a061e:	a901      	add	r1, sp, #4
 80a0620:	f001 f934 	bl	80a188c <ltoa>
  return mqtt->publish(topic, payload, qos);
 80a0624:	e894 0003 	ldmia.w	r4, {r0, r1}
 80a0628:	7a23      	ldrb	r3, [r4, #8]
 80a062a:	aa01      	add	r2, sp, #4
 80a062c:	f7ff ff68 	bl	80a0500 <_ZN13Adafruit_MQTT7publishEPKcS1_h>
}
 80a0630:	b004      	add	sp, #16
 80a0632:	bd10      	pop	{r4, pc}

080a0634 <_ZN21Adafruit_MQTT_Publish7publishEi>:
 80a0634:	f7ff bfef 	b.w	80a0616 <_ZN21Adafruit_MQTT_Publish7publishEl>

080a0638 <_GLOBAL__sub_I__Z11printBufferPht>:
 80a0638:	f000 b9d4 	b.w	80a09e4 <HAL_Pin_Map>

080a063c <_ZN19Adafruit_MQTT_SPARK9connectedEv>:
    client->stop();
  }
  return true;
}

bool Adafruit_MQTT_SPARK::connected() {
 80a063c:	b508      	push	{r3, lr}
  // Return true if connected, false if not connected.
  return client->connected();
 80a063e:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
 80a0642:	6803      	ldr	r3, [r0, #0]
 80a0644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0646:	4798      	blx	r3
}
 80a0648:	3000      	adds	r0, #0
 80a064a:	bf18      	it	ne
 80a064c:	2001      	movne	r0, #1
 80a064e:	bd08      	pop	{r3, pc}

080a0650 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht>:
    delay(MQTT_CLIENT_READINTERVAL_MS);
  }
  return len;
}

bool Adafruit_MQTT_SPARK::sendPacket(uint8_t *buffer, uint16_t len) {
 80a0650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0652:	4606      	mov	r6, r0
 80a0654:	460f      	mov	r7, r1
 80a0656:	4614      	mov	r4, r2
  uint16_t ret = 0;

  while (len > 0) {
 80a0658:	b1c4      	cbz	r4, 80a068c <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x3c>
    if (client->connected()) {
 80a065a:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
 80a065e:	6803      	ldr	r3, [r0, #0]
 80a0660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0662:	4798      	blx	r3
 80a0664:	b908      	cbnz	r0, 80a066a <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x1a>
	DEBUG_PRINTLN("Failed to send packet.");
	return false;
      }
    } else {
      DEBUG_PRINTLN(F("Connection failed!"));
      return false;
 80a0666:	2000      	movs	r0, #0
 80a0668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
max (T a, U b) { return ((a)>(b)?(a):(b)); }

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
 80a066a:	4625      	mov	r5, r4
    if (client->connected()) {
      // send 250 bytes at most at a time, can adjust this later based on Client

      uint16_t sendlen = min(len, 250);
      //Serial.print("Sending: "); Serial.println(sendlen);
      ret = client->write(buffer, sendlen);
 80a066c:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
 80a0670:	2cfa      	cmp	r4, #250	; 0xfa
 80a0672:	6803      	ldr	r3, [r0, #0]
 80a0674:	bfa8      	it	ge
 80a0676:	25fa      	movge	r5, #250	; 0xfa
 80a0678:	68db      	ldr	r3, [r3, #12]
 80a067a:	462a      	mov	r2, r5
 80a067c:	4639      	mov	r1, r7
 80a067e:	4798      	blx	r3
 80a0680:	b280      	uxth	r0, r0
      DEBUG_PRINT(F("Client sendPacket returned: ")); DEBUG_PRINTLN(ret);
      len -= ret;
 80a0682:	1a24      	subs	r4, r4, r0

      if (ret != sendlen) {
 80a0684:	4285      	cmp	r5, r0

      uint16_t sendlen = min(len, 250);
      //Serial.print("Sending: "); Serial.println(sendlen);
      ret = client->write(buffer, sendlen);
      DEBUG_PRINT(F("Client sendPacket returned: ")); DEBUG_PRINTLN(ret);
      len -= ret;
 80a0686:	b2a4      	uxth	r4, r4

      if (ret != sendlen) {
 80a0688:	d0e6      	beq.n	80a0658 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x8>
 80a068a:	e7ec      	b.n	80a0666 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x16>
    } else {
      DEBUG_PRINTLN(F("Connection failed!"));
      return false;
    }
  }
  return true;
 80a068c:	2001      	movs	r0, #1
}
 80a068e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0690 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts>:
  // Return true if connected, false if not connected.
  return client->connected();
}

uint16_t Adafruit_MQTT_SPARK::readPacket(uint8_t *buffer, uint16_t maxlen,
                                          int16_t timeout) {
 80a0690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a0694:	4606      	mov	r6, r0
 80a0696:	4688      	mov	r8, r1
 80a0698:	4691      	mov	r9, r2
 80a069a:	461f      	mov	r7, r3
 80a069c:	461d      	mov	r5, r3
  /* Read data until either the connection is closed, or the idle timeout is reached. */
  uint16_t len = 0;
 80a069e:	2400      	movs	r4, #0
  int16_t t = timeout;

  while (client->connected() && (timeout >= 0)) {
 80a06a0:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
 80a06a4:	6803      	ldr	r3, [r0, #0]
 80a06a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a06a8:	4798      	blx	r3
 80a06aa:	b1d0      	cbz	r0, 80a06e2 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
 80a06ac:	2d00      	cmp	r5, #0
 80a06ae:	db18      	blt.n	80a06e2 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
    //DEBUG_PRINT('.');
    while (client->available()) {
 80a06b0:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
 80a06b4:	6803      	ldr	r3, [r0, #0]
 80a06b6:	691b      	ldr	r3, [r3, #16]
 80a06b8:	4798      	blx	r3
 80a06ba:	b160      	cbz	r0, 80a06d6 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x46>
      //DEBUG_PRINT('!');
      char c = client->read();
 80a06bc:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
 80a06c0:	6803      	ldr	r3, [r0, #0]
 80a06c2:	695b      	ldr	r3, [r3, #20]
 80a06c4:	4798      	blx	r3
      timeout = t;  // reset the timeout
      buffer[len] = c;
 80a06c6:	f808 0004 	strb.w	r0, [r8, r4]
      //DEBUG_PRINTLN((uint8_t)c, HEX);
      len++;
 80a06ca:	3401      	adds	r4, #1
 80a06cc:	b2a4      	uxth	r4, r4
      if (len == maxlen) {  // we read all we want, bail
 80a06ce:	454c      	cmp	r4, r9
 80a06d0:	d007      	beq.n	80a06e2 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
  while (client->connected() && (timeout >= 0)) {
    //DEBUG_PRINT('.');
    while (client->available()) {
      //DEBUG_PRINT('!');
      char c = client->read();
      timeout = t;  // reset the timeout
 80a06d2:	463d      	mov	r5, r7
 80a06d4:	e7ec      	b.n	80a06b0 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x20>
        DEBUG_PRINT(F("Read data:\t"));
        DEBUG_PRINTBUFFER(buffer, len);
        return len;
      }
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
 80a06d6:	3d0a      	subs	r5, #10
    delay(MQTT_CLIENT_READINTERVAL_MS);
 80a06d8:	200a      	movs	r0, #10
        DEBUG_PRINT(F("Read data:\t"));
        DEBUG_PRINTBUFFER(buffer, len);
        return len;
      }
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
 80a06da:	b22d      	sxth	r5, r5
    delay(MQTT_CLIENT_READINTERVAL_MS);
 80a06dc:	f000 fcb1 	bl	80a1042 <delay>
                                          int16_t timeout) {
  /* Read data until either the connection is closed, or the idle timeout is reached. */
  uint16_t len = 0;
  int16_t t = timeout;

  while (client->connected() && (timeout >= 0)) {
 80a06e0:	e7de      	b.n	80a06a0 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x10>
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
    delay(MQTT_CLIENT_READINTERVAL_MS);
  }
  return len;
}
 80a06e2:	4620      	mov	r0, r4
 80a06e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080a06e8 <_ZN19Adafruit_MQTT_SPARK13connectServerEv>:
        }
    }
    return true;
}

bool Adafruit_MQTT_SPARK::connectServer(){
 80a06e8:	b570      	push	{r4, r5, r6, lr}
 80a06ea:	4604      	mov	r4, r0
  // Grab server name from flash and copy to buffer for name resolution.
  memset(buffer, 0, sizeof(buffer));
 80a06ec:	f100 0522 	add.w	r5, r0, #34	; 0x22
 80a06f0:	2296      	movs	r2, #150	; 0x96
 80a06f2:	2100      	movs	r1, #0
 80a06f4:	4628      	mov	r0, r5
 80a06f6:	f001 fb51 	bl	80a1d9c <memset>
  strcpy((char *)buffer, servername);
 80a06fa:	6861      	ldr	r1, [r4, #4]
 80a06fc:	4628      	mov	r0, r5
 80a06fe:	f001 fb7d 	bl	80a1dfc <strcpy>
  DEBUG_PRINT(F("Connecting to: ")); DEBUG_PRINTLN((char *)buffer);
  // Connect and check for success (0 result).
  int r = client->connect((char *)buffer, portnum);
 80a0702:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
 80a0706:	8922      	ldrh	r2, [r4, #8]
 80a0708:	6803      	ldr	r3, [r0, #0]
 80a070a:	4629      	mov	r1, r5
 80a070c:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 80a070e:	2300      	movs	r3, #0
 80a0710:	47b0      	blx	r6
  DEBUG_PRINT(F("Connect result: ")); DEBUG_PRINTLN(r);
  return r != 0;
}
 80a0712:	3000      	adds	r0, #0
 80a0714:	bf18      	it	ne
 80a0716:	2001      	movne	r0, #1
 80a0718:	bd70      	pop	{r4, r5, r6, pc}

080a071a <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv>:

bool Adafruit_MQTT_SPARK::disconnectServer() {
 80a071a:	b510      	push	{r4, lr}
 80a071c:	4604      	mov	r4, r0
  // Stop connection if connected and return success (stop has no indication of
  // failure).
  if (client->connected()) {
 80a071e:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
 80a0722:	6803      	ldr	r3, [r0, #0]
 80a0724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0726:	4798      	blx	r3
 80a0728:	b120      	cbz	r0, 80a0734 <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv+0x1a>
    client->stop();
 80a072a:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
 80a072e:	6803      	ldr	r3, [r0, #0]
 80a0730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0732:	4798      	blx	r3
  }
  return true;
}
 80a0734:	2001      	movs	r0, #1
 80a0736:	bd10      	pop	{r4, pc}

080a0738 <_ZN19Adafruit_MQTT_SPARK6UpdateEv>:
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#include "Adafruit_MQTT_SPARK.h"

bool Adafruit_MQTT_SPARK::Update()
{
 80a0738:	b570      	push	{r4, r5, r6, lr}
    // Stop if already connected.
    if (!connected())
 80a073a:	6803      	ldr	r3, [r0, #0]
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#include "Adafruit_MQTT_SPARK.h"

bool Adafruit_MQTT_SPARK::Update()
{
 80a073c:	4604      	mov	r4, r0
    // Stop if already connected.
    if (!connected())
 80a073e:	689b      	ldr	r3, [r3, #8]
 80a0740:	4798      	blx	r3
 80a0742:	b9c8      	cbnz	r0, 80a0778 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x40>
    {
        DEBUG_PRINT(F("Connecting to MQTT... "));
        
        uint8_t retries = 0;
        for(int8_t ret = connect() ; ret != 0 && retries < 3 ; ret = connect() , retries++)
 80a0744:	4620      	mov	r0, r4
 80a0746:	f7ff ff08 	bl	80a055a <_ZN13Adafruit_MQTT7connectEv>
 80a074a:	2504      	movs	r5, #4
 80a074c:	b170      	cbz	r0, 80a076c <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x34>
 80a074e:	3d01      	subs	r5, #1
 80a0750:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 80a0754:	d00a      	beq.n	80a076c <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x34>
        { // connect will return 0 for connected
            DEBUG_PRINT(connectErrorString(ret));
            DEBUG_PRINT(F("Retrying MQTT connection in 5 seconds..."));
            disconnect();
 80a0756:	4620      	mov	r0, r4
 80a0758:	f7ff fdec 	bl	80a0334 <_ZN13Adafruit_MQTT10disconnectEv>
            delay(5000);  // wait 5 seconds
 80a075c:	f241 3088 	movw	r0, #5000	; 0x1388
 80a0760:	f000 fc6f 	bl	80a1042 <delay>
    if (!connected())
    {
        DEBUG_PRINT(F("Connecting to MQTT... "));
        
        uint8_t retries = 0;
        for(int8_t ret = connect() ; ret != 0 && retries < 3 ; ret = connect() , retries++)
 80a0764:	4620      	mov	r0, r4
 80a0766:	f7ff fef8 	bl	80a055a <_ZN13Adafruit_MQTT7connectEv>
 80a076a:	e7ef      	b.n	80a074c <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x14>
            DEBUG_PRINT(F("Retrying MQTT connection in 5 seconds..."));
            disconnect();
            delay(5000);  // wait 5 seconds
        }
      
        if( connected() )
 80a076c:	6823      	ldr	r3, [r4, #0]
 80a076e:	4620      	mov	r0, r4
            DEBUG_PRINT(F("Failed to connect"));
            return false;
        }
    }
    return true;
}
 80a0770:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            DEBUG_PRINT(F("Retrying MQTT connection in 5 seconds..."));
            disconnect();
            delay(5000);  // wait 5 seconds
        }
      
        if( connected() )
 80a0774:	689b      	ldr	r3, [r3, #8]
 80a0776:	4718      	bx	r3
            DEBUG_PRINT(F("Failed to connect"));
            return false;
        }
    }
    return true;
}
 80a0778:	bd70      	pop	{r4, r5, r6, pc}

080a077a <_GLOBAL__sub_I__ZN19Adafruit_MQTT_SPARK6UpdateEv>:
 80a077a:	f000 b933 	b.w	80a09e4 <HAL_Pin_Map>
	...

080a0780 <HAL_NET_SetNetWatchDog>:

DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
 80a0780:	b508      	push	{r3, lr}
 80a0782:	4b02      	ldr	r3, [pc, #8]	; (80a078c <HAL_NET_SetNetWatchDog+0xc>)
 80a0784:	681b      	ldr	r3, [r3, #0]
 80a0786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0788:	9301      	str	r3, [sp, #4]
 80a078a:	bd08      	pop	{r3, pc}
 80a078c:	080601c0 	.word	0x080601c0

080a0790 <inet_gethostbyname>:
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0790:	b508      	push	{r3, lr}
 80a0792:	4b02      	ldr	r3, [pc, #8]	; (80a079c <inet_gethostbyname+0xc>)
 80a0794:	681b      	ldr	r3, [r3, #0]
 80a0796:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0798:	9301      	str	r3, [sp, #4]
 80a079a:	bd08      	pop	{r3, pc}
 80a079c:	080601c0 	.word	0x080601c0

080a07a0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a07a0:	b508      	push	{r3, lr}
 80a07a2:	4b02      	ldr	r3, [pc, #8]	; (80a07ac <HAL_USB_USART_Init+0xc>)
 80a07a4:	681b      	ldr	r3, [r3, #0]
 80a07a6:	681b      	ldr	r3, [r3, #0]
 80a07a8:	9301      	str	r3, [sp, #4]
 80a07aa:	bd08      	pop	{r3, pc}
 80a07ac:	080601d8 	.word	0x080601d8

080a07b0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a07b0:	b508      	push	{r3, lr}
 80a07b2:	4b02      	ldr	r3, [pc, #8]	; (80a07bc <HAL_USB_USART_Begin+0xc>)
 80a07b4:	681b      	ldr	r3, [r3, #0]
 80a07b6:	685b      	ldr	r3, [r3, #4]
 80a07b8:	9301      	str	r3, [sp, #4]
 80a07ba:	bd08      	pop	{r3, pc}
 80a07bc:	080601d8 	.word	0x080601d8

080a07c0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a07c0:	b508      	push	{r3, lr}
 80a07c2:	4b02      	ldr	r3, [pc, #8]	; (80a07cc <HAL_USB_USART_Available_Data+0xc>)
 80a07c4:	681b      	ldr	r3, [r3, #0]
 80a07c6:	691b      	ldr	r3, [r3, #16]
 80a07c8:	9301      	str	r3, [sp, #4]
 80a07ca:	bd08      	pop	{r3, pc}
 80a07cc:	080601d8 	.word	0x080601d8

080a07d0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a07d0:	b508      	push	{r3, lr}
 80a07d2:	4b02      	ldr	r3, [pc, #8]	; (80a07dc <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a07d4:	681b      	ldr	r3, [r3, #0]
 80a07d6:	695b      	ldr	r3, [r3, #20]
 80a07d8:	9301      	str	r3, [sp, #4]
 80a07da:	bd08      	pop	{r3, pc}
 80a07dc:	080601d8 	.word	0x080601d8

080a07e0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a07e0:	b508      	push	{r3, lr}
 80a07e2:	4b02      	ldr	r3, [pc, #8]	; (80a07ec <HAL_USB_USART_Receive_Data+0xc>)
 80a07e4:	681b      	ldr	r3, [r3, #0]
 80a07e6:	699b      	ldr	r3, [r3, #24]
 80a07e8:	9301      	str	r3, [sp, #4]
 80a07ea:	bd08      	pop	{r3, pc}
 80a07ec:	080601d8 	.word	0x080601d8

080a07f0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a07f0:	b508      	push	{r3, lr}
 80a07f2:	4b02      	ldr	r3, [pc, #8]	; (80a07fc <HAL_USB_USART_Send_Data+0xc>)
 80a07f4:	681b      	ldr	r3, [r3, #0]
 80a07f6:	69db      	ldr	r3, [r3, #28]
 80a07f8:	9301      	str	r3, [sp, #4]
 80a07fa:	bd08      	pop	{r3, pc}
 80a07fc:	080601d8 	.word	0x080601d8

080a0800 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0800:	b508      	push	{r3, lr}
 80a0802:	4b02      	ldr	r3, [pc, #8]	; (80a080c <HAL_USB_USART_Flush_Data+0xc>)
 80a0804:	681b      	ldr	r3, [r3, #0]
 80a0806:	6a1b      	ldr	r3, [r3, #32]
 80a0808:	9301      	str	r3, [sp, #4]
 80a080a:	bd08      	pop	{r3, pc}
 80a080c:	080601d8 	.word	0x080601d8

080a0810 <socket_active_status>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
 80a0810:	b508      	push	{r3, lr}
 80a0812:	4b02      	ldr	r3, [pc, #8]	; (80a081c <socket_active_status+0xc>)
 80a0814:	681b      	ldr	r3, [r3, #0]
 80a0816:	681b      	ldr	r3, [r3, #0]
 80a0818:	9301      	str	r3, [sp, #4]
 80a081a:	bd08      	pop	{r3, pc}
 80a081c:	080601bc 	.word	0x080601bc

080a0820 <socket_handle_valid>:
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a0820:	b508      	push	{r3, lr}
 80a0822:	4b02      	ldr	r3, [pc, #8]	; (80a082c <socket_handle_valid+0xc>)
 80a0824:	681b      	ldr	r3, [r3, #0]
 80a0826:	685b      	ldr	r3, [r3, #4]
 80a0828:	9301      	str	r3, [sp, #4]
 80a082a:	bd08      	pop	{r3, pc}
 80a082c:	080601bc 	.word	0x080601bc

080a0830 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a0830:	b508      	push	{r3, lr}
 80a0832:	4b02      	ldr	r3, [pc, #8]	; (80a083c <socket_create+0xc>)
 80a0834:	681b      	ldr	r3, [r3, #0]
 80a0836:	689b      	ldr	r3, [r3, #8]
 80a0838:	9301      	str	r3, [sp, #4]
 80a083a:	bd08      	pop	{r3, pc}
 80a083c:	080601bc 	.word	0x080601bc

080a0840 <socket_connect>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
 80a0840:	b508      	push	{r3, lr}
 80a0842:	4b02      	ldr	r3, [pc, #8]	; (80a084c <socket_connect+0xc>)
 80a0844:	681b      	ldr	r3, [r3, #0]
 80a0846:	68db      	ldr	r3, [r3, #12]
 80a0848:	9301      	str	r3, [sp, #4]
 80a084a:	bd08      	pop	{r3, pc}
 80a084c:	080601bc 	.word	0x080601bc

080a0850 <socket_receive>:
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
 80a0850:	b508      	push	{r3, lr}
 80a0852:	4b02      	ldr	r3, [pc, #8]	; (80a085c <socket_receive+0xc>)
 80a0854:	681b      	ldr	r3, [r3, #0]
 80a0856:	691b      	ldr	r3, [r3, #16]
 80a0858:	9301      	str	r3, [sp, #4]
 80a085a:	bd08      	pop	{r3, pc}
 80a085c:	080601bc 	.word	0x080601bc

080a0860 <socket_close>:
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a0860:	b508      	push	{r3, lr}
 80a0862:	4b02      	ldr	r3, [pc, #8]	; (80a086c <socket_close+0xc>)
 80a0864:	681b      	ldr	r3, [r3, #0]
 80a0866:	6a1b      	ldr	r3, [r3, #32]
 80a0868:	9301      	str	r3, [sp, #4]
 80a086a:	bd08      	pop	{r3, pc}
 80a086c:	080601bc 	.word	0x080601bc

080a0870 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a0870:	b508      	push	{r3, lr}
 80a0872:	4b02      	ldr	r3, [pc, #8]	; (80a087c <socket_handle_invalid+0xc>)
 80a0874:	681b      	ldr	r3, [r3, #0]
 80a0876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0878:	9301      	str	r3, [sp, #4]
 80a087a:	bd08      	pop	{r3, pc}
 80a087c:	080601bc 	.word	0x080601bc

080a0880 <socket_send_ex>:
DYNALIB_FN(13, hal_socket, socket_join_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(14, hal_socket, socket_leave_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(15, hal_socket, socket_peer, sock_result_t(sock_handle_t, sock_peer_t*, void*))
DYNALIB_FN(16, hal_socket, socket_shutdown, sock_result_t(sock_handle_t, int))
DYNALIB_FN(17, hal_socket, socket_send_ex, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, system_tick_t, void*))
 80a0880:	b508      	push	{r3, lr}
 80a0882:	4b02      	ldr	r3, [pc, #8]	; (80a088c <socket_send_ex+0xc>)
 80a0884:	681b      	ldr	r3, [r3, #0]
 80a0886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0888:	9301      	str	r3, [sp, #4]
 80a088a:	bd08      	pop	{r3, pc}
 80a088c:	080601bc 	.word	0x080601bc

080a0890 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a0890:	b508      	push	{r3, lr}
 80a0892:	4b02      	ldr	r3, [pc, #8]	; (80a089c <HAL_I2C_Write_Data+0xc>)
 80a0894:	681b      	ldr	r3, [r3, #0]
 80a0896:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0898:	9301      	str	r3, [sp, #4]
 80a089a:	bd08      	pop	{r3, pc}
 80a089c:	080601ac 	.word	0x080601ac

080a08a0 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a08a0:	b508      	push	{r3, lr}
 80a08a2:	4b02      	ldr	r3, [pc, #8]	; (80a08ac <HAL_I2C_Available_Data+0xc>)
 80a08a4:	681b      	ldr	r3, [r3, #0]
 80a08a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a08a8:	9301      	str	r3, [sp, #4]
 80a08aa:	bd08      	pop	{r3, pc}
 80a08ac:	080601ac 	.word	0x080601ac

080a08b0 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a08b0:	b508      	push	{r3, lr}
 80a08b2:	4b02      	ldr	r3, [pc, #8]	; (80a08bc <HAL_I2C_Read_Data+0xc>)
 80a08b4:	681b      	ldr	r3, [r3, #0]
 80a08b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a08b8:	9301      	str	r3, [sp, #4]
 80a08ba:	bd08      	pop	{r3, pc}
 80a08bc:	080601ac 	.word	0x080601ac

080a08c0 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a08c0:	b508      	push	{r3, lr}
 80a08c2:	4b02      	ldr	r3, [pc, #8]	; (80a08cc <HAL_I2C_Peek_Data+0xc>)
 80a08c4:	681b      	ldr	r3, [r3, #0]
 80a08c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a08c8:	9301      	str	r3, [sp, #4]
 80a08ca:	bd08      	pop	{r3, pc}
 80a08cc:	080601ac 	.word	0x080601ac

080a08d0 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a08d0:	b508      	push	{r3, lr}
 80a08d2:	4b02      	ldr	r3, [pc, #8]	; (80a08dc <HAL_I2C_Flush_Data+0xc>)
 80a08d4:	681b      	ldr	r3, [r3, #0]
 80a08d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a08d8:	9301      	str	r3, [sp, #4]
 80a08da:	bd08      	pop	{r3, pc}
 80a08dc:	080601ac 	.word	0x080601ac

080a08e0 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a08e0:	b508      	push	{r3, lr}
 80a08e2:	4b02      	ldr	r3, [pc, #8]	; (80a08ec <HAL_I2C_Is_Enabled+0xc>)
 80a08e4:	681b      	ldr	r3, [r3, #0]
 80a08e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a08e8:	9301      	str	r3, [sp, #4]
 80a08ea:	bd08      	pop	{r3, pc}
 80a08ec:	080601ac 	.word	0x080601ac

080a08f0 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a08f0:	b508      	push	{r3, lr}
 80a08f2:	4b03      	ldr	r3, [pc, #12]	; (80a0900 <HAL_I2C_Init+0x10>)
 80a08f4:	681b      	ldr	r3, [r3, #0]
 80a08f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a08fa:	9301      	str	r3, [sp, #4]
 80a08fc:	bd08      	pop	{r3, pc}
 80a08fe:	0000      	.short	0x0000
 80a0900:	080601ac 	.word	0x080601ac

080a0904 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a0904:	b508      	push	{r3, lr}
 80a0906:	4b02      	ldr	r3, [pc, #8]	; (80a0910 <HAL_USART_Init+0xc>)
 80a0908:	681b      	ldr	r3, [r3, #0]
 80a090a:	699b      	ldr	r3, [r3, #24]
 80a090c:	9301      	str	r3, [sp, #4]
 80a090e:	bd08      	pop	{r3, pc}
 80a0910:	080601c4 	.word	0x080601c4

080a0914 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a0914:	b508      	push	{r3, lr}
 80a0916:	4b02      	ldr	r3, [pc, #8]	; (80a0920 <HAL_USART_Write_Data+0xc>)
 80a0918:	681b      	ldr	r3, [r3, #0]
 80a091a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a091c:	9301      	str	r3, [sp, #4]
 80a091e:	bd08      	pop	{r3, pc}
 80a0920:	080601c4 	.word	0x080601c4

080a0924 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a0924:	b508      	push	{r3, lr}
 80a0926:	4b02      	ldr	r3, [pc, #8]	; (80a0930 <HAL_USART_Available_Data+0xc>)
 80a0928:	681b      	ldr	r3, [r3, #0]
 80a092a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a092c:	9301      	str	r3, [sp, #4]
 80a092e:	bd08      	pop	{r3, pc}
 80a0930:	080601c4 	.word	0x080601c4

080a0934 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a0934:	b508      	push	{r3, lr}
 80a0936:	4b02      	ldr	r3, [pc, #8]	; (80a0940 <HAL_USART_Read_Data+0xc>)
 80a0938:	681b      	ldr	r3, [r3, #0]
 80a093a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a093c:	9301      	str	r3, [sp, #4]
 80a093e:	bd08      	pop	{r3, pc}
 80a0940:	080601c4 	.word	0x080601c4

080a0944 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a0944:	b508      	push	{r3, lr}
 80a0946:	4b02      	ldr	r3, [pc, #8]	; (80a0950 <HAL_USART_Peek_Data+0xc>)
 80a0948:	681b      	ldr	r3, [r3, #0]
 80a094a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a094c:	9301      	str	r3, [sp, #4]
 80a094e:	bd08      	pop	{r3, pc}
 80a0950:	080601c4 	.word	0x080601c4

080a0954 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a0954:	b508      	push	{r3, lr}
 80a0956:	4b02      	ldr	r3, [pc, #8]	; (80a0960 <HAL_USART_Flush_Data+0xc>)
 80a0958:	681b      	ldr	r3, [r3, #0]
 80a095a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a095c:	9301      	str	r3, [sp, #4]
 80a095e:	bd08      	pop	{r3, pc}
 80a0960:	080601c4 	.word	0x080601c4

080a0964 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a0964:	b508      	push	{r3, lr}
 80a0966:	4b02      	ldr	r3, [pc, #8]	; (80a0970 <HAL_USART_Is_Enabled+0xc>)
 80a0968:	681b      	ldr	r3, [r3, #0]
 80a096a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a096c:	9301      	str	r3, [sp, #4]
 80a096e:	bd08      	pop	{r3, pc}
 80a0970:	080601c4 	.word	0x080601c4

080a0974 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a0974:	b508      	push	{r3, lr}
 80a0976:	4b02      	ldr	r3, [pc, #8]	; (80a0980 <HAL_USART_Available_Data_For_Write+0xc>)
 80a0978:	681b      	ldr	r3, [r3, #0]
 80a097a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a097c:	9301      	str	r3, [sp, #4]
 80a097e:	bd08      	pop	{r3, pc}
 80a0980:	080601c4 	.word	0x080601c4

080a0984 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a0984:	b508      	push	{r3, lr}
 80a0986:	4b02      	ldr	r3, [pc, #8]	; (80a0990 <os_mutex_create+0xc>)
 80a0988:	681b      	ldr	r3, [r3, #0]
 80a098a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a098c:	9301      	str	r3, [sp, #4]
 80a098e:	bd08      	pop	{r3, pc}
 80a0990:	080601d0 	.word	0x080601d0

080a0994 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0994:	b508      	push	{r3, lr}
 80a0996:	4b02      	ldr	r3, [pc, #8]	; (80a09a0 <HAL_RNG_GetRandomNumber+0xc>)
 80a0998:	681b      	ldr	r3, [r3, #0]
 80a099a:	685b      	ldr	r3, [r3, #4]
 80a099c:	9301      	str	r3, [sp, #4]
 80a099e:	bd08      	pop	{r3, pc}
 80a09a0:	0806019c 	.word	0x0806019c

080a09a4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a09a4:	b508      	push	{r3, lr}
 80a09a6:	4b02      	ldr	r3, [pc, #8]	; (80a09b0 <HAL_Delay_Microseconds+0xc>)
 80a09a8:	681b      	ldr	r3, [r3, #0]
 80a09aa:	68db      	ldr	r3, [r3, #12]
 80a09ac:	9301      	str	r3, [sp, #4]
 80a09ae:	bd08      	pop	{r3, pc}
 80a09b0:	0806019c 	.word	0x0806019c

080a09b4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a09b4:	b508      	push	{r3, lr}
 80a09b6:	4b02      	ldr	r3, [pc, #8]	; (80a09c0 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a09b8:	681b      	ldr	r3, [r3, #0]
 80a09ba:	695b      	ldr	r3, [r3, #20]
 80a09bc:	9301      	str	r3, [sp, #4]
 80a09be:	bd08      	pop	{r3, pc}
 80a09c0:	0806019c 	.word	0x0806019c

080a09c4 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a09c4:	b508      	push	{r3, lr}
 80a09c6:	4b02      	ldr	r3, [pc, #8]	; (80a09d0 <HAL_SPI_Init+0xc>)
 80a09c8:	681b      	ldr	r3, [r3, #0]
 80a09ca:	69db      	ldr	r3, [r3, #28]
 80a09cc:	9301      	str	r3, [sp, #4]
 80a09ce:	bd08      	pop	{r3, pc}
 80a09d0:	080601b4 	.word	0x080601b4

080a09d4 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a09d4:	b508      	push	{r3, lr}
 80a09d6:	4b02      	ldr	r3, [pc, #8]	; (80a09e0 <HAL_SPI_Is_Enabled+0xc>)
 80a09d8:	681b      	ldr	r3, [r3, #0]
 80a09da:	6a1b      	ldr	r3, [r3, #32]
 80a09dc:	9301      	str	r3, [sp, #4]
 80a09de:	bd08      	pop	{r3, pc}
 80a09e0:	080601b4 	.word	0x080601b4

080a09e4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a09e4:	b508      	push	{r3, lr}
 80a09e6:	4b02      	ldr	r3, [pc, #8]	; (80a09f0 <HAL_Pin_Map+0xc>)
 80a09e8:	681b      	ldr	r3, [r3, #0]
 80a09ea:	681b      	ldr	r3, [r3, #0]
 80a09ec:	9301      	str	r3, [sp, #4]
 80a09ee:	bd08      	pop	{r3, pc}
 80a09f0:	080601b0 	.word	0x080601b0

080a09f4 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a09f4:	b508      	push	{r3, lr}
 80a09f6:	4b02      	ldr	r3, [pc, #8]	; (80a0a00 <HAL_Validate_Pin_Function+0xc>)
 80a09f8:	681b      	ldr	r3, [r3, #0]
 80a09fa:	685b      	ldr	r3, [r3, #4]
 80a09fc:	9301      	str	r3, [sp, #4]
 80a09fe:	bd08      	pop	{r3, pc}
 80a0a00:	080601b0 	.word	0x080601b0

080a0a04 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a0a04:	b508      	push	{r3, lr}
 80a0a06:	4b02      	ldr	r3, [pc, #8]	; (80a0a10 <HAL_Pin_Mode+0xc>)
 80a0a08:	681b      	ldr	r3, [r3, #0]
 80a0a0a:	689b      	ldr	r3, [r3, #8]
 80a0a0c:	9301      	str	r3, [sp, #4]
 80a0a0e:	bd08      	pop	{r3, pc}
 80a0a10:	080601b0 	.word	0x080601b0

080a0a14 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
 80a0a14:	b508      	push	{r3, lr}
 80a0a16:	4b02      	ldr	r3, [pc, #8]	; (80a0a20 <HAL_ADC_Read+0xc>)
 80a0a18:	681b      	ldr	r3, [r3, #0]
 80a0a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0a1c:	9301      	str	r3, [sp, #4]
 80a0a1e:	bd08      	pop	{r3, pc}
 80a0a20:	080601b0 	.word	0x080601b0

080a0a24 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 80a0a24:	b508      	push	{r3, lr}
 80a0a26:	4b02      	ldr	r3, [pc, #8]	; (80a0a30 <panic_+0xc>)
 80a0a28:	681b      	ldr	r3, [r3, #0]
 80a0a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0a2c:	9301      	str	r3, [sp, #4]
 80a0a2e:	bd08      	pop	{r3, pc}
 80a0a30:	080201a8 	.word	0x080201a8

080a0a34 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 80a0a34:	b508      	push	{r3, lr}
 80a0a36:	4b02      	ldr	r3, [pc, #8]	; (80a0a40 <log_message+0xc>)
 80a0a38:	681b      	ldr	r3, [r3, #0]
 80a0a3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a0a3c:	9301      	str	r3, [sp, #4]
 80a0a3e:	bd08      	pop	{r3, pc}
 80a0a40:	080201a8 	.word	0x080201a8

080a0a44 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0a44:	b508      	push	{r3, lr}
 80a0a46:	4b02      	ldr	r3, [pc, #8]	; (80a0a50 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0a48:	681b      	ldr	r3, [r3, #0]
 80a0a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0a4c:	9301      	str	r3, [sp, #4]
 80a0a4e:	bd08      	pop	{r3, pc}
 80a0a50:	080601cc 	.word	0x080601cc

080a0a54 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0a54:	b508      	push	{r3, lr}
 80a0a56:	4b02      	ldr	r3, [pc, #8]	; (80a0a60 <network_connect+0xc>)
 80a0a58:	681b      	ldr	r3, [r3, #0]
 80a0a5a:	685b      	ldr	r3, [r3, #4]
 80a0a5c:	9301      	str	r3, [sp, #4]
 80a0a5e:	bd08      	pop	{r3, pc}
 80a0a60:	080601c8 	.word	0x080601c8

080a0a64 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0a64:	b508      	push	{r3, lr}
 80a0a66:	4b02      	ldr	r3, [pc, #8]	; (80a0a70 <network_connecting+0xc>)
 80a0a68:	681b      	ldr	r3, [r3, #0]
 80a0a6a:	689b      	ldr	r3, [r3, #8]
 80a0a6c:	9301      	str	r3, [sp, #4]
 80a0a6e:	bd08      	pop	{r3, pc}
 80a0a70:	080601c8 	.word	0x080601c8

080a0a74 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0a74:	b508      	push	{r3, lr}
 80a0a76:	4b02      	ldr	r3, [pc, #8]	; (80a0a80 <network_disconnect+0xc>)
 80a0a78:	681b      	ldr	r3, [r3, #0]
 80a0a7a:	68db      	ldr	r3, [r3, #12]
 80a0a7c:	9301      	str	r3, [sp, #4]
 80a0a7e:	bd08      	pop	{r3, pc}
 80a0a80:	080601c8 	.word	0x080601c8

080a0a84 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0a84:	b508      	push	{r3, lr}
 80a0a86:	4b02      	ldr	r3, [pc, #8]	; (80a0a90 <network_ready+0xc>)
 80a0a88:	681b      	ldr	r3, [r3, #0]
 80a0a8a:	691b      	ldr	r3, [r3, #16]
 80a0a8c:	9301      	str	r3, [sp, #4]
 80a0a8e:	bd08      	pop	{r3, pc}
 80a0a90:	080601c8 	.word	0x080601c8

080a0a94 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0a94:	b508      	push	{r3, lr}
 80a0a96:	4b02      	ldr	r3, [pc, #8]	; (80a0aa0 <network_on+0xc>)
 80a0a98:	681b      	ldr	r3, [r3, #0]
 80a0a9a:	695b      	ldr	r3, [r3, #20]
 80a0a9c:	9301      	str	r3, [sp, #4]
 80a0a9e:	bd08      	pop	{r3, pc}
 80a0aa0:	080601c8 	.word	0x080601c8

080a0aa4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0aa4:	b508      	push	{r3, lr}
 80a0aa6:	4b02      	ldr	r3, [pc, #8]	; (80a0ab0 <network_off+0xc>)
 80a0aa8:	681b      	ldr	r3, [r3, #0]
 80a0aaa:	699b      	ldr	r3, [r3, #24]
 80a0aac:	9301      	str	r3, [sp, #4]
 80a0aae:	bd08      	pop	{r3, pc}
 80a0ab0:	080601c8 	.word	0x080601c8

080a0ab4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0ab4:	b508      	push	{r3, lr}
 80a0ab6:	4b02      	ldr	r3, [pc, #8]	; (80a0ac0 <network_listen+0xc>)
 80a0ab8:	681b      	ldr	r3, [r3, #0]
 80a0aba:	69db      	ldr	r3, [r3, #28]
 80a0abc:	9301      	str	r3, [sp, #4]
 80a0abe:	bd08      	pop	{r3, pc}
 80a0ac0:	080601c8 	.word	0x080601c8

080a0ac4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0ac4:	b508      	push	{r3, lr}
 80a0ac6:	4b02      	ldr	r3, [pc, #8]	; (80a0ad0 <network_listening+0xc>)
 80a0ac8:	681b      	ldr	r3, [r3, #0]
 80a0aca:	6a1b      	ldr	r3, [r3, #32]
 80a0acc:	9301      	str	r3, [sp, #4]
 80a0ace:	bd08      	pop	{r3, pc}
 80a0ad0:	080601c8 	.word	0x080601c8

080a0ad4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0ad4:	b508      	push	{r3, lr}
 80a0ad6:	4b02      	ldr	r3, [pc, #8]	; (80a0ae0 <network_set_listen_timeout+0xc>)
 80a0ad8:	681b      	ldr	r3, [r3, #0]
 80a0ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0adc:	9301      	str	r3, [sp, #4]
 80a0ade:	bd08      	pop	{r3, pc}
 80a0ae0:	080601c8 	.word	0x080601c8

080a0ae4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0ae4:	b508      	push	{r3, lr}
 80a0ae6:	4b02      	ldr	r3, [pc, #8]	; (80a0af0 <network_get_listen_timeout+0xc>)
 80a0ae8:	681b      	ldr	r3, [r3, #0]
 80a0aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0aec:	9301      	str	r3, [sp, #4]
 80a0aee:	bd08      	pop	{r3, pc}
 80a0af0:	080601c8 	.word	0x080601c8

080a0af4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0af4:	b508      	push	{r3, lr}
 80a0af6:	4b02      	ldr	r3, [pc, #8]	; (80a0b00 <set_system_mode+0xc>)
 80a0af8:	681b      	ldr	r3, [r3, #0]
 80a0afa:	685b      	ldr	r3, [r3, #4]
 80a0afc:	9301      	str	r3, [sp, #4]
 80a0afe:	bd08      	pop	{r3, pc}
 80a0b00:	080601a4 	.word	0x080601a4

080a0b04 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a0b04:	b508      	push	{r3, lr}
 80a0b06:	4b02      	ldr	r3, [pc, #8]	; (80a0b10 <system_delay_ms+0xc>)
 80a0b08:	681b      	ldr	r3, [r3, #0]
 80a0b0a:	695b      	ldr	r3, [r3, #20]
 80a0b0c:	9301      	str	r3, [sp, #4]
 80a0b0e:	bd08      	pop	{r3, pc}
 80a0b10:	080601a4 	.word	0x080601a4

080a0b14 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0b14:	b508      	push	{r3, lr}
 80a0b16:	4b03      	ldr	r3, [pc, #12]	; (80a0b24 <system_ctrl_set_app_request_handler+0x10>)
 80a0b18:	681b      	ldr	r3, [r3, #0]
 80a0b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0b1e:	9301      	str	r3, [sp, #4]
 80a0b20:	bd08      	pop	{r3, pc}
 80a0b22:	0000      	.short	0x0000
 80a0b24:	080601a4 	.word	0x080601a4

080a0b28 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0b28:	b508      	push	{r3, lr}
 80a0b2a:	4b03      	ldr	r3, [pc, #12]	; (80a0b38 <system_ctrl_set_result+0x10>)
 80a0b2c:	681b      	ldr	r3, [r3, #0]
 80a0b2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a0b32:	9301      	str	r3, [sp, #4]
 80a0b34:	bd08      	pop	{r3, pc}
 80a0b36:	0000      	.short	0x0000
 80a0b38:	080601a4 	.word	0x080601a4

080a0b3c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0b3c:	b508      	push	{r3, lr}
 80a0b3e:	4b02      	ldr	r3, [pc, #8]	; (80a0b48 <malloc+0xc>)
 80a0b40:	681b      	ldr	r3, [r3, #0]
 80a0b42:	681b      	ldr	r3, [r3, #0]
 80a0b44:	9301      	str	r3, [sp, #4]
 80a0b46:	bd08      	pop	{r3, pc}
 80a0b48:	080601a0 	.word	0x080601a0

080a0b4c <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a0b4c:	b508      	push	{r3, lr}
 80a0b4e:	4b02      	ldr	r3, [pc, #8]	; (80a0b58 <free+0xc>)
 80a0b50:	681b      	ldr	r3, [r3, #0]
 80a0b52:	685b      	ldr	r3, [r3, #4]
 80a0b54:	9301      	str	r3, [sp, #4]
 80a0b56:	bd08      	pop	{r3, pc}
 80a0b58:	080601a0 	.word	0x080601a0

080a0b5c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a0b5c:	2300      	movs	r3, #0
 80a0b5e:	461a      	mov	r2, r3
 80a0b60:	6840      	ldr	r0, [r0, #4]
 80a0b62:	f7ff bf77 	b.w	80a0a54 <network_connect>

080a0b66 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a0b66:	2200      	movs	r2, #0
 80a0b68:	2102      	movs	r1, #2
 80a0b6a:	6840      	ldr	r0, [r0, #4]
 80a0b6c:	f7ff bf82 	b.w	80a0a74 <network_disconnect>

080a0b70 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a0b70:	2200      	movs	r2, #0
 80a0b72:	4611      	mov	r1, r2
 80a0b74:	6840      	ldr	r0, [r0, #4]
 80a0b76:	f7ff bf75 	b.w	80a0a64 <network_connecting>

080a0b7a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a0b7a:	2200      	movs	r2, #0
 80a0b7c:	4611      	mov	r1, r2
 80a0b7e:	6840      	ldr	r0, [r0, #4]
 80a0b80:	f7ff bf80 	b.w	80a0a84 <network_ready>

080a0b84 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a0b84:	2300      	movs	r3, #0
 80a0b86:	461a      	mov	r2, r3
 80a0b88:	4619      	mov	r1, r3
 80a0b8a:	6840      	ldr	r0, [r0, #4]
 80a0b8c:	f7ff bf82 	b.w	80a0a94 <network_on>

080a0b90 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a0b90:	2300      	movs	r3, #0
 80a0b92:	461a      	mov	r2, r3
 80a0b94:	4619      	mov	r1, r3
 80a0b96:	6840      	ldr	r0, [r0, #4]
 80a0b98:	f7ff bf84 	b.w	80a0aa4 <network_off>

080a0b9c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a0b9c:	2200      	movs	r2, #0
 80a0b9e:	f081 0101 	eor.w	r1, r1, #1
 80a0ba2:	6840      	ldr	r0, [r0, #4]
 80a0ba4:	f7ff bf86 	b.w	80a0ab4 <network_listen>

080a0ba8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a0ba8:	2200      	movs	r2, #0
 80a0baa:	6840      	ldr	r0, [r0, #4]
 80a0bac:	f7ff bf92 	b.w	80a0ad4 <network_set_listen_timeout>

080a0bb0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a0bb0:	2200      	movs	r2, #0
 80a0bb2:	4611      	mov	r1, r2
 80a0bb4:	6840      	ldr	r0, [r0, #4]
 80a0bb6:	f7ff bf95 	b.w	80a0ae4 <network_get_listen_timeout>

080a0bba <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a0bba:	2200      	movs	r2, #0
 80a0bbc:	4611      	mov	r1, r2
 80a0bbe:	6840      	ldr	r0, [r0, #4]
 80a0bc0:	f7ff bf80 	b.w	80a0ac4 <network_listening>

080a0bc4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a0bc4:	b570      	push	{r4, r5, r6, lr}
 80a0bc6:	4616      	mov	r6, r2
 80a0bc8:	b08e      	sub	sp, #56	; 0x38
 80a0bca:	4604      	mov	r4, r0
    IPAddress addr;
 80a0bcc:	a808      	add	r0, sp, #32
 80a0bce:	f000 f9ed 	bl	80a0fac <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a0bd2:	2211      	movs	r2, #17
 80a0bd4:	2100      	movs	r1, #0
 80a0bd6:	a803      	add	r0, sp, #12
 80a0bd8:	f001 f8e0 	bl	80a1d9c <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0bdc:	4630      	mov	r0, r6
 80a0bde:	f001 f915 	bl	80a1e0c <strlen>
 80a0be2:	2500      	movs	r5, #0
 80a0be4:	4b0a      	ldr	r3, [pc, #40]	; (80a0c10 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a0be6:	9500      	str	r5, [sp, #0]
 80a0be8:	b281      	uxth	r1, r0
 80a0bea:	685b      	ldr	r3, [r3, #4]
 80a0bec:	aa03      	add	r2, sp, #12
 80a0bee:	4630      	mov	r0, r6
 80a0bf0:	f7ff fdce 	bl	80a0790 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0bf4:	b120      	cbz	r0, 80a0c00 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a0bf6:	4629      	mov	r1, r5
 80a0bf8:	4620      	mov	r0, r4
 80a0bfa:	f000 f9f7 	bl	80a0fec <_ZN9IPAddressC1Em>
 80a0bfe:	e003      	b.n	80a0c08 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a0c00:	a903      	add	r1, sp, #12
 80a0c02:	4620      	mov	r0, r4
 80a0c04:	f000 f9e0 	bl	80a0fc8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a0c08:	4620      	mov	r0, r4
 80a0c0a:	b00e      	add	sp, #56	; 0x38
 80a0c0c:	bd70      	pop	{r4, r5, r6, pc}
 80a0c0e:	bf00      	nop
 80a0c10:	20000170 	.word	0x20000170

080a0c14 <_ZN5spark12NetworkClass4fromEm>:
        return Cellular;
#endif
    default:
        return Network;
    }
}
 80a0c14:	4b03      	ldr	r3, [pc, #12]	; (80a0c24 <_ZN5spark12NetworkClass4fromEm+0x10>)
 80a0c16:	4a04      	ldr	r2, [pc, #16]	; (80a0c28 <_ZN5spark12NetworkClass4fromEm+0x14>)
 80a0c18:	2804      	cmp	r0, #4
 80a0c1a:	bf0c      	ite	eq
 80a0c1c:	4610      	moveq	r0, r2
 80a0c1e:	4618      	movne	r0, r3
 80a0c20:	4770      	bx	lr
 80a0c22:	bf00      	nop
 80a0c24:	20000168 	.word	0x20000168
 80a0c28:	20000170 	.word	0x20000170

080a0c2c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a0c2c:	4b02      	ldr	r3, [pc, #8]	; (80a0c38 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a0c2e:	4a03      	ldr	r2, [pc, #12]	; (80a0c3c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a0c30:	601a      	str	r2, [r3, #0]
 80a0c32:	2200      	movs	r2, #0
 80a0c34:	605a      	str	r2, [r3, #4]
 80a0c36:	4770      	bx	lr
 80a0c38:	20000168 	.word	0x20000168
 80a0c3c:	080a2100 	.word	0x080a2100

080a0c40 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a0c40:	2200      	movs	r2, #0
 80a0c42:	4611      	mov	r1, r2
 80a0c44:	6840      	ldr	r0, [r0, #4]
 80a0c46:	f7ff bf1d 	b.w	80a0a84 <network_ready>

080a0c4a <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a0c4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0c4c:	4616      	mov	r6, r2
 80a0c4e:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a0c50:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a0c52:	460f      	mov	r7, r1
 80a0c54:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a0c56:	2100      	movs	r1, #0
 80a0c58:	a803      	add	r0, sp, #12
 80a0c5a:	f001 f89f 	bl	80a1d9c <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0c5e:	4630      	mov	r0, r6
 80a0c60:	f001 f8d4 	bl	80a1e0c <strlen>
 80a0c64:	2500      	movs	r5, #0
 80a0c66:	9500      	str	r5, [sp, #0]
 80a0c68:	b281      	uxth	r1, r0
 80a0c6a:	687b      	ldr	r3, [r7, #4]
 80a0c6c:	aa03      	add	r2, sp, #12
 80a0c6e:	4630      	mov	r0, r6
 80a0c70:	f7ff fd8e 	bl	80a0790 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0c74:	b120      	cbz	r0, 80a0c80 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a0c76:	4629      	mov	r1, r5
 80a0c78:	4620      	mov	r0, r4
 80a0c7a:	f000 f9b7 	bl	80a0fec <_ZN9IPAddressC1Em>
 80a0c7e:	e003      	b.n	80a0c88 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a0c80:	a903      	add	r1, sp, #12
 80a0c82:	4620      	mov	r0, r4
 80a0c84:	f000 f9a0 	bl	80a0fc8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a0c88:	4620      	mov	r0, r4
 80a0c8a:	b009      	add	sp, #36	; 0x24
 80a0c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0c8e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a0c8e:	2200      	movs	r2, #0
 80a0c90:	4611      	mov	r1, r2
 80a0c92:	6840      	ldr	r0, [r0, #4]
 80a0c94:	f7ff bf16 	b.w	80a0ac4 <network_listening>

080a0c98 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a0c98:	2200      	movs	r2, #0
 80a0c9a:	4611      	mov	r1, r2
 80a0c9c:	6840      	ldr	r0, [r0, #4]
 80a0c9e:	f7ff bf21 	b.w	80a0ae4 <network_get_listen_timeout>

080a0ca2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a0ca2:	2200      	movs	r2, #0
 80a0ca4:	6840      	ldr	r0, [r0, #4]
 80a0ca6:	f7ff bf15 	b.w	80a0ad4 <network_set_listen_timeout>

080a0caa <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a0caa:	2200      	movs	r2, #0
 80a0cac:	f081 0101 	eor.w	r1, r1, #1
 80a0cb0:	6840      	ldr	r0, [r0, #4]
 80a0cb2:	f7ff beff 	b.w	80a0ab4 <network_listen>

080a0cb6 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a0cb6:	2300      	movs	r3, #0
 80a0cb8:	461a      	mov	r2, r3
 80a0cba:	4619      	mov	r1, r3
 80a0cbc:	6840      	ldr	r0, [r0, #4]
 80a0cbe:	f7ff bef1 	b.w	80a0aa4 <network_off>

080a0cc2 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a0cc2:	2300      	movs	r3, #0
 80a0cc4:	461a      	mov	r2, r3
 80a0cc6:	4619      	mov	r1, r3
 80a0cc8:	6840      	ldr	r0, [r0, #4]
 80a0cca:	f7ff bee3 	b.w	80a0a94 <network_on>

080a0cce <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a0cce:	2200      	movs	r2, #0
 80a0cd0:	4611      	mov	r1, r2
 80a0cd2:	6840      	ldr	r0, [r0, #4]
 80a0cd4:	f7ff bec6 	b.w	80a0a64 <network_connecting>

080a0cd8 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a0cd8:	2200      	movs	r2, #0
 80a0cda:	2102      	movs	r1, #2
 80a0cdc:	6840      	ldr	r0, [r0, #4]
 80a0cde:	f7ff bec9 	b.w	80a0a74 <network_disconnect>

080a0ce2 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a0ce2:	2300      	movs	r3, #0
 80a0ce4:	461a      	mov	r2, r3
 80a0ce6:	6840      	ldr	r0, [r0, #4]
 80a0ce8:	f7ff beb4 	b.w	80a0a54 <network_connect>

080a0cec <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a0cec:	4b02      	ldr	r3, [pc, #8]	; (80a0cf8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a0cee:	2204      	movs	r2, #4
 80a0cf0:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a0cf2:	4a02      	ldr	r2, [pc, #8]	; (80a0cfc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a0cf4:	601a      	str	r2, [r3, #0]
 80a0cf6:	4770      	bx	lr
 80a0cf8:	20000170 	.word	0x20000170
 80a0cfc:	080a2134 	.word	0x080a2134

080a0d00 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a0d00:	4770      	bx	lr

080a0d02 <_ZN8SPIClassD0Ev>:
 80a0d02:	b510      	push	{r4, lr}
 80a0d04:	4604      	mov	r4, r0
 80a0d06:	2110      	movs	r1, #16
 80a0d08:	f000 feb5 	bl	80a1a76 <_ZdlPvj>
 80a0d0c:	4620      	mov	r0, r4
 80a0d0e:	bd10      	pop	{r4, pc}

080a0d10 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a0d10:	b570      	push	{r4, r5, r6, lr}
 80a0d12:	4604      	mov	r4, r0
 80a0d14:	460e      	mov	r6, r1
 80a0d16:	4b07      	ldr	r3, [pc, #28]	; (80a0d34 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a0d18:	2500      	movs	r5, #0
 80a0d1a:	6003      	str	r3, [r0, #0]
 80a0d1c:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a0d20:	f7ff fe30 	bl	80a0984 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a0d24:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a0d26:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a0d28:	f7ff fe4c 	bl	80a09c4 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a0d2c:	60a5      	str	r5, [r4, #8]
}
 80a0d2e:	4620      	mov	r0, r4
 80a0d30:	bd70      	pop	{r4, r5, r6, pc}
 80a0d32:	bf00      	nop
 80a0d34:	080a2168 	.word	0x080a2168

080a0d38 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a0d38:	7900      	ldrb	r0, [r0, #4]
 80a0d3a:	f7ff be4b 	b.w	80a09d4 <HAL_SPI_Is_Enabled>

080a0d3e <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a0d3e:	4770      	bx	lr

080a0d40 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a0d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0d42:	4606      	mov	r6, r0
 80a0d44:	4615      	mov	r5, r2
 80a0d46:	460c      	mov	r4, r1
 80a0d48:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0d4a:	42bc      	cmp	r4, r7
 80a0d4c:	d006      	beq.n	80a0d5c <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a0d4e:	6833      	ldr	r3, [r6, #0]
 80a0d50:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a0d54:	689b      	ldr	r3, [r3, #8]
 80a0d56:	4630      	mov	r0, r6
 80a0d58:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0d5a:	e7f6      	b.n	80a0d4a <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a0d5c:	4628      	mov	r0, r5
 80a0d5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0d60 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a0d60:	2200      	movs	r2, #0
 80a0d62:	7c00      	ldrb	r0, [r0, #16]
 80a0d64:	f7ff bd94 	b.w	80a0890 <HAL_I2C_Write_Data>

080a0d68 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a0d68:	2100      	movs	r1, #0
 80a0d6a:	7c00      	ldrb	r0, [r0, #16]
 80a0d6c:	f7ff bd98 	b.w	80a08a0 <HAL_I2C_Available_Data>

080a0d70 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a0d70:	2100      	movs	r1, #0
 80a0d72:	7c00      	ldrb	r0, [r0, #16]
 80a0d74:	f7ff bd9c 	b.w	80a08b0 <HAL_I2C_Read_Data>

080a0d78 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a0d78:	2100      	movs	r1, #0
 80a0d7a:	7c00      	ldrb	r0, [r0, #16]
 80a0d7c:	f7ff bda0 	b.w	80a08c0 <HAL_I2C_Peek_Data>

080a0d80 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a0d80:	2100      	movs	r1, #0
 80a0d82:	7c00      	ldrb	r0, [r0, #16]
 80a0d84:	f7ff bda4 	b.w	80a08d0 <HAL_I2C_Flush_Data>

080a0d88 <_ZN7TwoWireD0Ev>:
 80a0d88:	b510      	push	{r4, lr}
 80a0d8a:	4604      	mov	r4, r0
 80a0d8c:	2114      	movs	r1, #20
 80a0d8e:	f000 fe72 	bl	80a1a76 <_ZdlPvj>
 80a0d92:	4620      	mov	r0, r4
 80a0d94:	bd10      	pop	{r4, pc}
	...

080a0d98 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a0d98:	b510      	push	{r4, lr}
 80a0d9a:	4604      	mov	r4, r0
 80a0d9c:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a0d9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0da2:	60a3      	str	r3, [r4, #8]
 80a0da4:	4b04      	ldr	r3, [pc, #16]	; (80a0db8 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a0da6:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a0da8:	7420      	strb	r0, [r4, #16]
 80a0daa:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a0dac:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a0dae:	f7ff fd9f 	bl	80a08f0 <HAL_I2C_Init>

}
 80a0db2:	4620      	mov	r0, r4
 80a0db4:	bd10      	pop	{r4, pc}
 80a0db6:	bf00      	nop
 80a0db8:	080a2178 	.word	0x080a2178

080a0dbc <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a0dbc:	2100      	movs	r1, #0
 80a0dbe:	7c00      	ldrb	r0, [r0, #16]
 80a0dc0:	f7ff bd8e 	b.w	80a08e0 <HAL_I2C_Is_Enabled>

080a0dc4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0dc4:	7441      	strb	r1, [r0, #17]
 80a0dc6:	4770      	bx	lr

080a0dc8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a0dc8:	4770      	bx	lr

080a0dca <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a0dca:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a0dcc:	2100      	movs	r1, #0
 80a0dce:	7c00      	ldrb	r0, [r0, #16]
 80a0dd0:	f7ff fd06 	bl	80a07e0 <HAL_USB_USART_Receive_Data>
}
 80a0dd4:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0dd8:	bf28      	it	cs
 80a0dda:	f04f 30ff 	movcs.w	r0, #4294967295
 80a0dde:	bd08      	pop	{r3, pc}

080a0de0 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a0de0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a0de2:	2101      	movs	r1, #1
 80a0de4:	7c00      	ldrb	r0, [r0, #16]
 80a0de6:	f7ff fcfb 	bl	80a07e0 <HAL_USB_USART_Receive_Data>
}
 80a0dea:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0dee:	bf28      	it	cs
 80a0df0:	f04f 30ff 	movcs.w	r0, #4294967295
 80a0df4:	bd08      	pop	{r3, pc}

080a0df6 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a0df6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a0df8:	7c00      	ldrb	r0, [r0, #16]
 80a0dfa:	f7ff fce9 	bl	80a07d0 <HAL_USB_USART_Available_Data_For_Write>
}
 80a0dfe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0e02:	bd08      	pop	{r3, pc}

080a0e04 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a0e04:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a0e06:	7c00      	ldrb	r0, [r0, #16]
 80a0e08:	f7ff fcda 	bl	80a07c0 <HAL_USB_USART_Available_Data>
}
 80a0e0c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0e10:	bd08      	pop	{r3, pc}

080a0e12 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a0e12:	7c00      	ldrb	r0, [r0, #16]
 80a0e14:	f7ff bcf4 	b.w	80a0800 <HAL_USB_USART_Flush_Data>

080a0e18 <_ZN9USBSerialD0Ev>:
 80a0e18:	b510      	push	{r4, lr}
 80a0e1a:	4604      	mov	r4, r0
 80a0e1c:	2114      	movs	r1, #20
 80a0e1e:	f000 fe2a 	bl	80a1a76 <_ZdlPvj>
 80a0e22:	4620      	mov	r0, r4
 80a0e24:	bd10      	pop	{r4, pc}

080a0e26 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a0e26:	b538      	push	{r3, r4, r5, lr}
 80a0e28:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0e2a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a0e2c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0e2e:	f7ff fccf 	bl	80a07d0 <HAL_USB_USART_Available_Data_For_Write>
 80a0e32:	2800      	cmp	r0, #0
 80a0e34:	dc01      	bgt.n	80a0e3a <_ZN9USBSerial5writeEh+0x14>
 80a0e36:	7c60      	ldrb	r0, [r4, #17]
 80a0e38:	b128      	cbz	r0, 80a0e46 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a0e3a:	4629      	mov	r1, r5
 80a0e3c:	7c20      	ldrb	r0, [r4, #16]
 80a0e3e:	f7ff fcd7 	bl	80a07f0 <HAL_USB_USART_Send_Data>
 80a0e42:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a0e46:	bd38      	pop	{r3, r4, r5, pc}

080a0e48 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a0e48:	b510      	push	{r4, lr}
 80a0e4a:	4604      	mov	r4, r0
 80a0e4c:	2300      	movs	r3, #0
 80a0e4e:	6063      	str	r3, [r4, #4]
 80a0e50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0e54:	60a3      	str	r3, [r4, #8]
 80a0e56:	4b05      	ldr	r3, [pc, #20]	; (80a0e6c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a0e58:	4608      	mov	r0, r1
 80a0e5a:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a0e5c:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a0e5e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a0e60:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a0e62:	4611      	mov	r1, r2
 80a0e64:	f7ff fc9c 	bl	80a07a0 <HAL_USB_USART_Init>
}
 80a0e68:	4620      	mov	r0, r4
 80a0e6a:	bd10      	pop	{r4, pc}
 80a0e6c:	080a21a0 	.word	0x080a21a0

080a0e70 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a0e70:	2200      	movs	r2, #0
 80a0e72:	7c00      	ldrb	r0, [r0, #16]
 80a0e74:	f7ff bc9c 	b.w	80a07b0 <HAL_USB_USART_Begin>

080a0e78 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a0e78:	b510      	push	{r4, lr}
 80a0e7a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a0e7c:	2214      	movs	r2, #20
 80a0e7e:	2100      	movs	r1, #0
 80a0e80:	f000 ff8c 	bl	80a1d9c <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a0e84:	4b05      	ldr	r3, [pc, #20]	; (80a0e9c <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a0e86:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a0e88:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a0e8a:	4b05      	ldr	r3, [pc, #20]	; (80a0ea0 <_Z19acquireSerialBufferv+0x28>)
 80a0e8c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a0e8e:	f240 1301 	movw	r3, #257	; 0x101
 80a0e92:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a0e94:	2381      	movs	r3, #129	; 0x81
 80a0e96:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a0e98:	bd10      	pop	{r4, pc}
 80a0e9a:	bf00      	nop
 80a0e9c:	200001fd 	.word	0x200001fd
 80a0ea0:	2000017c 	.word	0x2000017c

080a0ea4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a0ea4:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0ea6:	4d0e      	ldr	r5, [pc, #56]	; (80a0ee0 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a0ea8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a0eaa:	a801      	add	r0, sp, #4
 80a0eac:	f7ff ffe4 	bl	80a0e78 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0eb0:	6829      	ldr	r1, [r5, #0]
 80a0eb2:	f011 0401 	ands.w	r4, r1, #1
 80a0eb6:	d110      	bne.n	80a0eda <_Z16_fetch_usbserialv+0x36>
 80a0eb8:	4628      	mov	r0, r5
 80a0eba:	f7ff f8fd 	bl	80a00b8 <__cxa_guard_acquire>
 80a0ebe:	b160      	cbz	r0, 80a0eda <_Z16_fetch_usbserialv+0x36>
 80a0ec0:	aa01      	add	r2, sp, #4
 80a0ec2:	4621      	mov	r1, r4
 80a0ec4:	4807      	ldr	r0, [pc, #28]	; (80a0ee4 <_Z16_fetch_usbserialv+0x40>)
 80a0ec6:	f7ff ffbf 	bl	80a0e48 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0eca:	4628      	mov	r0, r5
 80a0ecc:	f7ff f8f9 	bl	80a00c2 <__cxa_guard_release>
 80a0ed0:	4a05      	ldr	r2, [pc, #20]	; (80a0ee8 <_Z16_fetch_usbserialv+0x44>)
 80a0ed2:	4906      	ldr	r1, [pc, #24]	; (80a0eec <_Z16_fetch_usbserialv+0x48>)
 80a0ed4:	4803      	ldr	r0, [pc, #12]	; (80a0ee4 <_Z16_fetch_usbserialv+0x40>)
 80a0ed6:	f000 fdc9 	bl	80a1a6c <__aeabi_atexit>
	return _usbserial;
}
 80a0eda:	4802      	ldr	r0, [pc, #8]	; (80a0ee4 <_Z16_fetch_usbserialv+0x40>)
 80a0edc:	b007      	add	sp, #28
 80a0ede:	bd30      	pop	{r4, r5, pc}
 80a0ee0:	20000178 	.word	0x20000178
 80a0ee4:	20000300 	.word	0x20000300
 80a0ee8:	20000068 	.word	0x20000068
 80a0eec:	080a0dc9 	.word	0x080a0dc9

080a0ef0 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a0ef0:	b510      	push	{r4, lr}
 80a0ef2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a0ef4:	2214      	movs	r2, #20
 80a0ef6:	2100      	movs	r1, #0
 80a0ef8:	f000 ff50 	bl	80a1d9c <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a0efc:	4b05      	ldr	r3, [pc, #20]	; (80a0f14 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a0efe:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a0f00:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a0f02:	4b05      	ldr	r3, [pc, #20]	; (80a0f18 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a0f04:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a0f06:	f240 1301 	movw	r3, #257	; 0x101
 80a0f0a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a0f0c:	2381      	movs	r3, #129	; 0x81
 80a0f0e:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a0f10:	bd10      	pop	{r4, pc}
 80a0f12:	bf00      	nop
 80a0f14:	200003b0 	.word	0x200003b0
 80a0f18:	20000318 	.word	0x20000318

080a0f1c <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a0f1c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0f1e:	4c0e      	ldr	r4, [pc, #56]	; (80a0f58 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a0f20:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a0f22:	a801      	add	r0, sp, #4
 80a0f24:	f7ff ffe4 	bl	80a0ef0 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0f28:	6823      	ldr	r3, [r4, #0]
 80a0f2a:	07db      	lsls	r3, r3, #31
 80a0f2c:	d410      	bmi.n	80a0f50 <_Z17_fetch_usbserial1v+0x34>
 80a0f2e:	4620      	mov	r0, r4
 80a0f30:	f7ff f8c2 	bl	80a00b8 <__cxa_guard_acquire>
 80a0f34:	b160      	cbz	r0, 80a0f50 <_Z17_fetch_usbserial1v+0x34>
 80a0f36:	aa01      	add	r2, sp, #4
 80a0f38:	2101      	movs	r1, #1
 80a0f3a:	4808      	ldr	r0, [pc, #32]	; (80a0f5c <_Z17_fetch_usbserial1v+0x40>)
 80a0f3c:	f7ff ff84 	bl	80a0e48 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0f40:	4620      	mov	r0, r4
 80a0f42:	f7ff f8be 	bl	80a00c2 <__cxa_guard_release>
 80a0f46:	4a06      	ldr	r2, [pc, #24]	; (80a0f60 <_Z17_fetch_usbserial1v+0x44>)
 80a0f48:	4906      	ldr	r1, [pc, #24]	; (80a0f64 <_Z17_fetch_usbserial1v+0x48>)
 80a0f4a:	4804      	ldr	r0, [pc, #16]	; (80a0f5c <_Z17_fetch_usbserial1v+0x40>)
 80a0f4c:	f000 fd8e 	bl	80a1a6c <__aeabi_atexit>
  return _usbserial1;
}
 80a0f50:	4802      	ldr	r0, [pc, #8]	; (80a0f5c <_Z17_fetch_usbserial1v+0x40>)
 80a0f52:	b006      	add	sp, #24
 80a0f54:	bd10      	pop	{r4, pc}
 80a0f56:	bf00      	nop
 80a0f58:	20000314 	.word	0x20000314
 80a0f5c:	2000039c 	.word	0x2000039c
 80a0f60:	20000068 	.word	0x20000068
 80a0f64:	080a0dc9 	.word	0x080a0dc9

080a0f68 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a0f68:	4770      	bx	lr

080a0f6a <_ZN9IPAddressD0Ev>:
 80a0f6a:	b510      	push	{r4, lr}
 80a0f6c:	4604      	mov	r4, r0
 80a0f6e:	2118      	movs	r1, #24
 80a0f70:	f000 fd81 	bl	80a1a76 <_ZdlPvj>
 80a0f74:	4620      	mov	r0, r4
 80a0f76:	bd10      	pop	{r4, pc}

080a0f78 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a0f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0f7a:	460f      	mov	r7, r1
 80a0f7c:	f100 0608 	add.w	r6, r0, #8
 80a0f80:	1d05      	adds	r5, r0, #4
 80a0f82:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0f84:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a0f88:	220a      	movs	r2, #10
 80a0f8a:	4638      	mov	r0, r7
 80a0f8c:	f000 f987 	bl	80a129e <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0f90:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0f92:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0f94:	d007      	beq.n	80a0fa6 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a0f96:	2c00      	cmp	r4, #0
 80a0f98:	d0f4      	beq.n	80a0f84 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a0f9a:	212e      	movs	r1, #46	; 0x2e
 80a0f9c:	4638      	mov	r0, r7
 80a0f9e:	f000 f93b 	bl	80a1218 <_ZN5Print5printEc>
 80a0fa2:	4404      	add	r4, r0
 80a0fa4:	e7ee      	b.n	80a0f84 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a0fa6:	4620      	mov	r0, r4
 80a0fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a0fac <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a0fac:	b510      	push	{r4, lr}
 80a0fae:	4604      	mov	r4, r0
 80a0fb0:	4b04      	ldr	r3, [pc, #16]	; (80a0fc4 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a0fb2:	2211      	movs	r2, #17
 80a0fb4:	f840 3b04 	str.w	r3, [r0], #4
 80a0fb8:	2100      	movs	r1, #0
 80a0fba:	f000 feef 	bl	80a1d9c <memset>
{
    clear();
}
 80a0fbe:	4620      	mov	r0, r4
 80a0fc0:	bd10      	pop	{r4, pc}
 80a0fc2:	bf00      	nop
 80a0fc4:	080a21d0 	.word	0x080a21d0

080a0fc8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a0fc8:	4603      	mov	r3, r0
 80a0fca:	4a07      	ldr	r2, [pc, #28]	; (80a0fe8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a0fcc:	b510      	push	{r4, lr}
 80a0fce:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a0fd2:	f101 0210 	add.w	r2, r1, #16
 80a0fd6:	f851 4b04 	ldr.w	r4, [r1], #4
 80a0fda:	4291      	cmp	r1, r2
 80a0fdc:	f843 4b04 	str.w	r4, [r3], #4
 80a0fe0:	d1f9      	bne.n	80a0fd6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a0fe2:	780a      	ldrb	r2, [r1, #0]
 80a0fe4:	701a      	strb	r2, [r3, #0]
}
 80a0fe6:	bd10      	pop	{r4, pc}
 80a0fe8:	080a21d0 	.word	0x080a21d0

080a0fec <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a0fec:	4a02      	ldr	r2, [pc, #8]	; (80a0ff8 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a0fee:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a0ff0:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a0ff2:	2204      	movs	r2, #4
 80a0ff4:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a0ff6:	4770      	bx	lr
 80a0ff8:	080a21d0 	.word	0x080a21d0

080a0ffc <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a0ffc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a0ffe:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a1002:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a1006:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a100a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a100e:	2304      	movs	r3, #4
 80a1010:	6041      	str	r1, [r0, #4]
 80a1012:	7503      	strb	r3, [r0, #20]
 80a1014:	bd10      	pop	{r4, pc}
	...

080a1018 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a1018:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a101a:	4d04      	ldr	r5, [pc, #16]	; (80a102c <_ZN9IPAddressC1Ehhhh+0x14>)
 80a101c:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a101e:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a1022:	9500      	str	r5, [sp, #0]
 80a1024:	f7ff ffea 	bl	80a0ffc <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1028:	b003      	add	sp, #12
 80a102a:	bd30      	pop	{r4, r5, pc}
 80a102c:	080a21d0 	.word	0x080a21d0

080a1030 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a1030:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a1032:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a1034:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a1036:	b113      	cbz	r3, 80a103e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a1038:	2203      	movs	r2, #3
 80a103a:	4601      	mov	r1, r0
 80a103c:	4798      	blx	r3
    }
 80a103e:	4620      	mov	r0, r4
 80a1040:	bd10      	pop	{r4, pc}

080a1042 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a1042:	2100      	movs	r1, #0
 80a1044:	f7ff bd5e 	b.w	80a0b04 <system_delay_ms>

080a1048 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a1048:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a104a:	4b14      	ldr	r3, [pc, #80]	; (80a109c <serialEventRun+0x54>)
 80a104c:	b133      	cbz	r3, 80a105c <serialEventRun+0x14>
 80a104e:	f7ff ff29 	bl	80a0ea4 <_Z16_fetch_usbserialv>
 80a1052:	6803      	ldr	r3, [r0, #0]
 80a1054:	691b      	ldr	r3, [r3, #16]
 80a1056:	4798      	blx	r3
 80a1058:	2800      	cmp	r0, #0
 80a105a:	dc16      	bgt.n	80a108a <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a105c:	4b10      	ldr	r3, [pc, #64]	; (80a10a0 <serialEventRun+0x58>)
 80a105e:	b133      	cbz	r3, 80a106e <serialEventRun+0x26>
 80a1060:	f000 f97a 	bl	80a1358 <_Z22__fetch_global_Serial1v>
 80a1064:	6803      	ldr	r3, [r0, #0]
 80a1066:	691b      	ldr	r3, [r3, #16]
 80a1068:	4798      	blx	r3
 80a106a:	2800      	cmp	r0, #0
 80a106c:	dc10      	bgt.n	80a1090 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a106e:	4b0d      	ldr	r3, [pc, #52]	; (80a10a4 <serialEventRun+0x5c>)
 80a1070:	b10b      	cbz	r3, 80a1076 <serialEventRun+0x2e>
 80a1072:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a1076:	4b0c      	ldr	r3, [pc, #48]	; (80a10a8 <serialEventRun+0x60>)
 80a1078:	b17b      	cbz	r3, 80a109a <serialEventRun+0x52>
 80a107a:	f7ff ff4f 	bl	80a0f1c <_Z17_fetch_usbserial1v>
 80a107e:	6803      	ldr	r3, [r0, #0]
 80a1080:	691b      	ldr	r3, [r3, #16]
 80a1082:	4798      	blx	r3
 80a1084:	2800      	cmp	r0, #0
 80a1086:	dc06      	bgt.n	80a1096 <serialEventRun+0x4e>
 80a1088:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a108a:	f3af 8000 	nop.w
 80a108e:	e7e5      	b.n	80a105c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a1090:	f3af 8000 	nop.w
 80a1094:	e7eb      	b.n	80a106e <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a1096:	f3af 8000 	nop.w
 80a109a:	bd08      	pop	{r3, pc}
	...

080a10ac <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a10ac:	b508      	push	{r3, lr}
	serialEventRun();
 80a10ae:	f7ff ffcb 	bl	80a1048 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a10b2:	f7ff fc7f 	bl	80a09b4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a10b6:	4b01      	ldr	r3, [pc, #4]	; (80a10bc <_post_loop+0x10>)
 80a10b8:	6018      	str	r0, [r3, #0]
 80a10ba:	bd08      	pop	{r3, pc}
 80a10bc:	2000062c 	.word	0x2000062c

080a10c0 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a10c0:	4802      	ldr	r0, [pc, #8]	; (80a10cc <_Z33system_initialize_user_backup_ramv+0xc>)
 80a10c2:	4a03      	ldr	r2, [pc, #12]	; (80a10d0 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a10c4:	4903      	ldr	r1, [pc, #12]	; (80a10d4 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a10c6:	1a12      	subs	r2, r2, r0
 80a10c8:	f000 be42 	b.w	80a1d50 <memcpy>
 80a10cc:	40024000 	.word	0x40024000
 80a10d0:	40024004 	.word	0x40024004
 80a10d4:	080a2440 	.word	0x080a2440

080a10d8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a10d8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a10da:	2300      	movs	r3, #0
 80a10dc:	9300      	str	r3, [sp, #0]
 80a10de:	461a      	mov	r2, r3
 80a10e0:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a10e4:	f7ff fd20 	bl	80a0b28 <system_ctrl_set_result>
}
 80a10e8:	b003      	add	sp, #12
 80a10ea:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a10f0 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a10f0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a10f2:	8843      	ldrh	r3, [r0, #2]
 80a10f4:	2b0a      	cmp	r3, #10
 80a10f6:	d008      	beq.n	80a110a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a10f8:	2b50      	cmp	r3, #80	; 0x50
 80a10fa:	d109      	bne.n	80a1110 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a10fc:	4b09      	ldr	r3, [pc, #36]	; (80a1124 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a10fe:	681b      	ldr	r3, [r3, #0]
 80a1100:	b13b      	cbz	r3, 80a1112 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a1102:	b003      	add	sp, #12
 80a1104:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a1108:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a110a:	f7ff ffe5 	bl	80a10d8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a110e:	e006      	b.n	80a111e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1110:	2300      	movs	r3, #0
 80a1112:	9300      	str	r3, [sp, #0]
 80a1114:	461a      	mov	r2, r3
 80a1116:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a111a:	f7ff fd05 	bl	80a0b28 <system_ctrl_set_result>
        break;
    }
}
 80a111e:	b003      	add	sp, #12
 80a1120:	f85d fb04 	ldr.w	pc, [sp], #4
 80a1124:	200004b4 	.word	0x200004b4

080a1128 <module_user_init_hook>:

void module_user_init_hook()
{
 80a1128:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a112a:	4c10      	ldr	r4, [pc, #64]	; (80a116c <module_user_init_hook+0x44>)
 80a112c:	4d10      	ldr	r5, [pc, #64]	; (80a1170 <module_user_init_hook+0x48>)
 80a112e:	6823      	ldr	r3, [r4, #0]
 80a1130:	42ab      	cmp	r3, r5
 80a1132:	4b10      	ldr	r3, [pc, #64]	; (80a1174 <module_user_init_hook+0x4c>)
 80a1134:	bf0c      	ite	eq
 80a1136:	2201      	moveq	r2, #1
 80a1138:	2200      	movne	r2, #0
 80a113a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a113c:	d002      	beq.n	80a1144 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a113e:	f7ff ffbf 	bl	80a10c0 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a1142:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a1144:	f7ff fc26 	bl	80a0994 <HAL_RNG_GetRandomNumber>
 80a1148:	4604      	mov	r4, r0
    srand(seed);
 80a114a:	f000 fe2f 	bl	80a1dac <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a114e:	4b0a      	ldr	r3, [pc, #40]	; (80a1178 <module_user_init_hook+0x50>)
 80a1150:	b113      	cbz	r3, 80a1158 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a1152:	4620      	mov	r0, r4
 80a1154:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a1158:	2100      	movs	r1, #0
 80a115a:	4807      	ldr	r0, [pc, #28]	; (80a1178 <module_user_init_hook+0x50>)
 80a115c:	f7ff fc72 	bl	80a0a44 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a1160:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a1164:	2100      	movs	r1, #0
 80a1166:	4805      	ldr	r0, [pc, #20]	; (80a117c <module_user_init_hook+0x54>)
 80a1168:	f7ff bcd4 	b.w	80a0b14 <system_ctrl_set_app_request_handler>
 80a116c:	40024000 	.word	0x40024000
 80a1170:	9a271c1e 	.word	0x9a271c1e
 80a1174:	200004b8 	.word	0x200004b8
 80a1178:	00000000 	.word	0x00000000
 80a117c:	080a10f1 	.word	0x080a10f1

080a1180 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a1180:	b510      	push	{r4, lr}
 80a1182:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1184:	f7ff ff54 	bl	80a1030 <_ZNSt14_Function_baseD1Ev>
 80a1188:	4620      	mov	r0, r4
 80a118a:	bd10      	pop	{r4, pc}

080a118c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a118c:	4803      	ldr	r0, [pc, #12]	; (80a119c <_GLOBAL__sub_I_RGB+0x10>)
 80a118e:	2300      	movs	r3, #0
 80a1190:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a1192:	4a03      	ldr	r2, [pc, #12]	; (80a11a0 <_GLOBAL__sub_I_RGB+0x14>)
 80a1194:	4903      	ldr	r1, [pc, #12]	; (80a11a4 <_GLOBAL__sub_I_RGB+0x18>)
 80a1196:	f000 bc69 	b.w	80a1a6c <__aeabi_atexit>
 80a119a:	bf00      	nop
 80a119c:	200004bc 	.word	0x200004bc
 80a11a0:	20000068 	.word	0x20000068
 80a11a4:	080a1181 	.word	0x080a1181

080a11a8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a11a8:	4b02      	ldr	r3, [pc, #8]	; (80a11b4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a11aa:	681a      	ldr	r2, [r3, #0]
 80a11ac:	4b02      	ldr	r3, [pc, #8]	; (80a11b8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a11ae:	601a      	str	r2, [r3, #0]
 80a11b0:	4770      	bx	lr
 80a11b2:	bf00      	nop
 80a11b4:	20000000 	.word	0x20000000
 80a11b8:	200004cc 	.word	0x200004cc

080a11bc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a11bc:	4a01      	ldr	r2, [pc, #4]	; (80a11c4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a11be:	4b02      	ldr	r3, [pc, #8]	; (80a11c8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a11c0:	601a      	str	r2, [r3, #0]
 80a11c2:	4770      	bx	lr
 80a11c4:	080a227b 	.word	0x080a227b
 80a11c8:	200004d0 	.word	0x200004d0

080a11cc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a11cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a11ce:	4606      	mov	r6, r0
 80a11d0:	460d      	mov	r5, r1
 80a11d2:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a11d4:	2400      	movs	r4, #0
  while (size--) {
 80a11d6:	42bd      	cmp	r5, r7
 80a11d8:	d00c      	beq.n	80a11f4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a11da:	6833      	ldr	r3, [r6, #0]
 80a11dc:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a11e0:	689b      	ldr	r3, [r3, #8]
 80a11e2:	4630      	mov	r0, r6
 80a11e4:	4798      	blx	r3
     if (chunk>=0)
 80a11e6:	2800      	cmp	r0, #0
 80a11e8:	db01      	blt.n	80a11ee <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a11ea:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a11ec:	e7f3      	b.n	80a11d6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a11ee:	2c00      	cmp	r4, #0
 80a11f0:	bf08      	it	eq
 80a11f2:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a11f4:	4620      	mov	r0, r4
 80a11f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a11f8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a11f8:	b570      	push	{r4, r5, r6, lr}
 80a11fa:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a11fc:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a11fe:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a1200:	b149      	cbz	r1, 80a1216 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a1202:	f000 fe03 	bl	80a1e0c <strlen>
 80a1206:	682b      	ldr	r3, [r5, #0]
 80a1208:	4602      	mov	r2, r0
 80a120a:	4621      	mov	r1, r4
 80a120c:	4628      	mov	r0, r5
    }
 80a120e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a1212:	68db      	ldr	r3, [r3, #12]
 80a1214:	4718      	bx	r3
    }
 80a1216:	bd70      	pop	{r4, r5, r6, pc}

080a1218 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a1218:	6803      	ldr	r3, [r0, #0]
 80a121a:	689b      	ldr	r3, [r3, #8]
 80a121c:	4718      	bx	r3

080a121e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a121e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a1220:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1222:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a1224:	f7ff fff8 	bl	80a1218 <_ZN5Print5printEc>
  n += print('\n');
 80a1228:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a122a:	4604      	mov	r4, r0
  n += print('\n');
 80a122c:	4628      	mov	r0, r5
 80a122e:	f7ff fff3 	bl	80a1218 <_ZN5Print5printEc>
  return n;
}
 80a1232:	4420      	add	r0, r4
 80a1234:	bd38      	pop	{r3, r4, r5, pc}

080a1236 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a1236:	b538      	push	{r3, r4, r5, lr}
 80a1238:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a123a:	f7ff ffdd 	bl	80a11f8 <_ZN5Print5writeEPKc>
 80a123e:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a1240:	4628      	mov	r0, r5
 80a1242:	f7ff ffec 	bl	80a121e <_ZN5Print7printlnEv>
  return n;
}
 80a1246:	4420      	add	r0, r4
 80a1248:	bd38      	pop	{r3, r4, r5, pc}

080a124a <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a124a:	2a01      	cmp	r2, #1
 80a124c:	bf98      	it	ls
 80a124e:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a1250:	b530      	push	{r4, r5, lr}
 80a1252:	460b      	mov	r3, r1
 80a1254:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a1256:	2100      	movs	r1, #0
 80a1258:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a125c:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a1260:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a1264:	fb05 3312 	mls	r3, r5, r2, r3
 80a1268:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a126a:	2b09      	cmp	r3, #9
 80a126c:	bf94      	ite	ls
 80a126e:	3330      	addls	r3, #48	; 0x30
 80a1270:	3337      	addhi	r3, #55	; 0x37
 80a1272:	b2db      	uxtb	r3, r3
 80a1274:	4621      	mov	r1, r4
 80a1276:	f804 3901 	strb.w	r3, [r4], #-1
 80a127a:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a127c:	2d00      	cmp	r5, #0
 80a127e:	d1ef      	bne.n	80a1260 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a1280:	f7ff ffba 	bl	80a11f8 <_ZN5Print5writeEPKc>
}
 80a1284:	b00b      	add	sp, #44	; 0x2c
 80a1286:	bd30      	pop	{r4, r5, pc}

080a1288 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a1288:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a128a:	b922      	cbnz	r2, 80a1296 <_ZN5Print5printEmi+0xe>
 80a128c:	6803      	ldr	r3, [r0, #0]
 80a128e:	b2c9      	uxtb	r1, r1
 80a1290:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a1292:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a1294:	4718      	bx	r3
  else return printNumber(n, base);
 80a1296:	b2d2      	uxtb	r2, r2
}
 80a1298:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a129a:	f7ff bfd6 	b.w	80a124a <_ZN5Print11printNumberEmh>

080a129e <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a129e:	f7ff bff3 	b.w	80a1288 <_ZN5Print5printEmi>

080a12a2 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a12a2:	4770      	bx	lr

080a12a4 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a12a4:	7441      	strb	r1, [r0, #17]
 80a12a6:	4770      	bx	lr

080a12a8 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a12a8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a12aa:	7c00      	ldrb	r0, [r0, #16]
 80a12ac:	f7ff fb62 	bl	80a0974 <HAL_USART_Available_Data_For_Write>
}
 80a12b0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a12b4:	bd08      	pop	{r3, pc}

080a12b6 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a12b6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a12b8:	7c00      	ldrb	r0, [r0, #16]
 80a12ba:	f7ff fb33 	bl	80a0924 <HAL_USART_Available_Data>
}
 80a12be:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a12c2:	bd08      	pop	{r3, pc}

080a12c4 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a12c4:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a12c6:	7c00      	ldrb	r0, [r0, #16]
 80a12c8:	f7ff fb3c 	bl	80a0944 <HAL_USART_Peek_Data>
}
 80a12cc:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a12d0:	bf28      	it	cs
 80a12d2:	f04f 30ff 	movcs.w	r0, #4294967295
 80a12d6:	bd08      	pop	{r3, pc}

080a12d8 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a12d8:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a12da:	7c00      	ldrb	r0, [r0, #16]
 80a12dc:	f7ff fb2a 	bl	80a0934 <HAL_USART_Read_Data>
}
 80a12e0:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a12e4:	bf28      	it	cs
 80a12e6:	f04f 30ff 	movcs.w	r0, #4294967295
 80a12ea:	bd08      	pop	{r3, pc}

080a12ec <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a12ec:	7c00      	ldrb	r0, [r0, #16]
 80a12ee:	f7ff bb31 	b.w	80a0954 <HAL_USART_Flush_Data>

080a12f2 <_ZN11USARTSerialD0Ev>:
 80a12f2:	b510      	push	{r4, lr}
 80a12f4:	4604      	mov	r4, r0
 80a12f6:	2114      	movs	r1, #20
 80a12f8:	f000 fbbd 	bl	80a1a76 <_ZdlPvj>
 80a12fc:	4620      	mov	r0, r4
 80a12fe:	bd10      	pop	{r4, pc}

080a1300 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a1300:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1302:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a1304:	4604      	mov	r4, r0
 80a1306:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1308:	b925      	cbnz	r5, 80a1314 <_ZN11USARTSerial5writeEh+0x14>
 80a130a:	7c00      	ldrb	r0, [r0, #16]
 80a130c:	f7ff fb32 	bl	80a0974 <HAL_USART_Available_Data_For_Write>
 80a1310:	2800      	cmp	r0, #0
 80a1312:	dd05      	ble.n	80a1320 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1314:	4631      	mov	r1, r6
 80a1316:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a1318:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a131c:	f7ff bafa 	b.w	80a0914 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a1320:	4628      	mov	r0, r5
 80a1322:	bd70      	pop	{r4, r5, r6, pc}

080a1324 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1324:	b510      	push	{r4, lr}
 80a1326:	4604      	mov	r4, r0
 80a1328:	4608      	mov	r0, r1
 80a132a:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a132c:	2200      	movs	r2, #0
 80a132e:	6062      	str	r2, [r4, #4]
 80a1330:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a1334:	60a2      	str	r2, [r4, #8]
 80a1336:	4a05      	ldr	r2, [pc, #20]	; (80a134c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a1338:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a133a:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a133c:	2201      	movs	r2, #1
 80a133e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a1340:	461a      	mov	r2, r3
 80a1342:	f7ff fadf 	bl	80a0904 <HAL_USART_Init>
}
 80a1346:	4620      	mov	r0, r4
 80a1348:	bd10      	pop	{r4, pc}
 80a134a:	bf00      	nop
 80a134c:	080a22e8 	.word	0x080a22e8

080a1350 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a1350:	7c00      	ldrb	r0, [r0, #16]
 80a1352:	f7ff bb07 	b.w	80a0964 <HAL_USART_Is_Enabled>
	...

080a1358 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a1358:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a135a:	4d0c      	ldr	r5, [pc, #48]	; (80a138c <_Z22__fetch_global_Serial1v+0x34>)
 80a135c:	6829      	ldr	r1, [r5, #0]
 80a135e:	f011 0401 	ands.w	r4, r1, #1
 80a1362:	d111      	bne.n	80a1388 <_Z22__fetch_global_Serial1v+0x30>
 80a1364:	4628      	mov	r0, r5
 80a1366:	f7fe fea7 	bl	80a00b8 <__cxa_guard_acquire>
 80a136a:	b168      	cbz	r0, 80a1388 <_Z22__fetch_global_Serial1v+0x30>
 80a136c:	4a08      	ldr	r2, [pc, #32]	; (80a1390 <_Z22__fetch_global_Serial1v+0x38>)
 80a136e:	4621      	mov	r1, r4
 80a1370:	4b08      	ldr	r3, [pc, #32]	; (80a1394 <_Z22__fetch_global_Serial1v+0x3c>)
 80a1372:	4809      	ldr	r0, [pc, #36]	; (80a1398 <_Z22__fetch_global_Serial1v+0x40>)
 80a1374:	f7ff ffd6 	bl	80a1324 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a1378:	4628      	mov	r0, r5
 80a137a:	f7fe fea2 	bl	80a00c2 <__cxa_guard_release>
 80a137e:	4a07      	ldr	r2, [pc, #28]	; (80a139c <_Z22__fetch_global_Serial1v+0x44>)
 80a1380:	4907      	ldr	r1, [pc, #28]	; (80a13a0 <_Z22__fetch_global_Serial1v+0x48>)
 80a1382:	4805      	ldr	r0, [pc, #20]	; (80a1398 <_Z22__fetch_global_Serial1v+0x40>)
 80a1384:	f000 fb72 	bl	80a1a6c <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a1388:	4803      	ldr	r0, [pc, #12]	; (80a1398 <_Z22__fetch_global_Serial1v+0x40>)
 80a138a:	bd38      	pop	{r3, r4, r5, pc}
 80a138c:	2000056c 	.word	0x2000056c
 80a1390:	20000570 	.word	0x20000570
 80a1394:	200004e8 	.word	0x200004e8
 80a1398:	200004d4 	.word	0x200004d4
 80a139c:	20000068 	.word	0x20000068
 80a13a0:	080a12a3 	.word	0x080a12a3

080a13a4 <_ZN9TCPClient5writeEh>:
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a13a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a13a6:	ac02      	add	r4, sp, #8
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a13a8:	6803      	ldr	r3, [r0, #0]
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a13aa:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a13ae:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80a13b0:	2201      	movs	r2, #1
 80a13b2:	f247 5330 	movw	r3, #30000	; 0x7530
 80a13b6:	4621      	mov	r1, r4
 80a13b8:	47a8      	blx	r5
}
 80a13ba:	b003      	add	sp, #12
 80a13bc:	bd30      	pop	{r4, r5, pc}

080a13be <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
 80a13be:	b410      	push	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a13c0:	6803      	ldr	r3, [r0, #0]
 80a13c2:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a13c4:	f247 5330 	movw	r3, #30000	; 0x7530
 80a13c8:	46a4      	mov	ip, r4
}
 80a13ca:	bc10      	pop	{r4}
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a13cc:	4760      	bx	ip

080a13ce <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a13ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a13d0:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
 80a13d2:	6803      	ldr	r3, [r0, #0]
{
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a13d4:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
 80a13d8:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80a13da:	4621      	mov	r1, r4
 80a13dc:	4613      	mov	r3, r2
 80a13de:	2201      	movs	r2, #1
 80a13e0:	47a8      	blx	r5
}
 80a13e2:	b003      	add	sp, #12
 80a13e4:	bd30      	pop	{r4, r5, pc}

080a13e6 <_ZN9TCPClient5flushEv>:
  d_->offset = 0;
  d_->total = 0;
}

void TCPClient::flush()
{
 80a13e6:	4770      	bx	lr

080a13e8 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 80a13e8:	4770      	bx	lr

080a13ea <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
 80a13ea:	2000      	movs	r0, #0
 80a13ec:	4770      	bx	lr

080a13ee <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 80a13ee:	b510      	push	{r4, lr}
 80a13f0:	4604      	mov	r4, r0
 80a13f2:	2114      	movs	r1, #20
 80a13f4:	f000 fb3f 	bl	80a1a76 <_ZdlPvj>
 80a13f8:	4620      	mov	r0, r4
 80a13fa:	bd10      	pop	{r4, pc}

080a13fc <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 80a13fc:	f7fe be4f 	b.w	80a009e <_ZdlPv>

080a1400 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.29>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
 80a1400:	b510      	push	{r4, lr}
 80a1402:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
 80a1404:	6803      	ldr	r3, [r0, #0]
 80a1406:	689b      	ldr	r3, [r3, #8]
 80a1408:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a140a:	68a3      	ldr	r3, [r4, #8]
 80a140c:	3b01      	subs	r3, #1
 80a140e:	60a3      	str	r3, [r4, #8]
 80a1410:	b92b      	cbnz	r3, 80a141e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.29+0x1e>
            _M_destroy();
 80a1412:	6823      	ldr	r3, [r4, #0]
 80a1414:	4620      	mov	r0, r4
        }
    }
 80a1416:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
 80a141a:	68db      	ldr	r3, [r3, #12]
 80a141c:	4718      	bx	r3
 80a141e:	bd10      	pop	{r4, pc}

080a1420 <_ZN9TCPClient8remoteIPEv>:
{
   return (status()!=0);
}

IPAddress TCPClient::remoteIP()
{
 80a1420:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a1422:	4604      	mov	r4, r0
 80a1424:	4606      	mov	r6, r0
 80a1426:	694d      	ldr	r5, [r1, #20]
 80a1428:	4b04      	ldr	r3, [pc, #16]	; (80a143c <_ZN9TCPClient8remoteIPEv+0x1c>)
 80a142a:	358c      	adds	r5, #140	; 0x8c
 80a142c:	f844 3b04 	str.w	r3, [r4], #4
 80a1430:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a1432:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a1434:	682b      	ldr	r3, [r5, #0]
    return d_->remoteIP;
}
 80a1436:	4630      	mov	r0, r6
 80a1438:	7023      	strb	r3, [r4, #0]
 80a143a:	bd70      	pop	{r4, r5, r6, pc}
 80a143c:	080a21d0 	.word	0x080a21d0

080a1440 <_ZN9TCPClient4peekEv>:
        }
        return read;
}

int TCPClient::peek()
{
 80a1440:	b510      	push	{r4, lr}
 80a1442:	6943      	ldr	r3, [r0, #20]
 80a1444:	4604      	mov	r4, r0
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a1446:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a144a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a144e:	429a      	cmp	r2, r3
 80a1450:	d005      	beq.n	80a145e <_ZN9TCPClient4peekEv+0x1e>
 80a1452:	6962      	ldr	r2, [r4, #20]
 80a1454:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a1458:	4413      	add	r3, r2
 80a145a:	7918      	ldrb	r0, [r3, #4]
 80a145c:	bd10      	pop	{r4, pc}
 80a145e:	6803      	ldr	r3, [r0, #0]
 80a1460:	691b      	ldr	r3, [r3, #16]
 80a1462:	4798      	blx	r3
 80a1464:	2800      	cmp	r0, #0
 80a1466:	d1f4      	bne.n	80a1452 <_ZN9TCPClient4peekEv+0x12>
 80a1468:	f04f 30ff 	mov.w	r0, #4294967295
}
 80a146c:	bd10      	pop	{r4, pc}

080a146e <_ZN9TCPClient4readEv>:
    avail = bufferCount();
    return avail;
}

int TCPClient::read()
{
 80a146e:	b510      	push	{r4, lr}
 80a1470:	6943      	ldr	r3, [r0, #20]
 80a1472:	4604      	mov	r4, r0
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a1474:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a1478:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a147c:	429a      	cmp	r2, r3
 80a147e:	d008      	beq.n	80a1492 <_ZN9TCPClient4readEv+0x24>
 80a1480:	6962      	ldr	r2, [r4, #20]
 80a1482:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a1486:	1c59      	adds	r1, r3, #1
 80a1488:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
 80a148c:	4413      	add	r3, r2
 80a148e:	7918      	ldrb	r0, [r3, #4]
 80a1490:	bd10      	pop	{r4, pc}
 80a1492:	6803      	ldr	r3, [r0, #0]
 80a1494:	691b      	ldr	r3, [r3, #16]
 80a1496:	4798      	blx	r3
 80a1498:	2800      	cmp	r0, #0
 80a149a:	d1f1      	bne.n	80a1480 <_ZN9TCPClient4readEv+0x12>
 80a149c:	f04f 30ff 	mov.w	r0, #4294967295
}
 80a14a0:	bd10      	pop	{r4, pc}

080a14a2 <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a14a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a14a4:	6943      	ldr	r3, [r0, #20]
 80a14a6:	4617      	mov	r7, r2
        int read = -1;
        if (bufferCount() || available())
 80a14a8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a14ac:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a14b0:	4605      	mov	r5, r0
        int read = -1;
        if (bufferCount() || available())
 80a14b2:	429a      	cmp	r2, r3
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a14b4:	460e      	mov	r6, r1
        int read = -1;
        if (bufferCount() || available())
 80a14b6:	d106      	bne.n	80a14c6 <_ZN9TCPClient4readEPhj+0x24>
 80a14b8:	6803      	ldr	r3, [r0, #0]
 80a14ba:	691b      	ldr	r3, [r3, #16]
 80a14bc:	4798      	blx	r3
 80a14be:	b910      	cbnz	r0, 80a14c6 <_ZN9TCPClient4readEPhj+0x24>
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
 80a14c0:	f04f 34ff 	mov.w	r4, #4294967295
 80a14c4:	e014      	b.n	80a14f0 <_ZN9TCPClient4readEPhj+0x4e>
 80a14c6:	6969      	ldr	r1, [r5, #20]
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a14c8:	4630      	mov	r0, r6
    return ret;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 80a14ca:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 80a14ce:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a14d2:	4419      	add	r1, r3
    return ret;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 80a14d4:	1ae4      	subs	r4, r4, r3
int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 80a14d6:	42bc      	cmp	r4, r7
 80a14d8:	bf28      	it	cs
 80a14da:	463c      	movcs	r4, r7
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a14dc:	3104      	adds	r1, #4
 80a14de:	4622      	mov	r2, r4
 80a14e0:	f000 fc36 	bl	80a1d50 <memcpy>
 80a14e4:	696a      	ldr	r2, [r5, #20]
          d_->offset += read;
 80a14e6:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a14ea:	4423      	add	r3, r4
 80a14ec:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
        }
        return read;
}
 80a14f0:	4620      	mov	r0, r4
 80a14f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a14f4 <_ZN9TCPClient12flush_bufferEv>:
{
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer()
{
 80a14f4:	6942      	ldr	r2, [r0, #20]
  d_->offset = 0;
 80a14f6:	2300      	movs	r3, #0
 80a14f8:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 80a14fc:	6942      	ldr	r2, [r0, #20]
  d_->total = 0;
 80a14fe:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
 80a1502:	4770      	bx	lr

080a1504 <_ZN9TCPClient9availableEv>:
{
  return d_->total - d_->offset;
}

int TCPClient::available()
{
 80a1504:	b538      	push	{r3, r4, r5, lr}
 80a1506:	6942      	ldr	r2, [r0, #20]
 80a1508:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
 80a150a:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a150e:	b11b      	cbz	r3, 80a1518 <_ZN9TCPClient9availableEv+0x14>
 80a1510:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 80a1514:	429a      	cmp	r2, r3
 80a1516:	d00c      	beq.n	80a1532 <_ZN9TCPClient9availableEv+0x2e>
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 80a1518:	6920      	ldr	r0, [r4, #16]
 80a151a:	f7ff fb7b 	bl	80a0c14 <_ZN5spark12NetworkClass4fromEm>
 80a151e:	6803      	ldr	r3, [r0, #0]
 80a1520:	68db      	ldr	r3, [r3, #12]
 80a1522:	4798      	blx	r3
 80a1524:	b318      	cbz	r0, 80a156e <_ZN9TCPClient9availableEv+0x6a>
 80a1526:	6963      	ldr	r3, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a1528:	6818      	ldr	r0, [r3, #0]
 80a152a:	f7ff f979 	bl	80a0820 <socket_handle_valid>
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 80a152e:	b918      	cbnz	r0, 80a1538 <_ZN9TCPClient9availableEv+0x34>
 80a1530:	e01d      	b.n	80a156e <_ZN9TCPClient9availableEv+0x6a>
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
 80a1532:	f7ff ffdf 	bl	80a14f4 <_ZN9TCPClient12flush_bufferEv>
 80a1536:	e7ef      	b.n	80a1518 <_ZN9TCPClient9availableEv+0x14>
 80a1538:	6960      	ldr	r0, [r4, #20]
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
    {
        // Have room
        if ( d_->total < arraySize(d_->buffer))
 80a153a:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
 80a153e:	297f      	cmp	r1, #127	; 0x7f
 80a1540:	d815      	bhi.n	80a156e <_ZN9TCPClient9availableEv+0x6a>
        {
            int ret = socket_receive(d_->sock, d_->buffer + d_->total , arraySize(d_->buffer)-d_->total, 0);
 80a1542:	1d05      	adds	r5, r0, #4
 80a1544:	f1c1 0280 	rsb	r2, r1, #128	; 0x80
 80a1548:	2300      	movs	r3, #0
 80a154a:	4429      	add	r1, r5
 80a154c:	6800      	ldr	r0, [r0, #0]
 80a154e:	f7ff f97f 	bl	80a0850 <socket_receive>
            if (ret > 0)
 80a1552:	2800      	cmp	r0, #0
 80a1554:	dd0b      	ble.n	80a156e <_ZN9TCPClient9availableEv+0x6a>
 80a1556:	6963      	ldr	r3, [r4, #20]
            {
                DEBUG("recv(=%d)",ret);
                if (d_->total == 0) d_->offset = 0;
 80a1558:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a155c:	b90a      	cbnz	r2, 80a1562 <_ZN9TCPClient9availableEv+0x5e>
 80a155e:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80a1562:	6962      	ldr	r2, [r4, #20]
                d_->total += ret;
 80a1564:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a1568:	4418      	add	r0, r3
 80a156a:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
 80a156e:	6962      	ldr	r2, [r4, #20]
            }
        } // Have Space
    } // WiFi.ready() && isOpen(d_->sock)
    avail = bufferCount();
    return avail;
 80a1570:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a1574:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
 80a1578:	1a18      	subs	r0, r3, r0
}
 80a157a:	bd38      	pop	{r3, r4, r5, pc}

080a157c <_ZN9TCPClient4stopEv>:
{
}


void TCPClient::stop()
{
 80a157c:	b538      	push	{r3, r4, r5, lr}
  // This log line pollutes the log too much
  // DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 80a157e:	6943      	ldr	r3, [r0, #20]
{
}


void TCPClient::stop()
{
 80a1580:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a1582:	6818      	ldr	r0, [r3, #0]
 80a1584:	f7ff f94c 	bl	80a0820 <socket_handle_valid>
void TCPClient::stop()
{
  // This log line pollutes the log too much
  // DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 80a1588:	b118      	cbz	r0, 80a1592 <_ZN9TCPClient4stopEv+0x16>
      socket_close(d_->sock);
 80a158a:	6963      	ldr	r3, [r4, #20]
 80a158c:	6818      	ldr	r0, [r3, #0]
 80a158e:	f7ff f967 	bl	80a0860 <socket_close>
 80a1592:	6965      	ldr	r5, [r4, #20]
  d_->sock = socket_handle_invalid();
 80a1594:	f7ff f96c 	bl	80a0870 <socket_handle_invalid>
 80a1598:	6028      	str	r0, [r5, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a159a:	6960      	ldr	r0, [r4, #20]
 80a159c:	2211      	movs	r2, #17
 80a159e:	2100      	movs	r1, #0
 80a15a0:	308c      	adds	r0, #140	; 0x8c
 80a15a2:	f000 fbfb 	bl	80a1d9c <memset>
  d_->remoteIP.clear();
  flush_buffer();
 80a15a6:	4620      	mov	r0, r4
}
 80a15a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  if (isOpen(d_->sock))
      socket_close(d_->sock);
  d_->sock = socket_handle_invalid();
  d_->remoteIP.clear();
  flush_buffer();
 80a15ac:	f7ff bfa2 	b.w	80a14f4 <_ZN9TCPClient12flush_bufferEv>

080a15b0 <_ZN9TCPClient7connectE9IPAddresstm>:
    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a15b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a15b4:	461f      	mov	r7, r3
    stop();
 80a15b6:	6803      	ldr	r3, [r0, #0]
    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a15b8:	b08a      	sub	sp, #40	; 0x28
    stop();
 80a15ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a15bc:	4606      	mov	r6, r0
 80a15be:	460c      	mov	r4, r1
 80a15c0:	4615      	mov	r5, r2
    stop();
 80a15c2:	4798      	blx	r3
        int connected = 0;
        if(Network.from(nif).ready())
 80a15c4:	4638      	mov	r0, r7
 80a15c6:	f7ff fb25 	bl	80a0c14 <_ZN5spark12NetworkClass4fromEm>
 80a15ca:	6803      	ldr	r3, [r0, #0]
 80a15cc:	68db      	ldr	r3, [r3, #12]
 80a15ce:	4798      	blx	r3
 80a15d0:	2800      	cmp	r0, #0
 80a15d2:	d056      	beq.n	80a1682 <_ZN9TCPClient7connectE9IPAddresstm+0xd2>
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a15d4:	9700      	str	r7, [sp, #0]
 80a15d6:	462b      	mov	r3, r5
 80a15d8:	2206      	movs	r2, #6
 80a15da:	2101      	movs	r1, #1
 80a15dc:	2002      	movs	r0, #2
 80a15de:	f8d6 8014 	ldr.w	r8, [r6, #20]
 80a15e2:	f7ff f925 	bl	80a0830 <socket_create>
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a15e6:	2320      	movs	r3, #32
    stop();
        int connected = 0;
        if(Network.from(nif).ready())
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a15e8:	f8c8 0000 	str.w	r0, [r8]
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a15ec:	2700      	movs	r7, #0
 80a15ee:	9302      	str	r3, [sp, #8]
 80a15f0:	6973      	ldr	r3, [r6, #20]
 80a15f2:	9703      	str	r7, [sp, #12]
 80a15f4:	681b      	ldr	r3, [r3, #0]
 80a15f6:	2001      	movs	r0, #1
 80a15f8:	9301      	str	r3, [sp, #4]
 80a15fa:	4b23      	ldr	r3, [pc, #140]	; (80a1688 <_ZN9TCPClient7connectE9IPAddresstm+0xd8>)
 80a15fc:	aa02      	add	r2, sp, #8
 80a15fe:	9300      	str	r3, [sp, #0]
 80a1600:	4922      	ldr	r1, [pc, #136]	; (80a168c <_ZN9TCPClient7connectE9IPAddresstm+0xdc>)
 80a1602:	463b      	mov	r3, r7
 80a1604:	f7ff fa16 	bl	80a0a34 <log_message>

          if (socket_handle_valid(d_->sock))
 80a1608:	6973      	ldr	r3, [r6, #20]
 80a160a:	6818      	ldr	r0, [r3, #0]
 80a160c:	f7ff f908 	bl	80a0820 <socket_handle_valid>
 80a1610:	2800      	cmp	r0, #0
 80a1612:	d036      	beq.n	80a1682 <_ZN9TCPClient7connectE9IPAddresstm+0xd2>
          {
            flush_buffer();
 80a1614:	4630      	mov	r0, r6
 80a1616:	f7ff ff6d 	bl	80a14f4 <_ZN9TCPClient12flush_bufferEv>

            tSocketAddr.sa_family = AF_INET;
 80a161a:	2302      	movs	r3, #2
 80a161c:	f8ad 3008 	strh.w	r3, [sp, #8]

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a1620:	0a2b      	lsrs	r3, r5, #8
 80a1622:	f88d 300a 	strb.w	r3, [sp, #10]
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a1626:	79e3      	ldrb	r3, [r4, #7]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a1628:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a162c:	f88d 300c 	strb.w	r3, [sp, #12]
            tSocketAddr.sa_data[3] = ip[1];
 80a1630:	79a3      	ldrb	r3, [r4, #6]
            flush_buffer();

            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);
 80a1632:	f88d 500b 	strb.w	r5, [sp, #11]

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
            tSocketAddr.sa_data[3] = ip[1];
 80a1636:	f88d 300d 	strb.w	r3, [sp, #13]
            tSocketAddr.sa_data[4] = ip[2];
 80a163a:	7963      	ldrb	r3, [r4, #5]
 80a163c:	f88d 300e 	strb.w	r3, [sp, #14]
            tSocketAddr.sa_data[5] = ip[3];
 80a1640:	f814 3f04 	ldrb.w	r3, [r4, #4]!
 80a1644:	f88d 300f 	strb.w	r3, [sp, #15]


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a1648:	f7ff f89a 	bl	80a0780 <HAL_NET_SetNetWatchDog>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a164c:	6973      	ldr	r3, [r6, #20]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a164e:	4605      	mov	r5, r0
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a1650:	2210      	movs	r2, #16
 80a1652:	a902      	add	r1, sp, #8
 80a1654:	6818      	ldr	r0, [r3, #0]
 80a1656:	f7ff f8f3 	bl	80a0840 <socket_connect>
 80a165a:	4680      	mov	r8, r0
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
 80a165c:	4628      	mov	r0, r5
 80a165e:	f7ff f88f 	bl	80a0780 <HAL_NET_SetNetWatchDog>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a1662:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a1664:	6975      	ldr	r5, [r6, #20]
 80a1666:	358c      	adds	r5, #140	; 0x8c
 80a1668:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a166a:	6823      	ldr	r3, [r4, #0]
 80a166c:	702b      	strb	r3, [r5, #0]
            d_->remoteIP = ip;
            if(!connected)
 80a166e:	f1b8 0f00 	cmp.w	r8, #0
 80a1672:	d005      	beq.n	80a1680 <_ZN9TCPClient7connectE9IPAddresstm+0xd0>
            {
                stop();
 80a1674:	6833      	ldr	r3, [r6, #0]
 80a1676:	4630      	mov	r0, r6
 80a1678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a167a:	4798      	blx	r3
 80a167c:	4638      	mov	r0, r7
 80a167e:	e000      	b.n	80a1682 <_ZN9TCPClient7connectE9IPAddresstm+0xd2>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
            d_->remoteIP = ip;
            if(!connected)
 80a1680:	2001      	movs	r0, #1
                stop();
            }
          }
        }
        return connected;
}
 80a1682:	b00a      	add	sp, #40	; 0x28
 80a1684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a1688:	080a237f 	.word	0x080a237f
 80a168c:	080a2378 	.word	0x080a2378

080a1690 <_ZN9TCPClient6statusEv>:
  }
  return rv;
}

uint8_t TCPClient::status()
{
 80a1690:	b510      	push	{r4, lr}
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a1692:	6943      	ldr	r3, [r0, #20]
  }
  return rv;
}

uint8_t TCPClient::status()
{
 80a1694:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a1696:	6818      	ldr	r0, [r3, #0]
 80a1698:	f7ff f8c2 	bl	80a0820 <socket_handle_valid>
  return rv;
}

uint8_t TCPClient::status()
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a169c:	b908      	cbnz	r0, 80a16a2 <_ZN9TCPClient6statusEv+0x12>
 80a169e:	2000      	movs	r0, #0
 80a16a0:	bd10      	pop	{r4, pc}
 80a16a2:	6920      	ldr	r0, [r4, #16]
 80a16a4:	f7ff fab6 	bl	80a0c14 <_ZN5spark12NetworkClass4fromEm>
 80a16a8:	6803      	ldr	r3, [r0, #0]
 80a16aa:	68db      	ldr	r3, [r3, #12]
 80a16ac:	4798      	blx	r3
 80a16ae:	2800      	cmp	r0, #0
 80a16b0:	d0f5      	beq.n	80a169e <_ZN9TCPClient6statusEv+0xe>
 80a16b2:	6963      	ldr	r3, [r4, #20]
 80a16b4:	6818      	ldr	r0, [r3, #0]
 80a16b6:	f7ff f8ab 	bl	80a0810 <socket_active_status>
 80a16ba:	fab0 f080 	clz	r0, r0
 80a16be:	0940      	lsrs	r0, r0, #5
}
 80a16c0:	bd10      	pop	{r4, pc}

080a16c2 <_ZN9TCPClient5writeEPKhjm>:
{
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout)
{
 80a16c2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
 80a16c6:	2500      	movs	r5, #0
 80a16c8:	6045      	str	r5, [r0, #4]
 80a16ca:	4604      	mov	r4, r0
 80a16cc:	460e      	mov	r6, r1
 80a16ce:	4617      	mov	r7, r2
 80a16d0:	4698      	mov	r8, r3
    clearWriteError();
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a16d2:	f7ff ffdd 	bl	80a1690 <_ZN9TCPClient6statusEv>
 80a16d6:	b160      	cbz	r0, 80a16f2 <_ZN9TCPClient5writeEPKhjm+0x30>
 80a16d8:	6960      	ldr	r0, [r4, #20]
 80a16da:	9501      	str	r5, [sp, #4]
 80a16dc:	f8cd 8000 	str.w	r8, [sp]
 80a16e0:	462b      	mov	r3, r5
 80a16e2:	463a      	mov	r2, r7
 80a16e4:	4631      	mov	r1, r6
 80a16e6:	6800      	ldr	r0, [r0, #0]
 80a16e8:	f7ff f8ca 	bl	80a0880 <socket_send_ex>
    if (ret < 0) {
 80a16ec:	2800      	cmp	r0, #0
 80a16ee:	da03      	bge.n	80a16f8 <_ZN9TCPClient5writeEPKhjm+0x36>
 80a16f0:	e001      	b.n	80a16f6 <_ZN9TCPClient5writeEPKhjm+0x34>
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout)
{
    clearWriteError();
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a16f2:	f04f 30ff 	mov.w	r0, #4294967295
 80a16f6:	6060      	str	r0, [r4, #4]

    /*
     * FIXME: We should not be returning negative numbers here
     */
    return ret;
}
 80a16f8:	b002      	add	sp, #8
 80a16fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a16fe <_ZN9TCPClient9connectedEv>:
  d_->remoteIP.clear();
  flush_buffer();
}

uint8_t TCPClient::connected()
{
 80a16fe:	b538      	push	{r3, r4, r5, lr}
 80a1700:	4604      	mov	r4, r0
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 80a1702:	f7ff ffc5 	bl	80a1690 <_ZN9TCPClient6statusEv>
 80a1706:	bb00      	cbnz	r0, 80a174a <_ZN9TCPClient9connectedEv+0x4c>
 80a1708:	6963      	ldr	r3, [r4, #20]
 80a170a:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 80a170e:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a1712:	4291      	cmp	r1, r2
 80a1714:	d119      	bne.n	80a174a <_ZN9TCPClient9connectedEv+0x4c>

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a1716:	6818      	ldr	r0, [r3, #0]
 80a1718:	f7ff f882 	bl	80a0820 <socket_handle_valid>
uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a171c:	b128      	cbz	r0, 80a172a <_ZN9TCPClient9connectedEv+0x2c>
 80a171e:	6963      	ldr	r3, [r4, #20]
 80a1720:	6818      	ldr	r0, [r3, #0]
 80a1722:	f7ff f875 	bl	80a0810 <socket_active_status>
 80a1726:	2801      	cmp	r0, #1
 80a1728:	d001      	beq.n	80a172e <_ZN9TCPClient9connectedEv+0x30>
}

uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 80a172a:	2500      	movs	r5, #0
 80a172c:	e00e      	b.n	80a174c <_ZN9TCPClient9connectedEv+0x4e>
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
    {
      rv = available(); // Try CC3000
 80a172e:	6823      	ldr	r3, [r4, #0]
 80a1730:	4620      	mov	r0, r4
 80a1732:	691b      	ldr	r3, [r3, #16]
 80a1734:	4798      	blx	r3
 80a1736:	2800      	cmp	r0, #0
 80a1738:	bf14      	ite	ne
 80a173a:	2501      	movne	r5, #1
 80a173c:	2500      	moveq	r5, #0
      if (!rv) {        // No more Data and CLOSE_WAIT
 80a173e:	d105      	bne.n	80a174c <_ZN9TCPClient9connectedEv+0x4e>
          DEBUG("calling .stop(), no more data, in CLOSE_WAIT");
          stop();       // Close our side
 80a1740:	6823      	ldr	r3, [r4, #0]
 80a1742:	4620      	mov	r0, r4
 80a1744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1746:	4798      	blx	r3
 80a1748:	e000      	b.n	80a174c <_ZN9TCPClient9connectedEv+0x4e>
 80a174a:	2501      	movs	r5, #1
      }
  }
  return rv;
}
 80a174c:	4628      	mov	r0, r5
 80a174e:	bd38      	pop	{r3, r4, r5, pc}

080a1750 <_ZN9TCPClientcvbEv>:
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
}

TCPClient::operator bool()
{
 80a1750:	b508      	push	{r3, lr}
   return (status()!=0);
 80a1752:	f7ff ff9d 	bl	80a1690 <_ZN9TCPClient6statusEv>
}
 80a1756:	3000      	adds	r0, #0
 80a1758:	bf18      	it	ne
 80a175a:	2001      	movne	r0, #1
 80a175c:	bd08      	pop	{r3, pc}

080a175e <_ZN9TCPClient4DataC1Em>:
IPAddress TCPClient::remoteIP()
{
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
 80a175e:	b510      	push	{r4, lr}
 80a1760:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
 80a1762:	2300      	movs	r3, #0
 80a1764:	6001      	str	r1, [r0, #0]
 80a1766:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 80a176a:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
 80a176e:	3088      	adds	r0, #136	; 0x88
 80a1770:	f7ff fc1c 	bl	80a0fac <_ZN9IPAddressC1Ev>
}
 80a1774:	4620      	mov	r0, r4
 80a1776:	bd10      	pop	{r4, pc}

080a1778 <_ZN9TCPClientC1Em>:
 80a1778:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 80a177c:	b570      	push	{r4, r5, r6, lr}
 80a177e:	6082      	str	r2, [r0, #8]
        d_(std::make_shared<Data>(sock))
 80a1780:	4a14      	ldr	r2, [pc, #80]	; (80a17d4 <_ZN9TCPClientC1Em+0x5c>)
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1782:	2300      	movs	r3, #0
 80a1784:	6043      	str	r3, [r0, #4]
 80a1786:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
 80a1788:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
 80a178a:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 80a178c:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a178e:	20a0      	movs	r0, #160	; 0xa0
 80a1790:	460e      	mov	r6, r1
 80a1792:	f7fe fc82 	bl	80a009a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80a1796:	4605      	mov	r5, r0
 80a1798:	b110      	cbz	r0, 80a17a0 <_ZN9TCPClientC1Em+0x28>
 80a179a:	4631      	mov	r1, r6
 80a179c:	f7ff ffdf 	bl	80a175e <_ZN9TCPClient4DataC1Em>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a17a0:	2014      	movs	r0, #20
 80a17a2:	f7fe fc7a 	bl	80a009a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 80a17a6:	4603      	mov	r3, r0
 80a17a8:	b128      	cbz	r0, 80a17b6 <_ZN9TCPClientC1Em+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a17aa:	2201      	movs	r2, #1
 80a17ac:	6042      	str	r2, [r0, #4]
 80a17ae:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 80a17b0:	4a09      	ldr	r2, [pc, #36]	; (80a17d8 <_ZN9TCPClientC1Em+0x60>)
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
 80a17b2:	6105      	str	r5, [r0, #16]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 80a17b4:	6002      	str	r2, [r0, #0]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a17b6:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
 80a17b8:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a17ba:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a17bc:	b128      	cbz	r0, 80a17ca <_ZN9TCPClientC1Em+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a17be:	6843      	ldr	r3, [r0, #4]
 80a17c0:	3b01      	subs	r3, #1
 80a17c2:	6043      	str	r3, [r0, #4]
 80a17c4:	b90b      	cbnz	r3, 80a17ca <_ZN9TCPClientC1Em+0x52>
 80a17c6:	f7ff fe1b 	bl	80a1400 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.29>
        d_(std::make_shared<Data>(sock))
{
  flush_buffer();
 80a17ca:	4620      	mov	r0, r4
 80a17cc:	f7ff fe92 	bl	80a14f4 <_ZN9TCPClient12flush_bufferEv>
}
 80a17d0:	4620      	mov	r0, r4
 80a17d2:	bd70      	pop	{r4, r5, r6, pc}
 80a17d4:	080a2334 	.word	0x080a2334
 80a17d8:	080a2318 	.word	0x080a2318

080a17dc <_ZN9TCPClientC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
}

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
 80a17dc:	b510      	push	{r4, lr}
 80a17de:	4604      	mov	r4, r0
 80a17e0:	f7ff f846 	bl	80a0870 <socket_handle_invalid>
 80a17e4:	4601      	mov	r1, r0
 80a17e6:	4620      	mov	r0, r4
 80a17e8:	f7ff ffc6 	bl	80a1778 <_ZN9TCPClientC1Em>
{
}
 80a17ec:	4620      	mov	r0, r4
 80a17ee:	bd10      	pop	{r4, pc}

080a17f0 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
 80a17f0:	b510      	push	{r4, lr}
 80a17f2:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
 80a17f4:	6800      	ldr	r0, [r0, #0]
 80a17f6:	f7ff f813 	bl	80a0820 <socket_handle_valid>
 80a17fa:	b110      	cbz	r0, 80a1802 <_ZN9TCPClient4DataD1Ev+0x12>
        socket_close(sock);
 80a17fc:	6820      	ldr	r0, [r4, #0]
 80a17fe:	f7ff f82f 	bl	80a0860 <socket_close>
    }
}
 80a1802:	4620      	mov	r0, r4
 80a1804:	bd10      	pop	{r4, pc}

080a1806 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
 80a1806:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
 80a1808:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
 80a180a:	4620      	mov	r0, r4
 80a180c:	f7ff fff0 	bl	80a17f0 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
 80a1810:	b124      	cbz	r4, 80a181c <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 80a1812:	4620      	mov	r0, r4
 80a1814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a1818:	f7fe bc41 	b.w	80a009e <_ZdlPv>
 80a181c:	bd10      	pop	{r4, pc}
	...

080a1820 <_ZN9TCPClient7connectEPKctm>:
  flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a1820:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a1824:	461f      	mov	r7, r3
    stop();
 80a1826:	6803      	ldr	r3, [r0, #0]
  flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a1828:	b08f      	sub	sp, #60	; 0x3c
    stop();
 80a182a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a182c:	4606      	mov	r6, r0
 80a182e:	460d      	mov	r5, r1
 80a1830:	4690      	mov	r8, r2
    stop();
 80a1832:	4798      	blx	r3
    if (Network.ready())
 80a1834:	4813      	ldr	r0, [pc, #76]	; (80a1884 <_ZN9TCPClient7connectEPKctm+0x64>)
 80a1836:	f7ff f9a0 	bl	80a0b7a <_ZN5spark12NetworkClass5readyEv>
 80a183a:	b300      	cbz	r0, 80a187e <_ZN9TCPClient7connectEPKctm+0x5e>
    {
        IPAddress ip_addr;
 80a183c:	a802      	add	r0, sp, #8
 80a183e:	f7ff fbb5 	bl	80a0fac <_ZN9IPAddressC1Ev>
        if (inet_gethostbyname(host, strlen(host), ip_addr, nif, NULL) == 0) {
 80a1842:	4628      	mov	r0, r5
 80a1844:	f000 fae2 	bl	80a1e0c <strlen>
 80a1848:	2400      	movs	r4, #0
 80a184a:	b281      	uxth	r1, r0
 80a184c:	9400      	str	r4, [sp, #0]
 80a184e:	463b      	mov	r3, r7
 80a1850:	aa03      	add	r2, sp, #12
 80a1852:	4628      	mov	r0, r5
 80a1854:	f7fe ff9c 	bl	80a0790 <inet_gethostbyname>
 80a1858:	b980      	cbnz	r0, 80a187c <_ZN9TCPClient7connectEPKctm+0x5c>
            return connect(ip_addr, port, nif);
 80a185a:	6833      	ldr	r3, [r6, #0]
 80a185c:	ad09      	add	r5, sp, #36	; 0x24
 80a185e:	f8d3 9020 	ldr.w	r9, [r3, #32]
 80a1862:	4b09      	ldr	r3, [pc, #36]	; (80a1888 <_ZN9TCPClient7connectEPKctm+0x68>)
 80a1864:	ac03      	add	r4, sp, #12
 80a1866:	9308      	str	r3, [sp, #32]
 80a1868:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a186a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a186c:	6823      	ldr	r3, [r4, #0]
 80a186e:	4642      	mov	r2, r8
 80a1870:	702b      	strb	r3, [r5, #0]
 80a1872:	a908      	add	r1, sp, #32
 80a1874:	463b      	mov	r3, r7
 80a1876:	4630      	mov	r0, r6
 80a1878:	47c8      	blx	r9
 80a187a:	e000      	b.n	80a187e <_ZN9TCPClient7connectEPKctm+0x5e>
        } else {
            DEBUG("unable to get IP for hostname");
        }
    }

    return 0; // error, could not connect
 80a187c:	4620      	mov	r0, r4
}
 80a187e:	b00f      	add	sp, #60	; 0x3c
 80a1880:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a1884:	20000168 	.word	0x20000168
 80a1888:	080a21d0 	.word	0x080a21d0

080a188c <ltoa>:
{
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
 80a188c:	1e93      	subs	r3, r2, #2
            base = 10;                    /* can only use 0-9, A-Z        */
 80a188e:	2b23      	cmp	r3, #35	; 0x23



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
 80a1890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1894:	4615      	mov	r5, r2
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
 80a1896:	bf34      	ite	cc
 80a1898:	4615      	movcc	r5, r2
 80a189a:	250a      	movcs	r5, #10



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
 80a189c:	b08c      	sub	sp, #48	; 0x30
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
 80a189e:	2300      	movs	r3, #0

      if (10 == base && N < 0L)
 80a18a0:	2d0a      	cmp	r5, #10



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
 80a18a2:	460c      	mov	r4, r1
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
 80a18a4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c

      if (10 == base && N < 0L)
 80a18a8:	d107      	bne.n	80a18ba <ltoa+0x2e>
 80a18aa:	4298      	cmp	r0, r3
 80a18ac:	da05      	bge.n	80a18ba <ltoa+0x2e>
      {
            *head++ = '-';
 80a18ae:	232d      	movs	r3, #45	; 0x2d
 80a18b0:	f101 0801 	add.w	r8, r1, #1
 80a18b4:	700b      	strb	r3, [r1, #0]
            uarg    = -N;
 80a18b6:	4240      	negs	r0, r0
 80a18b8:	e001      	b.n	80a18be <ltoa+0x32>
      }
      else  uarg = N;

      if (uarg)
 80a18ba:	b1a8      	cbz	r0, 80a18e8 <ltoa+0x5c>
 80a18bc:	46a0      	mov	r8, r4
 80a18be:	f10d 062b 	add.w	r6, sp, #43	; 0x2b
 80a18c2:	2701      	movs	r7, #1
      {
            for (i = 1; uarg; ++i)
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
 80a18c4:	462a      	mov	r2, r5
 80a18c6:	4601      	mov	r1, r0
 80a18c8:	a801      	add	r0, sp, #4
 80a18ca:	f000 fa2d 	bl	80a1d28 <ldiv>
 80a18ce:	9a02      	ldr	r2, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
 80a18d0:	9801      	ldr	r0, [sp, #4]
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
 80a18d2:	2a09      	cmp	r2, #9
 80a18d4:	bfcc      	ite	gt
 80a18d6:	2337      	movgt	r3, #55	; 0x37
 80a18d8:	2330      	movle	r3, #48	; 0x30
 80a18da:	4413      	add	r3, r2
 80a18dc:	f806 3901 	strb.w	r3, [r6], #-1
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
 80a18e0:	3701      	adds	r7, #1
 80a18e2:	2800      	cmp	r0, #0
 80a18e4:	d1ee      	bne.n	80a18c4 <ltoa+0x38>
 80a18e6:	e006      	b.n	80a18f6 <ltoa+0x6a>
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
            }
      }
      else  *tail-- = '0';
 80a18e8:	46a0      	mov	r8, r4
 80a18ea:	2330      	movs	r3, #48	; 0x30
 80a18ec:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 80a18f0:	f10d 062a 	add.w	r6, sp, #42	; 0x2a


//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
      int i = 2;
 80a18f4:	2702      	movs	r7, #2
                  uarg    = r.quot;
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
 80a18f6:	463a      	mov	r2, r7
 80a18f8:	1c71      	adds	r1, r6, #1
 80a18fa:	4640      	mov	r0, r8
 80a18fc:	f000 fa28 	bl	80a1d50 <memcpy>
      return str;
}
 80a1900:	4620      	mov	r0, r4
 80a1902:	b00c      	add	sp, #48	; 0x30
 80a1904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a1908 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a1908:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a190c:	4b03      	ldr	r3, [pc, #12]	; (80a191c <_GLOBAL__sub_I_System+0x14>)
 80a190e:	2000      	movs	r0, #0
 80a1910:	7018      	strb	r0, [r3, #0]
 80a1912:	8058      	strh	r0, [r3, #2]
 80a1914:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a1916:	f7ff b8ed 	b.w	80a0af4 <set_system_mode>
 80a191a:	bf00      	nop
 80a191c:	200005f4 	.word	0x200005f4

080a1920 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a1920:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a1922:	4d0b      	ldr	r5, [pc, #44]	; (80a1950 <_Z19__fetch_global_Wirev+0x30>)
 80a1924:	6829      	ldr	r1, [r5, #0]
 80a1926:	f011 0401 	ands.w	r4, r1, #1
 80a192a:	d10f      	bne.n	80a194c <_Z19__fetch_global_Wirev+0x2c>
 80a192c:	4628      	mov	r0, r5
 80a192e:	f7fe fbc3 	bl	80a00b8 <__cxa_guard_acquire>
 80a1932:	b158      	cbz	r0, 80a194c <_Z19__fetch_global_Wirev+0x2c>
 80a1934:	4621      	mov	r1, r4
 80a1936:	4807      	ldr	r0, [pc, #28]	; (80a1954 <_Z19__fetch_global_Wirev+0x34>)
 80a1938:	f7ff fa2e 	bl	80a0d98 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a193c:	4628      	mov	r0, r5
 80a193e:	f7fe fbc0 	bl	80a00c2 <__cxa_guard_release>
 80a1942:	4a05      	ldr	r2, [pc, #20]	; (80a1958 <_Z19__fetch_global_Wirev+0x38>)
 80a1944:	4905      	ldr	r1, [pc, #20]	; (80a195c <_Z19__fetch_global_Wirev+0x3c>)
 80a1946:	4803      	ldr	r0, [pc, #12]	; (80a1954 <_Z19__fetch_global_Wirev+0x34>)
 80a1948:	f000 f890 	bl	80a1a6c <__aeabi_atexit>
	return wire;
}
 80a194c:	4801      	ldr	r0, [pc, #4]	; (80a1954 <_Z19__fetch_global_Wirev+0x34>)
 80a194e:	bd38      	pop	{r3, r4, r5, pc}
 80a1950:	200005fc 	.word	0x200005fc
 80a1954:	20000600 	.word	0x20000600
 80a1958:	20000068 	.word	0x20000068
 80a195c:	080a0d3f 	.word	0x080a0d3f

080a1960 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a1960:	b513      	push	{r0, r1, r4, lr}
 80a1962:	4c08      	ldr	r4, [pc, #32]	; (80a1984 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a1964:	2300      	movs	r3, #0
 80a1966:	461a      	mov	r2, r3
 80a1968:	4619      	mov	r1, r3
 80a196a:	9300      	str	r3, [sp, #0]
 80a196c:	4620      	mov	r0, r4
 80a196e:	f7ff fb53 	bl	80a1018 <_ZN9IPAddressC1Ehhhh>
 80a1972:	4620      	mov	r0, r4
 80a1974:	4a04      	ldr	r2, [pc, #16]	; (80a1988 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a1976:	4905      	ldr	r1, [pc, #20]	; (80a198c <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a1978:	b002      	add	sp, #8
 80a197a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a197e:	f000 b875 	b.w	80a1a6c <__aeabi_atexit>
 80a1982:	bf00      	nop
 80a1984:	20000614 	.word	0x20000614
 80a1988:	20000068 	.word	0x20000068
 80a198c:	080a0f69 	.word	0x080a0f69

080a1990 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1990:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a1992:	4c0c      	ldr	r4, [pc, #48]	; (80a19c4 <_GLOBAL__sub_I_SPI+0x34>)
 80a1994:	4e0c      	ldr	r6, [pc, #48]	; (80a19c8 <_GLOBAL__sub_I_SPI+0x38>)
 80a1996:	4d0d      	ldr	r5, [pc, #52]	; (80a19cc <_GLOBAL__sub_I_SPI+0x3c>)
 80a1998:	2100      	movs	r1, #0
 80a199a:	4620      	mov	r0, r4
 80a199c:	f7ff f9b8 	bl	80a0d10 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a19a0:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a19a2:	4c0b      	ldr	r4, [pc, #44]	; (80a19d0 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a19a4:	4632      	mov	r2, r6
 80a19a6:	4629      	mov	r1, r5
 80a19a8:	f000 f860 	bl	80a1a6c <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a19ac:	2101      	movs	r1, #1
 80a19ae:	4620      	mov	r0, r4
 80a19b0:	f7ff f9ae 	bl	80a0d10 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a19b4:	4632      	mov	r2, r6
 80a19b6:	4629      	mov	r1, r5
 80a19b8:	4620      	mov	r0, r4
 80a19ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a19be:	f000 b855 	b.w	80a1a6c <__aeabi_atexit>
 80a19c2:	bf00      	nop
 80a19c4:	20000630 	.word	0x20000630
 80a19c8:	20000068 	.word	0x20000068
 80a19cc:	080a0d01 	.word	0x080a0d01
 80a19d0:	20000640 	.word	0x20000640

080a19d4 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a19d4:	b510      	push	{r4, lr}
 80a19d6:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a19d8:	480f      	ldr	r0, [pc, #60]	; (80a1a18 <pinAvailable+0x44>)
 80a19da:	f7ff f9ad 	bl	80a0d38 <_ZN8SPIClass9isEnabledEv>
 80a19de:	b128      	cbz	r0, 80a19ec <pinAvailable+0x18>
 80a19e0:	f1a4 030d 	sub.w	r3, r4, #13
 80a19e4:	2b02      	cmp	r3, #2
 80a19e6:	d801      	bhi.n	80a19ec <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a19e8:	2000      	movs	r0, #0
 80a19ea:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a19ec:	f7ff ff98 	bl	80a1920 <_Z19__fetch_global_Wirev>
 80a19f0:	f7ff f9e4 	bl	80a0dbc <_ZN7TwoWire9isEnabledEv>
 80a19f4:	b108      	cbz	r0, 80a19fa <pinAvailable+0x26>
 80a19f6:	2c01      	cmp	r4, #1
 80a19f8:	d9f6      	bls.n	80a19e8 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a19fa:	f7ff fcad 	bl	80a1358 <_Z22__fetch_global_Serial1v>
 80a19fe:	f7ff fca7 	bl	80a1350 <_ZN11USARTSerial9isEnabledEv>
 80a1a02:	b118      	cbz	r0, 80a1a0c <pinAvailable+0x38>
 80a1a04:	f1a4 0312 	sub.w	r3, r4, #18
 80a1a08:	2b01      	cmp	r3, #1
 80a1a0a:	d9ed      	bls.n	80a19e8 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a1a0c:	2c17      	cmp	r4, #23
 80a1a0e:	bf8c      	ite	hi
 80a1a10:	2000      	movhi	r0, #0
 80a1a12:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a1a14:	bd10      	pop	{r4, pc}
 80a1a16:	bf00      	nop
 80a1a18:	20000630 	.word	0x20000630

080a1a1c <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a1a1c:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a1a1e:	b538      	push	{r3, r4, r5, lr}
 80a1a20:	4604      	mov	r4, r0
 80a1a22:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a1a24:	d80a      	bhi.n	80a1a3c <pinMode+0x20>
 80a1a26:	29ff      	cmp	r1, #255	; 0xff
 80a1a28:	d008      	beq.n	80a1a3c <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a1a2a:	f7ff ffd3 	bl	80a19d4 <pinAvailable>
 80a1a2e:	b128      	cbz	r0, 80a1a3c <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a1a30:	4629      	mov	r1, r5
 80a1a32:	4620      	mov	r0, r4
}
 80a1a34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a1a38:	f7fe bfe4 	b.w	80a0a04 <HAL_Pin_Mode>
 80a1a3c:	bd38      	pop	{r3, r4, r5, pc}

080a1a3e <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80a1a3e:	b510      	push	{r4, lr}
 80a1a40:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 80a1a42:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80a1a44:	bf9c      	itt	ls
 80a1a46:	340a      	addls	r4, #10
 80a1a48:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a1a4a:	4620      	mov	r0, r4
 80a1a4c:	f7ff ffc2 	bl	80a19d4 <pinAvailable>
 80a1a50:	b150      	cbz	r0, 80a1a68 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80a1a52:	2103      	movs	r1, #3
 80a1a54:	4620      	mov	r0, r4
 80a1a56:	f7fe ffcd 	bl	80a09f4 <HAL_Validate_Pin_Function>
 80a1a5a:	2803      	cmp	r0, #3
 80a1a5c:	d104      	bne.n	80a1a68 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80a1a5e:	4620      	mov	r0, r4
}
 80a1a60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80a1a64:	f7fe bfd6 	b.w	80a0a14 <HAL_ADC_Read>
}
 80a1a68:	2000      	movs	r0, #0
 80a1a6a:	bd10      	pop	{r4, pc}

080a1a6c <__aeabi_atexit>:
 80a1a6c:	460b      	mov	r3, r1
 80a1a6e:	4601      	mov	r1, r0
 80a1a70:	4618      	mov	r0, r3
 80a1a72:	f000 b94b 	b.w	80a1d0c <__cxa_atexit>

080a1a76 <_ZdlPvj>:
 80a1a76:	f7fe bb12 	b.w	80a009e <_ZdlPv>
	...

080a1a7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1a7c:	4b18      	ldr	r3, [pc, #96]	; (80a1ae0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a1a7e:	681a      	ldr	r2, [r3, #0]
 80a1a80:	07d1      	lsls	r1, r2, #31
 80a1a82:	bf5c      	itt	pl
 80a1a84:	2201      	movpl	r2, #1
 80a1a86:	601a      	strpl	r2, [r3, #0]
 80a1a88:	4b16      	ldr	r3, [pc, #88]	; (80a1ae4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a1a8a:	681a      	ldr	r2, [r3, #0]
 80a1a8c:	07d2      	lsls	r2, r2, #31
 80a1a8e:	bf5c      	itt	pl
 80a1a90:	2201      	movpl	r2, #1
 80a1a92:	601a      	strpl	r2, [r3, #0]
 80a1a94:	4b14      	ldr	r3, [pc, #80]	; (80a1ae8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a1a96:	681a      	ldr	r2, [r3, #0]
 80a1a98:	07d0      	lsls	r0, r2, #31
 80a1a9a:	bf5c      	itt	pl
 80a1a9c:	2201      	movpl	r2, #1
 80a1a9e:	601a      	strpl	r2, [r3, #0]
 80a1aa0:	4b12      	ldr	r3, [pc, #72]	; (80a1aec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a1aa2:	681a      	ldr	r2, [r3, #0]
 80a1aa4:	07d1      	lsls	r1, r2, #31
 80a1aa6:	bf5c      	itt	pl
 80a1aa8:	2201      	movpl	r2, #1
 80a1aaa:	601a      	strpl	r2, [r3, #0]
 80a1aac:	4b10      	ldr	r3, [pc, #64]	; (80a1af0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a1aae:	681a      	ldr	r2, [r3, #0]
 80a1ab0:	07d2      	lsls	r2, r2, #31
 80a1ab2:	bf5c      	itt	pl
 80a1ab4:	2201      	movpl	r2, #1
 80a1ab6:	601a      	strpl	r2, [r3, #0]
 80a1ab8:	4b0e      	ldr	r3, [pc, #56]	; (80a1af4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a1aba:	681a      	ldr	r2, [r3, #0]
 80a1abc:	07d0      	lsls	r0, r2, #31
 80a1abe:	bf5c      	itt	pl
 80a1ac0:	2201      	movpl	r2, #1
 80a1ac2:	601a      	strpl	r2, [r3, #0]
 80a1ac4:	4b0c      	ldr	r3, [pc, #48]	; (80a1af8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a1ac6:	681a      	ldr	r2, [r3, #0]
 80a1ac8:	07d1      	lsls	r1, r2, #31
 80a1aca:	bf5c      	itt	pl
 80a1acc:	2201      	movpl	r2, #1
 80a1ace:	601a      	strpl	r2, [r3, #0]
 80a1ad0:	4b0a      	ldr	r3, [pc, #40]	; (80a1afc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a1ad2:	681a      	ldr	r2, [r3, #0]
 80a1ad4:	07d2      	lsls	r2, r2, #31
 80a1ad6:	bf5c      	itt	pl
 80a1ad8:	2201      	movpl	r2, #1
 80a1ada:	601a      	strpl	r2, [r3, #0]
 80a1adc:	4770      	bx	lr
 80a1ade:	bf00      	nop
 80a1ae0:	2000066c 	.word	0x2000066c
 80a1ae4:	20000668 	.word	0x20000668
 80a1ae8:	20000664 	.word	0x20000664
 80a1aec:	20000660 	.word	0x20000660
 80a1af0:	2000065c 	.word	0x2000065c
 80a1af4:	20000658 	.word	0x20000658
 80a1af8:	20000654 	.word	0x20000654
 80a1afc:	20000650 	.word	0x20000650

080a1b00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a1b00:	4b24      	ldr	r3, [pc, #144]	; (80a1b94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a1b02:	681a      	ldr	r2, [r3, #0]
 80a1b04:	07d0      	lsls	r0, r2, #31
 80a1b06:	bf5c      	itt	pl
 80a1b08:	2201      	movpl	r2, #1
 80a1b0a:	601a      	strpl	r2, [r3, #0]
 80a1b0c:	4b22      	ldr	r3, [pc, #136]	; (80a1b98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a1b0e:	681a      	ldr	r2, [r3, #0]
 80a1b10:	07d1      	lsls	r1, r2, #31
 80a1b12:	bf5c      	itt	pl
 80a1b14:	2201      	movpl	r2, #1
 80a1b16:	601a      	strpl	r2, [r3, #0]
 80a1b18:	4b20      	ldr	r3, [pc, #128]	; (80a1b9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a1b1a:	681a      	ldr	r2, [r3, #0]
 80a1b1c:	07d2      	lsls	r2, r2, #31
 80a1b1e:	bf5c      	itt	pl
 80a1b20:	2201      	movpl	r2, #1
 80a1b22:	601a      	strpl	r2, [r3, #0]
 80a1b24:	4b1e      	ldr	r3, [pc, #120]	; (80a1ba0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a1b26:	681a      	ldr	r2, [r3, #0]
 80a1b28:	07d0      	lsls	r0, r2, #31
 80a1b2a:	bf5c      	itt	pl
 80a1b2c:	2201      	movpl	r2, #1
 80a1b2e:	601a      	strpl	r2, [r3, #0]
 80a1b30:	4b1c      	ldr	r3, [pc, #112]	; (80a1ba4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a1b32:	681a      	ldr	r2, [r3, #0]
 80a1b34:	07d1      	lsls	r1, r2, #31
 80a1b36:	bf5c      	itt	pl
 80a1b38:	2201      	movpl	r2, #1
 80a1b3a:	601a      	strpl	r2, [r3, #0]
 80a1b3c:	4b1a      	ldr	r3, [pc, #104]	; (80a1ba8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a1b3e:	681a      	ldr	r2, [r3, #0]
 80a1b40:	07d2      	lsls	r2, r2, #31
 80a1b42:	bf5c      	itt	pl
 80a1b44:	2201      	movpl	r2, #1
 80a1b46:	601a      	strpl	r2, [r3, #0]
 80a1b48:	4b18      	ldr	r3, [pc, #96]	; (80a1bac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a1b4a:	681a      	ldr	r2, [r3, #0]
 80a1b4c:	07d0      	lsls	r0, r2, #31
 80a1b4e:	bf5c      	itt	pl
 80a1b50:	2201      	movpl	r2, #1
 80a1b52:	601a      	strpl	r2, [r3, #0]
 80a1b54:	4b16      	ldr	r3, [pc, #88]	; (80a1bb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a1b56:	681a      	ldr	r2, [r3, #0]
 80a1b58:	07d1      	lsls	r1, r2, #31
 80a1b5a:	bf5c      	itt	pl
 80a1b5c:	2201      	movpl	r2, #1
 80a1b5e:	601a      	strpl	r2, [r3, #0]
 80a1b60:	4b14      	ldr	r3, [pc, #80]	; (80a1bb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a1b62:	681a      	ldr	r2, [r3, #0]
 80a1b64:	07d2      	lsls	r2, r2, #31
 80a1b66:	bf5c      	itt	pl
 80a1b68:	2201      	movpl	r2, #1
 80a1b6a:	601a      	strpl	r2, [r3, #0]
 80a1b6c:	4b12      	ldr	r3, [pc, #72]	; (80a1bb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a1b6e:	681a      	ldr	r2, [r3, #0]
 80a1b70:	07d0      	lsls	r0, r2, #31
 80a1b72:	bf5c      	itt	pl
 80a1b74:	2201      	movpl	r2, #1
 80a1b76:	601a      	strpl	r2, [r3, #0]
 80a1b78:	4b10      	ldr	r3, [pc, #64]	; (80a1bbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a1b7a:	681a      	ldr	r2, [r3, #0]
 80a1b7c:	07d1      	lsls	r1, r2, #31
 80a1b7e:	bf5c      	itt	pl
 80a1b80:	2201      	movpl	r2, #1
 80a1b82:	601a      	strpl	r2, [r3, #0]
 80a1b84:	4b0e      	ldr	r3, [pc, #56]	; (80a1bc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a1b86:	681a      	ldr	r2, [r3, #0]
 80a1b88:	07d2      	lsls	r2, r2, #31
 80a1b8a:	bf5c      	itt	pl
 80a1b8c:	2201      	movpl	r2, #1
 80a1b8e:	601a      	strpl	r2, [r3, #0]
 80a1b90:	4770      	bx	lr
 80a1b92:	bf00      	nop
 80a1b94:	2000069c 	.word	0x2000069c
 80a1b98:	20000698 	.word	0x20000698
 80a1b9c:	20000694 	.word	0x20000694
 80a1ba0:	20000690 	.word	0x20000690
 80a1ba4:	2000068c 	.word	0x2000068c
 80a1ba8:	20000688 	.word	0x20000688
 80a1bac:	20000684 	.word	0x20000684
 80a1bb0:	20000680 	.word	0x20000680
 80a1bb4:	2000067c 	.word	0x2000067c
 80a1bb8:	20000678 	.word	0x20000678
 80a1bbc:	20000674 	.word	0x20000674
 80a1bc0:	20000670 	.word	0x20000670

080a1bc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a1bc4:	4b24      	ldr	r3, [pc, #144]	; (80a1c58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a1bc6:	681a      	ldr	r2, [r3, #0]
 80a1bc8:	07d0      	lsls	r0, r2, #31
 80a1bca:	bf5c      	itt	pl
 80a1bcc:	2201      	movpl	r2, #1
 80a1bce:	601a      	strpl	r2, [r3, #0]
 80a1bd0:	4b22      	ldr	r3, [pc, #136]	; (80a1c5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a1bd2:	681a      	ldr	r2, [r3, #0]
 80a1bd4:	07d1      	lsls	r1, r2, #31
 80a1bd6:	bf5c      	itt	pl
 80a1bd8:	2201      	movpl	r2, #1
 80a1bda:	601a      	strpl	r2, [r3, #0]
 80a1bdc:	4b20      	ldr	r3, [pc, #128]	; (80a1c60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a1bde:	681a      	ldr	r2, [r3, #0]
 80a1be0:	07d2      	lsls	r2, r2, #31
 80a1be2:	bf5c      	itt	pl
 80a1be4:	2201      	movpl	r2, #1
 80a1be6:	601a      	strpl	r2, [r3, #0]
 80a1be8:	4b1e      	ldr	r3, [pc, #120]	; (80a1c64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a1bea:	681a      	ldr	r2, [r3, #0]
 80a1bec:	07d0      	lsls	r0, r2, #31
 80a1bee:	bf5c      	itt	pl
 80a1bf0:	2201      	movpl	r2, #1
 80a1bf2:	601a      	strpl	r2, [r3, #0]
 80a1bf4:	4b1c      	ldr	r3, [pc, #112]	; (80a1c68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a1bf6:	681a      	ldr	r2, [r3, #0]
 80a1bf8:	07d1      	lsls	r1, r2, #31
 80a1bfa:	bf5c      	itt	pl
 80a1bfc:	2201      	movpl	r2, #1
 80a1bfe:	601a      	strpl	r2, [r3, #0]
 80a1c00:	4b1a      	ldr	r3, [pc, #104]	; (80a1c6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a1c02:	681a      	ldr	r2, [r3, #0]
 80a1c04:	07d2      	lsls	r2, r2, #31
 80a1c06:	bf5c      	itt	pl
 80a1c08:	2201      	movpl	r2, #1
 80a1c0a:	601a      	strpl	r2, [r3, #0]
 80a1c0c:	4b18      	ldr	r3, [pc, #96]	; (80a1c70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a1c0e:	681a      	ldr	r2, [r3, #0]
 80a1c10:	07d0      	lsls	r0, r2, #31
 80a1c12:	bf5c      	itt	pl
 80a1c14:	2201      	movpl	r2, #1
 80a1c16:	601a      	strpl	r2, [r3, #0]
 80a1c18:	4b16      	ldr	r3, [pc, #88]	; (80a1c74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a1c1a:	681a      	ldr	r2, [r3, #0]
 80a1c1c:	07d1      	lsls	r1, r2, #31
 80a1c1e:	bf5c      	itt	pl
 80a1c20:	2201      	movpl	r2, #1
 80a1c22:	601a      	strpl	r2, [r3, #0]
 80a1c24:	4b14      	ldr	r3, [pc, #80]	; (80a1c78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a1c26:	681a      	ldr	r2, [r3, #0]
 80a1c28:	07d2      	lsls	r2, r2, #31
 80a1c2a:	bf5c      	itt	pl
 80a1c2c:	2201      	movpl	r2, #1
 80a1c2e:	601a      	strpl	r2, [r3, #0]
 80a1c30:	4b12      	ldr	r3, [pc, #72]	; (80a1c7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a1c32:	681a      	ldr	r2, [r3, #0]
 80a1c34:	07d0      	lsls	r0, r2, #31
 80a1c36:	bf5c      	itt	pl
 80a1c38:	2201      	movpl	r2, #1
 80a1c3a:	601a      	strpl	r2, [r3, #0]
 80a1c3c:	4b10      	ldr	r3, [pc, #64]	; (80a1c80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a1c3e:	681a      	ldr	r2, [r3, #0]
 80a1c40:	07d1      	lsls	r1, r2, #31
 80a1c42:	bf5c      	itt	pl
 80a1c44:	2201      	movpl	r2, #1
 80a1c46:	601a      	strpl	r2, [r3, #0]
 80a1c48:	4b0e      	ldr	r3, [pc, #56]	; (80a1c84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a1c4a:	681a      	ldr	r2, [r3, #0]
 80a1c4c:	07d2      	lsls	r2, r2, #31
 80a1c4e:	bf5c      	itt	pl
 80a1c50:	2201      	movpl	r2, #1
 80a1c52:	601a      	strpl	r2, [r3, #0]
 80a1c54:	4770      	bx	lr
 80a1c56:	bf00      	nop
 80a1c58:	200006cc 	.word	0x200006cc
 80a1c5c:	200006c8 	.word	0x200006c8
 80a1c60:	200006c4 	.word	0x200006c4
 80a1c64:	200006c0 	.word	0x200006c0
 80a1c68:	200006bc 	.word	0x200006bc
 80a1c6c:	200006b8 	.word	0x200006b8
 80a1c70:	200006b4 	.word	0x200006b4
 80a1c74:	200006b0 	.word	0x200006b0
 80a1c78:	200006ac 	.word	0x200006ac
 80a1c7c:	200006a8 	.word	0x200006a8
 80a1c80:	200006a4 	.word	0x200006a4
 80a1c84:	200006a0 	.word	0x200006a0

080a1c88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1c88:	4b18      	ldr	r3, [pc, #96]	; (80a1cec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a1c8a:	681a      	ldr	r2, [r3, #0]
 80a1c8c:	07d1      	lsls	r1, r2, #31
 80a1c8e:	bf5c      	itt	pl
 80a1c90:	2201      	movpl	r2, #1
 80a1c92:	601a      	strpl	r2, [r3, #0]
 80a1c94:	4b16      	ldr	r3, [pc, #88]	; (80a1cf0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a1c96:	681a      	ldr	r2, [r3, #0]
 80a1c98:	07d2      	lsls	r2, r2, #31
 80a1c9a:	bf5c      	itt	pl
 80a1c9c:	2201      	movpl	r2, #1
 80a1c9e:	601a      	strpl	r2, [r3, #0]
 80a1ca0:	4b14      	ldr	r3, [pc, #80]	; (80a1cf4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a1ca2:	681a      	ldr	r2, [r3, #0]
 80a1ca4:	07d0      	lsls	r0, r2, #31
 80a1ca6:	bf5c      	itt	pl
 80a1ca8:	2201      	movpl	r2, #1
 80a1caa:	601a      	strpl	r2, [r3, #0]
 80a1cac:	4b12      	ldr	r3, [pc, #72]	; (80a1cf8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a1cae:	681a      	ldr	r2, [r3, #0]
 80a1cb0:	07d1      	lsls	r1, r2, #31
 80a1cb2:	bf5c      	itt	pl
 80a1cb4:	2201      	movpl	r2, #1
 80a1cb6:	601a      	strpl	r2, [r3, #0]
 80a1cb8:	4b10      	ldr	r3, [pc, #64]	; (80a1cfc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a1cba:	681a      	ldr	r2, [r3, #0]
 80a1cbc:	07d2      	lsls	r2, r2, #31
 80a1cbe:	bf5c      	itt	pl
 80a1cc0:	2201      	movpl	r2, #1
 80a1cc2:	601a      	strpl	r2, [r3, #0]
 80a1cc4:	4b0e      	ldr	r3, [pc, #56]	; (80a1d00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a1cc6:	681a      	ldr	r2, [r3, #0]
 80a1cc8:	07d0      	lsls	r0, r2, #31
 80a1cca:	bf5c      	itt	pl
 80a1ccc:	2201      	movpl	r2, #1
 80a1cce:	601a      	strpl	r2, [r3, #0]
 80a1cd0:	4b0c      	ldr	r3, [pc, #48]	; (80a1d04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a1cd2:	681a      	ldr	r2, [r3, #0]
 80a1cd4:	07d1      	lsls	r1, r2, #31
 80a1cd6:	bf5c      	itt	pl
 80a1cd8:	2201      	movpl	r2, #1
 80a1cda:	601a      	strpl	r2, [r3, #0]
 80a1cdc:	4b0a      	ldr	r3, [pc, #40]	; (80a1d08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a1cde:	681a      	ldr	r2, [r3, #0]
 80a1ce0:	07d2      	lsls	r2, r2, #31
 80a1ce2:	bf5c      	itt	pl
 80a1ce4:	2201      	movpl	r2, #1
 80a1ce6:	601a      	strpl	r2, [r3, #0]
 80a1ce8:	4770      	bx	lr
 80a1cea:	bf00      	nop
 80a1cec:	200006ec 	.word	0x200006ec
 80a1cf0:	200006e8 	.word	0x200006e8
 80a1cf4:	200006e4 	.word	0x200006e4
 80a1cf8:	200006e0 	.word	0x200006e0
 80a1cfc:	200006dc 	.word	0x200006dc
 80a1d00:	200006d8 	.word	0x200006d8
 80a1d04:	200006d4 	.word	0x200006d4
 80a1d08:	200006d0 	.word	0x200006d0

080a1d0c <__cxa_atexit>:
 80a1d0c:	b510      	push	{r4, lr}
 80a1d0e:	4c05      	ldr	r4, [pc, #20]	; (80a1d24 <__cxa_atexit+0x18>)
 80a1d10:	4613      	mov	r3, r2
 80a1d12:	b12c      	cbz	r4, 80a1d20 <__cxa_atexit+0x14>
 80a1d14:	460a      	mov	r2, r1
 80a1d16:	4601      	mov	r1, r0
 80a1d18:	2002      	movs	r0, #2
 80a1d1a:	f3af 8000 	nop.w
 80a1d1e:	bd10      	pop	{r4, pc}
 80a1d20:	4620      	mov	r0, r4
 80a1d22:	bd10      	pop	{r4, pc}
 80a1d24:	00000000 	.word	0x00000000

080a1d28 <ldiv>:
 80a1d28:	b510      	push	{r4, lr}
 80a1d2a:	fb91 f4f2 	sdiv	r4, r1, r2
 80a1d2e:	2900      	cmp	r1, #0
 80a1d30:	fb02 1314 	mls	r3, r2, r4, r1
 80a1d34:	db04      	blt.n	80a1d40 <ldiv+0x18>
 80a1d36:	2b00      	cmp	r3, #0
 80a1d38:	da07      	bge.n	80a1d4a <ldiv+0x22>
 80a1d3a:	3401      	adds	r4, #1
 80a1d3c:	1a9b      	subs	r3, r3, r2
 80a1d3e:	e004      	b.n	80a1d4a <ldiv+0x22>
 80a1d40:	2b00      	cmp	r3, #0
 80a1d42:	bfc4      	itt	gt
 80a1d44:	f104 34ff 	addgt.w	r4, r4, #4294967295
 80a1d48:	189b      	addgt	r3, r3, r2
 80a1d4a:	6004      	str	r4, [r0, #0]
 80a1d4c:	6043      	str	r3, [r0, #4]
 80a1d4e:	bd10      	pop	{r4, pc}

080a1d50 <memcpy>:
 80a1d50:	b510      	push	{r4, lr}
 80a1d52:	1e43      	subs	r3, r0, #1
 80a1d54:	440a      	add	r2, r1
 80a1d56:	4291      	cmp	r1, r2
 80a1d58:	d004      	beq.n	80a1d64 <memcpy+0x14>
 80a1d5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a1d5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a1d62:	e7f8      	b.n	80a1d56 <memcpy+0x6>
 80a1d64:	bd10      	pop	{r4, pc}

080a1d66 <memmove>:
 80a1d66:	4288      	cmp	r0, r1
 80a1d68:	b510      	push	{r4, lr}
 80a1d6a:	eb01 0302 	add.w	r3, r1, r2
 80a1d6e:	d801      	bhi.n	80a1d74 <memmove+0xe>
 80a1d70:	1e42      	subs	r2, r0, #1
 80a1d72:	e00b      	b.n	80a1d8c <memmove+0x26>
 80a1d74:	4298      	cmp	r0, r3
 80a1d76:	d2fb      	bcs.n	80a1d70 <memmove+0xa>
 80a1d78:	1881      	adds	r1, r0, r2
 80a1d7a:	1ad2      	subs	r2, r2, r3
 80a1d7c:	42d3      	cmn	r3, r2
 80a1d7e:	d004      	beq.n	80a1d8a <memmove+0x24>
 80a1d80:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80a1d84:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80a1d88:	e7f8      	b.n	80a1d7c <memmove+0x16>
 80a1d8a:	bd10      	pop	{r4, pc}
 80a1d8c:	4299      	cmp	r1, r3
 80a1d8e:	d004      	beq.n	80a1d9a <memmove+0x34>
 80a1d90:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a1d94:	f802 4f01 	strb.w	r4, [r2, #1]!
 80a1d98:	e7f8      	b.n	80a1d8c <memmove+0x26>
 80a1d9a:	bd10      	pop	{r4, pc}

080a1d9c <memset>:
 80a1d9c:	4603      	mov	r3, r0
 80a1d9e:	4402      	add	r2, r0
 80a1da0:	4293      	cmp	r3, r2
 80a1da2:	d002      	beq.n	80a1daa <memset+0xe>
 80a1da4:	f803 1b01 	strb.w	r1, [r3], #1
 80a1da8:	e7fa      	b.n	80a1da0 <memset+0x4>
 80a1daa:	4770      	bx	lr

080a1dac <srand>:
 80a1dac:	b538      	push	{r3, r4, r5, lr}
 80a1dae:	4b12      	ldr	r3, [pc, #72]	; (80a1df8 <srand+0x4c>)
 80a1db0:	4605      	mov	r5, r0
 80a1db2:	681c      	ldr	r4, [r3, #0]
 80a1db4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a1db6:	b9d3      	cbnz	r3, 80a1dee <srand+0x42>
 80a1db8:	2018      	movs	r0, #24
 80a1dba:	f7fe febf 	bl	80a0b3c <malloc>
 80a1dbe:	f243 330e 	movw	r3, #13070	; 0x330e
 80a1dc2:	63a0      	str	r0, [r4, #56]	; 0x38
 80a1dc4:	8003      	strh	r3, [r0, #0]
 80a1dc6:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a1dca:	8043      	strh	r3, [r0, #2]
 80a1dcc:	f241 2334 	movw	r3, #4660	; 0x1234
 80a1dd0:	8083      	strh	r3, [r0, #4]
 80a1dd2:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a1dd6:	80c3      	strh	r3, [r0, #6]
 80a1dd8:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a1ddc:	8103      	strh	r3, [r0, #8]
 80a1dde:	2305      	movs	r3, #5
 80a1de0:	8143      	strh	r3, [r0, #10]
 80a1de2:	230b      	movs	r3, #11
 80a1de4:	8183      	strh	r3, [r0, #12]
 80a1de6:	2201      	movs	r2, #1
 80a1de8:	2300      	movs	r3, #0
 80a1dea:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a1dee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a1df0:	2200      	movs	r2, #0
 80a1df2:	611d      	str	r5, [r3, #16]
 80a1df4:	615a      	str	r2, [r3, #20]
 80a1df6:	bd38      	pop	{r3, r4, r5, pc}
 80a1df8:	20000064 	.word	0x20000064

080a1dfc <strcpy>:
 80a1dfc:	4603      	mov	r3, r0
 80a1dfe:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a1e02:	f803 2b01 	strb.w	r2, [r3], #1
 80a1e06:	2a00      	cmp	r2, #0
 80a1e08:	d1f9      	bne.n	80a1dfe <strcpy+0x2>
 80a1e0a:	4770      	bx	lr

080a1e0c <strlen>:
 80a1e0c:	4603      	mov	r3, r0
 80a1e0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a1e12:	2a00      	cmp	r2, #0
 80a1e14:	d1fb      	bne.n	80a1e0e <strlen+0x2>
 80a1e16:	1a18      	subs	r0, r3, r0
 80a1e18:	3801      	subs	r0, #1
 80a1e1a:	4770      	bx	lr

080a1e1c <strncpy>:
 80a1e1c:	4603      	mov	r3, r0
 80a1e1e:	b510      	push	{r4, lr}
 80a1e20:	b142      	cbz	r2, 80a1e34 <strncpy+0x18>
 80a1e22:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a1e26:	3a01      	subs	r2, #1
 80a1e28:	f803 4b01 	strb.w	r4, [r3], #1
 80a1e2c:	2c00      	cmp	r4, #0
 80a1e2e:	d1f7      	bne.n	80a1e20 <strncpy+0x4>
 80a1e30:	441a      	add	r2, r3
 80a1e32:	e000      	b.n	80a1e36 <strncpy+0x1a>
 80a1e34:	bd10      	pop	{r4, pc}
 80a1e36:	4293      	cmp	r3, r2
 80a1e38:	d002      	beq.n	80a1e40 <strncpy+0x24>
 80a1e3a:	f803 4b01 	strb.w	r4, [r3], #1
 80a1e3e:	e7fa      	b.n	80a1e36 <strncpy+0x1a>
 80a1e40:	bd10      	pop	{r4, pc}

080a1e42 <link_code_end>:
	...

080a1e44 <dynalib_user>:
 80a1e44:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a1e54:	0000 0000 6441 6661 7572 7469 4d20 5451     ....Adafruit MQT
 80a1e64:	2054 6564 6f6d 7200 7361 6168 0070 6f69     T demo.rashap.io
 80a1e74:	612e 6164 7266 6975 2e74 6f63 006d 3935     .adafruit.com.59
 80a1e84:	3138 3936 6166 6233 3961 3634 3633 3439     8169fa3ba9463694
 80a1e94:	6131 3333 3930 3637 3465 6532 6332 7200     1a330976e42e2c.r
 80a1ea4:	7361 6168 2f70 6566 6465 2f73 5454 2053     ashap/feeds/TTS 
 80a1eb4:	6e41 6c61 676f 0000                         Analog..

080a1ebc <_ZTV13Adafruit_MQTT>:
	...
 80a1ecc:	00a5 080a 00a5 080a 00a5 080a 00a5 080a     ................
 80a1edc:	00a5 080a 5b20 7830 3000 5d00 202c 0a00     .... [0x.0.], ..
 80a1eec:	0009 7244 706f 6570 2064 2061 6170 6b63     ..Dropped a pack
 80a1efc:	7465 5500 6b6e 6f6e 6e77 6520 7272 726f     et.Unknown error
 80a1f0c:	4d00 5451 0054 2525 6425 252e 6664 4600     .MQTT.%%%d.%df.F
 80a1f1c:	6961 656c 2064 6f74 7320 6275 6373 6972     ailed to subscri
 80a1f2c:	6562 4300 6e6f 656e 7463 6f69 206e 6166     be.Connection fa
 80a1f3c:	6c69 6465 5400 6568 5320 7265 6576 2072     iled.The Server 
 80a1f4c:	6f64 7365 6e20 746f 7320 7075 6f70 7472     does not support
 80a1f5c:	7420 6568 6c20 7665 6c65 6f20 2066 6874      the level of th
 80a1f6c:	2065 514d 5454 7020 6f72 6f74 6f63 206c     e MQTT protocol 
 80a1f7c:	6572 7571 7365 6574 0064 6854 2065 6c43     requested.The Cl
 80a1f8c:	6569 746e 6920 6564 746e 6669 6569 2072     ient identifier 
 80a1f9c:	7369 6320 726f 6572 7463 5520 4654 382d     is correct UTF-8
 80a1fac:	6220 7475 6e20 746f 6120 6c6c 776f 6465      but not allowed
 80a1fbc:	6220 2079 6874 2065 6553 7672 7265 5400      by the Server.T
 80a1fcc:	6568 4d20 5451 2054 6573 7672 6369 2065     he MQTT service 
 80a1fdc:	7369 7520 616e 6176 6c69 6261 656c 5400     is unavailable.T
 80a1fec:	6568 6420 7461 2061 6e69 7420 6568 7520     he data in the u
 80a1ffc:	6573 2072 616e 656d 6f20 2072 6170 7373     ser name or pass
 80a200c:	6f77 6472 6920 2073 616d 666c 726f 656d     word is malforme
 80a201c:	0064 6f4e 2074 7561 6874 726f 7a69 6465     d.Not authorized
 80a202c:	7420 206f 6f63 6e6e 6365 0074 7845 6563      to connect.Exce
 80a203c:	6465 6465 7220 6365 6e6f 656e 7463 7220     eded reconnect r
 80a204c:	7461 2065 696c 696d 2e74 5020 656c 7361     ate limit. Pleas
 80a205c:	2065 7274 2079 6761 6961 206e 616c 6574     e try again late
 80a206c:	2e72 5900 756f 6820 7661 2065 6562 6e65     r..You have been
 80a207c:	6220 6e61 656e 2064 7266 6d6f 6320 6e6f      banned from con
 80a208c:	656e 7463 6e69 2e67 5020 656c 7361 2065     necting. Please 
 80a209c:	6f63 746e 6361 2074 6874 2065 514d 5454     contact the MQTT
 80a20ac:	7320 7265 6576 2072 6461 696d 696e 7473      server administ
 80a20bc:	6172 6f74 2072 6f66 2072 6f6d 6572 6420     rator for more d
 80a20cc:	7465 6961 736c 002e                         etails..

080a20d4 <_ZTV19Adafruit_MQTT_SPARK>:
	...
 80a20dc:	00c9 080a 0175 080a 063d 080a 06e9 080a     ....u...=.......
 80a20ec:	071b 080a 0651 080a 0691 080a               ....Q.......

080a20f8 <_ZTVN5spark12NetworkClassE>:
	...
 80a2100:	0b5d 080a 0b67 080a 0b71 080a 0b7b 080a     ]...g...q...{...
 80a2110:	0b85 080a 0b91 080a 0b9d 080a 0ba9 080a     ................
 80a2120:	0bb1 080a 0bbb 080a 0bc5 080a               ............

080a212c <_ZTVN5spark9WiFiClassE>:
	...
 80a2134:	0ce3 080a 0cd9 080a 0ccf 080a 0c41 080a     ............A...
 80a2144:	0cc3 080a 0cb7 080a 0cab 080a 0ca3 080a     ................
 80a2154:	0c99 080a 0c8f 080a 0c4b 080a               ........K...

080a2160 <_ZTV8SPIClass>:
	...
 80a2168:	0d01 080a 0d03 080a                         ........

080a2170 <_ZTV7TwoWire>:
	...
 80a2178:	0d3f 080a 0d89 080a 0d61 080a 0d41 080a     ?.......a...A...
 80a2188:	0d69 080a 0d71 080a 0d79 080a 0d81 080a     i...q...y.......

080a2198 <_ZTV9USBSerial>:
	...
 80a21a0:	0dc9 080a 0e19 080a 0e27 080a 11cd 080a     ........'.......
 80a21b0:	0e05 080a 0dcb 080a 0de1 080a 0e13 080a     ................
 80a21c0:	0df7 080a 0dc5 080a                         ........

080a21c8 <_ZTV9IPAddress>:
	...
 80a21d0:	0f79 080a 0f69 080a 0f6b 080a 005a 2b25     y...i...k...Z.%+
 80a21e0:	3330 3a64 3025 7532 2500 2d59 6d25 252d     03d:%02u.%Y-%m-%
 80a21f0:	5464 4825 253a 3a4d 5325 7a25 6100 6373     dT%H:%M:%S%z.asc
 80a2200:	6974 656d 6200 7561 0064 6553 6972 6c61     time.baud.Serial
 80a2210:	5500 4253 6553 6972 6c61 0031 7974 6570     .USBSerial1.type
 80a2220:	7000 7261 6d61 6300 646d 6900 0064 6e68     .param.cmd.id.hn
 80a2230:	0064 7473 6d72 6600 6c69 0074 766c 006c     d.strm.filt.lvl.
 80a2240:	6461 4864 6e61 6c64 7265 7200 6d65 766f     addHandler.remov
 80a2250:	4865 6e61 6c64 7265 6500 756e 486d 6e61     eHandler.enumHan
 80a2260:	6c64 7265 0073 534a 4e4f 7453 6572 6d61     dlers.JSONStream
 80a2270:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
 80a2280:	3130 7530 0020 205d 2500 0064 2928 203a     010u .] .%d.(): 
 80a2290:	2000 005b 6f63 6564 3d20 0020 6925 6400     . [.code = .%i.d
 80a22a0:	7465 6961 736c 3d20 0020 0a0d 6c00 006e     etails = ....ln.
 80a22b0:	6e66 6300 646f 0065 6564 6174 6c69 6e00     fn.code.detail.n
 80a22c0:	6e6f 0065 7274 6361 0065 6e69 6f66 7700     one.trace.info.w
 80a22d0:	7261 006e 6170 696e 0063 6c61 006c 0000     arn.panic.all...

080a22e0 <_ZTV11USARTSerial>:
	...
 80a22e8:	12a3 080a 12f3 080a 1301 080a 11cd 080a     ................
 80a22f8:	12b7 080a 12d9 080a 12c5 080a 12ed 080a     ................
 80a2308:	12a5 080a 12a9 080a                         ........

080a2310 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
 80a2318:	13e9 080a 13ef 080a 1807 080a 13fd 080a     ................
 80a2328:	13eb 080a                                   ....

080a232c <_ZTV9TCPClient>:
	...
 80a2334:	00cd 080a 0101 080a 13a5 080a 13bf 080a     ................
 80a2344:	1505 080a 146f 080a 1441 080a 13e7 080a     ....o...A.......
 80a2354:	15b1 080a 1821 080a 14a3 080a 157d 080a     ....!.......}...
 80a2364:	16ff 080a 1751 080a 13cf 080a 16c3 080a     ....Q...........
 80a2374:	1421 080a 6977 6972 676e 5400 5043 6c43     !...wiring.TCPCl
 80a2384:	6569 746e 7320 636f 656b 3d74 7825 0000     ient socket=%x..

080a2394 <__sf_fake_stdin>:
	...

080a23b4 <__sf_fake_stdout>:
	...

080a23d4 <__sf_fake_stderr>:
	...
 80a23f4:	0043                                        C.

080a23f6 <link_const_variable_data_end>:
	...

080a23f8 <link_constructors_location>:
 80a23f8:	080a0185 	.word	0x080a0185
 80a23fc:	080a0639 	.word	0x080a0639
 80a2400:	080a077b 	.word	0x080a077b
 80a2404:	080a0c2d 	.word	0x080a0c2d
 80a2408:	080a0ced 	.word	0x080a0ced
 80a240c:	080a118d 	.word	0x080a118d
 80a2410:	080a11a9 	.word	0x080a11a9
 80a2414:	080a11bd 	.word	0x080a11bd
 80a2418:	080a1909 	.word	0x080a1909
 80a241c:	080a1961 	.word	0x080a1961
 80a2420:	080a1991 	.word	0x080a1991
 80a2424:	080a1a7d 	.word	0x080a1a7d
 80a2428:	080a1b01 	.word	0x080a1b01
 80a242c:	080a1bc5 	.word	0x080a1bc5
 80a2430:	080a1c89 	.word	0x080a1c89

080a2434 <link_constructors_end>:
	...
