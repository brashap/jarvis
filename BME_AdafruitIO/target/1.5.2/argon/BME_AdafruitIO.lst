
c:/Users/IoTPa/Documents/jarvis/BME_AdafruitIO/target/1.5.2/argon/BME_AdafruitIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005e70  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000d9e90  000d9e90  00009e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000d9e98  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  2003e1f8  000d9e9c  0001e1f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000058c  2003e264  2003e264  0002e264  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000d9f08  000d9f08  00029f08  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000d9f30  000d9f30  00029f30  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000e3086  00000000  00000000  00029f34  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00012422  00000000  00000000  0010cfba  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001deb3  00000000  00000000  0011f3dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002838  00000000  00000000  0013d28f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00004a48  00000000  00000000  0013fac7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00038f6e  00000000  00000000  0014450f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0002ceab  00000000  00000000  0017d47d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    001092eb  00000000  00000000  001aa328  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000d660  00000000  00000000  002b3614  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f005 fa01 	bl	d9438 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f005 fa21 	bl	d9484 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e1f8 	.word	0x2003e1f8
   d404c:	000d9e9c 	.word	0x000d9e9c
   d4050:	2003e264 	.word	0x2003e264
   d4054:	2003e264 	.word	0x2003e264
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f002 f803 	bl	d6068 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d9e8c 	.word	0x000d9e8c
   d4084:	000d9e48 	.word	0x000d9e48

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b8b6 	b.w	d41f8 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 f993 	bl	d43b8 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f001 bfa9 	b.w	d5fec <_post_loop>

000d409a <_Znwj>:
   d409a:	f001 bc73 	b.w	d5984 <malloc>

000d409e <_ZdlPv>:
   d409e:	f001 bc79 	b.w	d5994 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f001 bc77 	b.w	d5994 <free>
	...

000d40a8 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40aa:	4a03      	ldr	r2, [pc, #12]	; (d40b8 <__cxa_pure_virtual+0x10>)
   d40ac:	2100      	movs	r1, #0
   d40ae:	200c      	movs	r0, #12
   d40b0:	f001 fbdc 	bl	d586c <panic_>
   d40b4:	e7fe      	b.n	d40b4 <__cxa_pure_virtual+0xc>
   d40b6:	bf00      	nop
   d40b8:	000d55bd 	.word	0x000d55bd

000d40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40bc:	7800      	ldrb	r0, [r0, #0]
   d40be:	fab0 f080 	clz	r0, r0
   d40c2:	0940      	lsrs	r0, r0, #5
   d40c4:	4770      	bx	lr

000d40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c6:	2301      	movs	r3, #1
   d40c8:	7003      	strb	r3, [r0, #0]
   d40ca:	4770      	bx	lr

000d40cc <_ZN19Adafruit_MQTT_SPARKD1Ev>:


// MQTT client implementation for a generic Arduino Client interface.  Can work
// with almost all Arduino network hardware like ethernet shield, wifi shield,
// and even other platforms like ESP8266.
class Adafruit_MQTT_SPARK : public Adafruit_MQTT {
   d40cc:	4770      	bx	lr
	...

000d40d0 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d40d0:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d40d2:	6984      	ldr	r4, [r0, #24]
   d40d4:	4b0a      	ldr	r3, [pc, #40]	; (d4100 <_ZN9TCPClientD1Ev+0x30>)
   d40d6:	6003      	str	r3, [r0, #0]
   d40d8:	4605      	mov	r5, r0
   d40da:	b17c      	cbz	r4, d40fc <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d40dc:	6863      	ldr	r3, [r4, #4]
   d40de:	3b01      	subs	r3, #1
   d40e0:	6063      	str	r3, [r4, #4]
   d40e2:	b95b      	cbnz	r3, d40fc <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
   d40e4:	6823      	ldr	r3, [r4, #0]
   d40e6:	4620      	mov	r0, r4
   d40e8:	689b      	ldr	r3, [r3, #8]
   d40ea:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d40ec:	68a3      	ldr	r3, [r4, #8]
   d40ee:	3b01      	subs	r3, #1
   d40f0:	60a3      	str	r3, [r4, #8]
   d40f2:	b91b      	cbnz	r3, d40fc <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d40f4:	6823      	ldr	r3, [r4, #0]
   d40f6:	4620      	mov	r0, r4
   d40f8:	68db      	ldr	r3, [r3, #12]
   d40fa:	4798      	blx	r3
   d40fc:	4628      	mov	r0, r5
   d40fe:	bd38      	pop	{r3, r4, r5, pc}
   d4100:	000d9d08 	.word	0x000d9d08

000d4104 <_ZN9TCPClientD0Ev>:
   d4104:	b510      	push	{r4, lr}
   d4106:	4604      	mov	r4, r0
   d4108:	f7ff ffe2 	bl	d40d0 <_ZN9TCPClientD1Ev>
   d410c:	4620      	mov	r0, r4
   d410e:	211c      	movs	r1, #28
   d4110:	f002 ff1c 	bl	d6f4c <_ZdlPvj>
   d4114:	4620      	mov	r0, r4
   d4116:	bd10      	pop	{r4, pc}

000d4118 <_Z7I2CScanv>:
 } 
   delay(10000); 
}

void I2CScan()
{
   d4118:	b570      	push	{r4, r5, r6, lr}
	byte error, address;
	int nDevices;

   Serial.println("---------------------------");
   d411a:	f002 f8c1 	bl	d62a0 <_Z16_fetch_usbserialv>
   d411e:	492e      	ldr	r1, [pc, #184]	; (d41d8 <_Z7I2CScanv+0xc0>)
   d4120:	f001 fdc7 	bl	d5cb2 <_ZN5Print7printlnEPKc>
	Serial.println("Scanning for I2C Devices...");
   d4124:	f002 f8bc 	bl	d62a0 <_Z16_fetch_usbserialv>
   d4128:	492c      	ldr	r1, [pc, #176]	; (d41dc <_Z7I2CScanv+0xc4>)
   d412a:	f001 fdc2 	bl	d5cb2 <_ZN5Print7printlnEPKc>
   Serial.println("---------------------------");
   d412e:	f002 f8b7 	bl	d62a0 <_Z16_fetch_usbserialv>
   d4132:	4929      	ldr	r1, [pc, #164]	; (d41d8 <_Z7I2CScanv+0xc0>)
   d4134:	f001 fdbd 	bl	d5cb2 <_ZN5Print7printlnEPKc>
	delay(5000);
   d4138:	f241 3088 	movw	r0, #5000	; 0x1388
   d413c:	f001 ff18 	bl	d5f70 <delay>
   d4140:	2401      	movs	r4, #1

	nDevices = 0;
   d4142:	2500      	movs	r5, #0
	for(address = 1; address < 127; address++ )
	{
		// The i2c_scanner uses the return value of
		// the Write.endTransmisstion to see if
		// a device did acknowledge to the address.
		Wire.beginTransmission(address);
   d4144:	f002 fece 	bl	d6ee4 <_Z19__fetch_global_Wirev>
   d4148:	b2e1      	uxtb	r1, r4
   d414a:	f002 f9c6 	bl	d64da <_ZN7TwoWire17beginTransmissionEh>
		error = Wire.endTransmission();
   d414e:	f002 fec9 	bl	d6ee4 <_Z19__fetch_global_Wirev>
   d4152:	f002 f9ca 	bl	d64ea <_ZN7TwoWire15endTransmissionEv>

		if (error == 0)
   d4156:	b9c0      	cbnz	r0, d418a <_Z7I2CScanv+0x72>
		{
			Serial.print("I2C device found at address 0x");
   d4158:	f002 f8a2 	bl	d62a0 <_Z16_fetch_usbserialv>
   d415c:	4920      	ldr	r1, [pc, #128]	; (d41e0 <_Z7I2CScanv+0xc8>)
   d415e:	f001 fd95 	bl	d5c8c <_ZN5Print5printEPKc>
			if (address<16)
   d4162:	2c0f      	cmp	r4, #15
   d4164:	d804      	bhi.n	d4170 <_Z7I2CScanv+0x58>
				Serial.print("0");
   d4166:	f002 f89b 	bl	d62a0 <_Z16_fetch_usbserialv>
   d416a:	491e      	ldr	r1, [pc, #120]	; (d41e4 <_Z7I2CScanv+0xcc>)
   d416c:	f001 fd8e 	bl	d5c8c <_ZN5Print5printEPKc>
			Serial.print(address,HEX);
   d4170:	f002 f896 	bl	d62a0 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4174:	2210      	movs	r2, #16
   d4176:	4621      	mov	r1, r4
   d4178:	f001 fda5 	bl	d5cc6 <_ZN5Print11printNumberEmh>
			Serial.println("  !");
   d417c:	f002 f890 	bl	d62a0 <_Z16_fetch_usbserialv>
   d4180:	4919      	ldr	r1, [pc, #100]	; (d41e8 <_Z7I2CScanv+0xd0>)
   d4182:	f001 fd96 	bl	d5cb2 <_ZN5Print7printlnEPKc>

			nDevices++;
   d4186:	3501      	adds	r5, #1
   d4188:	e017      	b.n	d41ba <_Z7I2CScanv+0xa2>
		}
		else if (error==4)
   d418a:	2804      	cmp	r0, #4
   d418c:	d115      	bne.n	d41ba <_Z7I2CScanv+0xa2>
		{
			Serial.print("Unknow error at address 0x");
   d418e:	f002 f887 	bl	d62a0 <_Z16_fetch_usbserialv>
   d4192:	4916      	ldr	r1, [pc, #88]	; (d41ec <_Z7I2CScanv+0xd4>)
   d4194:	f001 fd7a 	bl	d5c8c <_ZN5Print5printEPKc>
			if (address<16)
   d4198:	2c0f      	cmp	r4, #15
   d419a:	d804      	bhi.n	d41a6 <_Z7I2CScanv+0x8e>
				Serial.print("0");
   d419c:	f002 f880 	bl	d62a0 <_Z16_fetch_usbserialv>
   d41a0:	4910      	ldr	r1, [pc, #64]	; (d41e4 <_Z7I2CScanv+0xcc>)
   d41a2:	f001 fd73 	bl	d5c8c <_ZN5Print5printEPKc>
			Serial.println(address,HEX);
   d41a6:	f002 f87b 	bl	d62a0 <_Z16_fetch_usbserialv>
   d41aa:	2210      	movs	r2, #16
   d41ac:	4606      	mov	r6, r0
   d41ae:	4621      	mov	r1, r4
   d41b0:	f001 fd89 	bl	d5cc6 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d41b4:	4630      	mov	r0, r6
   d41b6:	f001 fd70 	bl	d5c9a <_ZN5Print7printlnEv>
   d41ba:	3401      	adds	r4, #1
	Serial.println("Scanning for I2C Devices...");
   Serial.println("---------------------------");
	delay(5000);

	nDevices = 0;
	for(address = 1; address < 127; address++ )
   d41bc:	2c7f      	cmp	r4, #127	; 0x7f
   d41be:	d1c1      	bne.n	d4144 <_Z7I2CScanv+0x2c>
			if (address<16)
				Serial.print("0");
			Serial.println(address,HEX);
		}
	}
	if (nDevices == 0)
   d41c0:	b91d      	cbnz	r5, d41ca <_Z7I2CScanv+0xb2>
		Serial.println("No I2C devices found\n");
   d41c2:	f002 f86d 	bl	d62a0 <_Z16_fetch_usbserialv>
   d41c6:	490a      	ldr	r1, [pc, #40]	; (d41f0 <_Z7I2CScanv+0xd8>)
   d41c8:	e002      	b.n	d41d0 <_Z7I2CScanv+0xb8>
	else
		Serial.println("done\n");
   d41ca:	f002 f869 	bl	d62a0 <_Z16_fetch_usbserialv>
   d41ce:	4909      	ldr	r1, [pc, #36]	; (d41f4 <_Z7I2CScanv+0xdc>)
}
   d41d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		}
	}
	if (nDevices == 0)
		Serial.println("No I2C devices found\n");
	else
		Serial.println("done\n");
   d41d4:	f001 bd6d 	b.w	d5cb2 <_ZN5Print7printlnEPKc>
   d41d8:	000d9540 	.word	0x000d9540
   d41dc:	000d955c 	.word	0x000d955c
   d41e0:	000d9578 	.word	0x000d9578
   d41e4:	000d9597 	.word	0x000d9597
   d41e8:	000d9599 	.word	0x000d9599
   d41ec:	000d959d 	.word	0x000d959d
   d41f0:	000d95b8 	.word	0x000d95b8
   d41f4:	000d95ce 	.word	0x000d95ce

000d41f8 <setup>:
float temperature;
float pressure;
float humidity;

void setup()  
{ 
   d41f8:	b510      	push	{r4, lr}
   Wire.begin();
   d41fa:	f002 fe73 	bl	d6ee4 <_Z19__fetch_global_Wirev>
   d41fe:	f002 f935 	bl	d646c <_ZN7TwoWire5beginEv>
   
   Serial.begin(115200); 
   d4202:	f002 f84d 	bl	d62a0 <_Z16_fetch_usbserialv>
   d4206:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d420a:	f002 f837 	bl	d627c <_ZN9USBSerial5beginEl>
   while(!Serial);    // time to get serial running
   d420e:	f002 f847 	bl	d62a0 <_Z16_fetch_usbserialv>
   d4212:	f002 f83a 	bl	d628a <_ZN9USBSerialcvbEv>
   d4216:	2800      	cmp	r0, #0
   d4218:	d0f9      	beq.n	d420e <setup+0x16>
   pinMode(A0,INPUT);
   d421a:	2100      	movs	r1, #0
   d421c:	2013      	movs	r0, #19
   d421e:	f002 fe09 	bl	d6e34 <pinMode>
   Serial.println("\nI2C Scanner"); 
   d4222:	f002 f83d 	bl	d62a0 <_Z16_fetch_usbserialv>
   d4226:	4920      	ldr	r1, [pc, #128]	; (d42a8 <setup+0xb0>)
   d4228:	f001 fd43 	bl	d5cb2 <_ZN5Print7printlnEPKc>

	    unsigned status;
    
    // default settings
    // (you can also pass in a Wire library object like &Wire2)
    status = bme.begin();  
   d422c:	481f      	ldr	r0, [pc, #124]	; (d42ac <setup+0xb4>)
   d422e:	f000 fe5d 	bl	d4eec <_ZN15Adafruit_BME2805beginEv>
    if (!status) {
   d4232:	bb60      	cbnz	r0, d428e <setup+0x96>
        Serial.println("Could not find a valid BME280 sensor, check wiring, address, sensor ID!");
   d4234:	f002 f834 	bl	d62a0 <_Z16_fetch_usbserialv>
   d4238:	491d      	ldr	r1, [pc, #116]	; (d42b0 <setup+0xb8>)
   d423a:	f001 fd3a 	bl	d5cb2 <_ZN5Print7printlnEPKc>
        Serial.print("SensorID was: 0x"); Serial.println(bme.sensorID(),16);
   d423e:	f002 f82f 	bl	d62a0 <_Z16_fetch_usbserialv>
   d4242:	491c      	ldr	r1, [pc, #112]	; (d42b4 <setup+0xbc>)
   d4244:	f001 fd22 	bl	d5c8c <_ZN5Print5printEPKc>
   d4248:	f002 f82a 	bl	d62a0 <_Z16_fetch_usbserialv>
   d424c:	4604      	mov	r4, r0
   d424e:	4817      	ldr	r0, [pc, #92]	; (d42ac <setup+0xb4>)
   d4250:	f000 f9cc 	bl	d45ec <_ZN15Adafruit_BME2808sensorIDEv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4254:	2210      	movs	r2, #16
   d4256:	4601      	mov	r1, r0
   d4258:	4620      	mov	r0, r4
   d425a:	f001 fd34 	bl	d5cc6 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d425e:	4620      	mov	r0, r4
   d4260:	f001 fd1b 	bl	d5c9a <_ZN5Print7printlnEv>
        Serial.print("        ID of 0xFF probably means a bad address, a BMP 180 or BMP 085\n");
   d4264:	f002 f81c 	bl	d62a0 <_Z16_fetch_usbserialv>
   d4268:	4913      	ldr	r1, [pc, #76]	; (d42b8 <setup+0xc0>)
   d426a:	f001 fd0f 	bl	d5c8c <_ZN5Print5printEPKc>
        Serial.print("   ID of 0x56-0x58 represents a BMP 280,\n");
   d426e:	f002 f817 	bl	d62a0 <_Z16_fetch_usbserialv>
   d4272:	4912      	ldr	r1, [pc, #72]	; (d42bc <setup+0xc4>)
   d4274:	f001 fd0a 	bl	d5c8c <_ZN5Print5printEPKc>
        Serial.print("        ID of 0x60 represents a BME 280.\n");
   d4278:	f002 f812 	bl	d62a0 <_Z16_fetch_usbserialv>
   d427c:	4910      	ldr	r1, [pc, #64]	; (d42c0 <setup+0xc8>)
   d427e:	f001 fd05 	bl	d5c8c <_ZN5Print5printEPKc>
        Serial.print("        ID of 0x61 represents a BME 680.\n");
   d4282:	f002 f80d 	bl	d62a0 <_Z16_fetch_usbserialv>
   d4286:	490f      	ldr	r1, [pc, #60]	; (d42c4 <setup+0xcc>)
   d4288:	f001 fd00 	bl	d5c8c <_ZN5Print5printEPKc>
   d428c:	e7fe      	b.n	d428c <setup+0x94>
        while (1);
    }
    
    Serial.println("-- Default Test --");
   d428e:	f002 f807 	bl	d62a0 <_Z16_fetch_usbserialv>
   d4292:	490d      	ldr	r1, [pc, #52]	; (d42c8 <setup+0xd0>)
   d4294:	f001 fd0d 	bl	d5cb2 <_ZN5Print7printlnEPKc>
    delayTime = 1000;
   d4298:	4b0c      	ldr	r3, [pc, #48]	; (d42cc <setup+0xd4>)
   d429a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d429e:	601a      	str	r2, [r3, #0]
    I2CScan();    
} 
   d42a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        while (1);
    }
    
    Serial.println("-- Default Test --");
    delayTime = 1000;
    I2CScan();    
   d42a4:	f7ff bf38 	b.w	d4118 <_Z7I2CScanv>
   d42a8:	000d95d4 	.word	0x000d95d4
   d42ac:	2003e29c 	.word	0x2003e29c
   d42b0:	000d95e1 	.word	0x000d95e1
   d42b4:	000d9629 	.word	0x000d9629
   d42b8:	000d963a 	.word	0x000d963a
   d42bc:	000d9681 	.word	0x000d9681
   d42c0:	000d96ab 	.word	0x000d96ab
   d42c4:	000d96d5 	.word	0x000d96d5
   d42c8:	000d96ff 	.word	0x000d96ff
   d42cc:	2003e288 	.word	0x2003e288

000d42d0 <_Z11printValuesv>:
		Serial.println("No I2C devices found\n");
	else
		Serial.println("done\n");
}

void printValues() {
   d42d0:	b538      	push	{r3, r4, r5, lr}
    Serial.print("Temperature = ");
   d42d2:	f001 ffe5 	bl	d62a0 <_Z16_fetch_usbserialv>
   d42d6:	492d      	ldr	r1, [pc, #180]	; (d438c <_Z11printValuesv+0xbc>)
    Serial.print(bme.readTemperature());
   d42d8:	4c2d      	ldr	r4, [pc, #180]	; (d4390 <_Z11printValuesv+0xc0>)
	else
		Serial.println("done\n");
}

void printValues() {
    Serial.print("Temperature = ");
   d42da:	f001 fcd7 	bl	d5c8c <_ZN5Print5printEPKc>
    Serial.print(bme.readTemperature());
   d42de:	f001 ffdf 	bl	d62a0 <_Z16_fetch_usbserialv>
   d42e2:	4605      	mov	r5, r0
   d42e4:	4620      	mov	r0, r4
   d42e6:	f000 fa4f 	bl	d4788 <_ZN15Adafruit_BME28015readTemperatureEv>
   d42ea:	2102      	movs	r1, #2
   d42ec:	4628      	mov	r0, r5
   d42ee:	f001 fdc9 	bl	d5e84 <_ZN5Print5printEfi>
    Serial.println(" *C");
   d42f2:	f001 ffd5 	bl	d62a0 <_Z16_fetch_usbserialv>
   d42f6:	4927      	ldr	r1, [pc, #156]	; (d4394 <_Z11printValuesv+0xc4>)
   d42f8:	f001 fcdb 	bl	d5cb2 <_ZN5Print7printlnEPKc>

    Serial.print("Pressure = ");
   d42fc:	f001 ffd0 	bl	d62a0 <_Z16_fetch_usbserialv>
   d4300:	4925      	ldr	r1, [pc, #148]	; (d4398 <_Z11printValuesv+0xc8>)
   d4302:	f001 fcc3 	bl	d5c8c <_ZN5Print5printEPKc>
    Serial.print(bme.readPressure() / 100.0F);
   d4306:	f001 ffcb 	bl	d62a0 <_Z16_fetch_usbserialv>
   d430a:	4605      	mov	r5, r0
   d430c:	4620      	mov	r0, r4
   d430e:	f000 fa69 	bl	d47e4 <_ZN15Adafruit_BME28012readPressureEv>
   d4312:	eddf 7a22 	vldr	s15, [pc, #136]	; d439c <_Z11printValuesv+0xcc>
   d4316:	2102      	movs	r1, #2
   d4318:	ee80 0a27 	vdiv.f32	s0, s0, s15
   d431c:	4628      	mov	r0, r5
   d431e:	f001 fdb1 	bl	d5e84 <_ZN5Print5printEfi>
    Serial.println(" hPa");
   d4322:	f001 ffbd 	bl	d62a0 <_Z16_fetch_usbserialv>
   d4326:	491e      	ldr	r1, [pc, #120]	; (d43a0 <_Z11printValuesv+0xd0>)
   d4328:	f001 fcc3 	bl	d5cb2 <_ZN5Print7printlnEPKc>

    Serial.print("Approx. Altitude = ");
   d432c:	f001 ffb8 	bl	d62a0 <_Z16_fetch_usbserialv>
   d4330:	491c      	ldr	r1, [pc, #112]	; (d43a4 <_Z11printValuesv+0xd4>)
   d4332:	f001 fcab 	bl	d5c8c <_ZN5Print5printEPKc>
    Serial.print(bme.readAltitude(SEALEVELPRESSURE_HPA));
   d4336:	f001 ffb3 	bl	d62a0 <_Z16_fetch_usbserialv>
   d433a:	ed9f 0a1b 	vldr	s0, [pc, #108]	; d43a8 <_Z11printValuesv+0xd8>
   d433e:	4605      	mov	r5, r0
   d4340:	4620      	mov	r0, r4
   d4342:	f000 fb2d 	bl	d49a0 <_ZN15Adafruit_BME28012readAltitudeEf>
   d4346:	2102      	movs	r1, #2
   d4348:	4628      	mov	r0, r5
   d434a:	f001 fd9b 	bl	d5e84 <_ZN5Print5printEfi>
    Serial.println(" m");
   d434e:	f001 ffa7 	bl	d62a0 <_Z16_fetch_usbserialv>
   d4352:	4916      	ldr	r1, [pc, #88]	; (d43ac <_Z11printValuesv+0xdc>)
   d4354:	f001 fcad 	bl	d5cb2 <_ZN5Print7printlnEPKc>

    Serial.print("Humidity = ");
   d4358:	f001 ffa2 	bl	d62a0 <_Z16_fetch_usbserialv>
   d435c:	4914      	ldr	r1, [pc, #80]	; (d43b0 <_Z11printValuesv+0xe0>)
   d435e:	f001 fc95 	bl	d5c8c <_ZN5Print5printEPKc>
    Serial.print(bme.readHumidity());
   d4362:	f001 ff9d 	bl	d62a0 <_Z16_fetch_usbserialv>
   d4366:	4605      	mov	r5, r0
   d4368:	4620      	mov	r0, r4
   d436a:	f000 fbbb 	bl	d4ae4 <_ZN15Adafruit_BME28012readHumidityEv>
   d436e:	2102      	movs	r1, #2
   d4370:	4628      	mov	r0, r5
   d4372:	f001 fd87 	bl	d5e84 <_ZN5Print5printEfi>
    Serial.println(" %");
   d4376:	f001 ff93 	bl	d62a0 <_Z16_fetch_usbserialv>
   d437a:	490e      	ldr	r1, [pc, #56]	; (d43b4 <_Z11printValuesv+0xe4>)
   d437c:	f001 fc99 	bl	d5cb2 <_ZN5Print7printlnEPKc>

    Serial.println();
   d4380:	f001 ff8e 	bl	d62a0 <_Z16_fetch_usbserialv>
   d4384:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

    Serial.print("Humidity = ");
    Serial.print(bme.readHumidity());
    Serial.println(" %");

    Serial.println();
   d4388:	f001 bc87 	b.w	d5c9a <_ZN5Print7printlnEv>
   d438c:	000d9712 	.word	0x000d9712
   d4390:	2003e29c 	.word	0x2003e29c
   d4394:	000d9721 	.word	0x000d9721
   d4398:	000d9725 	.word	0x000d9725
   d439c:	42c80000 	.word	0x42c80000
   d43a0:	000d9731 	.word	0x000d9731
   d43a4:	000d9736 	.word	0x000d9736
   d43a8:	447d5000 	.word	0x447d5000
   d43ac:	000d974a 	.word	0x000d974a
   d43b0:	000d974d 	.word	0x000d974d
   d43b4:	000d9759 	.word	0x000d9759

000d43b8 <loop>:
    delayTime = 1000;
    I2CScan();    
} 

void loop() 
{ 
   d43b8:	b570      	push	{r4, r5, r6, lr}
   printValues();
   d43ba:	f7ff ff89 	bl	d42d0 <_Z11printValuesv>
       temperature = bme.readTemperature()*1.6+32.0;
   d43be:	4836      	ldr	r0, [pc, #216]	; (d4498 <loop+0xe0>)
   d43c0:	4e36      	ldr	r6, [pc, #216]	; (d449c <loop+0xe4>)
       // pressure = (bme.readPressure() / 100.0) / 68.9476;   //Engish Units
       pressure = (bme.readPressure() / 100.0);             //SI Units
   d43c2:	4d37      	ldr	r5, [pc, #220]	; (d44a0 <loop+0xe8>)
       humidity = bme.readHumidity();
   d43c4:	4c37      	ldr	r4, [pc, #220]	; (d44a4 <loop+0xec>)
} 

void loop() 
{ 
   printValues();
       temperature = bme.readTemperature()*1.6+32.0;
   d43c6:	f000 f9df 	bl	d4788 <_ZN15Adafruit_BME28015readTemperatureEv>
   d43ca:	ee10 0a10 	vmov	r0, s0
   d43ce:	f004 f9b7 	bl	d8740 <__aeabi_f2d>
   d43d2:	a32f      	add	r3, pc, #188	; (adr r3, d4490 <loop+0xd8>)
   d43d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d43d8:	f004 fa06 	bl	d87e8 <__aeabi_dmul>
   d43dc:	2200      	movs	r2, #0
   d43de:	4b32      	ldr	r3, [pc, #200]	; (d44a8 <loop+0xf0>)
   d43e0:	f004 f850 	bl	d8484 <__adddf3>
   d43e4:	f004 fcf8 	bl	d8dd8 <__aeabi_d2f>
   d43e8:	6030      	str	r0, [r6, #0]
       // pressure = (bme.readPressure() / 100.0) / 68.9476;   //Engish Units
       pressure = (bme.readPressure() / 100.0);             //SI Units
   d43ea:	482b      	ldr	r0, [pc, #172]	; (d4498 <loop+0xe0>)
   d43ec:	f000 f9fa 	bl	d47e4 <_ZN15Adafruit_BME28012readPressureEv>
   d43f0:	eddf 7a2e 	vldr	s15, [pc, #184]	; d44ac <loop+0xf4>
       humidity = bme.readHumidity();
   d43f4:	4828      	ldr	r0, [pc, #160]	; (d4498 <loop+0xe0>)
void loop() 
{ 
   printValues();
       temperature = bme.readTemperature()*1.6+32.0;
       // pressure = (bme.readPressure() / 100.0) / 68.9476;   //Engish Units
       pressure = (bme.readPressure() / 100.0);             //SI Units
   d43f6:	ee80 0a27 	vdiv.f32	s0, s0, s15
   d43fa:	ed85 0a00 	vstr	s0, [r5]
       humidity = bme.readHumidity();
   d43fe:	f000 fb71 	bl	d4ae4 <_ZN15Adafruit_BME28012readHumidityEv>
   d4402:	ed84 0a00 	vstr	s0, [r4]
       Serial.println("-------------Data to Publish---------------");
   d4406:	f001 ff4b 	bl	d62a0 <_Z16_fetch_usbserialv>
   d440a:	4929      	ldr	r1, [pc, #164]	; (d44b0 <loop+0xf8>)
   d440c:	f001 fc51 	bl	d5cb2 <_ZN5Print7printlnEPKc>
       Serial.println(temperature);
   d4410:	f001 ff46 	bl	d62a0 <_Z16_fetch_usbserialv>
   d4414:	2102      	movs	r1, #2
   d4416:	ed96 0a00 	vldr	s0, [r6]
   d441a:	f001 fd4d 	bl	d5eb8 <_ZN5Print7printlnEfi>
       Serial.println(pressure);
   d441e:	f001 ff3f 	bl	d62a0 <_Z16_fetch_usbserialv>
   d4422:	2102      	movs	r1, #2
   d4424:	ed95 0a00 	vldr	s0, [r5]
   d4428:	f001 fd46 	bl	d5eb8 <_ZN5Print7printlnEfi>
       Serial.println(humidity);
   d442c:	f001 ff38 	bl	d62a0 <_Z16_fetch_usbserialv>
   d4430:	2102      	movs	r1, #2
   d4432:	ed94 0a00 	vldr	s0, [r4]
   d4436:	f001 fd3f 	bl	d5eb8 <_ZN5Print7printlnEfi>
       Serial.println("---------------End Publish-----------------");
   d443a:	f001 ff31 	bl	d62a0 <_Z16_fetch_usbserialv>
   d443e:	491d      	ldr	r1, [pc, #116]	; (d44b4 <loop+0xfc>)
   d4440:	f001 fc37 	bl	d5cb2 <_ZN5Print7printlnEPKc>
 if( mqtt.Update() ){
   d4444:	481c      	ldr	r0, [pc, #112]	; (d44b8 <loop+0x100>)
   d4446:	f000 fde4 	bl	d5012 <_ZN19Adafruit_MQTT_SPARK6UpdateEv>
   d444a:	b1d0      	cbz	r0, d4482 <loop+0xca>
       temp.publish(temperature); 
   d444c:	6830      	ldr	r0, [r6, #0]
   d444e:	f004 f977 	bl	d8740 <__aeabi_f2d>
   d4452:	ec41 0b10 	vmov	d0, r0, r1
   d4456:	2102      	movs	r1, #2
   d4458:	4818      	ldr	r0, [pc, #96]	; (d44bc <loop+0x104>)
   d445a:	f001 f807 	bl	d546c <_ZN21Adafruit_MQTT_Publish7publishEdh>
       press.publish(pressure);
   d445e:	6828      	ldr	r0, [r5, #0]
   d4460:	f004 f96e 	bl	d8740 <__aeabi_f2d>
   d4464:	ec41 0b10 	vmov	d0, r0, r1
   d4468:	2102      	movs	r1, #2
   d446a:	4815      	ldr	r0, [pc, #84]	; (d44c0 <loop+0x108>)
   d446c:	f000 fffe 	bl	d546c <_ZN21Adafruit_MQTT_Publish7publishEdh>
       rh.publish(humidity);
   d4470:	6820      	ldr	r0, [r4, #0]
   d4472:	f004 f965 	bl	d8740 <__aeabi_f2d>
   d4476:	ec41 0b10 	vmov	d0, r0, r1
   d447a:	2102      	movs	r1, #2
   d447c:	4811      	ldr	r0, [pc, #68]	; (d44c4 <loop+0x10c>)
   d447e:	f000 fff5 	bl	d546c <_ZN21Adafruit_MQTT_Publish7publishEdh>
 } 
   delay(10000); 
   d4482:	f242 7010 	movw	r0, #10000	; 0x2710
}
   d4486:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 if( mqtt.Update() ){
       temp.publish(temperature); 
       press.publish(pressure);
       rh.publish(humidity);
 } 
   delay(10000); 
   d448a:	f001 bd71 	b.w	d5f70 <delay>
   d448e:	bf00      	nop
   d4490:	9999999a 	.word	0x9999999a
   d4494:	3ff99999 	.word	0x3ff99999
   d4498:	2003e29c 	.word	0x2003e29c
   d449c:	2003e28c 	.word	0x2003e28c
   d44a0:	2003e268 	.word	0x2003e268
   d44a4:	2003e3b4 	.word	0x2003e3b4
   d44a8:	40400000 	.word	0x40400000
   d44ac:	42c80000 	.word	0x42c80000
   d44b0:	000d975c 	.word	0x000d975c
   d44b4:	000d9788 	.word	0x000d9788
   d44b8:	2003e2e0 	.word	0x2003e2e0
   d44bc:	2003e3c4 	.word	0x2003e3c4
   d44c0:	2003e290 	.word	0x2003e290
   d44c4:	2003e3b8 	.word	0x2003e3b8

000d44c8 <_ZN19Adafruit_MQTT_SPARKD0Ev>:
   d44c8:	b510      	push	{r4, lr}
   d44ca:	21d4      	movs	r1, #212	; 0xd4
   d44cc:	4604      	mov	r4, r0
   d44ce:	f002 fd3d 	bl	d6f4c <_ZdlPvj>
   d44d2:	4620      	mov	r0, r4
   d44d4:	bd10      	pop	{r4, pc}
	...

000d44d8 <_GLOBAL__sub_I_TheClient>:
    Serial.print("Humidity = ");
    Serial.print(bme.readHumidity());
    Serial.println(" %");

    Serial.println();
   d44d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
#define AIO_USERNAME  "rashap"
#define AIO_KEY       "598169fa3ba94636941a330976e42e2c"


/************ Global State (you don't need to change this!) ***   ***************/ 
TCPClient TheClient; 
   d44da:	4d1b      	ldr	r5, [pc, #108]	; (d4548 <_GLOBAL__sub_I_TheClient+0x70>)
   d44dc:	4e1b      	ldr	r6, [pc, #108]	; (d454c <_GLOBAL__sub_I_TheClient+0x74>)
  {}

  Adafruit_MQTT_SPARK(TCPClient *client, const char *server, uint16_t port,
                       const char *user="", const char *pass=""):
    Adafruit_MQTT(server, port, user, pass),
    client(client)
   d44de:	4c1c      	ldr	r4, [pc, #112]	; (d4550 <_GLOBAL__sub_I_TheClient+0x78>)

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d44e0:	f000 fff4 	bl	d54cc <HAL_Pin_Map>
   d44e4:	4628      	mov	r0, r5
   d44e6:	f002 fb6f 	bl	d6bc8 <_ZN9TCPClientC1Ev>
   d44ea:	4632      	mov	r2, r6
   d44ec:	4919      	ldr	r1, [pc, #100]	; (d4554 <_GLOBAL__sub_I_TheClient+0x7c>)
   d44ee:	4628      	mov	r0, r5
   d44f0:	f002 fd1e 	bl	d6f30 <__aeabi_atexit>
   d44f4:	4b18      	ldr	r3, [pc, #96]	; (d4558 <_GLOBAL__sub_I_TheClient+0x80>)
   d44f6:	9300      	str	r3, [sp, #0]
   d44f8:	f240 725b 	movw	r2, #1883	; 0x75b
   d44fc:	4b17      	ldr	r3, [pc, #92]	; (d455c <_GLOBAL__sub_I_TheClient+0x84>)
   d44fe:	4918      	ldr	r1, [pc, #96]	; (d4560 <_GLOBAL__sub_I_TheClient+0x88>)
   d4500:	4620      	mov	r0, r4
   d4502:	f000 fdbb 	bl	d507c <_ZN13Adafruit_MQTTC1EPKctS1_S1_>
   d4506:	4b17      	ldr	r3, [pc, #92]	; (d4564 <_GLOBAL__sub_I_TheClient+0x8c>)

// Setup the MQTT client class by passing in the WiFi client and MQTT server and login details. 
Adafruit_MQTT_SPARK mqtt(&TheClient,AIO_SERVER,AIO_SERVERPORT,AIO_USERNAME,AIO_KEY); 
   d4508:	4917      	ldr	r1, [pc, #92]	; (d4568 <_GLOBAL__sub_I_TheClient+0x90>)
   d450a:	6023      	str	r3, [r4, #0]
   d450c:	4632      	mov	r2, r6
   d450e:	4620      	mov	r0, r4
   d4510:	f8c4 50d0 	str.w	r5, [r4, #208]	; 0xd0
   d4514:	f002 fd0c 	bl	d6f30 <__aeabi_atexit>

/****************************** Feeds ***************************************/ 
// Setup a feed called 'voltage' for publishing. 
// Notice MQTT paths for AIO follow the form: <username>/feeds/<feedname> 

Adafruit_MQTT_Publish temp = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Home_Temperature");
   d4518:	4621      	mov	r1, r4
   d451a:	2300      	movs	r3, #0
   d451c:	4a13      	ldr	r2, [pc, #76]	; (d456c <_GLOBAL__sub_I_TheClient+0x94>)
   d451e:	4814      	ldr	r0, [pc, #80]	; (d4570 <_GLOBAL__sub_I_TheClient+0x98>)
   d4520:	f000 ff9e 	bl	d5460 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish press = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Pressure");
   d4524:	4621      	mov	r1, r4
   d4526:	2300      	movs	r3, #0
   d4528:	4a12      	ldr	r2, [pc, #72]	; (d4574 <_GLOBAL__sub_I_TheClient+0x9c>)
   d452a:	4813      	ldr	r0, [pc, #76]	; (d4578 <_GLOBAL__sub_I_TheClient+0xa0>)
   d452c:	f000 ff98 	bl	d5460 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish rh = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Relative_Humidity"); 
   d4530:	2300      	movs	r3, #0
   d4532:	4a12      	ldr	r2, [pc, #72]	; (d457c <_GLOBAL__sub_I_TheClient+0xa4>)
   d4534:	4812      	ldr	r0, [pc, #72]	; (d4580 <_GLOBAL__sub_I_TheClient+0xa8>)
   d4536:	4621      	mov	r1, r4
   d4538:	f000 ff92 	bl	d5460 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
/*************************** Setup BME280 ***********************************/
#include "Particle.h"
#include "Adafruit_Sensor.h"
#include "Adafruit_BME280.h"

Adafruit_BME280 bme; // I2C
   d453c:	4811      	ldr	r0, [pc, #68]	; (d4584 <_GLOBAL__sub_I_TheClient+0xac>)
    Serial.print("Humidity = ");
    Serial.print(bme.readHumidity());
    Serial.println(" %");

    Serial.println();
   d453e:	b002      	add	sp, #8
   d4540:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
/*************************** Setup BME280 ***********************************/
#include "Particle.h"
#include "Adafruit_Sensor.h"
#include "Adafruit_BME280.h"

Adafruit_BME280 bme; // I2C
   d4544:	f000 b84c 	b.w	d45e0 <_ZN15Adafruit_BME280C1Ev>
   d4548:	2003e26c 	.word	0x2003e26c
   d454c:	2003e264 	.word	0x2003e264
   d4550:	2003e2e0 	.word	0x2003e2e0
   d4554:	000d40d1 	.word	0x000d40d1
   d4558:	000d97cb 	.word	0x000d97cb
   d455c:	000d97b4 	.word	0x000d97b4
   d4560:	000d97bb 	.word	0x000d97bb
   d4564:	000d989c 	.word	0x000d989c
   d4568:	000d40cd 	.word	0x000d40cd
   d456c:	000d97ec 	.word	0x000d97ec
   d4570:	2003e3c4 	.word	0x2003e3c4
   d4574:	000d980a 	.word	0x000d980a
   d4578:	2003e290 	.word	0x2003e290
   d457c:	000d9820 	.word	0x000d9820
   d4580:	2003e3b8 	.word	0x2003e3b8
   d4584:	2003e29c 	.word	0x2003e29c

000d4588 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d4588:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d458a:	4602      	mov	r2, r0
   d458c:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d458e:	7913      	ldrb	r3, [r2, #4]
   d4590:	6895      	ldr	r5, [r2, #8]
   d4592:	b133      	cbz	r3, d45a2 <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d4594:	b93d      	cbnz	r5, d45a6 <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d4596:	490c      	ldr	r1, [pc, #48]	; (d45c8 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d4598:	b004      	add	sp, #16
   d459a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d459e:	f001 bb75 	b.w	d5c8c <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d45a2:	4b0a      	ldr	r3, [pc, #40]	; (d45cc <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d45a4:	e000      	b.n	d45a8 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d45a6:	4b0a      	ldr	r3, [pc, #40]	; (d45d0 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d45a8:	7b16      	ldrb	r6, [r2, #12]
   d45aa:	4c0a      	ldr	r4, [pc, #40]	; (d45d4 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d45ac:	490a      	ldr	r1, [pc, #40]	; (d45d8 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d45ae:	7b52      	ldrb	r2, [r2, #13]
   d45b0:	9202      	str	r2, [sp, #8]
   d45b2:	2e01      	cmp	r6, #1
   d45b4:	bf08      	it	eq
   d45b6:	4621      	moveq	r1, r4
   d45b8:	9101      	str	r1, [sp, #4]
   d45ba:	9500      	str	r5, [sp, #0]
   d45bc:	4a07      	ldr	r2, [pc, #28]	; (d45dc <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d45be:	2100      	movs	r1, #0
   d45c0:	f001 fc89 	bl	d5ed6 <_ZN5Print11printf_implEbPKcz>
  }
   d45c4:	b004      	add	sp, #16
   d45c6:	bd70      	pop	{r4, r5, r6, pc}
   d45c8:	000d985d 	.word	0x000d985d
   d45cc:	000d98e7 	.word	0x000d98e7
   d45d0:	000d984c 	.word	0x000d984c
   d45d4:	000d9855 	.word	0x000d9855
   d45d8:	000d9859 	.word	0x000d9859
   d45dc:	000d9873 	.word	0x000d9873

000d45e0 <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   d45e0:	22ff      	movs	r2, #255	; 0xff
   d45e2:	7402      	strb	r2, [r0, #16]
   d45e4:	7442      	strb	r2, [r0, #17]
   d45e6:	7482      	strb	r2, [r0, #18]
   d45e8:	74c2      	strb	r2, [r0, #19]
{ }
   d45ea:	4770      	bx	lr

000d45ec <_ZN15Adafruit_BME2808sensorIDEv>:
*/
/**************************************************************************/
uint32_t Adafruit_BME280::sensorID(void)
{
	return _sensorID;
   d45ec:	6880      	ldr	r0, [r0, #8]
   d45ee:	4770      	bx	lr

000d45f0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>:
namespace particle {

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d45f0:	b538      	push	{r3, r4, r5, lr}
        static SPIClass instance(Interface);
   d45f2:	4d09      	ldr	r5, [pc, #36]	; (d4618 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x28>)
   d45f4:	6829      	ldr	r1, [r5, #0]
   d45f6:	f011 0401 	ands.w	r4, r1, #1
   d45fa:	d10a      	bne.n	d4612 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d45fc:	4628      	mov	r0, r5
   d45fe:	f7ff fd5d 	bl	d40bc <__cxa_guard_acquire>
   d4602:	b130      	cbz	r0, d4612 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d4604:	4621      	mov	r1, r4
   d4606:	4805      	ldr	r0, [pc, #20]	; (d461c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d4608:	f001 fa28 	bl	d5a5c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d460c:	4628      	mov	r0, r5
   d460e:	f7ff fd5a 	bl	d40c6 <__cxa_guard_release>
        return instance;
    }
   d4612:	4802      	ldr	r0, [pc, #8]	; (d461c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d4614:	bd38      	pop	{r3, r4, r5, pc}
   d4616:	bf00      	nop
   d4618:	2003e3d0 	.word	0x2003e3d0
   d461c:	2003e3d4 	.word	0x2003e3d4

000d4620 <_ZN15Adafruit_BME2807spixferEh>:
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d4620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
   d4624:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4628:	3301      	adds	r3, #1
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d462a:	4605      	mov	r5, r0
   d462c:	460f      	mov	r7, r1
    // hardware SPI
    if (_sck == -1)
   d462e:	d106      	bne.n	d463e <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d4630:	f7ff ffde 	bl	d45f0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4634:	4639      	mov	r1, r7
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   d4636:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d463a:	f001 bab3 	b.w	d5ba4 <_ZN8SPIClass8transferEh>
   d463e:	2607      	movs	r6, #7
   d4640:	2400      	movs	r4, #0
    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
   d4642:	f04f 0801 	mov.w	r8, #1

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
        digitalWrite(_sck, LOW);
   d4646:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d464a:	2100      	movs	r1, #0
   d464c:	b280      	uxth	r0, r0
   d464e:	f002 fc02 	bl	d6e56 <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   d4652:	f995 0011 	ldrsb.w	r0, [r5, #17]
   d4656:	fa08 f106 	lsl.w	r1, r8, r6
   d465a:	4039      	ands	r1, r7
   d465c:	b280      	uxth	r0, r0
   d465e:	f002 fbfa 	bl	d6e56 <digitalWrite>
        digitalWrite(_sck, HIGH);
   d4662:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d4666:	2101      	movs	r1, #1
   d4668:	b280      	uxth	r0, r0
   d466a:	f002 fbf4 	bl	d6e56 <digitalWrite>
        if (digitalRead(_miso))
   d466e:	f995 0012 	ldrsb.w	r0, [r5, #18]
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
   d4672:	0064      	lsls	r4, r4, #1
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
   d4674:	b280      	uxth	r0, r0
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
   d4676:	b2e4      	uxtb	r4, r4
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
   d4678:	f002 fc06 	bl	d6e88 <digitalRead>
   d467c:	b108      	cbz	r0, d4682 <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   d467e:	f044 0401 	orr.w	r4, r4, #1
    if (_sck == -1)
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
   d4682:	f116 36ff 	adds.w	r6, r6, #4294967295
   d4686:	d2de      	bcs.n	d4646 <_ZN15Adafruit_BME2807spixferEh+0x26>
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   d4688:	4620      	mov	r0, r4
   d468a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d468e <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>:
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
   d468e:	b508      	push	{r3, lr}
        instance().endTransaction();
   d4690:	f7ff ffae 	bl	d45f0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
    }
   d4694:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
        instance().endTransaction();
   d4698:	f001 b9fb 	b.w	d5a92 <_ZN8SPIClass14endTransactionEv>

000d469c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>:
        instance().usingInterrupt(arg);
    }
    int32_t beginTransaction() {
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
   d469c:	b510      	push	{r4, lr}
   d469e:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
   d46a0:	f7ff ffa6 	bl	d45f0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d46a4:	4621      	mov	r1, r4
    }
   d46a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    }
    int32_t beginTransaction() {
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
        return instance().beginTransaction(settings);
   d46aa:	f001 ba0b 	b.w	d5ac4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
	...

000d46b0 <_ZN15Adafruit_BME2806read24Eh>:
    @param reg the register address to read from
    @returns the 24 bit data value read from the device
*/
/**************************************************************************/
uint32_t Adafruit_BME280::read24(byte reg)
{
   d46b0:	b530      	push	{r4, r5, lr}
    uint32_t value;

    if (_cs == -1) {
   d46b2:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d46b6:	3301      	adds	r3, #1
    @param reg the register address to read from
    @returns the 24 bit data value read from the device
*/
/**************************************************************************/
uint32_t Adafruit_BME280::read24(byte reg)
{
   d46b8:	b085      	sub	sp, #20
   d46ba:	4604      	mov	r4, r0
   d46bc:	460d      	mov	r5, r1
    uint32_t value;

    if (_cs == -1) {
   d46be:	d121      	bne.n	d4704 <_ZN15Adafruit_BME2806read24Eh+0x54>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d46c0:	7901      	ldrb	r1, [r0, #4]
   d46c2:	6800      	ldr	r0, [r0, #0]
   d46c4:	f001 ff09 	bl	d64da <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d46c8:	6820      	ldr	r0, [r4, #0]
   d46ca:	6803      	ldr	r3, [r0, #0]
   d46cc:	4629      	mov	r1, r5
   d46ce:	689b      	ldr	r3, [r3, #8]
   d46d0:	4798      	blx	r3
        _wire -> endTransmission();
   d46d2:	6820      	ldr	r0, [r4, #0]
   d46d4:	f001 ff09 	bl	d64ea <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)3);
   d46d8:	2203      	movs	r2, #3
   d46da:	7921      	ldrb	r1, [r4, #4]
   d46dc:	6820      	ldr	r0, [r4, #0]
   d46de:	f001 fef9 	bl	d64d4 <_ZN7TwoWire11requestFromEhj>

        value = _wire -> read();
   d46e2:	6820      	ldr	r0, [r4, #0]
   d46e4:	6803      	ldr	r3, [r0, #0]
   d46e6:	695b      	ldr	r3, [r3, #20]
   d46e8:	4798      	blx	r3
        value <<= 8;
   d46ea:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d46ec:	6820      	ldr	r0, [r4, #0]
   d46ee:	6803      	ldr	r3, [r0, #0]
   d46f0:	695b      	ldr	r3, [r3, #20]
   d46f2:	4798      	blx	r3
   d46f4:	4328      	orrs	r0, r5
        value <<= 8;
   d46f6:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d46f8:	6820      	ldr	r0, [r4, #0]
   d46fa:	6803      	ldr	r3, [r0, #0]
   d46fc:	695b      	ldr	r3, [r3, #20]
   d46fe:	4798      	blx	r3
   d4700:	4305      	orrs	r5, r0
   d4702:	e039      	b.n	d4778 <_ZN15Adafruit_BME2806read24Eh+0xc8>
    } else {
        if (_sck == -1)
   d4704:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4708:	3301      	adds	r3, #1
   d470a:	d10e      	bne.n	d472a <_ZN15Adafruit_BME2806read24Eh+0x7a>
public:
  __SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
    : default_{false},
      clock_{clock},
      bitOrder_{bitOrder},
      dataMode_{dataMode}
   d470c:	4b1c      	ldr	r3, [pc, #112]	; (d4780 <_ZN15Adafruit_BME2806read24Eh+0xd0>)
   d470e:	4a1d      	ldr	r2, [pc, #116]	; (d4784 <_ZN15Adafruit_BME2806read24Eh+0xd4>)
   d4710:	9300      	str	r3, [sp, #0]
   d4712:	9202      	str	r2, [sp, #8]
   d4714:	2300      	movs	r3, #0
   d4716:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4718:	4668      	mov	r0, sp
   d471a:	f88d 3004 	strb.w	r3, [sp, #4]
   d471e:	f88d 200c 	strb.w	r2, [sp, #12]
   d4722:	f88d 300d 	strb.w	r3, [sp, #13]
   d4726:	f7ff ffb9 	bl	d469c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d472a:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d472e:	2100      	movs	r1, #0
   d4730:	b280      	uxth	r0, r0
   d4732:	f002 fb90 	bl	d6e56 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d4736:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d473a:	4620      	mov	r0, r4
   d473c:	f7ff ff70 	bl	d4620 <_ZN15Adafruit_BME2807spixferEh>

        value = spixfer(0);
   d4740:	2100      	movs	r1, #0
   d4742:	4620      	mov	r0, r4
   d4744:	f7ff ff6c 	bl	d4620 <_ZN15Adafruit_BME2807spixferEh>
        value <<= 8;
        value |= spixfer(0);
   d4748:	2100      	movs	r1, #0
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
        digitalWrite(_cs, LOW);
        spixfer(reg | 0x80); // read, bit 7 high

        value = spixfer(0);
        value <<= 8;
   d474a:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d474c:	4620      	mov	r0, r4
   d474e:	f7ff ff67 	bl	d4620 <_ZN15Adafruit_BME2807spixferEh>
   d4752:	4328      	orrs	r0, r5
        value <<= 8;
   d4754:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d4756:	2100      	movs	r1, #0
   d4758:	4620      	mov	r0, r4
   d475a:	f7ff ff61 	bl	d4620 <_ZN15Adafruit_BME2807spixferEh>
   d475e:	4305      	orrs	r5, r0

        digitalWrite(_cs, HIGH);
   d4760:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4764:	2101      	movs	r1, #1
   d4766:	b280      	uxth	r0, r0
   d4768:	f002 fb75 	bl	d6e56 <digitalWrite>
        if (_sck == -1)
   d476c:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d4770:	3301      	adds	r3, #1
   d4772:	d101      	bne.n	d4778 <_ZN15Adafruit_BME2806read24Eh+0xc8>
            SPI.endTransaction(); // release the SPI bus
   d4774:	f7ff ff8b 	bl	d468e <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }

    return value;
}
   d4778:	4628      	mov	r0, r5
   d477a:	b005      	add	sp, #20
   d477c:	bd30      	pop	{r4, r5, pc}
   d477e:	bf00      	nop
   d4780:	000d9848 	.word	0x000d9848
   d4784:	0007a120 	.word	0x0007a120

000d4788 <_ZN15Adafruit_BME28015readTemperatureEv>:
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   d4788:	b510      	push	{r4, lr}
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d478a:	21fa      	movs	r1, #250	; 0xfa
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   d478c:	4604      	mov	r4, r0
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d478e:	f7ff ff8f 	bl	d46b0 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
   d4792:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   d4796:	d01e      	beq.n	d47d6 <_ZN15Adafruit_BME28015readTemperatureEv+0x4e>
        return NAN;
    adc_T >>= 4;

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d4798:	8aa2      	ldrh	r2, [r4, #20]
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   d479a:	ed9f 7a10 	vldr	s14, [pc, #64]	; d47dc <_ZN15Adafruit_BME28015readTemperatureEv+0x54>

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
             
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
   d479e:	ebc2 2320 	rsb	r3, r2, r0, asr #8
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;
   d47a2:	0052      	lsls	r2, r2, #1
   d47a4:	ebc2 10e0 	rsb	r0, r2, r0, asr #7
   d47a8:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
   d47ac:	435b      	muls	r3, r3
   d47ae:	4350      	muls	r0, r2
   d47b0:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
   d47b4:	131b      	asrs	r3, r3, #12
   d47b6:	4353      	muls	r3, r2
   d47b8:	139b      	asrs	r3, r3, #14
   d47ba:	eb03 20e0 	add.w	r0, r3, r0, asr #11
   d47be:	60e0      	str	r0, [r4, #12]

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   d47c0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   d47c4:	3080      	adds	r0, #128	; 0x80
   d47c6:	1200      	asrs	r0, r0, #8
   d47c8:	ee07 0a90 	vmov	s15, r0
   d47cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d47d0:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d47d4:	bd10      	pop	{r4, pc}
{
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
    if (adc_T == 0x800000) // value in case temp measurement was disabled
        return NAN;
   d47d6:	ed9f 0a02 	vldr	s0, [pc, #8]	; d47e0 <_ZN15Adafruit_BME28015readTemperatureEv+0x58>

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
}
   d47da:	bd10      	pop	{r4, pc}
   d47dc:	42c80000 	.word	0x42c80000
   d47e0:	7fc00000 	.word	0x7fc00000

000d47e4 <_ZN15Adafruit_BME28012readPressureEv>:
/*!
    @brief  Returns the pressure from the sensor
    @returns the pressure value (in Pascal) read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readPressure(void) {
   d47e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d47e8:	4606      	mov	r6, r0
    int64_t var1, var2, p;

    readTemperature(); // must be done first to get t_fine
   d47ea:	f7ff ffcd 	bl	d4788 <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   d47ee:	21f7      	movs	r1, #247	; 0xf7
   d47f0:	4630      	mov	r0, r6
   d47f2:	f7ff ff5d 	bl	d46b0 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   d47f6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
float Adafruit_BME280::readPressure(void) {
    int64_t var1, var2, p;

    readTemperature(); // must be done first to get t_fine

    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   d47fa:	4607      	mov	r7, r0
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   d47fc:	f000 80c1 	beq.w	d4982 <_ZN15Adafruit_BME28012readPressureEv+0x19e>
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
   d4800:	68f4      	ldr	r4, [r6, #12]
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   d4802:	f9b6 201c 	ldrsh.w	r2, [r6, #28]
    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
   d4806:	17e5      	asrs	r5, r4, #31
   d4808:	f5b4 34fa 	subs.w	r4, r4, #128000	; 0x1f400
   d480c:	f145 35ff 	adc.w	r5, r5, #4294967295
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d4810:	fba4 8904 	umull	r8, r9, r4, r4
   d4814:	fb04 f305 	mul.w	r3, r4, r5
   d4818:	eb09 0943 	add.w	r9, r9, r3, lsl #1
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   d481c:	fb02 f105 	mul.w	r1, r2, r5
   d4820:	17d3      	asrs	r3, r2, #31
   d4822:	fb04 1103 	mla	r1, r4, r3, r1
   d4826:	fba2 2304 	umull	r2, r3, r2, r4
   d482a:	440b      	add	r3, r1
   d482c:	0319      	lsls	r1, r3, #12
   d482e:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
   d4832:	0310      	lsls	r0, r2, #12
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   d4834:	f9b6 201e 	ldrsh.w	r2, [r6, #30]
   d4838:	17d3      	asrs	r3, r2, #31
   d483a:	fb02 fe09 	mul.w	lr, r2, r9
   d483e:	fb08 ee03 	mla	lr, r8, r3, lr
   d4842:	fba2 2308 	umull	r2, r3, r2, r8
   d4846:	4473      	add	r3, lr
   d4848:	ea4f 2a12 	mov.w	sl, r2, lsr #8
   d484c:	ea4a 6a03 	orr.w	sl, sl, r3, lsl #24
   d4850:	eb1a 0a00 	adds.w	sl, sl, r0
   d4854:	8b72      	ldrh	r2, [r6, #26]
   d4856:	ea4f 2b23 	mov.w	fp, r3, asr #8
   d485a:	eb4b 0b01 	adc.w	fp, fp, r1
   d485e:	f11a 0000 	adds.w	r0, sl, #0
   d4862:	f54b 4100 	adc.w	r1, fp, #32768	; 0x8000
   d4866:	fba0 ab02 	umull	sl, fp, r0, r2
   d486a:	fb02 bb01 	mla	fp, r2, r1, fp
   d486e:	ea4f 026b 	mov.w	r2, fp, asr #1
   d4872:	ea4f 73eb 	mov.w	r3, fp, asr #31

    if (var1 == 0) {
   d4876:	ea52 0103 	orrs.w	r1, r2, r3
   d487a:	f000 8086 	beq.w	d498a <_ZN15Adafruit_BME28012readPressureEv+0x1a6>
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d487e:	f9b6 a024 	ldrsh.w	sl, [r6, #36]	; 0x24
   d4882:	ea4f 7bea 	mov.w	fp, sl, asr #31
   d4886:	fb0a f109 	mul.w	r1, sl, r9
   d488a:	fb08 110b 	mla	r1, r8, fp, r1
   d488e:	fbaa 8908 	umull	r8, r9, sl, r8
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d4892:	f9b6 a022 	ldrsh.w	sl, [r6, #34]	; 0x22
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d4896:	4489      	add	r9, r1
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d4898:	ea4f 7bea 	mov.w	fp, sl, asr #31
   d489c:	fb0a f105 	mul.w	r1, sl, r5
   d48a0:	fb04 110b 	mla	r1, r4, fp, r1
   d48a4:	fbaa 4504 	umull	r4, r5, sl, r4
   d48a8:	440d      	add	r5, r1
   d48aa:	ea4f 4b45 	mov.w	fp, r5, lsl #17
   d48ae:	ea4f 4a44 	mov.w	sl, r4, lsl #17

    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
   d48b2:	1138      	asrs	r0, r7, #4
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d48b4:	eb1a 0a08 	adds.w	sl, sl, r8

    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
   d48b8:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d48bc:	ea4b 3bd4 	orr.w	fp, fp, r4, lsr #15
   d48c0:	eb4b 0b09 	adc.w	fp, fp, r9

    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
   d48c4:	ea4f 79e0 	mov.w	r9, r0, asr #31
   d48c8:	ea4f 75c9 	mov.w	r5, r9, lsl #31
   d48cc:	ea45 0550 	orr.w	r5, r5, r0, lsr #1
   d48d0:	07c4      	lsls	r4, r0, #31
   d48d2:	f9b6 0020 	ldrsh.w	r0, [r6, #32]
   d48d6:	f04f 0800 	mov.w	r8, #0
   d48da:	eb18 080a 	adds.w	r8, r8, sl
   d48de:	ea4f 09c0 	mov.w	r9, r0, lsl #3
   d48e2:	eb49 090b 	adc.w	r9, r9, fp
   d48e6:	f640 4735 	movw	r7, #3125	; 0xc35
   d48ea:	ebb4 0408 	subs.w	r4, r4, r8
   d48ee:	eb65 0509 	sbc.w	r5, r5, r9
   d48f2:	fba4 0107 	umull	r0, r1, r4, r7
   d48f6:	fb07 1105 	mla	r1, r7, r5, r1
   d48fa:	f004 fbcb 	bl	d9094 <__aeabi_ldivmod>
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d48fe:	f9b6 202a 	ldrsh.w	r2, [r6, #42]	; 0x2a
    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   d4902:	134c      	asrs	r4, r1, #13
   d4904:	0b45      	lsrs	r5, r0, #13
   d4906:	ea45 45c1 	orr.w	r5, r5, r1, lsl #19
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d490a:	fb02 f704 	mul.w	r7, r2, r4
   d490e:	17d3      	asrs	r3, r2, #31
   d4910:	fb05 7703 	mla	r7, r5, r3, r7
   d4914:	fba2 2305 	umull	r2, r3, r2, r5
   d4918:	443b      	add	r3, r7
   d491a:	4354      	muls	r4, r2
   d491c:	fb05 4403 	mla	r4, r5, r3, r4
   d4920:	fba2 2305 	umull	r2, r3, r2, r5
   d4924:	4423      	add	r3, r4
   d4926:	0e54      	lsrs	r4, r2, #25
   d4928:	ea44 14c3 	orr.w	r4, r4, r3, lsl #7
   d492c:	f9b6 2028 	ldrsh.w	r2, [r6, #40]	; 0x28
   d4930:	1824      	adds	r4, r4, r0
   d4932:	ea4f 6563 	mov.w	r5, r3, asr #25
   d4936:	414d      	adcs	r5, r1
   d4938:	17d3      	asrs	r3, r2, #31
   d493a:	4351      	muls	r1, r2
   d493c:	fb00 1303 	mla	r3, r0, r3, r1
   d4940:	fba2 0100 	umull	r0, r1, r2, r0
   d4944:	4419      	add	r1, r3
   d4946:	0cc2      	lsrs	r2, r0, #19
   d4948:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
   d494c:	1912      	adds	r2, r2, r4
    return (float)p/256;
   d494e:	f9b6 4026 	ldrsh.w	r4, [r6, #38]	; 0x26
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d4952:	ea4f 43e1 	mov.w	r3, r1, asr #19
   d4956:	416b      	adcs	r3, r5
   d4958:	0a10      	lsrs	r0, r2, #8
    return (float)p/256;
   d495a:	17e5      	asrs	r5, r4, #31
   d495c:	0122      	lsls	r2, r4, #4
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d495e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
   d4962:	1219      	asrs	r1, r3, #8
    return (float)p/256;
   d4964:	012b      	lsls	r3, r5, #4
   d4966:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
   d496a:	1880      	adds	r0, r0, r2
   d496c:	4159      	adcs	r1, r3
   d496e:	f004 fb53 	bl	d9018 <__aeabi_l2f>
   d4972:	ed9f 0a08 	vldr	s0, [pc, #32]	; d4994 <_ZN15Adafruit_BME28012readPressureEv+0x1b0>
   d4976:	ee07 0a90 	vmov	s15, r0
   d497a:	ee27 0a80 	vmul.f32	s0, s15, s0
   d497e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

    readTemperature(); // must be done first to get t_fine

    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
   d4982:	ed9f 0a05 	vldr	s0, [pc, #20]	; d4998 <_ZN15Adafruit_BME28012readPressureEv+0x1b4>
   d4986:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;

    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
   d498a:	ed9f 0a04 	vldr	s0, [pc, #16]	; d499c <_ZN15Adafruit_BME28012readPressureEv+0x1b8>
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
    return (float)p/256;
}
   d498e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4992:	bf00      	nop
   d4994:	3b800000 	.word	0x3b800000
   d4998:	7fc00000 	.word	0x7fc00000
   d499c:	00000000 	.word	0x00000000

000d49a0 <_ZN15Adafruit_BME28012readAltitudeEf>:
    @param  seaLevel      Sea-level pressure in hPa
    @returns the altitude value read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readAltitude(float seaLevel)
{
   d49a0:	b508      	push	{r3, lr}
   d49a2:	ed2d 8b02 	vpush	{d8}
   d49a6:	eeb0 8a40 	vmov.f32	s16, s0

    // Note that using the equation from wikipedia can give bad results
    // at high altitude. See this thread for more information:
    //  http://forums.adafruit.com/viewtopic.php?f=22&t=58064

    float atmospheric = readPressure() / 100.0F;
   d49aa:	f7ff ff1b 	bl	d47e4 <_ZN15Adafruit_BME28012readPressureEv>
    return 44330.0 * (1.0 - pow(atmospheric / seaLevel, 0.1903));
   d49ae:	eddf 7a16 	vldr	s15, [pc, #88]	; d4a08 <_ZN15Adafruit_BME28012readAltitudeEf+0x68>
   d49b2:	ee80 0a27 	vdiv.f32	s0, s0, s15
   d49b6:	eec0 7a08 	vdiv.f32	s15, s0, s16
   d49ba:	ee17 0a90 	vmov	r0, s15
   d49be:	f003 febf 	bl	d8740 <__aeabi_f2d>
   d49c2:	ed9f 1b0d 	vldr	d1, [pc, #52]	; d49f8 <_ZN15Adafruit_BME28012readAltitudeEf+0x58>
   d49c6:	ec41 0b10 	vmov	d0, r0, r1
   d49ca:	f002 fc1d 	bl	d7208 <pow>
   d49ce:	2000      	movs	r0, #0
   d49d0:	ec53 2b10 	vmov	r2, r3, d0
   d49d4:	490d      	ldr	r1, [pc, #52]	; (d4a0c <_ZN15Adafruit_BME28012readAltitudeEf+0x6c>)
   d49d6:	f003 fd53 	bl	d8480 <__aeabi_dsub>
   d49da:	a309      	add	r3, pc, #36	; (adr r3, d4a00 <_ZN15Adafruit_BME28012readAltitudeEf+0x60>)
   d49dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d49e0:	f003 ff02 	bl	d87e8 <__aeabi_dmul>
   d49e4:	f004 f9f8 	bl	d8dd8 <__aeabi_d2f>
}
   d49e8:	ecbd 8b02 	vpop	{d8}
   d49ec:	ee00 0a10 	vmov	s0, r0
   d49f0:	bd08      	pop	{r3, pc}
   d49f2:	bf00      	nop
   d49f4:	f3af 8000 	nop.w
   d49f8:	1a36e2eb 	.word	0x1a36e2eb
   d49fc:	3fc85bc0 	.word	0x3fc85bc0
   d4a00:	00000000 	.word	0x00000000
   d4a04:	40e5a540 	.word	0x40e5a540
   d4a08:	42c80000 	.word	0x42c80000
   d4a0c:	3ff00000 	.word	0x3ff00000

000d4a10 <_ZN15Adafruit_BME2806read16Eh>:
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
   d4a10:	b530      	push	{r4, r5, lr}
    uint16_t value;

    if (_cs == -1) {
   d4a12:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d4a16:	3301      	adds	r3, #1
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
   d4a18:	b085      	sub	sp, #20
   d4a1a:	4604      	mov	r4, r0
   d4a1c:	460d      	mov	r5, r1
    uint16_t value;

    if (_cs == -1) {
   d4a1e:	d11d      	bne.n	d4a5c <_ZN15Adafruit_BME2806read16Eh+0x4c>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d4a20:	7901      	ldrb	r1, [r0, #4]
   d4a22:	6800      	ldr	r0, [r0, #0]
   d4a24:	f001 fd59 	bl	d64da <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4a28:	6820      	ldr	r0, [r4, #0]
   d4a2a:	6803      	ldr	r3, [r0, #0]
   d4a2c:	4629      	mov	r1, r5
   d4a2e:	689b      	ldr	r3, [r3, #8]
   d4a30:	4798      	blx	r3
        _wire -> endTransmission();
   d4a32:	6820      	ldr	r0, [r4, #0]
   d4a34:	f001 fd59 	bl	d64ea <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
   d4a38:	2202      	movs	r2, #2
   d4a3a:	7921      	ldrb	r1, [r4, #4]
   d4a3c:	6820      	ldr	r0, [r4, #0]
   d4a3e:	f001 fd49 	bl	d64d4 <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
   d4a42:	6820      	ldr	r0, [r4, #0]
   d4a44:	6803      	ldr	r3, [r0, #0]
   d4a46:	695b      	ldr	r3, [r3, #20]
   d4a48:	4798      	blx	r3
   d4a4a:	4605      	mov	r5, r0
   d4a4c:	6820      	ldr	r0, [r4, #0]
   d4a4e:	6803      	ldr	r3, [r0, #0]
   d4a50:	695b      	ldr	r3, [r3, #20]
   d4a52:	4798      	blx	r3
   d4a54:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d4a58:	b285      	uxth	r5, r0
   d4a5a:	e035      	b.n	d4ac8 <_ZN15Adafruit_BME2806read16Eh+0xb8>
    } else {
        if (_sck == -1)
   d4a5c:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4a60:	3301      	adds	r3, #1
   d4a62:	d10e      	bne.n	d4a82 <_ZN15Adafruit_BME2806read16Eh+0x72>
   d4a64:	4b1a      	ldr	r3, [pc, #104]	; (d4ad0 <_ZN15Adafruit_BME2806read16Eh+0xc0>)
   d4a66:	4a1b      	ldr	r2, [pc, #108]	; (d4ad4 <_ZN15Adafruit_BME2806read16Eh+0xc4>)
   d4a68:	9300      	str	r3, [sp, #0]
   d4a6a:	9202      	str	r2, [sp, #8]
   d4a6c:	2300      	movs	r3, #0
   d4a6e:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4a70:	4668      	mov	r0, sp
   d4a72:	f88d 3004 	strb.w	r3, [sp, #4]
   d4a76:	f88d 200c 	strb.w	r2, [sp, #12]
   d4a7a:	f88d 300d 	strb.w	r3, [sp, #13]
   d4a7e:	f7ff fe0d 	bl	d469c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d4a82:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4a86:	2100      	movs	r1, #0
   d4a88:	b280      	uxth	r0, r0
   d4a8a:	f002 f9e4 	bl	d6e56 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d4a8e:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d4a92:	4620      	mov	r0, r4
   d4a94:	f7ff fdc4 	bl	d4620 <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   d4a98:	2100      	movs	r1, #0
   d4a9a:	4620      	mov	r0, r4
   d4a9c:	f7ff fdc0 	bl	d4620 <_ZN15Adafruit_BME2807spixferEh>
   d4aa0:	2100      	movs	r1, #0
   d4aa2:	4605      	mov	r5, r0
   d4aa4:	4620      	mov	r0, r4
   d4aa6:	f7ff fdbb 	bl	d4620 <_ZN15Adafruit_BME2807spixferEh>
   d4aaa:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d4aae:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   d4ab0:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4ab4:	2101      	movs	r1, #1
   d4ab6:	b280      	uxth	r0, r0
   d4ab8:	f002 f9cd 	bl	d6e56 <digitalWrite>
        if (_sck == -1)
   d4abc:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d4ac0:	3301      	adds	r3, #1
   d4ac2:	d101      	bne.n	d4ac8 <_ZN15Adafruit_BME2806read16Eh+0xb8>
            SPI.endTransaction(); // release the SPI bus
   d4ac4:	f7ff fde3 	bl	d468e <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }

    return value;
}
   d4ac8:	4628      	mov	r0, r5
   d4aca:	b005      	add	sp, #20
   d4acc:	bd30      	pop	{r4, r5, pc}
   d4ace:	bf00      	nop
   d4ad0:	000d9848 	.word	0x000d9848
   d4ad4:	0007a120 	.word	0x0007a120

000d4ad8 <_ZN15Adafruit_BME2809read16_LEEh>:
    @brief  Reads a signed 16 bit little endian value over I2C or SPI
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   d4ad8:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   d4ada:	f7ff ff99 	bl	d4a10 <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   d4ade:	ba40      	rev16	r0, r0
}
   d4ae0:	b280      	uxth	r0, r0
   d4ae2:	bd08      	pop	{r3, pc}

000d4ae4 <_ZN15Adafruit_BME28012readHumidityEv>:
/*!
    @brief  Returns the humidity from the sensor
    @returns the humidity value read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readHumidity(void) {
   d4ae4:	b510      	push	{r4, lr}
   d4ae6:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
   d4ae8:	f7ff fe4e 	bl	d4788 <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
   d4aec:	21fd      	movs	r1, #253	; 0xfd
   d4aee:	4620      	mov	r0, r4
   d4af0:	f7ff ff8e 	bl	d4a10 <_ZN15Adafruit_BME2806read16Eh>
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
   d4af4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   d4af8:	d038      	beq.n	d4b6c <_ZN15Adafruit_BME28012readHumidityEv+0x88>
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d4afa:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
        return NAN;
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));
   d4afe:	68e2      	ldr	r2, [r4, #12]

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d4b00:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
   d4b04:	051b      	lsls	r3, r3, #20
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
        return NAN;
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));
   d4b06:	f5a2 3296 	sub.w	r2, r2, #76800	; 0x12c00

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d4b0a:	ebc3 3380 	rsb	r3, r3, r0, lsl #14
   d4b0e:	fb02 3311 	mls	r3, r2, r1, r3
   d4b12:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   d4b16:	13d9      	asrs	r1, r3, #15
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   d4b18:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   d4b1c:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d4b20:	4353      	muls	r3, r2
   d4b22:	12db      	asrs	r3, r3, #11
   d4b24:	4342      	muls	r2, r0
   d4b26:	1292      	asrs	r2, r2, #10
   d4b28:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   d4b2c:	4353      	muls	r3, r2
   d4b2e:	129b      	asrs	r3, r3, #10
   d4b30:	f9b4 202e 	ldrsh.w	r2, [r4, #46]	; 0x2e
   d4b34:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   d4b38:	4353      	muls	r3, r2
   d4b3a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   d4b3e:	139b      	asrs	r3, r3, #14
   d4b40:	434b      	muls	r3, r1

    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   d4b42:	13da      	asrs	r2, r3, #15
                               ((int32_t)_bme280_calib.dig_H1)) >> 4));
   d4b44:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
   d4b48:	4352      	muls	r2, r2
   d4b4a:	11d2      	asrs	r2, r2, #7
   d4b4c:	434a      	muls	r2, r1
   d4b4e:	eba3 1322 	sub.w	r3, r3, r2, asr #4

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
   d4b52:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
    float h = (v_x1_u32r>>12);
    return  h / 1024.0;
   d4b56:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
   d4b5a:	bfa8      	it	ge
   d4b5c:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
   d4b60:	131b      	asrs	r3, r3, #12
   d4b62:	ee00 3a10 	vmov	s0, r3
   d4b66:	eeba 0acb 	vcvt.f32.s32	s0, s0, #10
   d4b6a:	bd10      	pop	{r4, pc}
float Adafruit_BME280::readHumidity(void) {
    readTemperature(); // must be done first to get t_fine

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
        return NAN;
   d4b6c:	ed9f 0a01 	vldr	s0, [pc, #4]	; d4b74 <_ZN15Adafruit_BME28012readHumidityEv+0x90>

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
    float h = (v_x1_u32r>>12);
    return  h / 1024.0;
}
   d4b70:	bd10      	pop	{r4, pc}
   d4b72:	bf00      	nop
   d4b74:	7fc00000 	.word	0x7fc00000

000d4b78 <_ZN15Adafruit_BME2805read8Eh>:
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   d4b78:	b530      	push	{r4, r5, lr}
    uint8_t value;
    
    if (_cs == -1) {
   d4b7a:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d4b7e:	3301      	adds	r3, #1
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   d4b80:	b085      	sub	sp, #20
   d4b82:	4604      	mov	r4, r0
   d4b84:	460d      	mov	r5, r1
    uint8_t value;
    
    if (_cs == -1) {
   d4b86:	d116      	bne.n	d4bb6 <_ZN15Adafruit_BME2805read8Eh+0x3e>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d4b88:	7901      	ldrb	r1, [r0, #4]
   d4b8a:	6800      	ldr	r0, [r0, #0]
   d4b8c:	f001 fca5 	bl	d64da <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4b90:	6820      	ldr	r0, [r4, #0]
   d4b92:	6803      	ldr	r3, [r0, #0]
   d4b94:	4629      	mov	r1, r5
   d4b96:	689b      	ldr	r3, [r3, #8]
   d4b98:	4798      	blx	r3
        _wire -> endTransmission();
   d4b9a:	6820      	ldr	r0, [r4, #0]
   d4b9c:	f001 fca5 	bl	d64ea <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
   d4ba0:	2201      	movs	r2, #1
   d4ba2:	7921      	ldrb	r1, [r4, #4]
   d4ba4:	6820      	ldr	r0, [r4, #0]
   d4ba6:	f001 fc95 	bl	d64d4 <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   d4baa:	6820      	ldr	r0, [r4, #0]
   d4bac:	6803      	ldr	r3, [r0, #0]
   d4bae:	695b      	ldr	r3, [r3, #20]
   d4bb0:	4798      	blx	r3
   d4bb2:	b2c5      	uxtb	r5, r0
   d4bb4:	e02e      	b.n	d4c14 <_ZN15Adafruit_BME2805read8Eh+0x9c>
    } else {
        if (_sck == -1)
   d4bb6:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4bba:	3301      	adds	r3, #1
   d4bbc:	d10e      	bne.n	d4bdc <_ZN15Adafruit_BME2805read8Eh+0x64>
   d4bbe:	4b17      	ldr	r3, [pc, #92]	; (d4c1c <_ZN15Adafruit_BME2805read8Eh+0xa4>)
   d4bc0:	4a17      	ldr	r2, [pc, #92]	; (d4c20 <_ZN15Adafruit_BME2805read8Eh+0xa8>)
   d4bc2:	9300      	str	r3, [sp, #0]
   d4bc4:	9202      	str	r2, [sp, #8]
   d4bc6:	2300      	movs	r3, #0
   d4bc8:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4bca:	4668      	mov	r0, sp
   d4bcc:	f88d 3004 	strb.w	r3, [sp, #4]
   d4bd0:	f88d 200c 	strb.w	r2, [sp, #12]
   d4bd4:	f88d 300d 	strb.w	r3, [sp, #13]
   d4bd8:	f7ff fd60 	bl	d469c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d4bdc:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4be0:	2100      	movs	r1, #0
   d4be2:	b280      	uxth	r0, r0
   d4be4:	f002 f937 	bl	d6e56 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d4be8:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d4bec:	4620      	mov	r0, r4
   d4bee:	f7ff fd17 	bl	d4620 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   d4bf2:	2100      	movs	r1, #0
   d4bf4:	4620      	mov	r0, r4
   d4bf6:	f7ff fd13 	bl	d4620 <_ZN15Adafruit_BME2807spixferEh>
   d4bfa:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   d4bfc:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4c00:	2101      	movs	r1, #1
   d4c02:	b280      	uxth	r0, r0
   d4c04:	f002 f927 	bl	d6e56 <digitalWrite>
        if (_sck == -1)
   d4c08:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d4c0c:	3301      	adds	r3, #1
   d4c0e:	d101      	bne.n	d4c14 <_ZN15Adafruit_BME2805read8Eh+0x9c>
            SPI.endTransaction(); // release the SPI bus
   d4c10:	f7ff fd3d 	bl	d468e <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }
    return value;
}
   d4c14:	4628      	mov	r0, r5
   d4c16:	b005      	add	sp, #20
   d4c18:	bd30      	pop	{r4, r5, pc}
   d4c1a:	bf00      	nop
   d4c1c:	000d9848 	.word	0x000d9848
   d4c20:	0007a120 	.word	0x0007a120

000d4c24 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
    @brief return true if chip is busy reading cal data
    @returns true if reading calibration, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::isReadingCalibration(void)
{
   d4c24:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   d4c26:	21f3      	movs	r1, #243	; 0xf3
   d4c28:	f7ff ffa6 	bl	d4b78 <_ZN15Adafruit_BME2805read8Eh>

  return (rStatus & (1 << 0)) != 0;
}
   d4c2c:	f000 0001 	and.w	r0, r0, #1
   d4c30:	bd08      	pop	{r3, pc}

000d4c32 <_ZN15Adafruit_BME28016readCoefficientsEv>:
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
   d4c32:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d4c34:	2188      	movs	r1, #136	; 0x88
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
   d4c36:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d4c38:	f7ff ff4e 	bl	d4ad8 <_ZN15Adafruit_BME2809read16_LEEh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4c3c:	218a      	movs	r1, #138	; 0x8a
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d4c3e:	82a0      	strh	r0, [r4, #20]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4c40:	4620      	mov	r0, r4
   d4c42:	f7ff ff49 	bl	d4ad8 <_ZN15Adafruit_BME2809read16_LEEh>
   d4c46:	218c      	movs	r1, #140	; 0x8c
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   d4c48:	82e0      	strh	r0, [r4, #22]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4c4a:	4620      	mov	r0, r4
   d4c4c:	f7ff ff44 	bl	d4ad8 <_ZN15Adafruit_BME2809read16_LEEh>
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d4c50:	218e      	movs	r1, #142	; 0x8e
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   d4c52:	8320      	strh	r0, [r4, #24]

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d4c54:	4620      	mov	r0, r4
   d4c56:	f7ff ff3f 	bl	d4ad8 <_ZN15Adafruit_BME2809read16_LEEh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4c5a:	2190      	movs	r1, #144	; 0x90
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d4c5c:	8360      	strh	r0, [r4, #26]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4c5e:	4620      	mov	r0, r4
   d4c60:	f7ff ff3a 	bl	d4ad8 <_ZN15Adafruit_BME2809read16_LEEh>
   d4c64:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   d4c66:	83a0      	strh	r0, [r4, #28]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4c68:	4620      	mov	r0, r4
   d4c6a:	f7ff ff35 	bl	d4ad8 <_ZN15Adafruit_BME2809read16_LEEh>
   d4c6e:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   d4c70:	83e0      	strh	r0, [r4, #30]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4c72:	4620      	mov	r0, r4
   d4c74:	f7ff ff30 	bl	d4ad8 <_ZN15Adafruit_BME2809read16_LEEh>
   d4c78:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   d4c7a:	8420      	strh	r0, [r4, #32]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4c7c:	4620      	mov	r0, r4
   d4c7e:	f7ff ff2b 	bl	d4ad8 <_ZN15Adafruit_BME2809read16_LEEh>
   d4c82:	2198      	movs	r1, #152	; 0x98

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   d4c84:	8460      	strh	r0, [r4, #34]	; 0x22
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4c86:	4620      	mov	r0, r4
   d4c88:	f7ff ff26 	bl	d4ad8 <_ZN15Adafruit_BME2809read16_LEEh>
   d4c8c:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   d4c8e:	84a0      	strh	r0, [r4, #36]	; 0x24
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4c90:	4620      	mov	r0, r4
   d4c92:	f7ff ff21 	bl	d4ad8 <_ZN15Adafruit_BME2809read16_LEEh>
   d4c96:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   d4c98:	84e0      	strh	r0, [r4, #38]	; 0x26
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4c9a:	4620      	mov	r0, r4
   d4c9c:	f7ff ff1c 	bl	d4ad8 <_ZN15Adafruit_BME2809read16_LEEh>
   d4ca0:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   d4ca2:	8520      	strh	r0, [r4, #40]	; 0x28
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4ca4:	4620      	mov	r0, r4
   d4ca6:	f7ff ff17 	bl	d4ad8 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d4caa:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   d4cac:	8560      	strh	r0, [r4, #42]	; 0x2a

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d4cae:	4620      	mov	r0, r4
   d4cb0:	f7ff ff62 	bl	d4b78 <_ZN15Adafruit_BME2805read8Eh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4cb4:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d4cb6:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4cba:	4620      	mov	r0, r4
   d4cbc:	f7ff ff0c 	bl	d4ad8 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d4cc0:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   d4cc2:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d4cc4:	4620      	mov	r0, r4
   d4cc6:	f7ff ff57 	bl	d4b78 <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d4cca:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d4ccc:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d4cd0:	4620      	mov	r0, r4
   d4cd2:	f7ff ff51 	bl	d4b78 <_ZN15Adafruit_BME2805read8Eh>
   d4cd6:	21e5      	movs	r1, #229	; 0xe5
   d4cd8:	4605      	mov	r5, r0
   d4cda:	4620      	mov	r0, r4
   d4cdc:	f7ff ff4c 	bl	d4b78 <_ZN15Adafruit_BME2805read8Eh>
   d4ce0:	f000 000f 	and.w	r0, r0, #15
   d4ce4:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
   d4ce8:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   d4cea:	21e6      	movs	r1, #230	; 0xe6
   d4cec:	4620      	mov	r0, r4
   d4cee:	f7ff ff43 	bl	d4b78 <_ZN15Adafruit_BME2805read8Eh>
   d4cf2:	21e5      	movs	r1, #229	; 0xe5
   d4cf4:	4605      	mov	r5, r0
   d4cf6:	4620      	mov	r0, r4
   d4cf8:	f7ff ff3e 	bl	d4b78 <_ZN15Adafruit_BME2805read8Eh>
   d4cfc:	1100      	asrs	r0, r0, #4
   d4cfe:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
   d4d02:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   d4d04:	21e7      	movs	r1, #231	; 0xe7
   d4d06:	4620      	mov	r0, r4
   d4d08:	f7ff ff36 	bl	d4b78 <_ZN15Adafruit_BME2805read8Eh>
   d4d0c:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
   d4d10:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4d14 <_ZN15Adafruit_BME2806write8Ehh>:
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   d4d14:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   d4d16:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d4d1a:	3301      	adds	r3, #1
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   d4d1c:	4604      	mov	r4, r0
   d4d1e:	460e      	mov	r6, r1
   d4d20:	4615      	mov	r5, r2
    if (_cs == -1) {
   d4d22:	d111      	bne.n	d4d48 <_ZN15Adafruit_BME2806write8Ehh+0x34>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d4d24:	7901      	ldrb	r1, [r0, #4]
   d4d26:	6800      	ldr	r0, [r0, #0]
   d4d28:	f001 fbd7 	bl	d64da <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4d2c:	6820      	ldr	r0, [r4, #0]
   d4d2e:	6803      	ldr	r3, [r0, #0]
   d4d30:	4631      	mov	r1, r6
   d4d32:	689b      	ldr	r3, [r3, #8]
   d4d34:	4798      	blx	r3
        _wire -> write((uint8_t)value);
   d4d36:	6820      	ldr	r0, [r4, #0]
   d4d38:	6803      	ldr	r3, [r0, #0]
   d4d3a:	4629      	mov	r1, r5
   d4d3c:	689b      	ldr	r3, [r3, #8]
   d4d3e:	4798      	blx	r3
        _wire -> endTransmission();
   d4d40:	6820      	ldr	r0, [r4, #0]
   d4d42:	f001 fbd2 	bl	d64ea <_ZN7TwoWire15endTransmissionEv>
   d4d46:	e02d      	b.n	d4da4 <_ZN15Adafruit_BME2806write8Ehh+0x90>
    } else {
        if (_sck == -1)
   d4d48:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4d4c:	3301      	adds	r3, #1
   d4d4e:	d10e      	bne.n	d4d6e <_ZN15Adafruit_BME2806write8Ehh+0x5a>
   d4d50:	4b15      	ldr	r3, [pc, #84]	; (d4da8 <_ZN15Adafruit_BME2806write8Ehh+0x94>)
   d4d52:	4a16      	ldr	r2, [pc, #88]	; (d4dac <_ZN15Adafruit_BME2806write8Ehh+0x98>)
   d4d54:	9300      	str	r3, [sp, #0]
   d4d56:	9202      	str	r2, [sp, #8]
   d4d58:	2300      	movs	r3, #0
   d4d5a:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4d5c:	4668      	mov	r0, sp
   d4d5e:	f88d 3004 	strb.w	r3, [sp, #4]
   d4d62:	f88d 200c 	strb.w	r2, [sp, #12]
   d4d66:	f88d 300d 	strb.w	r3, [sp, #13]
   d4d6a:	f7ff fc97 	bl	d469c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d4d6e:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4d72:	2100      	movs	r1, #0
   d4d74:	b280      	uxth	r0, r0
   d4d76:	f002 f86e 	bl	d6e56 <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   d4d7a:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   d4d7e:	4620      	mov	r0, r4
   d4d80:	f7ff fc4e 	bl	d4620 <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   d4d84:	4629      	mov	r1, r5
   d4d86:	4620      	mov	r0, r4
   d4d88:	f7ff fc4a 	bl	d4620 <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   d4d8c:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4d90:	2101      	movs	r1, #1
   d4d92:	b280      	uxth	r0, r0
   d4d94:	f002 f85f 	bl	d6e56 <digitalWrite>
    if (_sck == -1)
   d4d98:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d4d9c:	3301      	adds	r3, #1
   d4d9e:	d101      	bne.n	d4da4 <_ZN15Adafruit_BME2806write8Ehh+0x90>
        SPI.endTransaction(); // release the SPI bus
   d4da0:	f7ff fc75 	bl	d468e <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }
}
   d4da4:	b004      	add	sp, #16
   d4da6:	bd70      	pop	{r4, r5, r6, pc}
   d4da8:	000d9848 	.word	0x000d9848
   d4dac:	0007a120 	.word	0x0007a120

000d4db0 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d4db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.mode     = mode;
   d4db2:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d4db6:	f89d 6018 	ldrb.w	r6, [sp, #24]
   d4dba:	f89d e01c 	ldrb.w	lr, [sp, #28]
   d4dbe:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _measReg.mode     = mode;
   d4dc2:	f361 1587 	bfi	r5, r1, #6, #2
    _measReg.osrs_t   = tempSampling;
   d4dc6:	f362 0502 	bfi	r5, r2, #0, #3
    _measReg.osrs_p   = pressSampling;
   d4dca:	f363 05c5 	bfi	r5, r3, #3, #3
        
    
    _humReg.osrs_h    = humSampling;
   d4dce:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
    _measReg.mode     = mode;
    _measReg.osrs_t   = tempSampling;
    _measReg.osrs_p   = pressSampling;
   d4dd2:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
        
    
    _humReg.osrs_h    = humSampling;
   d4dd6:	f366 1347 	bfi	r3, r6, #5, #3
   d4dda:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.filter = filter;
   d4dde:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   d4de2:	f36e 03c5 	bfi	r3, lr, #3, #3
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d4de6:	4604      	mov	r4, r0
    _measReg.osrs_p   = pressSampling;
        
    
    _humReg.osrs_h    = humSampling;
    _configReg.filter = filter;
    _configReg.t_sb   = duration;
   d4de8:	f367 0302 	bfi	r3, r7, #0, #3
   d4dec:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    
    // you must make sure to also set REGISTER_CONTROL after setting the
    // CONTROLHUMID register, otherwise the values won't be applied (see DS 5.4.3)
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   d4df0:	f006 0207 	and.w	r2, r6, #7
   d4df4:	21f2      	movs	r1, #242	; 0xf2
   d4df6:	f7ff ff8d 	bl	d4d14 <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
   d4dfa:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   d4dfe:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d4e02:	f002 0107 	and.w	r1, r2, #7
   d4e06:	009b      	lsls	r3, r3, #2
   d4e08:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   d4e0c:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   d4e10:	4620      	mov	r0, r4
   d4e12:	21f5      	movs	r1, #245	; 0xf5
   d4e14:	f7ff ff7e 	bl	d4d14 <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
   d4e18:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d4e1c:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d4e20:	f002 0107 	and.w	r1, r2, #7
   d4e24:	009b      	lsls	r3, r3, #2
   d4e26:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   d4e2a:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   d4e2e:	4620      	mov	r0, r4
   d4e30:	21f4      	movs	r1, #244	; 0xf4
}
   d4e32:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    
    // you must make sure to also set REGISTER_CONTROL after setting the
    // CONTROLHUMID register, otherwise the values won't be applied (see DS 5.4.3)
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
    write8(BME280_REGISTER_CONFIG, _configReg.get());
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d4e36:	f7ff bf6d 	b.w	d4d14 <_ZN15Adafruit_BME2806write8Ehh>

000d4e3a <_ZN15Adafruit_BME2804initEv>:
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::init()
{
   d4e3a:	b530      	push	{r4, r5, lr}
   d4e3c:	4604      	mov	r4, r0
    // init I2C or SPI sensor interface
    if (_cs == -1) {
   d4e3e:	f990 0010 	ldrsb.w	r0, [r0, #16]
   d4e42:	1c42      	adds	r2, r0, #1
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::init()
{
   d4e44:	b085      	sub	sp, #20
    // init I2C or SPI sensor interface
    if (_cs == -1) {
   d4e46:	d103      	bne.n	d4e50 <_ZN15Adafruit_BME2804initEv+0x16>
        // I2C
        _wire -> begin();
   d4e48:	6820      	ldr	r0, [r4, #0]
   d4e4a:	f001 fb0f 	bl	d646c <_ZN7TwoWire5beginEv>
   d4e4e:	e022      	b.n	d4e96 <_ZN15Adafruit_BME2804initEv+0x5c>
    } else {
        digitalWrite(_cs, HIGH);
   d4e50:	2101      	movs	r1, #1
   d4e52:	b280      	uxth	r0, r0
   d4e54:	f001 ffff 	bl	d6e56 <digitalWrite>
        pinMode(_cs, OUTPUT);
   d4e58:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4e5c:	2101      	movs	r1, #1
   d4e5e:	b280      	uxth	r0, r0
   d4e60:	f001 ffe8 	bl	d6e34 <pinMode>
        if (_sck == -1) {
   d4e64:	f994 0013 	ldrsb.w	r0, [r4, #19]
   d4e68:	1c43      	adds	r3, r0, #1
   d4e6a:	d104      	bne.n	d4e76 <_ZN15Adafruit_BME2804initEv+0x3c>
        static SPIClass instance(Interface);
        return instance;
    }

    void begin() {
        instance().begin();
   d4e6c:	f7ff fbc0 	bl	d45f0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4e70:	f000 fdfe 	bl	d5a70 <_ZN8SPIClass5beginEv>
   d4e74:	e00f      	b.n	d4e96 <_ZN15Adafruit_BME2804initEv+0x5c>
            // hardware SPI
            SPI.begin();
        } else {
            // software SPI
            pinMode(_sck, OUTPUT);
   d4e76:	2101      	movs	r1, #1
   d4e78:	b280      	uxth	r0, r0
   d4e7a:	f001 ffdb 	bl	d6e34 <pinMode>
            pinMode(_mosi, OUTPUT);
   d4e7e:	f994 0011 	ldrsb.w	r0, [r4, #17]
   d4e82:	2101      	movs	r1, #1
   d4e84:	b280      	uxth	r0, r0
   d4e86:	f001 ffd5 	bl	d6e34 <pinMode>
            pinMode(_miso, INPUT);
   d4e8a:	f994 0012 	ldrsb.w	r0, [r4, #18]
   d4e8e:	2100      	movs	r1, #0
   d4e90:	b280      	uxth	r0, r0
   d4e92:	f001 ffcf 	bl	d6e34 <pinMode>
        }
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d4e96:	21d0      	movs	r1, #208	; 0xd0
   d4e98:	4620      	mov	r0, r4
   d4e9a:	f7ff fe6d 	bl	d4b78 <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
   d4e9e:	2860      	cmp	r0, #96	; 0x60
            pinMode(_miso, INPUT);
        }
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d4ea0:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
   d4ea2:	d120      	bne.n	d4ee6 <_ZN15Adafruit_BME2804initEv+0xac>
        return false;

    // reset the device using soft-reset
    // this makes sure the IIR is off, etc.
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   d4ea4:	4620      	mov	r0, r4
   d4ea6:	22b6      	movs	r2, #182	; 0xb6
   d4ea8:	21e0      	movs	r1, #224	; 0xe0
   d4eaa:	f7ff ff33 	bl	d4d14 <_ZN15Adafruit_BME2806write8Ehh>

    // wait for chip to wake up.
    delay(300);
   d4eae:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d4eb2:	f001 f85d 	bl	d5f70 <delay>

    // if chip is still reading calibration, delay
    while (isReadingCalibration())
   d4eb6:	4620      	mov	r0, r4
   d4eb8:	f7ff feb4 	bl	d4c24 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   d4ebc:	4605      	mov	r5, r0
   d4ebe:	b108      	cbz	r0, d4ec4 <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
   d4ec0:	2064      	movs	r0, #100	; 0x64
   d4ec2:	e7f6      	b.n	d4eb2 <_ZN15Adafruit_BME2804initEv+0x78>

    readCoefficients(); // read trimming parameters, see DS 4.2.2
   d4ec4:	4620      	mov	r0, r4
   d4ec6:	f7ff feb4 	bl	d4c32 <_ZN15Adafruit_BME28016readCoefficientsEv>

    setSampling(); // use defaults
   d4eca:	2305      	movs	r3, #5
   d4ecc:	9300      	str	r3, [sp, #0]
   d4ece:	461a      	mov	r2, r3
   d4ed0:	2103      	movs	r1, #3
   d4ed2:	4620      	mov	r0, r4
   d4ed4:	9502      	str	r5, [sp, #8]
   d4ed6:	9501      	str	r5, [sp, #4]
   d4ed8:	f7ff ff6a 	bl	d4db0 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>

    delay(100);
   d4edc:	2064      	movs	r0, #100	; 0x64
   d4ede:	f001 f847 	bl	d5f70 <delay>
   d4ee2:	2001      	movs	r0, #1
   d4ee4:	e000      	b.n	d4ee8 <_ZN15Adafruit_BME2804initEv+0xae>
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
    if (_sensorID != 0x60)
        return false;
   d4ee6:	2000      	movs	r0, #0
    setSampling(); // use defaults

    delay(100);

    return true;
}
   d4ee8:	b005      	add	sp, #20
   d4eea:	bd30      	pop	{r4, r5, pc}

000d4eec <_ZN15Adafruit_BME2805beginEv>:
*/
/**************************************************************************/
bool Adafruit_BME280::begin(void)
{
    bool status = false;
    _i2caddr = BME280_ADDRESS;
   d4eec:	2377      	movs	r3, #119	; 0x77
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::begin(void)
{
   d4eee:	b510      	push	{r4, lr}
    bool status = false;
    _i2caddr = BME280_ADDRESS;
   d4ef0:	7103      	strb	r3, [r0, #4]
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::begin(void)
{
   d4ef2:	4604      	mov	r4, r0
    bool status = false;
    _i2caddr = BME280_ADDRESS;
	_wire = &Wire;
   d4ef4:	f001 fff6 	bl	d6ee4 <_Z19__fetch_global_Wirev>
   d4ef8:	6020      	str	r0, [r4, #0]
	status = init();
   d4efa:	4620      	mov	r0, r4
   d4efc:	f7ff ff9d 	bl	d4e3a <_ZN15Adafruit_BME2804initEv>
 	if(!status){
   d4f00:	b930      	cbnz	r0, d4f10 <_ZN15Adafruit_BME2805beginEv+0x24>
 		_i2caddr = BME280_ADDRESS_ALTERNATE;
   d4f02:	2376      	movs	r3, #118	; 0x76
   d4f04:	7123      	strb	r3, [r4, #4]
 		status = init();
   d4f06:	4620      	mov	r0, r4
 		}
	return status;
}
   d4f08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    _i2caddr = BME280_ADDRESS;
	_wire = &Wire;
	status = init();
 	if(!status){
 		_i2caddr = BME280_ADDRESS_ALTERNATE;
 		status = init();
   d4f0c:	f7ff bf95 	b.w	d4e3a <_ZN15Adafruit_BME2804initEv>
 		}
	return status;
}
   d4f10:	bd10      	pop	{r4, pc}

000d4f12 <_GLOBAL__sub_I__ZN15Adafruit_BME280C2Ev>:
   d4f12:	f000 badb 	b.w	d54cc <HAL_Pin_Map>

000d4f16 <_ZN19Adafruit_MQTT_SPARK9connectedEv>:
    client->stop();
  }
  return true;
}

bool Adafruit_MQTT_SPARK::connected() {
   d4f16:	b508      	push	{r3, lr}
  // Return true if connected, false if not connected.
  return client->connected();
   d4f18:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   d4f1c:	6803      	ldr	r3, [r0, #0]
   d4f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4f20:	4798      	blx	r3
}
   d4f22:	3000      	adds	r0, #0
   d4f24:	bf18      	it	ne
   d4f26:	2001      	movne	r0, #1
   d4f28:	bd08      	pop	{r3, pc}

000d4f2a <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht>:
    delay(MQTT_CLIENT_READINTERVAL_MS);
  }
  return len;
}

bool Adafruit_MQTT_SPARK::sendPacket(uint8_t *buffer, uint16_t len) {
   d4f2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4f2c:	4606      	mov	r6, r0
   d4f2e:	460f      	mov	r7, r1
   d4f30:	4614      	mov	r4, r2
  uint16_t ret = 0;

  while (len > 0) {
   d4f32:	b1c4      	cbz	r4, d4f66 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x3c>
    if (client->connected()) {
   d4f34:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d4f38:	6803      	ldr	r3, [r0, #0]
   d4f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4f3c:	4798      	blx	r3
   d4f3e:	b908      	cbnz	r0, d4f44 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x1a>
	DEBUG_PRINTLN("Failed to send packet.");
	return false;
      }
    } else {
      DEBUG_PRINTLN(F("Connection failed!"));
      return false;
   d4f40:	2000      	movs	r0, #0
   d4f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (client->connected()) {
      // send 250 bytes at most at a time, can adjust this later based on Client

      uint16_t sendlen = min(len, 250);
      //Serial.print("Sending: "); Serial.println(sendlen);
      ret = client->write(buffer, sendlen);
   d4f44:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
max (T a, U b) { return ((a)>(b)?(a):(b)); }

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d4f48:	2cfa      	cmp	r4, #250	; 0xfa
   d4f4a:	6803      	ldr	r3, [r0, #0]
   d4f4c:	4625      	mov	r5, r4
   d4f4e:	bfa8      	it	ge
   d4f50:	25fa      	movge	r5, #250	; 0xfa
   d4f52:	68db      	ldr	r3, [r3, #12]
   d4f54:	462a      	mov	r2, r5
   d4f56:	4639      	mov	r1, r7
   d4f58:	4798      	blx	r3
   d4f5a:	b280      	uxth	r0, r0
      DEBUG_PRINT(F("Client sendPacket returned: ")); DEBUG_PRINTLN(ret);
      len -= ret;
   d4f5c:	1a24      	subs	r4, r4, r0

      if (ret != sendlen) {
   d4f5e:	4285      	cmp	r5, r0

      uint16_t sendlen = min(len, 250);
      //Serial.print("Sending: "); Serial.println(sendlen);
      ret = client->write(buffer, sendlen);
      DEBUG_PRINT(F("Client sendPacket returned: ")); DEBUG_PRINTLN(ret);
      len -= ret;
   d4f60:	b2a4      	uxth	r4, r4

      if (ret != sendlen) {
   d4f62:	d0e6      	beq.n	d4f32 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x8>
   d4f64:	e7ec      	b.n	d4f40 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x16>
    } else {
      DEBUG_PRINTLN(F("Connection failed!"));
      return false;
    }
  }
  return true;
   d4f66:	2001      	movs	r0, #1
}
   d4f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4f6a <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts>:
  // Return true if connected, false if not connected.
  return client->connected();
}

uint16_t Adafruit_MQTT_SPARK::readPacket(uint8_t *buffer, uint16_t maxlen,
                                          int16_t timeout) {
   d4f6a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4f6e:	4606      	mov	r6, r0
   d4f70:	4688      	mov	r8, r1
   d4f72:	4691      	mov	r9, r2
   d4f74:	461f      	mov	r7, r3
   d4f76:	461d      	mov	r5, r3
  /* Read data until either the connection is closed, or the idle timeout is reached. */
  uint16_t len = 0;
   d4f78:	2400      	movs	r4, #0
  int16_t t = timeout;

  while (client->connected() && (timeout >= 0)) {
   d4f7a:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d4f7e:	6803      	ldr	r3, [r0, #0]
   d4f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4f82:	4798      	blx	r3
   d4f84:	b1d0      	cbz	r0, d4fbc <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
   d4f86:	2d00      	cmp	r5, #0
   d4f88:	db18      	blt.n	d4fbc <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
    //DEBUG_PRINT('.');
    while (client->available()) {
   d4f8a:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d4f8e:	6803      	ldr	r3, [r0, #0]
   d4f90:	691b      	ldr	r3, [r3, #16]
   d4f92:	4798      	blx	r3
   d4f94:	b160      	cbz	r0, d4fb0 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x46>
      //DEBUG_PRINT('!');
      char c = client->read();
   d4f96:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d4f9a:	6803      	ldr	r3, [r0, #0]
   d4f9c:	695b      	ldr	r3, [r3, #20]
   d4f9e:	4798      	blx	r3
      timeout = t;  // reset the timeout
      buffer[len] = c;
   d4fa0:	f808 0004 	strb.w	r0, [r8, r4]
      //DEBUG_PRINTLN((uint8_t)c, HEX);
      len++;
   d4fa4:	3401      	adds	r4, #1
   d4fa6:	b2a4      	uxth	r4, r4
      if (len == maxlen) {  // we read all we want, bail
   d4fa8:	454c      	cmp	r4, r9
   d4faa:	d007      	beq.n	d4fbc <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
  while (client->connected() && (timeout >= 0)) {
    //DEBUG_PRINT('.');
    while (client->available()) {
      //DEBUG_PRINT('!');
      char c = client->read();
      timeout = t;  // reset the timeout
   d4fac:	463d      	mov	r5, r7
   d4fae:	e7ec      	b.n	d4f8a <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x20>
        DEBUG_PRINT(F("Read data:\t"));
        DEBUG_PRINTBUFFER(buffer, len);
        return len;
      }
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   d4fb0:	3d0a      	subs	r5, #10
    delay(MQTT_CLIENT_READINTERVAL_MS);
   d4fb2:	200a      	movs	r0, #10
        DEBUG_PRINT(F("Read data:\t"));
        DEBUG_PRINTBUFFER(buffer, len);
        return len;
      }
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   d4fb4:	b22d      	sxth	r5, r5
    delay(MQTT_CLIENT_READINTERVAL_MS);
   d4fb6:	f000 ffdb 	bl	d5f70 <delay>
                                          int16_t timeout) {
  /* Read data until either the connection is closed, or the idle timeout is reached. */
  uint16_t len = 0;
  int16_t t = timeout;

  while (client->connected() && (timeout >= 0)) {
   d4fba:	e7de      	b.n	d4f7a <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x10>
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
    delay(MQTT_CLIENT_READINTERVAL_MS);
  }
  return len;
}
   d4fbc:	4620      	mov	r0, r4
   d4fbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d4fc2 <_ZN19Adafruit_MQTT_SPARK13connectServerEv>:
        }
    }
    return true;
}

bool Adafruit_MQTT_SPARK::connectServer(){
   d4fc2:	b570      	push	{r4, r5, r6, lr}
   d4fc4:	4604      	mov	r4, r0
  // Grab server name from flash and copy to buffer for name resolution.
  memset(buffer, 0, sizeof(buffer));
   d4fc6:	f100 0522 	add.w	r5, r0, #34	; 0x22
   d4fca:	2296      	movs	r2, #150	; 0x96
   d4fcc:	2100      	movs	r1, #0
   d4fce:	4628      	mov	r0, r5
   d4fd0:	f004 fa58 	bl	d9484 <memset>
  strcpy((char *)buffer, servername);
   d4fd4:	6861      	ldr	r1, [r4, #4]
   d4fd6:	4628      	mov	r0, r5
   d4fd8:	f004 fa84 	bl	d94e4 <strcpy>
  DEBUG_PRINT(F("Connecting to: ")); DEBUG_PRINTLN((char *)buffer);
  // Connect and check for success (0 result).
  int r = client->connect((char *)buffer, portnum);
   d4fdc:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   d4fe0:	8922      	ldrh	r2, [r4, #8]
   d4fe2:	6803      	ldr	r3, [r0, #0]
   d4fe4:	4629      	mov	r1, r5
   d4fe6:	6a5e      	ldr	r6, [r3, #36]	; 0x24
   d4fe8:	2300      	movs	r3, #0
   d4fea:	47b0      	blx	r6
  DEBUG_PRINT(F("Connect result: ")); DEBUG_PRINTLN(r);
  return r != 0;
}
   d4fec:	3000      	adds	r0, #0
   d4fee:	bf18      	it	ne
   d4ff0:	2001      	movne	r0, #1
   d4ff2:	bd70      	pop	{r4, r5, r6, pc}

000d4ff4 <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv>:

bool Adafruit_MQTT_SPARK::disconnectServer() {
   d4ff4:	b510      	push	{r4, lr}
   d4ff6:	4604      	mov	r4, r0
  // Stop connection if connected and return success (stop has no indication of
  // failure).
  if (client->connected()) {
   d4ff8:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   d4ffc:	6803      	ldr	r3, [r0, #0]
   d4ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5000:	4798      	blx	r3
   d5002:	b120      	cbz	r0, d500e <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv+0x1a>
    client->stop();
   d5004:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   d5008:	6803      	ldr	r3, [r0, #0]
   d500a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d500c:	4798      	blx	r3
  }
  return true;
}
   d500e:	2001      	movs	r0, #1
   d5010:	bd10      	pop	{r4, pc}

000d5012 <_ZN19Adafruit_MQTT_SPARK6UpdateEv>:
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#include "Adafruit_MQTT_SPARK.h"

bool Adafruit_MQTT_SPARK::Update()
{
   d5012:	b570      	push	{r4, r5, r6, lr}
    // Stop if already connected.
    if (!connected())
   d5014:	6803      	ldr	r3, [r0, #0]
   d5016:	689b      	ldr	r3, [r3, #8]
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#include "Adafruit_MQTT_SPARK.h"

bool Adafruit_MQTT_SPARK::Update()
{
   d5018:	4604      	mov	r4, r0
    // Stop if already connected.
    if (!connected())
   d501a:	4798      	blx	r3
   d501c:	b9c8      	cbnz	r0, d5052 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x40>
    {
        DEBUG_PRINT(F("Connecting to MQTT... "));
        
        uint8_t retries = 0;
        for(int8_t ret = connect() ; ret != 0 && retries < 3 ; ret = connect() , retries++)
   d501e:	4620      	mov	r0, r4
   d5020:	f000 f9c5 	bl	d53ae <_ZN13Adafruit_MQTT7connectEv>
   d5024:	2504      	movs	r5, #4
   d5026:	b170      	cbz	r0, d5046 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x34>
   d5028:	3d01      	subs	r5, #1
   d502a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d502e:	d00a      	beq.n	d5046 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x34>
        { // connect will return 0 for connected
            DEBUG_PRINT(connectErrorString(ret));
            DEBUG_PRINT(F("Retrying MQTT connection in 5 seconds..."));
            disconnect();
   d5030:	4620      	mov	r0, r4
   d5032:	f000 f8a9 	bl	d5188 <_ZN13Adafruit_MQTT10disconnectEv>
            delay(5000);  // wait 5 seconds
   d5036:	f241 3088 	movw	r0, #5000	; 0x1388
   d503a:	f000 ff99 	bl	d5f70 <delay>
    if (!connected())
    {
        DEBUG_PRINT(F("Connecting to MQTT... "));
        
        uint8_t retries = 0;
        for(int8_t ret = connect() ; ret != 0 && retries < 3 ; ret = connect() , retries++)
   d503e:	4620      	mov	r0, r4
   d5040:	f000 f9b5 	bl	d53ae <_ZN13Adafruit_MQTT7connectEv>
   d5044:	e7ef      	b.n	d5026 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x14>
            DEBUG_PRINT(F("Retrying MQTT connection in 5 seconds..."));
            disconnect();
            delay(5000);  // wait 5 seconds
        }
      
        if( connected() )
   d5046:	6823      	ldr	r3, [r4, #0]
   d5048:	4620      	mov	r0, r4
   d504a:	689b      	ldr	r3, [r3, #8]
            DEBUG_PRINT(F("Failed to connect"));
            return false;
        }
    }
    return true;
}
   d504c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            DEBUG_PRINT(F("Retrying MQTT connection in 5 seconds..."));
            disconnect();
            delay(5000);  // wait 5 seconds
        }
      
        if( connected() )
   d5050:	4718      	bx	r3
            DEBUG_PRINT(F("Failed to connect"));
            return false;
        }
    }
    return true;
}
   d5052:	bd70      	pop	{r4, r5, r6, pc}

000d5054 <_GLOBAL__sub_I__ZN19Adafruit_MQTT_SPARK6UpdateEv>:
   d5054:	f000 ba3a 	b.w	d54cc <HAL_Pin_Map>

000d5058 <_ZL11stringprintPhPKct.constprop.3>:
  memmove(p, s, len);
  return p+len;
}
*/

static uint8_t *stringprint(uint8_t *p, const char *s, uint16_t maxlen=0) {
   d5058:	b570      	push	{r4, r5, r6, lr}
   d505a:	4604      	mov	r4, r0
  // If maxlen is specified (has a non-zero value) then use it as the maximum
  // length of the source string to write to the buffer.  Otherwise write
  // the entire source string.
  uint16_t len = strlen(s);
   d505c:	4608      	mov	r0, r1
  memmove(p, s, len);
  return p+len;
}
*/

static uint8_t *stringprint(uint8_t *p, const char *s, uint16_t maxlen=0) {
   d505e:	460e      	mov	r6, r1
  // If maxlen is specified (has a non-zero value) then use it as the maximum
  // length of the source string to write to the buffer.  Otherwise write
  // the entire source string.
  uint16_t len = strlen(s);
   d5060:	f004 fa48 	bl	d94f4 <strlen>
  /*
  for (uint8_t i=0; i<len; i++) {
    Serial.write(pgm_read_byte(s+i));
  }
  */
  p[0] = len >> 8; p++;
   d5064:	1203      	asrs	r3, r0, #8
   d5066:	7023      	strb	r3, [r4, #0]
  p[0] = len & 0xFF; p++;
   d5068:	7060      	strb	r0, [r4, #1]
   d506a:	b285      	uxth	r5, r0
   d506c:	3402      	adds	r4, #2
  strncpy((char *)p, s, len);
   d506e:	462a      	mov	r2, r5
   d5070:	4631      	mov	r1, r6
   d5072:	4620      	mov	r0, r4
   d5074:	f004 fa46 	bl	d9504 <strncpy>
  return p+len;
}
   d5078:	1960      	adds	r0, r4, r5
   d507a:	bd70      	pop	{r4, r5, r6, pc}

000d507c <_ZN13Adafruit_MQTTC1EPKctS1_S1_>:
  packet_id_counter = 0;

}


Adafruit_MQTT::Adafruit_MQTT(const char *server,
   d507c:	b530      	push	{r4, r5, lr}
                             const char *user,
                             const char *pass) {
  servername = server;
  portnum = port;
  clientid = "";
  username = user;
   d507e:	6103      	str	r3, [r0, #16]
  password = pass;
   d5080:	9b03      	ldr	r3, [sp, #12]


Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
   d5082:	4d0d      	ldr	r5, [pc, #52]	; (d50b8 <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x3c>)
  servername = server;
  portnum = port;
   d5084:	8102      	strh	r2, [r0, #8]
  clientid = "";
  username = user;
  password = pass;
   d5086:	6143      	str	r3, [r0, #20]
                             uint16_t port,
                             const char *user,
                             const char *pass) {
  servername = server;
  portnum = port;
  clientid = "";
   d5088:	4a0c      	ldr	r2, [pc, #48]	; (d50bc <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x40>)


Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
   d508a:	6005      	str	r5, [r0, #0]
  username = user;
  password = pass;

  // reset subscriptions
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    subscriptions[i] = 0;
   d508c:	2300      	movs	r3, #0

Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
  servername = server;
   d508e:	6041      	str	r1, [r0, #4]
  portnum = port;
  clientid = "";
   d5090:	60c2      	str	r2, [r0, #12]
  username = user;
  password = pass;

  // reset subscriptions
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    subscriptions[i] = 0;
   d5092:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
   d5096:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
   d509a:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
   d509e:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
   d50a2:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
  }

  will_topic = 0;
   d50a6:	6183      	str	r3, [r0, #24]
  will_payload = 0;
   d50a8:	61c3      	str	r3, [r0, #28]
  will_qos = 0;
   d50aa:	f880 3020 	strb.w	r3, [r0, #32]
  will_retain = 0;
   d50ae:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

  packet_id_counter = 0;
   d50b2:	f8a0 30b8 	strh.w	r3, [r0, #184]	; 0xb8

}
   d50b6:	bd30      	pop	{r4, r5, pc}
   d50b8:	000d98c0 	.word	0x000d98c0
   d50bc:	000d98e7 	.word	0x000d98e7

000d50c0 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>:
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   d50c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   d50c4:	fa0f fa83 	sxth.w	sl, r3
   d50c8:	6803      	ldr	r3, [r0, #0]
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   d50ca:	9201      	str	r2, [sp, #4]
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   d50cc:	699d      	ldr	r5, [r3, #24]
   d50ce:	2201      	movs	r2, #1
   d50d0:	4653      	mov	r3, sl
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   d50d2:	4606      	mov	r6, r0
   d50d4:	460c      	mov	r4, r1
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   d50d6:	47a8      	blx	r5
  if (rlen != 1) return 0;
   d50d8:	b2c0      	uxtb	r0, r0
   d50da:	2801      	cmp	r0, #1
   d50dc:	d001      	beq.n	d50e2 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x22>
   d50de:	2000      	movs	r0, #0
   d50e0:	e034      	b.n	d514c <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x8c>

  DEBUG_PRINT(F("Packet Type:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);
  pbuff++;
   d50e2:	1c65      	adds	r5, r4, #1
   d50e4:	f104 0b05 	add.w	fp, r4, #5

  uint32_t value = 0;
  uint32_t multiplier = 1;
   d50e8:	4680      	mov	r8, r0
  if (rlen != 1) return 0;

  DEBUG_PRINT(F("Packet Type:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);
  pbuff++;

  uint32_t value = 0;
   d50ea:	f04f 0900 	mov.w	r9, #0
  uint32_t multiplier = 1;
  uint8_t encodedByte;

  do {
    rlen = readPacket(pbuff, 1, timeout);
   d50ee:	6833      	ldr	r3, [r6, #0]
   d50f0:	699b      	ldr	r3, [r3, #24]
   d50f2:	2201      	movs	r2, #1
   d50f4:	461f      	mov	r7, r3
   d50f6:	4629      	mov	r1, r5
   d50f8:	4653      	mov	r3, sl
   d50fa:	4630      	mov	r0, r6
   d50fc:	47b8      	blx	r7
    if (rlen != 1) return 0;
   d50fe:	b2c0      	uxtb	r0, r0
   d5100:	2801      	cmp	r0, #1
   d5102:	d1ec      	bne.n	d50de <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x1e>
    encodedByte = pbuff[0]; // save the last read val
   d5104:	f815 3b01 	ldrb.w	r3, [r5], #1
    pbuff++; // get ready for reading the next byte
    uint32_t intermediate = encodedByte & 0x7F;
   d5108:	f003 027f 	and.w	r2, r3, #127	; 0x7f
    intermediate *= multiplier;
    value += intermediate;
    multiplier *= 128;
    if (multiplier > (128UL*128UL*128UL)) {
   d510c:	455d      	cmp	r5, fp
    if (rlen != 1) return 0;
    encodedByte = pbuff[0]; // save the last read val
    pbuff++; // get ready for reading the next byte
    uint32_t intermediate = encodedByte & 0x7F;
    intermediate *= multiplier;
    value += intermediate;
   d510e:	fb02 9908 	mla	r9, r2, r8, r9
    multiplier *= 128;
   d5112:	ea4f 18c8 	mov.w	r8, r8, lsl #7
    if (multiplier > (128UL*128UL*128UL)) {
   d5116:	d0e2      	beq.n	d50de <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x1e>

  uint32_t value = 0;
  uint32_t multiplier = 1;
  uint8_t encodedByte;

  do {
   d5118:	061b      	lsls	r3, r3, #24
   d511a:	d4e8      	bmi.n	d50ee <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x2e>
    }
  } while (encodedByte & 0x80);

  DEBUG_PRINT(F("Packet Length:\t")); DEBUG_PRINTLN(value);
  
  if (value > (unsigned)(maxsize - (pbuff-buffer) - 1)) {
   d511c:	9b01      	ldr	r3, [sp, #4]
   d511e:	1b2c      	subs	r4, r5, r4
   d5120:	1b1b      	subs	r3, r3, r4
   d5122:	3b01      	subs	r3, #1
   d5124:	4599      	cmp	r9, r3
   d5126:	6833      	ldr	r3, [r6, #0]
   d5128:	d906      	bls.n	d5138 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x78>
      DEBUG_PRINTLN(F("Packet too big for buffer"));
      rlen = readPacket(pbuff, (maxsize - (pbuff-buffer) - 1), timeout);
   d512a:	9a01      	ldr	r2, [sp, #4]
   d512c:	699f      	ldr	r7, [r3, #24]
   d512e:	3a01      	subs	r2, #1
   d5130:	1b12      	subs	r2, r2, r4
   d5132:	4653      	mov	r3, sl
   d5134:	b292      	uxth	r2, r2
   d5136:	e003      	b.n	d5140 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x80>
  } else {
    rlen = readPacket(pbuff, value, timeout);
   d5138:	699f      	ldr	r7, [r3, #24]
   d513a:	fa1f f289 	uxth.w	r2, r9
   d513e:	4653      	mov	r3, sl
   d5140:	4629      	mov	r1, r5
   d5142:	4630      	mov	r0, r6
   d5144:	47b8      	blx	r7
   d5146:	b2c0      	uxtb	r0, r0
  }
  //DEBUG_PRINT(F("Remaining packet:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);

  return ((pbuff - buffer)+rlen);
   d5148:	4420      	add	r0, r4
   d514a:	b280      	uxth	r0, r0
}
   d514c:	b003      	add	sp, #12
   d514e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000d5154 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>:
  username = user;
  password = pass;
  return connect();
}

uint16_t Adafruit_MQTT::processPacketsUntil(uint8_t *buffer, uint8_t waitforpackettype, uint16_t timeout) {
   d5154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5156:	4605      	mov	r5, r0
   d5158:	460c      	mov	r4, r1
   d515a:	4616      	mov	r6, r2
   d515c:	461f      	mov	r7, r3
  uint16_t len;
  while ( (len = readFullPacket(buffer, MAXBUFFERSIZE, timeout)) > 0) {
   d515e:	463b      	mov	r3, r7
   d5160:	2296      	movs	r2, #150	; 0x96
   d5162:	4621      	mov	r1, r4
   d5164:	4628      	mov	r0, r5
   d5166:	f7ff ffab 	bl	d50c0 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
   d516a:	b148      	cbz	r0, d5180 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x2c>

    //DEBUG_PRINT("Packet read size: "); DEBUG_PRINTLN(len);
    // TODO: add subscription reading & call back processing here

    if ((buffer[0] >> 4) == waitforpackettype) {
   d516c:	7823      	ldrb	r3, [r4, #0]
   d516e:	ebb6 1f13 	cmp.w	r6, r3, lsr #4
   d5172:	d005      	beq.n	d5180 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x2c>
      //DEBUG_PRINTLN(F("Found right packet")); 
      return len;
    } else {
      ERROR_PRINTLN(F("Dropped a packet"));
   d5174:	f001 f894 	bl	d62a0 <_Z16_fetch_usbserialv>
   d5178:	4902      	ldr	r1, [pc, #8]	; (d5184 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x30>)
   d517a:	f000 fd9a 	bl	d5cb2 <_ZN5Print7printlnEPKc>
  return connect();
}

uint16_t Adafruit_MQTT::processPacketsUntil(uint8_t *buffer, uint8_t waitforpackettype, uint16_t timeout) {
  uint16_t len;
  while ( (len = readFullPacket(buffer, MAXBUFFERSIZE, timeout)) > 0) {
   d517e:	e7ee      	b.n	d515e <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0xa>
    } else {
      ERROR_PRINTLN(F("Dropped a packet"));
    }
  }
  return 0;
}
   d5180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d5182:	bf00      	nop
   d5184:	000d98e8 	.word	0x000d98e8

000d5188 <_ZN13Adafruit_MQTT10disconnectEv>:
      case -2: return F("Failed to subscribe");
   }
    return F("Unknown error");
}

bool Adafruit_MQTT::disconnect() {
   d5188:	b510      	push	{r4, lr}
  DEBUG_PRINTBUFFER(buffer, 4);
  return 4;
}

uint8_t Adafruit_MQTT::disconnectPacket(uint8_t *packet) {
  packet[0] = MQTT_CTRL_DISCONNECT << 4;
   d518a:	23e0      	movs	r3, #224	; 0xe0
   d518c:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
  packet[1] = 0;
   d5190:	2300      	movs	r3, #0
   d5192:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23

bool Adafruit_MQTT::disconnect() {

  // Construct and send disconnect packet.
  uint8_t len = disconnectPacket(buffer);
  if (! sendPacket(buffer, len))
   d5196:	6803      	ldr	r3, [r0, #0]
      case -2: return F("Failed to subscribe");
   }
    return F("Unknown error");
}

bool Adafruit_MQTT::disconnect() {
   d5198:	4604      	mov	r4, r0

  // Construct and send disconnect packet.
  uint8_t len = disconnectPacket(buffer);
  if (! sendPacket(buffer, len))
   d519a:	695b      	ldr	r3, [r3, #20]
   d519c:	2202      	movs	r2, #2
   d519e:	f100 0122 	add.w	r1, r0, #34	; 0x22
   d51a2:	4798      	blx	r3
    DEBUG_PRINTLN(F("Unable to send disconnect packet"));

  return disconnectServer();
   d51a4:	6823      	ldr	r3, [r4, #0]
   d51a6:	4620      	mov	r0, r4
   d51a8:	691b      	ldr	r3, [r3, #16]

}
   d51aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  // Construct and send disconnect packet.
  uint8_t len = disconnectPacket(buffer);
  if (! sendPacket(buffer, len))
    DEBUG_PRINTLN(F("Unable to send disconnect packet"));

  return disconnectServer();
   d51ae:	4718      	bx	r3

000d51b0 <_ZN13Adafruit_MQTT13connectPacketEPh>:
// The current MQTT spec is 3.1.1 and available here:
//   http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718028
// However this connect packet and code follows the MQTT 3.1 spec here (some
// small differences in the protocol):
//   http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html#connect
uint8_t Adafruit_MQTT::connectPacket(uint8_t *packet) {
   d51b0:	b538      	push	{r3, r4, r5, lr}
   d51b2:	4604      	mov	r4, r0
  uint8_t *p = packet;
  uint16_t len;

  // fixed header, connection messsage no flags
  p[0] = (MQTT_CTRL_CONNECT << 4) | 0x0;
   d51b4:	4608      	mov	r0, r1
   d51b6:	2310      	movs	r3, #16
   d51b8:	f800 3b02 	strb.w	r3, [r0], #2
// The current MQTT spec is 3.1.1 and available here:
//   http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718028
// However this connect packet and code follows the MQTT 3.1 spec here (some
// small differences in the protocol):
//   http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html#connect
uint8_t Adafruit_MQTT::connectPacket(uint8_t *packet) {
   d51bc:	460d      	mov	r5, r1
  // fill in packet[1] last

#if MQTT_PROTOCOL_LEVEL == 3
    p = stringprint(p, "MQIsdp");
#elif MQTT_PROTOCOL_LEVEL == 4
    p = stringprint(p, "MQTT");
   d51be:	4929      	ldr	r1, [pc, #164]	; (d5264 <_ZN13Adafruit_MQTT13connectPacketEPh+0xb4>)
   d51c0:	f7ff ff4a 	bl	d5058 <_ZL11stringprintPhPKct.constprop.3>
#else
    #error "MQTT level not supported"
#endif

  p[0] = MQTT_PROTOCOL_LEVEL;
   d51c4:	2304      	movs	r3, #4
   d51c6:	7003      	strb	r3, [r0, #0]
  p++;

  // always clean the session
  p[0] = MQTT_CONN_CLEANSESSION;
   d51c8:	2302      	movs	r3, #2
   d51ca:	7043      	strb	r3, [r0, #1]

  // set the will flags if needed
  if (will_topic && pgm_read_byte(will_topic) != 0) {
   d51cc:	69a3      	ldr	r3, [r4, #24]
   d51ce:	b1ab      	cbz	r3, d51fc <_ZN13Adafruit_MQTT13connectPacketEPh+0x4c>
   d51d0:	781b      	ldrb	r3, [r3, #0]
   d51d2:	b19b      	cbz	r3, d51fc <_ZN13Adafruit_MQTT13connectPacketEPh+0x4c>

    p[0] |= MQTT_CONN_WILLFLAG;
   d51d4:	2306      	movs	r3, #6
   d51d6:	7043      	strb	r3, [r0, #1]

    if(will_qos == 1)
   d51d8:	f894 3020 	ldrb.w	r3, [r4, #32]
   d51dc:	2b01      	cmp	r3, #1
   d51de:	d101      	bne.n	d51e4 <_ZN13Adafruit_MQTT13connectPacketEPh+0x34>
      p[0] |= MQTT_CONN_WILLQOS_1;
   d51e0:	230e      	movs	r3, #14
   d51e2:	e002      	b.n	d51ea <_ZN13Adafruit_MQTT13connectPacketEPh+0x3a>
    else if(will_qos == 2)
   d51e4:	2b02      	cmp	r3, #2
   d51e6:	d101      	bne.n	d51ec <_ZN13Adafruit_MQTT13connectPacketEPh+0x3c>
      p[0] |= MQTT_CONN_WILLQOS_2;
   d51e8:	231e      	movs	r3, #30
   d51ea:	7043      	strb	r3, [r0, #1]

    if(will_retain == 1)
   d51ec:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   d51f0:	2b01      	cmp	r3, #1
      p[0] |= MQTT_CONN_WILLRETAIN;
   d51f2:	bf02      	ittt	eq
   d51f4:	7843      	ldrbeq	r3, [r0, #1]
   d51f6:	f043 0320 	orreq.w	r3, r3, #32
   d51fa:	7043      	strbeq	r3, [r0, #1]

  }

  if (pgm_read_byte(username) != 0)
   d51fc:	6923      	ldr	r3, [r4, #16]
   d51fe:	781b      	ldrb	r3, [r3, #0]
   d5200:	b11b      	cbz	r3, d520a <_ZN13Adafruit_MQTT13connectPacketEPh+0x5a>
    p[0] |= MQTT_CONN_USERNAMEFLAG;
   d5202:	7843      	ldrb	r3, [r0, #1]
   d5204:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d5208:	7043      	strb	r3, [r0, #1]
  if (pgm_read_byte(password) != 0)
   d520a:	6963      	ldr	r3, [r4, #20]
   d520c:	781b      	ldrb	r3, [r3, #0]
   d520e:	b11b      	cbz	r3, d5218 <_ZN13Adafruit_MQTT13connectPacketEPh+0x68>
    p[0] |= MQTT_CONN_PASSWORDFLAG;
   d5210:	7843      	ldrb	r3, [r0, #1]
   d5212:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   d5216:	7043      	strb	r3, [r0, #1]
  p++;

  p[0] = MQTT_CONN_KEEPALIVE >> 8;
   d5218:	2301      	movs	r3, #1
   d521a:	7083      	strb	r3, [r0, #2]
  p++;
  p[0] = MQTT_CONN_KEEPALIVE & 0xFF;
   d521c:	232c      	movs	r3, #44	; 0x2c
   d521e:	70c3      	strb	r3, [r0, #3]
  p++;

  if(MQTT_PROTOCOL_LEVEL == 3) {
    p = stringprint(p, clientid, 23);  // Limit client ID to first 23 characters.
  } else {
    if (pgm_read_byte(clientid) != 0) {
   d5220:	68e1      	ldr	r1, [r4, #12]
   d5222:	780b      	ldrb	r3, [r1, #0]
   d5224:	b11b      	cbz	r3, d522e <_ZN13Adafruit_MQTT13connectPacketEPh+0x7e>
      p = stringprint(p, clientid);
   d5226:	3004      	adds	r0, #4
   d5228:	f7ff ff16 	bl	d5058 <_ZL11stringprintPhPKct.constprop.3>
   d522c:	e002      	b.n	d5234 <_ZN13Adafruit_MQTT13connectPacketEPh+0x84>
    } else {
      p[0] = 0x0;
   d522e:	7103      	strb	r3, [r0, #4]
      p++;
      p[0] = 0x0;
   d5230:	7143      	strb	r3, [r0, #5]
      p++;
   d5232:	3006      	adds	r0, #6
      DEBUG_PRINTLN(F("SERVER GENERATING CLIENT ID"));
    }
  }

  if (will_topic && pgm_read_byte(will_topic) != 0) {
   d5234:	69a1      	ldr	r1, [r4, #24]
   d5236:	b131      	cbz	r1, d5246 <_ZN13Adafruit_MQTT13connectPacketEPh+0x96>
   d5238:	780b      	ldrb	r3, [r1, #0]
   d523a:	b123      	cbz	r3, d5246 <_ZN13Adafruit_MQTT13connectPacketEPh+0x96>
    p = stringprint(p, will_topic);
   d523c:	f7ff ff0c 	bl	d5058 <_ZL11stringprintPhPKct.constprop.3>
    p = stringprint(p, will_payload);
   d5240:	69e1      	ldr	r1, [r4, #28]
   d5242:	f7ff ff09 	bl	d5058 <_ZL11stringprintPhPKct.constprop.3>
  }

  if (pgm_read_byte(username) != 0) {
   d5246:	6921      	ldr	r1, [r4, #16]
   d5248:	780b      	ldrb	r3, [r1, #0]
   d524a:	b10b      	cbz	r3, d5250 <_ZN13Adafruit_MQTT13connectPacketEPh+0xa0>
    p = stringprint(p, username);
   d524c:	f7ff ff04 	bl	d5058 <_ZL11stringprintPhPKct.constprop.3>
  }
  if (pgm_read_byte(password) != 0) {
   d5250:	6961      	ldr	r1, [r4, #20]
   d5252:	780b      	ldrb	r3, [r1, #0]
   d5254:	b10b      	cbz	r3, d525a <_ZN13Adafruit_MQTT13connectPacketEPh+0xaa>
    p = stringprint(p, password);
   d5256:	f7ff feff 	bl	d5058 <_ZL11stringprintPhPKct.constprop.3>
  }

  len = p - packet;

  packet[1] = len-2;  // don't include the 2 bytes of fixed header data
   d525a:	1b40      	subs	r0, r0, r5
   d525c:	b2c0      	uxtb	r0, r0
   d525e:	1e83      	subs	r3, r0, #2
   d5260:	706b      	strb	r3, [r5, #1]
  DEBUG_PRINTLN(F("MQTT connect packet:"));
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}
   d5262:	bd38      	pop	{r3, r4, r5, pc}
   d5264:	000d9907 	.word	0x000d9907

000d5268 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th>:


// as per http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718040
uint16_t Adafruit_MQTT::publishPacket(uint8_t *packet, const char *topic,
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   d5268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d526c:	4605      	mov	r5, r0
  uint8_t *p = packet;
  uint16_t len=0;

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
   d526e:	4610      	mov	r0, r2
}


// as per http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718040
uint16_t Adafruit_MQTT::publishPacket(uint8_t *packet, const char *topic,
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   d5270:	460e      	mov	r6, r1
   d5272:	4691      	mov	r9, r2
   d5274:	461f      	mov	r7, r3
  uint8_t *p = packet;
  uint16_t len=0;

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
   d5276:	f004 f93d 	bl	d94f4 <strlen>
}


// as per http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718040
uint16_t Adafruit_MQTT::publishPacket(uint8_t *packet, const char *topic,
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   d527a:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
   d527e:	f8bd 4020 	ldrh.w	r4, [sp, #32]
  uint8_t *p = packet;
  uint16_t len=0;

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
   d5282:	b280      	uxth	r0, r0
  if(qos > 0) { 
   d5284:	f1b8 0f00 	cmp.w	r8, #0
   d5288:	d101      	bne.n	d528e <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x26>
  uint8_t *p = packet;
  uint16_t len=0;

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
   d528a:	1c83      	adds	r3, r0, #2
   d528c:	e000      	b.n	d5290 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x28>
  if(qos > 0) { 
    len += 2; // qos packet id
   d528e:	1d03      	adds	r3, r0, #4
  }
  len += bLen; // payload length

  // Now you can start generating the packet!
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   d5290:	ea4f 0248 	mov.w	r2, r8, lsl #1
   d5294:	4630      	mov	r0, r6

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
  if(qos > 0) { 
    len += 2; // qos packet id
   d5296:	b29b      	uxth	r3, r3
  }
  len += bLen; // payload length

  // Now you can start generating the packet!
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   d5298:	f042 0230 	orr.w	r2, r2, #48	; 0x30
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
  if(qos > 0) { 
    len += 2; // qos packet id
  }
  len += bLen; // payload length
   d529c:	4423      	add	r3, r4

  // Now you can start generating the packet!
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   d529e:	f800 2b01 	strb.w	r2, [r0], #1
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
  if(qos > 0) { 
    len += 2; // qos packet id
  }
  len += bLen; // payload length
   d52a2:	b29b      	uxth	r3, r3
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
  p++;

  // fill in packet[1] last
  do {
    uint8_t encodedByte = len % 128;
   d52a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
    len /= 128;
    // if there are more data to encode, set the top bit of this byte
    if ( len > 0 ) {
   d52a8:	09db      	lsrs	r3, r3, #7
      encodedByte |= 0x80;
   d52aa:	bf18      	it	ne
   d52ac:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
    }
    p[0] = encodedByte;
   d52b0:	f800 2b01 	strb.w	r2, [r0], #1
    p++;
  } while ( len > 0 );
   d52b4:	2b00      	cmp	r3, #0
   d52b6:	d1f5      	bne.n	d52a4 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x3c>

  // topic comes before packet identifier
  p = stringprint(p, topic);
   d52b8:	4649      	mov	r1, r9
   d52ba:	f7ff fecd 	bl	d5058 <_ZL11stringprintPhPKct.constprop.3>
   d52be:	4603      	mov	r3, r0

  // add packet identifier. used for checking PUBACK in QOS > 0
  if(qos > 0) {
   d52c0:	f1b8 0f00 	cmp.w	r8, #0
   d52c4:	d00c      	beq.n	d52e0 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x78>
    p[0] = (packet_id_counter >> 8) & 0xFF;
   d52c6:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   d52ca:	0a12      	lsrs	r2, r2, #8
   d52cc:	7002      	strb	r2, [r0, #0]
    p[1] = packet_id_counter & 0xFF;
   d52ce:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   d52d2:	7042      	strb	r2, [r0, #1]
    p+=2;

    // increment the packet id
    packet_id_counter++;
   d52d4:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   d52d8:	3201      	adds	r2, #1

  // add packet identifier. used for checking PUBACK in QOS > 0
  if(qos > 0) {
    p[0] = (packet_id_counter >> 8) & 0xFF;
    p[1] = packet_id_counter & 0xFF;
    p+=2;
   d52da:	3302      	adds	r3, #2

    // increment the packet id
    packet_id_counter++;
   d52dc:	f8a5 20b8 	strh.w	r2, [r5, #184]	; 0xb8
  }

  memmove(p, data, bLen);
   d52e0:	4622      	mov	r2, r4
   d52e2:	4639      	mov	r1, r7
   d52e4:	4618      	mov	r0, r3
   d52e6:	f004 f8b2 	bl	d944e <memmove>
  p+= bLen;
  len = p - packet;
  DEBUG_PRINTLN(F("MQTT publish packet:"));
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
   d52ea:	4420      	add	r0, r4
   d52ec:	1b80      	subs	r0, r0, r6
}
   d52ee:	b280      	uxth	r0, r0
   d52f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d52f4 <_ZN13Adafruit_MQTT7publishEPKcPhth>:

bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
}

bool Adafruit_MQTT::publish(const char *topic, uint8_t *data, uint16_t bLen, uint8_t qos) {
   d52f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d52f6:	f89d 6018 	ldrb.w	r6, [sp, #24]
  // Construct and send publish packet.
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   d52fa:	f100 0522 	add.w	r5, r0, #34	; 0x22

bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
}

bool Adafruit_MQTT::publish(const char *topic, uint8_t *data, uint16_t bLen, uint8_t qos) {
   d52fe:	4604      	mov	r4, r0
  // Construct and send publish packet.
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   d5300:	e88d 0048 	stmia.w	sp, {r3, r6}
   d5304:	4613      	mov	r3, r2
   d5306:	460a      	mov	r2, r1
   d5308:	4629      	mov	r1, r5
   d530a:	f7ff ffad 	bl	d5268 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th>
  if (!sendPacket(buffer, len))
   d530e:	6823      	ldr	r3, [r4, #0]
   d5310:	4602      	mov	r2, r0
   d5312:	695b      	ldr	r3, [r3, #20]
   d5314:	4629      	mov	r1, r5
   d5316:	4620      	mov	r0, r4
   d5318:	4798      	blx	r3
   d531a:	b908      	cbnz	r0, d5320 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x2c>
    return false;
   d531c:	2000      	movs	r0, #0
   d531e:	e017      	b.n	d5350 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x5c>

  // If QOS level is high enough verify the response packet.
  if (qos > 0) {
   d5320:	b1b6      	cbz	r6, d5350 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x5c>
    len = readFullPacket(buffer, MAXBUFFERSIZE, PUBLISH_TIMEOUT_MS);
   d5322:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   d5326:	2296      	movs	r2, #150	; 0x96
   d5328:	4629      	mov	r1, r5
   d532a:	4620      	mov	r0, r4
   d532c:	f7ff fec8 	bl	d50c0 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
    DEBUG_PRINT(F("Publish QOS1+ reply:\t"));
    DEBUG_PRINTBUFFER(buffer, len);
    if (len != 4)
   d5330:	2804      	cmp	r0, #4
   d5332:	d1f3      	bne.n	d531c <_ZN13Adafruit_MQTT7publishEPKcPhth+0x28>
      return false;
    if ((buffer[0] >> 4) != MQTT_CTRL_PUBACK)
   d5334:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d5338:	111b      	asrs	r3, r3, #4
   d533a:	2b04      	cmp	r3, #4
   d533c:	d1ee      	bne.n	d531c <_ZN13Adafruit_MQTT7publishEPKcPhth+0x28>
   d533e:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    packnum <<= 8;
    packnum |= buffer[3];

    // we increment the packet_id_counter right after publishing so inc here too to match
    packnum++;
    if (packnum != packet_id_counter)
   d5340:	f8b4 00b8 	ldrh.w	r0, [r4, #184]	; 0xb8
   d5344:	ba5b      	rev16	r3, r3
   d5346:	3301      	adds	r3, #1
   d5348:	b29b      	uxth	r3, r3
   d534a:	1ac3      	subs	r3, r0, r3
   d534c:	4258      	negs	r0, r3
   d534e:	4158      	adcs	r0, r3
      return false;
  }

  return true;
}
   d5350:	b002      	add	sp, #8
   d5352:	bd70      	pop	{r4, r5, r6, pc}

000d5354 <_ZN13Adafruit_MQTT7publishEPKcS1_h>:
  return disconnectServer();

}


bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
   d5354:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d5356:	4605      	mov	r5, r0
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
   d5358:	4610      	mov	r0, r2
  return disconnectServer();

}


bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
   d535a:	461f      	mov	r7, r3
   d535c:	460e      	mov	r6, r1
   d535e:	4614      	mov	r4, r2
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
   d5360:	f004 f8c8 	bl	d94f4 <strlen>
   d5364:	9700      	str	r7, [sp, #0]
   d5366:	b283      	uxth	r3, r0
   d5368:	4622      	mov	r2, r4
   d536a:	4631      	mov	r1, r6
   d536c:	4628      	mov	r0, r5
   d536e:	f7ff ffc1 	bl	d52f4 <_ZN13Adafruit_MQTT7publishEPKcPhth>
}
   d5372:	b003      	add	sp, #12
   d5374:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5376 <_ZN13Adafruit_MQTT15subscribePacketEPhPKch>:
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}

uint8_t Adafruit_MQTT::subscribePacket(uint8_t *packet, const char *topic,
                                       uint8_t qos) {
   d5376:	b538      	push	{r3, r4, r5, lr}
   d5378:	461d      	mov	r5, r3
  uint8_t *p = packet;
  uint16_t len;

  p[0] = MQTT_CTRL_SUBSCRIBE << 4 | MQTT_QOS_1 << 1;
   d537a:	2382      	movs	r3, #130	; 0x82
   d537c:	700b      	strb	r3, [r1, #0]
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}

uint8_t Adafruit_MQTT::subscribePacket(uint8_t *packet, const char *topic,
                                       uint8_t qos) {
   d537e:	460c      	mov	r4, r1
  p[0] = MQTT_CTRL_SUBSCRIBE << 4 | MQTT_QOS_1 << 1;
  // fill in packet[1] last
  p+=2;

  // packet identifier. used for checking SUBACK
  p[0] = (packet_id_counter >> 8) & 0xFF;
   d5380:	f8b0 10b8 	ldrh.w	r1, [r0, #184]	; 0xb8
   d5384:	0a09      	lsrs	r1, r1, #8
   d5386:	70a1      	strb	r1, [r4, #2]
  p[1] = packet_id_counter & 0xFF;
   d5388:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
   d538c:	70e3      	strb	r3, [r4, #3]
  p+=2;

  // increment the packet id
  packet_id_counter++;
   d538e:	f8b0 10b8 	ldrh.w	r1, [r0, #184]	; 0xb8
   d5392:	3101      	adds	r1, #1
   d5394:	f8a0 10b8 	strh.w	r1, [r0, #184]	; 0xb8

  p = stringprint(p, topic);
   d5398:	4611      	mov	r1, r2
   d539a:	1d20      	adds	r0, r4, #4
   d539c:	f7ff fe5c 	bl	d5058 <_ZL11stringprintPhPKct.constprop.3>

  p[0] = qos;
   d53a0:	f800 5b01 	strb.w	r5, [r0], #1
  p++;

  len = p - packet;
  packet[1] = len-2; // don't include the 2 bytes of fixed header data
   d53a4:	1b00      	subs	r0, r0, r4
   d53a6:	b2c0      	uxtb	r0, r0
   d53a8:	1e83      	subs	r3, r0, #2
   d53aa:	7063      	strb	r3, [r4, #1]
  DEBUG_PRINTLN(F("MQTT subscription packet:"));
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}
   d53ac:	bd38      	pop	{r3, r4, r5, pc}

000d53ae <_ZN13Adafruit_MQTT7connectEv>:

  packet_id_counter = 0;

}

int8_t Adafruit_MQTT::connect() {
   d53ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // Connect to the server.
  if (!connectServer())
   d53b2:	6803      	ldr	r3, [r0, #0]
   d53b4:	68db      	ldr	r3, [r3, #12]

  packet_id_counter = 0;

}

int8_t Adafruit_MQTT::connect() {
   d53b6:	4604      	mov	r4, r0
  // Connect to the server.
  if (!connectServer())
   d53b8:	4798      	blx	r3
   d53ba:	b918      	cbnz	r0, d53c4 <_ZN13Adafruit_MQTT7connectEv+0x16>
    return -1;
   d53bc:	f04f 30ff 	mov.w	r0, #4294967295
   d53c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  // Construct and send connect packet.
  uint8_t len = connectPacket(buffer);
   d53c4:	f104 0522 	add.w	r5, r4, #34	; 0x22
   d53c8:	4629      	mov	r1, r5
   d53ca:	4620      	mov	r0, r4
   d53cc:	f7ff fef0 	bl	d51b0 <_ZN13Adafruit_MQTT13connectPacketEPh>
  if (!sendPacket(buffer, len))
   d53d0:	6823      	ldr	r3, [r4, #0]
   d53d2:	b282      	uxth	r2, r0
   d53d4:	695b      	ldr	r3, [r3, #20]
   d53d6:	4629      	mov	r1, r5
   d53d8:	4620      	mov	r0, r4
   d53da:	4798      	blx	r3
   d53dc:	2800      	cmp	r0, #0
   d53de:	d0ed      	beq.n	d53bc <_ZN13Adafruit_MQTT7connectEv+0xe>
    return -1;

  // Read connect response packet and verify it
  len = readFullPacket(buffer, MAXBUFFERSIZE, CONNECT_TIMEOUT_MS);
   d53e0:	f241 7370 	movw	r3, #6000	; 0x1770
   d53e4:	2296      	movs	r2, #150	; 0x96
   d53e6:	4629      	mov	r1, r5
   d53e8:	4620      	mov	r0, r4
   d53ea:	f7ff fe69 	bl	d50c0 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
  if (len != 4)
   d53ee:	b2c0      	uxtb	r0, r0
   d53f0:	2804      	cmp	r0, #4
   d53f2:	d1e3      	bne.n	d53bc <_ZN13Adafruit_MQTT7connectEv+0xe>
    return -1;
  if ((buffer[0] != (MQTT_CTRL_CONNECTACK << 4)) || (buffer[1] != 2))
   d53f4:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d53f6:	f5b3 7f08 	cmp.w	r3, #544	; 0x220
   d53fa:	d1df      	bne.n	d53bc <_ZN13Adafruit_MQTT7connectEv+0xe>
    return -1;
  if (buffer[3] != 0)
   d53fc:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
   d5400:	b110      	cbz	r0, d5408 <_ZN13Adafruit_MQTT7connectEv+0x5a>
    return buffer[3];
   d5402:	b240      	sxtb	r0, r0
   d5404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5408:	f104 07b8 	add.w	r7, r4, #184	; 0xb8
   d540c:	f104 08cc 	add.w	r8, r4, #204	; 0xcc

  // Setup subscriptions once connected.
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    // Ignore subscriptions that aren't defined.
    if (subscriptions[i] == 0) continue;
   d5410:	f857 3f04 	ldr.w	r3, [r7, #4]!
   d5414:	b1fb      	cbz	r3, d5456 <_ZN13Adafruit_MQTT7connectEv+0xa8>
   d5416:	2603      	movs	r6, #3

    boolean success = false;
    for (uint8_t retry=0; (retry<3) && !success; retry++) { // retry until we get a suback    
      // Construct and send subscription packet.
      uint8_t len = subscribePacket(buffer, subscriptions[i]->topic, subscriptions[i]->qos);
   d5418:	683a      	ldr	r2, [r7, #0]
   d541a:	4629      	mov	r1, r5
   d541c:	7913      	ldrb	r3, [r2, #4]
   d541e:	6812      	ldr	r2, [r2, #0]
   d5420:	4620      	mov	r0, r4
   d5422:	f7ff ffa8 	bl	d5376 <_ZN13Adafruit_MQTT15subscribePacketEPhPKch>
      if (!sendPacket(buffer, len))
   d5426:	6823      	ldr	r3, [r4, #0]
   d5428:	b282      	uxth	r2, r0
   d542a:	695b      	ldr	r3, [r3, #20]
   d542c:	4629      	mov	r1, r5
   d542e:	4620      	mov	r0, r4
   d5430:	4798      	blx	r3
   d5432:	2800      	cmp	r0, #0
   d5434:	d0c2      	beq.n	d53bc <_ZN13Adafruit_MQTT7connectEv+0xe>
      // Check for SUBACK if using MQTT 3.1.1 or higher
      // TODO: The Server is permitted to start sending PUBLISH packets matching the
      // Subscription before the Server sends the SUBACK Packet. (will really need to use callbacks - ada)

      //Serial.println("\t**looking for suback");
      if (processPacketsUntil(buffer, MQTT_CTRL_SUBACK, SUBACK_TIMEOUT_MS)) {
   d5436:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   d543a:	2209      	movs	r2, #9
   d543c:	4629      	mov	r1, r5
   d543e:	4620      	mov	r0, r4
   d5440:	f7ff fe88 	bl	d5154 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>
   d5444:	b938      	cbnz	r0, d5456 <_ZN13Adafruit_MQTT7connectEv+0xa8>
   d5446:	3e01      	subs	r6, #1
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    // Ignore subscriptions that aren't defined.
    if (subscriptions[i] == 0) continue;

    boolean success = false;
    for (uint8_t retry=0; (retry<3) && !success; retry++) { // retry until we get a suback    
   d5448:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   d544c:	d1e4      	bne.n	d5418 <_ZN13Adafruit_MQTT7connectEv+0x6a>
	success = true;
	break;
      }
      //Serial.println("\t**failed, retrying!");
    }
    if (! success) return -2; // failed to sub for some reason
   d544e:	f06f 0001 	mvn.w	r0, #1
  }

  return 0;
}
   d5452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return -1;
  if (buffer[3] != 0)
    return buffer[3];

  // Setup subscriptions once connected.
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
   d5456:	4547      	cmp	r7, r8
   d5458:	d1da      	bne.n	d5410 <_ZN13Adafruit_MQTT7connectEv+0x62>
      //Serial.println("\t**failed, retrying!");
    }
    if (! success) return -2; // failed to sub for some reason
  }

  return 0;
   d545a:	2000      	movs	r0, #0
   d545c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5460 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>:
  return 2;
}

// Adafruit_MQTT_Publish Definition ////////////////////////////////////////////

Adafruit_MQTT_Publish::Adafruit_MQTT_Publish(Adafruit_MQTT *mqttserver,
   d5460:	b510      	push	{r4, lr}
                                             const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
   d5462:	e880 0006 	stmia.w	r0, {r1, r2}
  qos = q;
   d5466:	7203      	strb	r3, [r0, #8]
}
   d5468:	bd10      	pop	{r4, pc}
	...

000d546c <_ZN21Adafruit_MQTT_Publish7publishEdh>:
  char payload[11];
  ultoa(i, payload, 10);
  return mqtt->publish(topic, payload, qos);
}

bool Adafruit_MQTT_Publish::publish(double f, uint8_t precision) {
   d546c:	b510      	push	{r4, lr}
   d546e:	b092      	sub	sp, #72	; 0x48
   d5470:	4604      	mov	r4, r0
#include "Adafruit_MQTT.h"

#if defined(ARDUINO_SAMD_ZERO) || defined(ARDUINO_SAMD_MKR1000) || defined(SPARK)
static char *dtostrf (double val, signed char width, unsigned char prec, char *sout) {
  char fmt[20];
  sprintf(fmt, "%%%d.%df", width, prec);
   d5472:	460b      	mov	r3, r1
   d5474:	2200      	movs	r2, #0
   d5476:	490b      	ldr	r1, [pc, #44]	; (d54a4 <_ZN21Adafruit_MQTT_Publish7publishEdh+0x38>)
   d5478:	a802      	add	r0, sp, #8
  char payload[11];
  ultoa(i, payload, 10);
  return mqtt->publish(topic, payload, qos);
}

bool Adafruit_MQTT_Publish::publish(double f, uint8_t precision) {
   d547a:	ed8d 0b00 	vstr	d0, [sp]
#include "Adafruit_MQTT.h"

#if defined(ARDUINO_SAMD_ZERO) || defined(ARDUINO_SAMD_MKR1000) || defined(SPARK)
static char *dtostrf (double val, signed char width, unsigned char prec, char *sout) {
  char fmt[20];
  sprintf(fmt, "%%%d.%df", width, prec);
   d547e:	f000 fa91 	bl	d59a4 <sprintf>
  sprintf(sout, fmt, val);
   d5482:	ed9d 0b00 	vldr	d0, [sp]
   d5486:	a902      	add	r1, sp, #8
   d5488:	ec53 2b10 	vmov	r2, r3, d0
   d548c:	a807      	add	r0, sp, #28
   d548e:	f000 fa89 	bl	d59a4 <sprintf>
}

bool Adafruit_MQTT_Publish::publish(double f, uint8_t precision) {
  char payload[41];  // Need to technically hold float max, 39 digits and minus sign.
  dtostrf(f, 0, precision, payload);
  return mqtt->publish(topic, payload, qos);
   d5492:	7a23      	ldrb	r3, [r4, #8]
   d5494:	aa07      	add	r2, sp, #28
   d5496:	e894 0003 	ldmia.w	r4, {r0, r1}
   d549a:	f7ff ff5b 	bl	d5354 <_ZN13Adafruit_MQTT7publishEPKcS1_h>
}
   d549e:	b012      	add	sp, #72	; 0x48
   d54a0:	bd10      	pop	{r4, pc}
   d54a2:	bf00      	nop
   d54a4:	000d990c 	.word	0x000d990c

000d54a8 <_GLOBAL__sub_I__Z11printBufferPht>:
   d54a8:	f000 b810 	b.w	d54cc <HAL_Pin_Map>

000d54ac <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d54ac:	b508      	push	{r3, lr}
   d54ae:	4b02      	ldr	r3, [pc, #8]	; (d54b8 <netdb_freeaddrinfo+0xc>)
   d54b0:	681b      	ldr	r3, [r3, #0]
   d54b2:	689b      	ldr	r3, [r3, #8]
   d54b4:	9301      	str	r3, [sp, #4]
   d54b6:	bd08      	pop	{r3, pc}
   d54b8:	00030268 	.word	0x00030268

000d54bc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d54bc:	b508      	push	{r3, lr}
   d54be:	4b02      	ldr	r3, [pc, #8]	; (d54c8 <netdb_getaddrinfo+0xc>)
   d54c0:	681b      	ldr	r3, [r3, #0]
   d54c2:	68db      	ldr	r3, [r3, #12]
   d54c4:	9301      	str	r3, [sp, #4]
   d54c6:	bd08      	pop	{r3, pc}
   d54c8:	00030268 	.word	0x00030268

000d54cc <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d54cc:	b508      	push	{r3, lr}
   d54ce:	4b02      	ldr	r3, [pc, #8]	; (d54d8 <HAL_Pin_Map+0xc>)
   d54d0:	681b      	ldr	r3, [r3, #0]
   d54d2:	681b      	ldr	r3, [r3, #0]
   d54d4:	9301      	str	r3, [sp, #4]
   d54d6:	bd08      	pop	{r3, pc}
   d54d8:	0003022c 	.word	0x0003022c

000d54dc <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d54dc:	b508      	push	{r3, lr}
   d54de:	4b02      	ldr	r3, [pc, #8]	; (d54e8 <HAL_Pin_Mode+0xc>)
   d54e0:	681b      	ldr	r3, [r3, #0]
   d54e2:	689b      	ldr	r3, [r3, #8]
   d54e4:	9301      	str	r3, [sp, #4]
   d54e6:	bd08      	pop	{r3, pc}
   d54e8:	0003022c 	.word	0x0003022c

000d54ec <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d54ec:	b508      	push	{r3, lr}
   d54ee:	4b02      	ldr	r3, [pc, #8]	; (d54f8 <HAL_Get_Pin_Mode+0xc>)
   d54f0:	681b      	ldr	r3, [r3, #0]
   d54f2:	68db      	ldr	r3, [r3, #12]
   d54f4:	9301      	str	r3, [sp, #4]
   d54f6:	bd08      	pop	{r3, pc}
   d54f8:	0003022c 	.word	0x0003022c

000d54fc <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d54fc:	b508      	push	{r3, lr}
   d54fe:	4b02      	ldr	r3, [pc, #8]	; (d5508 <HAL_GPIO_Write+0xc>)
   d5500:	681b      	ldr	r3, [r3, #0]
   d5502:	691b      	ldr	r3, [r3, #16]
   d5504:	9301      	str	r3, [sp, #4]
   d5506:	bd08      	pop	{r3, pc}
   d5508:	0003022c 	.word	0x0003022c

000d550c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d550c:	b508      	push	{r3, lr}
   d550e:	4b02      	ldr	r3, [pc, #8]	; (d5518 <HAL_GPIO_Read+0xc>)
   d5510:	681b      	ldr	r3, [r3, #0]
   d5512:	695b      	ldr	r3, [r3, #20]
   d5514:	9301      	str	r3, [sp, #4]
   d5516:	bd08      	pop	{r3, pc}
   d5518:	0003022c 	.word	0x0003022c

000d551c <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d551c:	b508      	push	{r3, lr}
   d551e:	4b02      	ldr	r3, [pc, #8]	; (d5528 <HAL_SPI_Begin+0xc>)
   d5520:	681b      	ldr	r3, [r3, #0]
   d5522:	681b      	ldr	r3, [r3, #0]
   d5524:	9301      	str	r3, [sp, #4]
   d5526:	bd08      	pop	{r3, pc}
   d5528:	00030230 	.word	0x00030230

000d552c <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d552c:	b508      	push	{r3, lr}
   d552e:	4b02      	ldr	r3, [pc, #8]	; (d5538 <HAL_SPI_Send_Receive_Data+0xc>)
   d5530:	681b      	ldr	r3, [r3, #0]
   d5532:	695b      	ldr	r3, [r3, #20]
   d5534:	9301      	str	r3, [sp, #4]
   d5536:	bd08      	pop	{r3, pc}
   d5538:	00030230 	.word	0x00030230

000d553c <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d553c:	b508      	push	{r3, lr}
   d553e:	4b02      	ldr	r3, [pc, #8]	; (d5548 <HAL_SPI_Init+0xc>)
   d5540:	681b      	ldr	r3, [r3, #0]
   d5542:	69db      	ldr	r3, [r3, #28]
   d5544:	9301      	str	r3, [sp, #4]
   d5546:	bd08      	pop	{r3, pc}
   d5548:	00030230 	.word	0x00030230

000d554c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d554c:	b508      	push	{r3, lr}
   d554e:	4b02      	ldr	r3, [pc, #8]	; (d5558 <HAL_SPI_Is_Enabled+0xc>)
   d5550:	681b      	ldr	r3, [r3, #0]
   d5552:	6a1b      	ldr	r3, [r3, #32]
   d5554:	9301      	str	r3, [sp, #4]
   d5556:	bd08      	pop	{r3, pc}
   d5558:	00030230 	.word	0x00030230

000d555c <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d555c:	b508      	push	{r3, lr}
   d555e:	4b02      	ldr	r3, [pc, #8]	; (d5568 <HAL_SPI_Info+0xc>)
   d5560:	681b      	ldr	r3, [r3, #0]
   d5562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5564:	9301      	str	r3, [sp, #4]
   d5566:	bd08      	pop	{r3, pc}
   d5568:	00030230 	.word	0x00030230

000d556c <HAL_SPI_Set_Settings>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d556c:	b508      	push	{r3, lr}
   d556e:	4b02      	ldr	r3, [pc, #8]	; (d5578 <HAL_SPI_Set_Settings+0xc>)
   d5570:	681b      	ldr	r3, [r3, #0]
   d5572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5574:	9301      	str	r3, [sp, #4]
   d5576:	bd08      	pop	{r3, pc}
   d5578:	00030230 	.word	0x00030230

000d557c <HAL_SPI_Acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d557c:	b508      	push	{r3, lr}
   d557e:	4b02      	ldr	r3, [pc, #8]	; (d5588 <HAL_SPI_Acquire+0xc>)
   d5580:	681b      	ldr	r3, [r3, #0]
   d5582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5584:	9301      	str	r3, [sp, #4]
   d5586:	bd08      	pop	{r3, pc}
   d5588:	00030230 	.word	0x00030230

000d558c <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d558c:	b508      	push	{r3, lr}
   d558e:	4b02      	ldr	r3, [pc, #8]	; (d5598 <HAL_SPI_Release+0xc>)
   d5590:	681b      	ldr	r3, [r3, #0]
   d5592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5594:	9301      	str	r3, [sp, #4]
   d5596:	bd08      	pop	{r3, pc}
   d5598:	00030230 	.word	0x00030230

000d559c <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d559c:	b508      	push	{r3, lr}
   d559e:	4b02      	ldr	r3, [pc, #8]	; (d55a8 <if_index_to_name+0xc>)
   d55a0:	681b      	ldr	r3, [r3, #0]
   d55a2:	695b      	ldr	r3, [r3, #20]
   d55a4:	9301      	str	r3, [sp, #4]
   d55a6:	bd08      	pop	{r3, pc}
   d55a8:	0003026c 	.word	0x0003026c

000d55ac <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d55ac:	b508      	push	{r3, lr}
   d55ae:	4b02      	ldr	r3, [pc, #8]	; (d55b8 <HAL_RNG_GetRandomNumber+0xc>)
   d55b0:	681b      	ldr	r3, [r3, #0]
   d55b2:	685b      	ldr	r3, [r3, #4]
   d55b4:	9301      	str	r3, [sp, #4]
   d55b6:	bd08      	pop	{r3, pc}
   d55b8:	00030218 	.word	0x00030218

000d55bc <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d55bc:	b508      	push	{r3, lr}
   d55be:	4b02      	ldr	r3, [pc, #8]	; (d55c8 <HAL_Delay_Microseconds+0xc>)
   d55c0:	681b      	ldr	r3, [r3, #0]
   d55c2:	68db      	ldr	r3, [r3, #12]
   d55c4:	9301      	str	r3, [sp, #4]
   d55c6:	bd08      	pop	{r3, pc}
   d55c8:	00030218 	.word	0x00030218

000d55cc <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d55cc:	b508      	push	{r3, lr}
   d55ce:	4b02      	ldr	r3, [pc, #8]	; (d55d8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d55d0:	681b      	ldr	r3, [r3, #0]
   d55d2:	695b      	ldr	r3, [r3, #20]
   d55d4:	9301      	str	r3, [sp, #4]
   d55d6:	bd08      	pop	{r3, pc}
   d55d8:	00030218 	.word	0x00030218

000d55dc <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d55dc:	b508      	push	{r3, lr}
   d55de:	4b02      	ldr	r3, [pc, #8]	; (d55e8 <os_thread_is_current+0xc>)
   d55e0:	681b      	ldr	r3, [r3, #0]
   d55e2:	689b      	ldr	r3, [r3, #8]
   d55e4:	9301      	str	r3, [sp, #4]
   d55e6:	bd08      	pop	{r3, pc}
   d55e8:	00030248 	.word	0x00030248

000d55ec <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d55ec:	b508      	push	{r3, lr}
   d55ee:	4b02      	ldr	r3, [pc, #8]	; (d55f8 <os_thread_join+0xc>)
   d55f0:	681b      	ldr	r3, [r3, #0]
   d55f2:	691b      	ldr	r3, [r3, #16]
   d55f4:	9301      	str	r3, [sp, #4]
   d55f6:	bd08      	pop	{r3, pc}
   d55f8:	00030248 	.word	0x00030248

000d55fc <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d55fc:	b508      	push	{r3, lr}
   d55fe:	4b02      	ldr	r3, [pc, #8]	; (d5608 <os_thread_cleanup+0xc>)
   d5600:	681b      	ldr	r3, [r3, #0]
   d5602:	695b      	ldr	r3, [r3, #20]
   d5604:	9301      	str	r3, [sp, #4]
   d5606:	bd08      	pop	{r3, pc}
   d5608:	00030248 	.word	0x00030248

000d560c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d560c:	b508      	push	{r3, lr}
   d560e:	4b02      	ldr	r3, [pc, #8]	; (d5618 <os_mutex_recursive_create+0xc>)
   d5610:	681b      	ldr	r3, [r3, #0]
   d5612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5614:	9301      	str	r3, [sp, #4]
   d5616:	bd08      	pop	{r3, pc}
   d5618:	00030248 	.word	0x00030248

000d561c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d561c:	b508      	push	{r3, lr}
   d561e:	4b02      	ldr	r3, [pc, #8]	; (d5628 <os_mutex_recursive_destroy+0xc>)
   d5620:	681b      	ldr	r3, [r3, #0]
   d5622:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5624:	9301      	str	r3, [sp, #4]
   d5626:	bd08      	pop	{r3, pc}
   d5628:	00030248 	.word	0x00030248

000d562c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d562c:	b508      	push	{r3, lr}
   d562e:	4b02      	ldr	r3, [pc, #8]	; (d5638 <inet_inet_ntop+0xc>)
   d5630:	681b      	ldr	r3, [r3, #0]
   d5632:	695b      	ldr	r3, [r3, #20]
   d5634:	9301      	str	r3, [sp, #4]
   d5636:	bd08      	pop	{r3, pc}
   d5638:	00030264 	.word	0x00030264

000d563c <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d563c:	b508      	push	{r3, lr}
   d563e:	4b02      	ldr	r3, [pc, #8]	; (d5648 <inet_htonl+0xc>)
   d5640:	681b      	ldr	r3, [r3, #0]
   d5642:	6a1b      	ldr	r3, [r3, #32]
   d5644:	9301      	str	r3, [sp, #4]
   d5646:	bd08      	pop	{r3, pc}
   d5648:	00030264 	.word	0x00030264

000d564c <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d564c:	b508      	push	{r3, lr}
   d564e:	4b02      	ldr	r3, [pc, #8]	; (d5658 <inet_htons+0xc>)
   d5650:	681b      	ldr	r3, [r3, #0]
   d5652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5654:	9301      	str	r3, [sp, #4]
   d5656:	bd08      	pop	{r3, pc}
   d5658:	00030264 	.word	0x00030264

000d565c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d565c:	b508      	push	{r3, lr}
   d565e:	4b02      	ldr	r3, [pc, #8]	; (d5668 <HAL_USART_Init+0xc>)
   d5660:	681b      	ldr	r3, [r3, #0]
   d5662:	681b      	ldr	r3, [r3, #0]
   d5664:	9301      	str	r3, [sp, #4]
   d5666:	bd08      	pop	{r3, pc}
   d5668:	0003023c 	.word	0x0003023c

000d566c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d566c:	b508      	push	{r3, lr}
   d566e:	4b02      	ldr	r3, [pc, #8]	; (d5678 <HAL_USART_Write_Data+0xc>)
   d5670:	681b      	ldr	r3, [r3, #0]
   d5672:	68db      	ldr	r3, [r3, #12]
   d5674:	9301      	str	r3, [sp, #4]
   d5676:	bd08      	pop	{r3, pc}
   d5678:	0003023c 	.word	0x0003023c

000d567c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d567c:	b508      	push	{r3, lr}
   d567e:	4b02      	ldr	r3, [pc, #8]	; (d5688 <HAL_USART_Available_Data+0xc>)
   d5680:	681b      	ldr	r3, [r3, #0]
   d5682:	691b      	ldr	r3, [r3, #16]
   d5684:	9301      	str	r3, [sp, #4]
   d5686:	bd08      	pop	{r3, pc}
   d5688:	0003023c 	.word	0x0003023c

000d568c <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d568c:	b508      	push	{r3, lr}
   d568e:	4b02      	ldr	r3, [pc, #8]	; (d5698 <HAL_USART_Read_Data+0xc>)
   d5690:	681b      	ldr	r3, [r3, #0]
   d5692:	695b      	ldr	r3, [r3, #20]
   d5694:	9301      	str	r3, [sp, #4]
   d5696:	bd08      	pop	{r3, pc}
   d5698:	0003023c 	.word	0x0003023c

000d569c <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d569c:	b508      	push	{r3, lr}
   d569e:	4b02      	ldr	r3, [pc, #8]	; (d56a8 <HAL_USART_Peek_Data+0xc>)
   d56a0:	681b      	ldr	r3, [r3, #0]
   d56a2:	699b      	ldr	r3, [r3, #24]
   d56a4:	9301      	str	r3, [sp, #4]
   d56a6:	bd08      	pop	{r3, pc}
   d56a8:	0003023c 	.word	0x0003023c

000d56ac <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d56ac:	b508      	push	{r3, lr}
   d56ae:	4b02      	ldr	r3, [pc, #8]	; (d56b8 <HAL_USART_Flush_Data+0xc>)
   d56b0:	681b      	ldr	r3, [r3, #0]
   d56b2:	69db      	ldr	r3, [r3, #28]
   d56b4:	9301      	str	r3, [sp, #4]
   d56b6:	bd08      	pop	{r3, pc}
   d56b8:	0003023c 	.word	0x0003023c

000d56bc <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d56bc:	b508      	push	{r3, lr}
   d56be:	4b02      	ldr	r3, [pc, #8]	; (d56c8 <HAL_USART_Is_Enabled+0xc>)
   d56c0:	681b      	ldr	r3, [r3, #0]
   d56c2:	6a1b      	ldr	r3, [r3, #32]
   d56c4:	9301      	str	r3, [sp, #4]
   d56c6:	bd08      	pop	{r3, pc}
   d56c8:	0003023c 	.word	0x0003023c

000d56cc <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d56cc:	b508      	push	{r3, lr}
   d56ce:	4b02      	ldr	r3, [pc, #8]	; (d56d8 <HAL_USART_Available_Data_For_Write+0xc>)
   d56d0:	681b      	ldr	r3, [r3, #0]
   d56d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d56d4:	9301      	str	r3, [sp, #4]
   d56d6:	bd08      	pop	{r3, pc}
   d56d8:	0003023c 	.word	0x0003023c

000d56dc <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d56dc:	b508      	push	{r3, lr}
   d56de:	4b02      	ldr	r3, [pc, #8]	; (d56e8 <HAL_I2C_Begin+0xc>)
   d56e0:	681b      	ldr	r3, [r3, #0]
   d56e2:	68db      	ldr	r3, [r3, #12]
   d56e4:	9301      	str	r3, [sp, #4]
   d56e6:	bd08      	pop	{r3, pc}
   d56e8:	00030228 	.word	0x00030228

000d56ec <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d56ec:	b508      	push	{r3, lr}
   d56ee:	4b02      	ldr	r3, [pc, #8]	; (d56f8 <HAL_I2C_Begin_Transmission+0xc>)
   d56f0:	681b      	ldr	r3, [r3, #0]
   d56f2:	699b      	ldr	r3, [r3, #24]
   d56f4:	9301      	str	r3, [sp, #4]
   d56f6:	bd08      	pop	{r3, pc}
   d56f8:	00030228 	.word	0x00030228

000d56fc <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d56fc:	b508      	push	{r3, lr}
   d56fe:	4b02      	ldr	r3, [pc, #8]	; (d5708 <HAL_I2C_End_Transmission+0xc>)
   d5700:	681b      	ldr	r3, [r3, #0]
   d5702:	69db      	ldr	r3, [r3, #28]
   d5704:	9301      	str	r3, [sp, #4]
   d5706:	bd08      	pop	{r3, pc}
   d5708:	00030228 	.word	0x00030228

000d570c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d570c:	b508      	push	{r3, lr}
   d570e:	4b02      	ldr	r3, [pc, #8]	; (d5718 <HAL_I2C_Write_Data+0xc>)
   d5710:	681b      	ldr	r3, [r3, #0]
   d5712:	6a1b      	ldr	r3, [r3, #32]
   d5714:	9301      	str	r3, [sp, #4]
   d5716:	bd08      	pop	{r3, pc}
   d5718:	00030228 	.word	0x00030228

000d571c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d571c:	b508      	push	{r3, lr}
   d571e:	4b02      	ldr	r3, [pc, #8]	; (d5728 <HAL_I2C_Available_Data+0xc>)
   d5720:	681b      	ldr	r3, [r3, #0]
   d5722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5724:	9301      	str	r3, [sp, #4]
   d5726:	bd08      	pop	{r3, pc}
   d5728:	00030228 	.word	0x00030228

000d572c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d572c:	b508      	push	{r3, lr}
   d572e:	4b02      	ldr	r3, [pc, #8]	; (d5738 <HAL_I2C_Read_Data+0xc>)
   d5730:	681b      	ldr	r3, [r3, #0]
   d5732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5734:	9301      	str	r3, [sp, #4]
   d5736:	bd08      	pop	{r3, pc}
   d5738:	00030228 	.word	0x00030228

000d573c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d573c:	b508      	push	{r3, lr}
   d573e:	4b02      	ldr	r3, [pc, #8]	; (d5748 <HAL_I2C_Peek_Data+0xc>)
   d5740:	681b      	ldr	r3, [r3, #0]
   d5742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5744:	9301      	str	r3, [sp, #4]
   d5746:	bd08      	pop	{r3, pc}
   d5748:	00030228 	.word	0x00030228

000d574c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d574c:	b508      	push	{r3, lr}
   d574e:	4b02      	ldr	r3, [pc, #8]	; (d5758 <HAL_I2C_Flush_Data+0xc>)
   d5750:	681b      	ldr	r3, [r3, #0]
   d5752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5754:	9301      	str	r3, [sp, #4]
   d5756:	bd08      	pop	{r3, pc}
   d5758:	00030228 	.word	0x00030228

000d575c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d575c:	b508      	push	{r3, lr}
   d575e:	4b02      	ldr	r3, [pc, #8]	; (d5768 <HAL_I2C_Is_Enabled+0xc>)
   d5760:	681b      	ldr	r3, [r3, #0]
   d5762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5764:	9301      	str	r3, [sp, #4]
   d5766:	bd08      	pop	{r3, pc}
   d5768:	00030228 	.word	0x00030228

000d576c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d576c:	b508      	push	{r3, lr}
   d576e:	4b02      	ldr	r3, [pc, #8]	; (d5778 <HAL_I2C_Init+0xc>)
   d5770:	681b      	ldr	r3, [r3, #0]
   d5772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5774:	9301      	str	r3, [sp, #4]
   d5776:	bd08      	pop	{r3, pc}
   d5778:	00030228 	.word	0x00030228

000d577c <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d577c:	b508      	push	{r3, lr}
   d577e:	4b02      	ldr	r3, [pc, #8]	; (d5788 <HAL_I2C_Request_Data_Ex+0xc>)
   d5780:	681b      	ldr	r3, [r3, #0]
   d5782:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5784:	9301      	str	r3, [sp, #4]
   d5786:	bd08      	pop	{r3, pc}
   d5788:	00030228 	.word	0x00030228

000d578c <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d578c:	b508      	push	{r3, lr}
   d578e:	4b02      	ldr	r3, [pc, #8]	; (d5798 <sock_setsockopt+0xc>)
   d5790:	681b      	ldr	r3, [r3, #0]
   d5792:	699b      	ldr	r3, [r3, #24]
   d5794:	9301      	str	r3, [sp, #4]
   d5796:	bd08      	pop	{r3, pc}
   d5798:	00030238 	.word	0x00030238

000d579c <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d579c:	b508      	push	{r3, lr}
   d579e:	4b02      	ldr	r3, [pc, #8]	; (d57a8 <sock_close+0xc>)
   d57a0:	681b      	ldr	r3, [r3, #0]
   d57a2:	69db      	ldr	r3, [r3, #28]
   d57a4:	9301      	str	r3, [sp, #4]
   d57a6:	bd08      	pop	{r3, pc}
   d57a8:	00030238 	.word	0x00030238

000d57ac <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d57ac:	b508      	push	{r3, lr}
   d57ae:	4b02      	ldr	r3, [pc, #8]	; (d57b8 <sock_connect+0xc>)
   d57b0:	681b      	ldr	r3, [r3, #0]
   d57b2:	6a1b      	ldr	r3, [r3, #32]
   d57b4:	9301      	str	r3, [sp, #4]
   d57b6:	bd08      	pop	{r3, pc}
   d57b8:	00030238 	.word	0x00030238

000d57bc <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d57bc:	b508      	push	{r3, lr}
   d57be:	4b02      	ldr	r3, [pc, #8]	; (d57c8 <sock_recv+0xc>)
   d57c0:	681b      	ldr	r3, [r3, #0]
   d57c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d57c4:	9301      	str	r3, [sp, #4]
   d57c6:	bd08      	pop	{r3, pc}
   d57c8:	00030238 	.word	0x00030238

000d57cc <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d57cc:	b508      	push	{r3, lr}
   d57ce:	4b02      	ldr	r3, [pc, #8]	; (d57d8 <sock_send+0xc>)
   d57d0:	681b      	ldr	r3, [r3, #0]
   d57d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d57d4:	9301      	str	r3, [sp, #4]
   d57d6:	bd08      	pop	{r3, pc}
   d57d8:	00030238 	.word	0x00030238

000d57dc <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d57dc:	b508      	push	{r3, lr}
   d57de:	4b02      	ldr	r3, [pc, #8]	; (d57e8 <sock_socket+0xc>)
   d57e0:	681b      	ldr	r3, [r3, #0]
   d57e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d57e4:	9301      	str	r3, [sp, #4]
   d57e6:	bd08      	pop	{r3, pc}
   d57e8:	00030238 	.word	0x00030238

000d57ec <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d57ec:	b508      	push	{r3, lr}
   d57ee:	4b02      	ldr	r3, [pc, #8]	; (d57f8 <HAL_USB_USART_Init+0xc>)
   d57f0:	681b      	ldr	r3, [r3, #0]
   d57f2:	681b      	ldr	r3, [r3, #0]
   d57f4:	9301      	str	r3, [sp, #4]
   d57f6:	bd08      	pop	{r3, pc}
   d57f8:	0003024c 	.word	0x0003024c

000d57fc <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d57fc:	b508      	push	{r3, lr}
   d57fe:	4b02      	ldr	r3, [pc, #8]	; (d5808 <HAL_USB_USART_Begin+0xc>)
   d5800:	681b      	ldr	r3, [r3, #0]
   d5802:	685b      	ldr	r3, [r3, #4]
   d5804:	9301      	str	r3, [sp, #4]
   d5806:	bd08      	pop	{r3, pc}
   d5808:	0003024c 	.word	0x0003024c

000d580c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d580c:	b508      	push	{r3, lr}
   d580e:	4b02      	ldr	r3, [pc, #8]	; (d5818 <HAL_USB_USART_Available_Data+0xc>)
   d5810:	681b      	ldr	r3, [r3, #0]
   d5812:	691b      	ldr	r3, [r3, #16]
   d5814:	9301      	str	r3, [sp, #4]
   d5816:	bd08      	pop	{r3, pc}
   d5818:	0003024c 	.word	0x0003024c

000d581c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d581c:	b508      	push	{r3, lr}
   d581e:	4b02      	ldr	r3, [pc, #8]	; (d5828 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5820:	681b      	ldr	r3, [r3, #0]
   d5822:	695b      	ldr	r3, [r3, #20]
   d5824:	9301      	str	r3, [sp, #4]
   d5826:	bd08      	pop	{r3, pc}
   d5828:	0003024c 	.word	0x0003024c

000d582c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d582c:	b508      	push	{r3, lr}
   d582e:	4b02      	ldr	r3, [pc, #8]	; (d5838 <HAL_USB_USART_Receive_Data+0xc>)
   d5830:	681b      	ldr	r3, [r3, #0]
   d5832:	699b      	ldr	r3, [r3, #24]
   d5834:	9301      	str	r3, [sp, #4]
   d5836:	bd08      	pop	{r3, pc}
   d5838:	0003024c 	.word	0x0003024c

000d583c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d583c:	b508      	push	{r3, lr}
   d583e:	4b02      	ldr	r3, [pc, #8]	; (d5848 <HAL_USB_USART_Send_Data+0xc>)
   d5840:	681b      	ldr	r3, [r3, #0]
   d5842:	69db      	ldr	r3, [r3, #28]
   d5844:	9301      	str	r3, [sp, #4]
   d5846:	bd08      	pop	{r3, pc}
   d5848:	0003024c 	.word	0x0003024c

000d584c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d584c:	b508      	push	{r3, lr}
   d584e:	4b02      	ldr	r3, [pc, #8]	; (d5858 <HAL_USB_USART_Flush_Data+0xc>)
   d5850:	681b      	ldr	r3, [r3, #0]
   d5852:	6a1b      	ldr	r3, [r3, #32]
   d5854:	9301      	str	r3, [sp, #4]
   d5856:	bd08      	pop	{r3, pc}
   d5858:	0003024c 	.word	0x0003024c

000d585c <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
   d585c:	b508      	push	{r3, lr}
   d585e:	4b02      	ldr	r3, [pc, #8]	; (d5868 <HAL_USB_USART_Is_Enabled+0xc>)
   d5860:	681b      	ldr	r3, [r3, #0]
   d5862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5864:	9301      	str	r3, [sp, #4]
   d5866:	bd08      	pop	{r3, pc}
   d5868:	0003024c 	.word	0x0003024c

000d586c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d586c:	b508      	push	{r3, lr}
   d586e:	4b02      	ldr	r3, [pc, #8]	; (d5878 <panic_+0xc>)
   d5870:	681b      	ldr	r3, [r3, #0]
   d5872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5874:	9301      	str	r3, [sp, #4]
   d5876:	bd08      	pop	{r3, pc}
   d5878:	00030260 	.word	0x00030260

000d587c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d587c:	b508      	push	{r3, lr}
   d587e:	4b02      	ldr	r3, [pc, #8]	; (d5888 <log_message+0xc>)
   d5880:	681b      	ldr	r3, [r3, #0]
   d5882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5884:	9301      	str	r3, [sp, #4]
   d5886:	bd08      	pop	{r3, pc}
   d5888:	00030260 	.word	0x00030260

000d588c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d588c:	b508      	push	{r3, lr}
   d588e:	4b02      	ldr	r3, [pc, #8]	; (d5898 <set_system_mode+0xc>)
   d5890:	681b      	ldr	r3, [r3, #0]
   d5892:	685b      	ldr	r3, [r3, #4]
   d5894:	9301      	str	r3, [sp, #4]
   d5896:	bd08      	pop	{r3, pc}
   d5898:	00030220 	.word	0x00030220

000d589c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d589c:	b508      	push	{r3, lr}
   d589e:	4b02      	ldr	r3, [pc, #8]	; (d58a8 <system_delay_ms+0xc>)
   d58a0:	681b      	ldr	r3, [r3, #0]
   d58a2:	695b      	ldr	r3, [r3, #20]
   d58a4:	9301      	str	r3, [sp, #4]
   d58a6:	bd08      	pop	{r3, pc}
   d58a8:	00030220 	.word	0x00030220

000d58ac <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d58ac:	b508      	push	{r3, lr}
   d58ae:	4b03      	ldr	r3, [pc, #12]	; (d58bc <system_ctrl_set_app_request_handler+0x10>)
   d58b0:	681b      	ldr	r3, [r3, #0]
   d58b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d58b6:	9301      	str	r3, [sp, #4]
   d58b8:	bd08      	pop	{r3, pc}
   d58ba:	0000      	.short	0x0000
   d58bc:	00030220 	.word	0x00030220

000d58c0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d58c0:	b508      	push	{r3, lr}
   d58c2:	4b03      	ldr	r3, [pc, #12]	; (d58d0 <system_ctrl_set_result+0x10>)
   d58c4:	681b      	ldr	r3, [r3, #0]
   d58c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d58ca:	9301      	str	r3, [sp, #4]
   d58cc:	bd08      	pop	{r3, pc}
   d58ce:	0000      	.short	0x0000
   d58d0:	00030220 	.word	0x00030220

000d58d4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d58d4:	b508      	push	{r3, lr}
   d58d6:	4b02      	ldr	r3, [pc, #8]	; (d58e0 <network_connect+0xc>)
   d58d8:	681b      	ldr	r3, [r3, #0]
   d58da:	685b      	ldr	r3, [r3, #4]
   d58dc:	9301      	str	r3, [sp, #4]
   d58de:	bd08      	pop	{r3, pc}
   d58e0:	00030240 	.word	0x00030240

000d58e4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d58e4:	b508      	push	{r3, lr}
   d58e6:	4b02      	ldr	r3, [pc, #8]	; (d58f0 <network_connecting+0xc>)
   d58e8:	681b      	ldr	r3, [r3, #0]
   d58ea:	689b      	ldr	r3, [r3, #8]
   d58ec:	9301      	str	r3, [sp, #4]
   d58ee:	bd08      	pop	{r3, pc}
   d58f0:	00030240 	.word	0x00030240

000d58f4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d58f4:	b508      	push	{r3, lr}
   d58f6:	4b02      	ldr	r3, [pc, #8]	; (d5900 <network_disconnect+0xc>)
   d58f8:	681b      	ldr	r3, [r3, #0]
   d58fa:	68db      	ldr	r3, [r3, #12]
   d58fc:	9301      	str	r3, [sp, #4]
   d58fe:	bd08      	pop	{r3, pc}
   d5900:	00030240 	.word	0x00030240

000d5904 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5904:	b508      	push	{r3, lr}
   d5906:	4b02      	ldr	r3, [pc, #8]	; (d5910 <network_ready+0xc>)
   d5908:	681b      	ldr	r3, [r3, #0]
   d590a:	691b      	ldr	r3, [r3, #16]
   d590c:	9301      	str	r3, [sp, #4]
   d590e:	bd08      	pop	{r3, pc}
   d5910:	00030240 	.word	0x00030240

000d5914 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5914:	b508      	push	{r3, lr}
   d5916:	4b02      	ldr	r3, [pc, #8]	; (d5920 <network_on+0xc>)
   d5918:	681b      	ldr	r3, [r3, #0]
   d591a:	695b      	ldr	r3, [r3, #20]
   d591c:	9301      	str	r3, [sp, #4]
   d591e:	bd08      	pop	{r3, pc}
   d5920:	00030240 	.word	0x00030240

000d5924 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5924:	b508      	push	{r3, lr}
   d5926:	4b02      	ldr	r3, [pc, #8]	; (d5930 <network_off+0xc>)
   d5928:	681b      	ldr	r3, [r3, #0]
   d592a:	699b      	ldr	r3, [r3, #24]
   d592c:	9301      	str	r3, [sp, #4]
   d592e:	bd08      	pop	{r3, pc}
   d5930:	00030240 	.word	0x00030240

000d5934 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5934:	b508      	push	{r3, lr}
   d5936:	4b02      	ldr	r3, [pc, #8]	; (d5940 <network_listen+0xc>)
   d5938:	681b      	ldr	r3, [r3, #0]
   d593a:	69db      	ldr	r3, [r3, #28]
   d593c:	9301      	str	r3, [sp, #4]
   d593e:	bd08      	pop	{r3, pc}
   d5940:	00030240 	.word	0x00030240

000d5944 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5944:	b508      	push	{r3, lr}
   d5946:	4b02      	ldr	r3, [pc, #8]	; (d5950 <network_listening+0xc>)
   d5948:	681b      	ldr	r3, [r3, #0]
   d594a:	6a1b      	ldr	r3, [r3, #32]
   d594c:	9301      	str	r3, [sp, #4]
   d594e:	bd08      	pop	{r3, pc}
   d5950:	00030240 	.word	0x00030240

000d5954 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5954:	b508      	push	{r3, lr}
   d5956:	4b02      	ldr	r3, [pc, #8]	; (d5960 <network_set_listen_timeout+0xc>)
   d5958:	681b      	ldr	r3, [r3, #0]
   d595a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d595c:	9301      	str	r3, [sp, #4]
   d595e:	bd08      	pop	{r3, pc}
   d5960:	00030240 	.word	0x00030240

000d5964 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5964:	b508      	push	{r3, lr}
   d5966:	4b02      	ldr	r3, [pc, #8]	; (d5970 <network_get_listen_timeout+0xc>)
   d5968:	681b      	ldr	r3, [r3, #0]
   d596a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d596c:	9301      	str	r3, [sp, #4]
   d596e:	bd08      	pop	{r3, pc}
   d5970:	00030240 	.word	0x00030240

000d5974 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5974:	b508      	push	{r3, lr}
   d5976:	4b02      	ldr	r3, [pc, #8]	; (d5980 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5978:	681b      	ldr	r3, [r3, #0]
   d597a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d597c:	9301      	str	r3, [sp, #4]
   d597e:	bd08      	pop	{r3, pc}
   d5980:	00030244 	.word	0x00030244

000d5984 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5984:	b508      	push	{r3, lr}
   d5986:	4b02      	ldr	r3, [pc, #8]	; (d5990 <malloc+0xc>)
   d5988:	681b      	ldr	r3, [r3, #0]
   d598a:	681b      	ldr	r3, [r3, #0]
   d598c:	9301      	str	r3, [sp, #4]
   d598e:	bd08      	pop	{r3, pc}
   d5990:	0003021c 	.word	0x0003021c

000d5994 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5994:	b508      	push	{r3, lr}
   d5996:	4b02      	ldr	r3, [pc, #8]	; (d59a0 <free+0xc>)
   d5998:	681b      	ldr	r3, [r3, #0]
   d599a:	685b      	ldr	r3, [r3, #4]
   d599c:	9301      	str	r3, [sp, #4]
   d599e:	bd08      	pop	{r3, pc}
   d59a0:	0003021c 	.word	0x0003021c

000d59a4 <sprintf>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d59a4:	b508      	push	{r3, lr}
   d59a6:	4b02      	ldr	r3, [pc, #8]	; (d59b0 <sprintf+0xc>)
   d59a8:	681b      	ldr	r3, [r3, #0]
   d59aa:	68db      	ldr	r3, [r3, #12]
   d59ac:	9301      	str	r3, [sp, #4]
   d59ae:	bd08      	pop	{r3, pc}
   d59b0:	0003021c 	.word	0x0003021c

000d59b4 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d59b4:	b508      	push	{r3, lr}
   d59b6:	4b02      	ldr	r3, [pc, #8]	; (d59c0 <vsnprintf+0xc>)
   d59b8:	681b      	ldr	r3, [r3, #0]
   d59ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d59bc:	9301      	str	r3, [sp, #4]
   d59be:	bd08      	pop	{r3, pc}
   d59c0:	0003021c 	.word	0x0003021c

000d59c4 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d59c4:	b508      	push	{r3, lr}
   d59c6:	4b02      	ldr	r3, [pc, #8]	; (d59d0 <__errno+0xc>)
   d59c8:	681b      	ldr	r3, [r3, #0]
   d59ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d59cc:	9301      	str	r3, [sp, #4]
   d59ce:	bd08      	pop	{r3, pc}
   d59d0:	0003021c 	.word	0x0003021c

000d59d4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d59d4:	2200      	movs	r2, #0
   d59d6:	4611      	mov	r1, r2
   d59d8:	6840      	ldr	r0, [r0, #4]
   d59da:	f7ff bfb3 	b.w	d5944 <network_listening>

000d59de <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d59de:	2200      	movs	r2, #0
   d59e0:	4611      	mov	r1, r2
   d59e2:	6840      	ldr	r0, [r0, #4]
   d59e4:	f7ff bfbe 	b.w	d5964 <network_get_listen_timeout>

000d59e8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d59e8:	2200      	movs	r2, #0
   d59ea:	6840      	ldr	r0, [r0, #4]
   d59ec:	f7ff bfb2 	b.w	d5954 <network_set_listen_timeout>

000d59f0 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d59f0:	2200      	movs	r2, #0
   d59f2:	f081 0101 	eor.w	r1, r1, #1
   d59f6:	6840      	ldr	r0, [r0, #4]
   d59f8:	f7ff bf9c 	b.w	d5934 <network_listen>

000d59fc <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d59fc:	2300      	movs	r3, #0
   d59fe:	461a      	mov	r2, r3
   d5a00:	4619      	mov	r1, r3
   d5a02:	6840      	ldr	r0, [r0, #4]
   d5a04:	f7ff bf8e 	b.w	d5924 <network_off>

000d5a08 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5a08:	2300      	movs	r3, #0
   d5a0a:	461a      	mov	r2, r3
   d5a0c:	4619      	mov	r1, r3
   d5a0e:	6840      	ldr	r0, [r0, #4]
   d5a10:	f7ff bf80 	b.w	d5914 <network_on>

000d5a14 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5a14:	2200      	movs	r2, #0
   d5a16:	4611      	mov	r1, r2
   d5a18:	6840      	ldr	r0, [r0, #4]
   d5a1a:	f7ff bf73 	b.w	d5904 <network_ready>

000d5a1e <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5a1e:	2200      	movs	r2, #0
   d5a20:	4611      	mov	r1, r2
   d5a22:	6840      	ldr	r0, [r0, #4]
   d5a24:	f7ff bf5e 	b.w	d58e4 <network_connecting>

000d5a28 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5a28:	2200      	movs	r2, #0
   d5a2a:	2102      	movs	r1, #2
   d5a2c:	6840      	ldr	r0, [r0, #4]
   d5a2e:	f7ff bf61 	b.w	d58f4 <network_disconnect>

000d5a32 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5a32:	2300      	movs	r3, #0
   d5a34:	461a      	mov	r2, r3
   d5a36:	6840      	ldr	r0, [r0, #4]
   d5a38:	f7ff bf4c 	b.w	d58d4 <network_connect>

000d5a3c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5a3c:	4b02      	ldr	r3, [pc, #8]	; (d5a48 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5a3e:	2203      	movs	r2, #3
   d5a40:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5a42:	4a02      	ldr	r2, [pc, #8]	; (d5a4c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5a44:	601a      	str	r2, [r3, #0]
   d5a46:	4770      	bx	lr
   d5a48:	2003e3dc 	.word	0x2003e3dc
   d5a4c:	000d9ad8 	.word	0x000d9ad8

000d5a50 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d5a50:	2100      	movs	r1, #0
   d5a52:	f7ff bd93 	b.w	d557c <HAL_SPI_Acquire>

000d5a56 <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d5a56:	2100      	movs	r1, #0
   d5a58:	f7ff bd98 	b.w	d558c <HAL_SPI_Release>

000d5a5c <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5a5c:	b510      	push	{r4, lr}
   d5a5e:	4604      	mov	r4, r0
{
    _spi = spi;
   d5a60:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d5a62:	4608      	mov	r0, r1
   d5a64:	f7ff fd6a 	bl	d553c <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5a68:	2300      	movs	r3, #0
   d5a6a:	6063      	str	r3, [r4, #4]
}
   d5a6c:	4620      	mov	r0, r4
   d5a6e:	bd10      	pop	{r4, pc}

000d5a70 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d5a70:	b510      	push	{r4, lr}
   d5a72:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d5a74:	7800      	ldrb	r0, [r0, #0]
   d5a76:	f7ff ffeb 	bl	d5a50 <_ZN8SPIClass4lockEv.isra.0>
   d5a7a:	b948      	cbnz	r0, d5a90 <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d5a7c:	7820      	ldrb	r0, [r4, #0]
   d5a7e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d5a82:	f7ff fd4b 	bl	d551c <HAL_SPI_Begin>
        unlock();
   d5a86:	7820      	ldrb	r0, [r4, #0]
    }
}
   d5a88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d5a8c:	f7ff bfe3 	b.w	d5a56 <_ZN8SPIClass6unlockEv.isra.1>
   d5a90:	bd10      	pop	{r4, pc}

000d5a92 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d5a92:	7800      	ldrb	r0, [r0, #0]
   d5a94:	f7ff bfdf 	b.w	d5a56 <_ZN8SPIClass6unlockEv.isra.1>

000d5a98 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d5a98:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d5a9a:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d5a9c:	6018      	str	r0, [r3, #0]
   d5a9e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d5aa0:	6818      	ldr	r0, [r3, #0]
   d5aa2:	4288      	cmp	r0, r1
   d5aa4:	b2e5      	uxtb	r5, r4
   d5aa6:	d906      	bls.n	d5ab6 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d5aa8:	3401      	adds	r4, #1
   d5aaa:	2c08      	cmp	r4, #8
   d5aac:	d002      	beq.n	d5ab4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d5aae:	0840      	lsrs	r0, r0, #1
   d5ab0:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d5ab2:	e7f5      	b.n	d5aa0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d5ab4:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d5ab6:	4b02      	ldr	r3, [pc, #8]	; (d5ac0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d5ab8:	5d5b      	ldrb	r3, [r3, r5]
   d5aba:	7013      	strb	r3, [r2, #0]
   d5abc:	bd30      	pop	{r4, r5, pc}
   d5abe:	bf00      	nop
   d5ac0:	000d9b04 	.word	0x000d9b04

000d5ac4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d5ac4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5ac8:	4607      	mov	r7, r0
   d5aca:	b08f      	sub	sp, #60	; 0x3c
    // Lock peripheral
    CHECK(lock());
   d5acc:	7800      	ldrb	r0, [r0, #0]
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d5ace:	460e      	mov	r6, r1
    // Lock peripheral
    CHECK(lock());
   d5ad0:	f7ff ffbe 	bl	d5a50 <_ZN8SPIClass4lockEv.isra.0>
   d5ad4:	2800      	cmp	r0, #0
   d5ad6:	db62      	blt.n	d5b9e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
   d5ad8:	783c      	ldrb	r4, [r7, #0]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d5ada:	2214      	movs	r2, #20
   d5adc:	2100      	movs	r1, #0
   d5ade:	a809      	add	r0, sp, #36	; 0x24
   d5ae0:	f003 fcd0 	bl	d9484 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d5ae4:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d5ae6:	4620      	mov	r0, r4
   d5ae8:	2200      	movs	r2, #0
   d5aea:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d5aec:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
   d5af0:	f7ff fd34 	bl	d555c <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
   d5af4:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d5af8:	b154      	cbz	r4, d5b10 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4c>
   d5afa:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d5afe:	b935      	cbnz	r5, d5b0e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4a>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d5b00:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d5b04:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d5b08:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d5b0c:	e003      	b.n	d5b16 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x52>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d5b0e:	2400      	movs	r4, #0
   d5b10:	46a1      	mov	r9, r4
   d5b12:	46a0      	mov	r8, r4
   d5b14:	2501      	movs	r5, #1
   d5b16:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d5b18:	b105      	cbz	r5, d5b1c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x58>
   d5b1a:	b9bb      	cbnz	r3, d5b4c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
      return true;

    if (default_ == other.default_ &&
   d5b1c:	429d      	cmp	r5, r3
   d5b1e:	d10b      	bne.n	d5b38 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
   d5b20:	68b2      	ldr	r2, [r6, #8]
   d5b22:	4542      	cmp	r2, r8
   d5b24:	d108      	bne.n	d5b38 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d5b26:	f88d 9020 	strb.w	r9, [sp, #32]
   d5b2a:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d5b2e:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d5b32:	89b2      	ldrh	r2, [r6, #12]
   d5b34:	4291      	cmp	r1, r2
   d5b36:	d009      	beq.n	d5b4c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
   d5b38:	b153      	cbz	r3, d5b50 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d5b3a:	2400      	movs	r4, #0
   d5b3c:	7838      	ldrb	r0, [r7, #0]
   d5b3e:	9401      	str	r4, [sp, #4]
   d5b40:	9400      	str	r4, [sp, #0]
   d5b42:	4623      	mov	r3, r4
   d5b44:	4622      	mov	r2, r4
   d5b46:	2101      	movs	r1, #1

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d5b48:	f7ff fd10 	bl	d556c <HAL_SPI_Set_Settings>
            }
        }
    }

    return 0;
   d5b4c:	2000      	movs	r0, #0
   d5b4e:	e026      	b.n	d5b9e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
   d5b50:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
   d5b54:	68b1      	ldr	r1, [r6, #8]
   d5b56:	980a      	ldr	r0, [sp, #40]	; 0x28
   d5b58:	ab04      	add	r3, sp, #16
   d5b5a:	f10d 020f 	add.w	r2, sp, #15
   d5b5e:	f7ff ff9b 	bl	d5a98 <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d5b62:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d5b64:	b105      	cbz	r5, d5b68 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>
   d5b66:	b9b1      	cbnz	r1, d5b96 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d5b68:	42a9      	cmp	r1, r5
   d5b6a:	d008      	beq.n	d5b7e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xba>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d5b6c:	2400      	movs	r4, #0
   d5b6e:	7838      	ldrb	r0, [r7, #0]
   d5b70:	9401      	str	r4, [sp, #4]
   d5b72:	7b74      	ldrb	r4, [r6, #13]
   d5b74:	7b33      	ldrb	r3, [r6, #12]
   d5b76:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d5b7a:	9400      	str	r4, [sp, #0]
   d5b7c:	e7e4      	b.n	d5b48 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
   d5b7e:	68b3      	ldr	r3, [r6, #8]
   d5b80:	4543      	cmp	r3, r8
   d5b82:	d3f3      	bcc.n	d5b6c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d5b84:	f88d 9020 	strb.w	r9, [sp, #32]
   d5b88:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d5b8c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d5b90:	89b3      	ldrh	r3, [r6, #12]
   d5b92:	429a      	cmp	r2, r3
   d5b94:	d1ea      	bne.n	d5b6c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d5b96:	9b04      	ldr	r3, [sp, #16]
   d5b98:	4543      	cmp	r3, r8
   d5b9a:	d1e7      	bne.n	d5b6c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
   d5b9c:	e7d6      	b.n	d5b4c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
            }
        }
    }

    return 0;
}
   d5b9e:	b00f      	add	sp, #60	; 0x3c
   d5ba0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5ba4 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d5ba4:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   d5ba6:	7800      	ldrb	r0, [r0, #0]
   d5ba8:	f7ff fcc0 	bl	d552c <HAL_SPI_Send_Receive_Data>
}
   d5bac:	b2c0      	uxtb	r0, r0
   d5bae:	bd08      	pop	{r3, pc}

000d5bb0 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d5bb0:	7800      	ldrb	r0, [r0, #0]
   d5bb2:	f7ff bccb 	b.w	d554c <HAL_SPI_Is_Enabled>

000d5bb6 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d5bb6:	b510      	push	{r4, lr}
   d5bb8:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d5bba:	6800      	ldr	r0, [r0, #0]
   d5bbc:	b118      	cbz	r0, d5bc6 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d5bbe:	f7ff fee9 	bl	d5994 <free>
            wakeupSource_ = nullptr;
   d5bc2:	2300      	movs	r3, #0
   d5bc4:	6023      	str	r3, [r4, #0]
   d5bc6:	bd10      	pop	{r4, pc}

000d5bc8 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d5bc8:	b510      	push	{r4, lr}
   d5bca:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d5bcc:	f7ff fff3 	bl	d5bb6 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d5bd0:	4620      	mov	r0, r4
   d5bd2:	bd10      	pop	{r4, pc}

000d5bd4 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5bd4:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5bd6:	4c09      	ldr	r4, [pc, #36]	; (d5bfc <_GLOBAL__sub_I_System+0x28>)
   d5bd8:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5bda:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5bde:	6020      	str	r0, [r4, #0]
   d5be0:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5be2:	71a0      	strb	r0, [r4, #6]
   d5be4:	8120      	strh	r0, [r4, #8]
   d5be6:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5be8:	f7ff fe50 	bl	d588c <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5bec:	4620      	mov	r0, r4
   d5bee:	4a04      	ldr	r2, [pc, #16]	; (d5c00 <_GLOBAL__sub_I_System+0x2c>)
   d5bf0:	4904      	ldr	r1, [pc, #16]	; (d5c04 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5bf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5bf6:	f001 b99b 	b.w	d6f30 <__aeabi_atexit>
   d5bfa:	bf00      	nop
   d5bfc:	2003e3e4 	.word	0x2003e3e4
   d5c00:	2003e264 	.word	0x2003e264
   d5c04:	000d5bc9 	.word	0x000d5bc9

000d5c08 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d5c08:	b510      	push	{r4, lr}
   d5c0a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5c0c:	6800      	ldr	r0, [r0, #0]
   d5c0e:	b108      	cbz	r0, d5c14 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d5c10:	f7ff fd04 	bl	d561c <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d5c14:	4620      	mov	r0, r4
   d5c16:	bd10      	pop	{r4, pc}

000d5c18 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5c18:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5c1a:	4c06      	ldr	r4, [pc, #24]	; (d5c34 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d5c1c:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d5c1e:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5c20:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d5c22:	f7ff fcf3 	bl	d560c <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d5c26:	4620      	mov	r0, r4
   d5c28:	4a03      	ldr	r2, [pc, #12]	; (d5c38 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d5c2a:	4904      	ldr	r1, [pc, #16]	; (d5c3c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5c2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d5c30:	f001 b97e 	b.w	d6f30 <__aeabi_atexit>
   d5c34:	2003e3f0 	.word	0x2003e3f0
   d5c38:	2003e264 	.word	0x2003e264
   d5c3c:	000d5c09 	.word	0x000d5c09

000d5c40 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5c42:	4606      	mov	r6, r0
   d5c44:	460d      	mov	r5, r1
   d5c46:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d5c48:	2400      	movs	r4, #0
  while (size--) {
   d5c4a:	42bd      	cmp	r5, r7
   d5c4c:	d00c      	beq.n	d5c68 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5c4e:	6833      	ldr	r3, [r6, #0]
   d5c50:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5c54:	689b      	ldr	r3, [r3, #8]
   d5c56:	4630      	mov	r0, r6
   d5c58:	4798      	blx	r3
     if (chunk>=0)
   d5c5a:	2800      	cmp	r0, #0
   d5c5c:	db01      	blt.n	d5c62 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5c5e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5c60:	e7f3      	b.n	d5c4a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5c62:	2c00      	cmp	r4, #0
   d5c64:	bf08      	it	eq
   d5c66:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5c68:	4620      	mov	r0, r4
   d5c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5c6c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5c6c:	b570      	push	{r4, r5, r6, lr}
   d5c6e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5c70:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5c72:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5c74:	b149      	cbz	r1, d5c8a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5c76:	f003 fc3d 	bl	d94f4 <strlen>
   d5c7a:	682b      	ldr	r3, [r5, #0]
   d5c7c:	4602      	mov	r2, r0
   d5c7e:	4621      	mov	r1, r4
   d5c80:	4628      	mov	r0, r5
   d5c82:	68db      	ldr	r3, [r3, #12]
    }
   d5c84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5c88:	4718      	bx	r3
    }
   d5c8a:	bd70      	pop	{r4, r5, r6, pc}

000d5c8c <_ZN5Print5printEPKc>:
   d5c8c:	b508      	push	{r3, lr}
   d5c8e:	f7ff ffed 	bl	d5c6c <_ZN5Print5writeEPKc>
   d5c92:	bd08      	pop	{r3, pc}

000d5c94 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5c94:	6803      	ldr	r3, [r0, #0]
   d5c96:	689b      	ldr	r3, [r3, #8]
   d5c98:	4718      	bx	r3

000d5c9a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5c9a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5c9c:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5c9e:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5ca0:	f7ff fff8 	bl	d5c94 <_ZN5Print5printEc>
  n += print('\n');
   d5ca4:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d5ca6:	4604      	mov	r4, r0
  n += print('\n');
   d5ca8:	4628      	mov	r0, r5
   d5caa:	f7ff fff3 	bl	d5c94 <_ZN5Print5printEc>
  return n;
}
   d5cae:	4420      	add	r0, r4
   d5cb0:	bd38      	pop	{r3, r4, r5, pc}

000d5cb2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d5cb2:	b538      	push	{r3, r4, r5, lr}
   d5cb4:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5cb6:	f7ff ffd9 	bl	d5c6c <_ZN5Print5writeEPKc>
   d5cba:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d5cbc:	4628      	mov	r0, r5
   d5cbe:	f7ff ffec 	bl	d5c9a <_ZN5Print7printlnEv>
  return n;
}
   d5cc2:	4420      	add	r0, r4
   d5cc4:	bd38      	pop	{r3, r4, r5, pc}

000d5cc6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5cc6:	b530      	push	{r4, r5, lr}
   d5cc8:	b08b      	sub	sp, #44	; 0x2c
   d5cca:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5ccc:	2100      	movs	r1, #0
   d5cce:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5cd2:	2a01      	cmp	r2, #1
   d5cd4:	bf98      	it	ls
   d5cd6:	220a      	movls	r2, #10
   d5cd8:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d5cdc:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d5ce0:	fb05 3312 	mls	r3, r5, r2, r3
   d5ce4:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5ce8:	2b09      	cmp	r3, #9
   d5cea:	bf94      	ite	ls
   d5cec:	3330      	addls	r3, #48	; 0x30
   d5cee:	3337      	addhi	r3, #55	; 0x37
   d5cf0:	b2db      	uxtb	r3, r3
   d5cf2:	4621      	mov	r1, r4
   d5cf4:	f804 3901 	strb.w	r3, [r4], #-1
   d5cf8:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d5cfa:	2d00      	cmp	r5, #0
   d5cfc:	d1ee      	bne.n	d5cdc <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d5cfe:	f7ff ffb5 	bl	d5c6c <_ZN5Print5writeEPKc>
}
   d5d02:	b00b      	add	sp, #44	; 0x2c
   d5d04:	bd30      	pop	{r4, r5, pc}
	...

000d5d08 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d5d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5d0c:	ec57 6b10 	vmov	r6, r7, d0
   d5d10:	4682      	mov	sl, r0
   d5d12:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d5d14:	ee10 2a10 	vmov	r2, s0
   d5d18:	463b      	mov	r3, r7
   d5d1a:	ee10 0a10 	vmov	r0, s0
   d5d1e:	4639      	mov	r1, r7
   d5d20:	f002 fffc 	bl	d8d1c <__aeabi_dcmpun>
   d5d24:	b108      	cbz	r0, d5d2a <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5d26:	494e      	ldr	r1, [pc, #312]	; (d5e60 <_ZN5Print10printFloatEdh+0x158>)
   d5d28:	e012      	b.n	d5d50 <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d5d2a:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d5d2e:	f04f 32ff 	mov.w	r2, #4294967295
   d5d32:	4b4c      	ldr	r3, [pc, #304]	; (d5e64 <_ZN5Print10printFloatEdh+0x15c>)
   d5d34:	4630      	mov	r0, r6
   d5d36:	4649      	mov	r1, r9
   d5d38:	f002 fff0 	bl	d8d1c <__aeabi_dcmpun>
   d5d3c:	b968      	cbnz	r0, d5d5a <_ZN5Print10printFloatEdh+0x52>
   d5d3e:	f04f 32ff 	mov.w	r2, #4294967295
   d5d42:	4b48      	ldr	r3, [pc, #288]	; (d5e64 <_ZN5Print10printFloatEdh+0x15c>)
   d5d44:	4630      	mov	r0, r6
   d5d46:	4649      	mov	r1, r9
   d5d48:	f002 ffca 	bl	d8ce0 <__aeabi_dcmple>
   d5d4c:	b928      	cbnz	r0, d5d5a <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5d4e:	4946      	ldr	r1, [pc, #280]	; (d5e68 <_ZN5Print10printFloatEdh+0x160>)
   d5d50:	4650      	mov	r0, sl
   d5d52:	f7ff ff8b 	bl	d5c6c <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d5d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d5d5a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d5d5e:	4b43      	ldr	r3, [pc, #268]	; (d5e6c <_ZN5Print10printFloatEdh+0x164>)
   d5d60:	4630      	mov	r0, r6
   d5d62:	4639      	mov	r1, r7
   d5d64:	f002 ffd0 	bl	d8d08 <__aeabi_dcmpgt>
   d5d68:	b108      	cbz	r0, d5d6e <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5d6a:	4941      	ldr	r1, [pc, #260]	; (d5e70 <_ZN5Print10printFloatEdh+0x168>)
   d5d6c:	e7f0      	b.n	d5d50 <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d5d6e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d5d72:	4b40      	ldr	r3, [pc, #256]	; (d5e74 <_ZN5Print10printFloatEdh+0x16c>)
   d5d74:	4630      	mov	r0, r6
   d5d76:	4639      	mov	r1, r7
   d5d78:	f002 ffa8 	bl	d8ccc <__aeabi_dcmplt>
   d5d7c:	2800      	cmp	r0, #0
   d5d7e:	d1f4      	bne.n	d5d6a <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d5d80:	2200      	movs	r2, #0
   d5d82:	2300      	movs	r3, #0
   d5d84:	4630      	mov	r0, r6
   d5d86:	4639      	mov	r1, r7
   d5d88:	f002 ffa0 	bl	d8ccc <__aeabi_dcmplt>
   d5d8c:	b140      	cbz	r0, d5da0 <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d5d8e:	212d      	movs	r1, #45	; 0x2d
   d5d90:	4650      	mov	r0, sl
   d5d92:	f7ff ff7f 	bl	d5c94 <_ZN5Print5printEc>
     number = -number;
   d5d96:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d5d9a:	4604      	mov	r4, r0
     number = -number;
   d5d9c:	461f      	mov	r7, r3
   d5d9e:	e000      	b.n	d5da2 <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d5da0:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d5da2:	4935      	ldr	r1, [pc, #212]	; (d5e78 <_ZN5Print10printFloatEdh+0x170>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d5da4:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d5da8:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d5daa:	fa5f f388 	uxtb.w	r3, r8
   d5dae:	429d      	cmp	r5, r3
   d5db0:	d906      	bls.n	d5dc0 <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d5db2:	2200      	movs	r2, #0
   d5db4:	4b31      	ldr	r3, [pc, #196]	; (d5e7c <_ZN5Print10printFloatEdh+0x174>)
   d5db6:	f002 fe41 	bl	d8a3c <__aeabi_ddiv>
   d5dba:	f108 0801 	add.w	r8, r8, #1
   d5dbe:	e7f4      	b.n	d5daa <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d5dc0:	4632      	mov	r2, r6
   d5dc2:	463b      	mov	r3, r7
   d5dc4:	f002 fb5e 	bl	d8484 <__adddf3>
   d5dc8:	460f      	mov	r7, r1
   d5dca:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d5dcc:	f002 ffe4 	bl	d8d98 <__aeabi_d2uiz>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5dd0:	220a      	movs	r2, #10
   d5dd2:	4601      	mov	r1, r0
   d5dd4:	4680      	mov	r8, r0
   d5dd6:	4650      	mov	r0, sl
   d5dd8:	f7ff ff75 	bl	d5cc6 <_ZN5Print11printNumberEmh>
  double remainder = number - (double)int_part;
  n += print(int_part);
   d5ddc:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d5dde:	b3e5      	cbz	r5, d5e5a <_ZN5Print10printFloatEdh+0x152>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d5de0:	4640      	mov	r0, r8
   d5de2:	f002 fc8b 	bl	d86fc <__aeabi_ui2d>
   d5de6:	4602      	mov	r2, r0
   d5de8:	460b      	mov	r3, r1
   d5dea:	4630      	mov	r0, r6
   d5dec:	4639      	mov	r1, r7
   d5dee:	f002 fb47 	bl	d8480 <__aeabi_dsub>
   d5df2:	4606      	mov	r6, r0
   d5df4:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5df6:	4650      	mov	r0, sl
   d5df8:	4921      	ldr	r1, [pc, #132]	; (d5e80 <_ZN5Print10printFloatEdh+0x178>)
   d5dfa:	f7ff ff37 	bl	d5c6c <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d5dfe:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d5e00:	2200      	movs	r2, #0
   d5e02:	4b1e      	ldr	r3, [pc, #120]	; (d5e7c <_ZN5Print10printFloatEdh+0x174>)
   d5e04:	4630      	mov	r0, r6
   d5e06:	4639      	mov	r1, r7
   d5e08:	f002 fcee 	bl	d87e8 <__aeabi_dmul>
   d5e0c:	4606      	mov	r6, r0
   d5e0e:	460f      	mov	r7, r1
    int toPrint = int(remainder);
   d5e10:	f002 ff9a 	bl	d8d48 <__aeabi_d2iz>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d5e14:	f1b0 0900 	subs.w	r9, r0, #0
   d5e18:	da07      	bge.n	d5e2a <_ZN5Print10printFloatEdh+0x122>
            t = print('-');
   d5e1a:	212d      	movs	r1, #45	; 0x2d
   d5e1c:	4650      	mov	r0, sl
   d5e1e:	f7ff ff39 	bl	d5c94 <_ZN5Print5printEc>
            val = -n;
   d5e22:	f1c9 0100 	rsb	r1, r9, #0
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d5e26:	4680      	mov	r8, r0
   d5e28:	e002      	b.n	d5e30 <_ZN5Print10printFloatEdh+0x128>
            val = -n;
        } else {
            val = n;
   d5e2a:	4649      	mov	r1, r9
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d5e2c:	f04f 0800 	mov.w	r8, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5e30:	220a      	movs	r2, #10
   d5e32:	4650      	mov	r0, sl
   d5e34:	f7ff ff47 	bl	d5cc6 <_ZN5Print11printNumberEmh>
    n += print(toPrint);
   d5e38:	4440      	add	r0, r8
   d5e3a:	4404      	add	r4, r0
    remainder -= toPrint;
   d5e3c:	4648      	mov	r0, r9
   d5e3e:	f002 fc6d 	bl	d871c <__aeabi_i2d>
   d5e42:	4602      	mov	r2, r0
   d5e44:	460b      	mov	r3, r1
   d5e46:	4630      	mov	r0, r6
   d5e48:	4639      	mov	r1, r7
   d5e4a:	f002 fb19 	bl	d8480 <__aeabi_dsub>
   d5e4e:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d5e50:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d5e54:	4606      	mov	r6, r0
   d5e56:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d5e58:	d1d2      	bne.n	d5e00 <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d5e5a:	4620      	mov	r0, r4
   d5e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5e60:	000d9b0c 	.word	0x000d9b0c
   d5e64:	7fefffff 	.word	0x7fefffff
   d5e68:	000d9b14 	.word	0x000d9b14
   d5e6c:	41efffff 	.word	0x41efffff
   d5e70:	000d9b10 	.word	0x000d9b10
   d5e74:	c1efffff 	.word	0xc1efffff
   d5e78:	3fe00000 	.word	0x3fe00000
   d5e7c:	40240000 	.word	0x40240000
   d5e80:	000d9576 	.word	0x000d9576

000d5e84 <_ZN5Print5printEfi>:
{
  return write(c);
}

size_t Print::print(float n, int digits)
{
   d5e84:	b538      	push	{r3, r4, r5, lr}
   d5e86:	4604      	mov	r4, r0
  return printFloat((double)n, digits);
   d5e88:	ee10 0a10 	vmov	r0, s0
   d5e8c:	b2cd      	uxtb	r5, r1
   d5e8e:	f002 fc57 	bl	d8740 <__aeabi_f2d>
   d5e92:	ec41 0b10 	vmov	d0, r0, r1
   d5e96:	4629      	mov	r1, r5
   d5e98:	4620      	mov	r0, r4
}
   d5e9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return write(c);
}

size_t Print::print(float n, int digits)
{
  return printFloat((double)n, digits);
   d5e9e:	f7ff bf33 	b.w	d5d08 <_ZN5Print10printFloatEdh>

000d5ea2 <_ZN5Print7printlnEdi>:
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
   d5ea2:	b538      	push	{r3, r4, r5, lr}
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d5ea4:	b2c9      	uxtb	r1, r1
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
   d5ea6:	4605      	mov	r5, r0
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d5ea8:	f7ff ff2e 	bl	d5d08 <_ZN5Print10printFloatEdh>
   d5eac:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
   d5eae:	4628      	mov	r0, r5
   d5eb0:	f7ff fef3 	bl	d5c9a <_ZN5Print7printlnEv>
  return n;
}
   d5eb4:	4420      	add	r0, r4
   d5eb6:	bd38      	pop	{r3, r4, r5, pc}

000d5eb8 <_ZN5Print7printlnEfi>:
  n += println();
  return n;
}

size_t Print::println(float num, int digits)
{
   d5eb8:	b538      	push	{r3, r4, r5, lr}
   d5eba:	4604      	mov	r4, r0
    return println((double)num, digits);
   d5ebc:	ee10 0a10 	vmov	r0, s0
  n += println();
  return n;
}

size_t Print::println(float num, int digits)
{
   d5ec0:	460d      	mov	r5, r1
    return println((double)num, digits);
   d5ec2:	f002 fc3d 	bl	d8740 <__aeabi_f2d>
   d5ec6:	ec41 0b10 	vmov	d0, r0, r1
   d5eca:	4629      	mov	r1, r5
   d5ecc:	4620      	mov	r0, r4
}
   d5ece:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return n;
}

size_t Print::println(float num, int digits)
{
    return println((double)num, digits);
   d5ed2:	f7ff bfe6 	b.w	d5ea2 <_ZN5Print7printlnEdi>

000d5ed6 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d5ed6:	b40c      	push	{r2, r3}
   d5ed8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5edc:	b087      	sub	sp, #28
   d5ede:	af00      	add	r7, sp, #0
   d5ee0:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d5ee4:	4605      	mov	r5, r0
   d5ee6:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d5eea:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d5eec:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d5eee:	4623      	mov	r3, r4
   d5ef0:	464a      	mov	r2, r9
   d5ef2:	2114      	movs	r1, #20
   d5ef4:	1d38      	adds	r0, r7, #4
   d5ef6:	f7ff fd5d 	bl	d59b4 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d5efa:	2813      	cmp	r0, #19
   d5efc:	d805      	bhi.n	d5f0a <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5efe:	1d39      	adds	r1, r7, #4
   d5f00:	4628      	mov	r0, r5
   d5f02:	f7ff feb3 	bl	d5c6c <_ZN5Print5writeEPKc>
   d5f06:	4604      	mov	r4, r0
   d5f08:	e013      	b.n	d5f32 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d5f0a:	f100 0308 	add.w	r3, r0, #8
   d5f0e:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d5f12:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d5f14:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d5f18:	1c41      	adds	r1, r0, #1
   d5f1a:	4623      	mov	r3, r4
   d5f1c:	464a      	mov	r2, r9
   d5f1e:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d5f20:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d5f22:	f7ff fd47 	bl	d59b4 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5f26:	4669      	mov	r1, sp
   d5f28:	4628      	mov	r0, r5
   d5f2a:	f7ff fe9f 	bl	d5c6c <_ZN5Print5writeEPKc>
   d5f2e:	4604      	mov	r4, r0
   d5f30:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d5f32:	b11e      	cbz	r6, d5f3c <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d5f34:	4628      	mov	r0, r5
   d5f36:	f7ff feb0 	bl	d5c9a <_ZN5Print7printlnEv>
   d5f3a:	4404      	add	r4, r0
    return n;
}
   d5f3c:	4620      	mov	r0, r4
   d5f3e:	371c      	adds	r7, #28
   d5f40:	46bd      	mov	sp, r7
   d5f42:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5f46:	b002      	add	sp, #8
   d5f48:	4770      	bx	lr
	...

000d5f4c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5f4c:	4b01      	ldr	r3, [pc, #4]	; (d5f54 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5f4e:	4a02      	ldr	r2, [pc, #8]	; (d5f58 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5f50:	601a      	str	r2, [r3, #0]
   d5f52:	4770      	bx	lr
   d5f54:	2003e3f4 	.word	0x2003e3f4
   d5f58:	000d9b8b 	.word	0x000d9b8b

000d5f5c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5f5c:	4b02      	ldr	r3, [pc, #8]	; (d5f68 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5f5e:	681a      	ldr	r2, [r3, #0]
   d5f60:	4b02      	ldr	r3, [pc, #8]	; (d5f6c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5f62:	601a      	str	r2, [r3, #0]
   d5f64:	4770      	bx	lr
   d5f66:	bf00      	nop
   d5f68:	2003e1f8 	.word	0x2003e1f8
   d5f6c:	2003e3f8 	.word	0x2003e3f8

000d5f70 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5f70:	2100      	movs	r1, #0
   d5f72:	f7ff bc93 	b.w	d589c <system_delay_ms>

000d5f76 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5f76:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5f78:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5f7a:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d5f7c:	b113      	cbz	r3, d5f84 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5f7e:	2203      	movs	r2, #3
   d5f80:	4601      	mov	r1, r0
   d5f82:	4798      	blx	r3
    }
   d5f84:	4620      	mov	r0, r4
   d5f86:	bd10      	pop	{r4, pc}

000d5f88 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5f88:	b510      	push	{r4, lr}
   d5f8a:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5f8c:	f7ff fff3 	bl	d5f76 <_ZNSt14_Function_baseD1Ev>
   d5f90:	4620      	mov	r0, r4
   d5f92:	bd10      	pop	{r4, pc}

000d5f94 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5f94:	4803      	ldr	r0, [pc, #12]	; (d5fa4 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5f96:	4a04      	ldr	r2, [pc, #16]	; (d5fa8 <_GLOBAL__sub_I_RGB+0x14>)
   d5f98:	4904      	ldr	r1, [pc, #16]	; (d5fac <_GLOBAL__sub_I_RGB+0x18>)
   d5f9a:	2300      	movs	r3, #0
   d5f9c:	6083      	str	r3, [r0, #8]
   d5f9e:	f000 bfc7 	b.w	d6f30 <__aeabi_atexit>
   d5fa2:	bf00      	nop
   d5fa4:	2003e3fc 	.word	0x2003e3fc
   d5fa8:	2003e264 	.word	0x2003e264
   d5fac:	000d5f89 	.word	0x000d5f89

000d5fb0 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5fb0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5fb2:	4b0c      	ldr	r3, [pc, #48]	; (d5fe4 <serialEventRun+0x34>)
   d5fb4:	b133      	cbz	r3, d5fc4 <serialEventRun+0x14>
   d5fb6:	f000 f973 	bl	d62a0 <_Z16_fetch_usbserialv>
   d5fba:	6803      	ldr	r3, [r0, #0]
   d5fbc:	691b      	ldr	r3, [r3, #16]
   d5fbe:	4798      	blx	r3
   d5fc0:	2800      	cmp	r0, #0
   d5fc2:	dc09      	bgt.n	d5fd8 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d5fc4:	4b08      	ldr	r3, [pc, #32]	; (d5fe8 <serialEventRun+0x38>)
   d5fc6:	b163      	cbz	r3, d5fe2 <serialEventRun+0x32>
   d5fc8:	f000 f9ec 	bl	d63a4 <_Z22__fetch_global_Serial1v>
   d5fcc:	6803      	ldr	r3, [r0, #0]
   d5fce:	691b      	ldr	r3, [r3, #16]
   d5fd0:	4798      	blx	r3
   d5fd2:	2800      	cmp	r0, #0
   d5fd4:	dc03      	bgt.n	d5fde <serialEventRun+0x2e>
   d5fd6:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5fd8:	f3af 8000 	nop.w
   d5fdc:	e7f2      	b.n	d5fc4 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d5fde:	f3af 8000 	nop.w
   d5fe2:	bd08      	pop	{r3, pc}
	...

000d5fec <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5fec:	b508      	push	{r3, lr}
	serialEventRun();
   d5fee:	f7ff ffdf 	bl	d5fb0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5ff2:	f7ff faeb 	bl	d55cc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5ff6:	4b01      	ldr	r3, [pc, #4]	; (d5ffc <_post_loop+0x10>)
   d5ff8:	6018      	str	r0, [r3, #0]
   d5ffa:	bd08      	pop	{r3, pc}
   d5ffc:	2003e730 	.word	0x2003e730

000d6000 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d6000:	4802      	ldr	r0, [pc, #8]	; (d600c <_Z33system_initialize_user_backup_ramv+0xc>)
   d6002:	4a03      	ldr	r2, [pc, #12]	; (d6010 <_Z33system_initialize_user_backup_ramv+0x10>)
   d6004:	4903      	ldr	r1, [pc, #12]	; (d6014 <_Z33system_initialize_user_backup_ramv+0x14>)
   d6006:	1a12      	subs	r2, r2, r0
   d6008:	f003 ba16 	b.w	d9438 <memcpy>
   d600c:	2003f400 	.word	0x2003f400
   d6010:	2003f404 	.word	0x2003f404
   d6014:	000d9e98 	.word	0x000d9e98

000d6018 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6018:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d601a:	2300      	movs	r3, #0
   d601c:	9300      	str	r3, [sp, #0]
   d601e:	461a      	mov	r2, r3
   d6020:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6024:	f7ff fc4c 	bl	d58c0 <system_ctrl_set_result>
}
   d6028:	b003      	add	sp, #12
   d602a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6030 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d6030:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6032:	8843      	ldrh	r3, [r0, #2]
   d6034:	2b0a      	cmp	r3, #10
   d6036:	d008      	beq.n	d604a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6038:	2b50      	cmp	r3, #80	; 0x50
   d603a:	d109      	bne.n	d6050 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d603c:	4b09      	ldr	r3, [pc, #36]	; (d6064 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d603e:	681b      	ldr	r3, [r3, #0]
   d6040:	b13b      	cbz	r3, d6052 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d6042:	b003      	add	sp, #12
   d6044:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d6048:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d604a:	f7ff ffe5 	bl	d6018 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d604e:	e006      	b.n	d605e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6050:	2300      	movs	r3, #0
   d6052:	9300      	str	r3, [sp, #0]
   d6054:	461a      	mov	r2, r3
   d6056:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d605a:	f7ff fc31 	bl	d58c0 <system_ctrl_set_result>
        break;
    }
}
   d605e:	b003      	add	sp, #12
   d6060:	f85d fb04 	ldr.w	pc, [sp], #4
   d6064:	2003e40c 	.word	0x2003e40c

000d6068 <module_user_init_hook>:

void module_user_init_hook()
{
   d6068:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d606a:	4c10      	ldr	r4, [pc, #64]	; (d60ac <module_user_init_hook+0x44>)
   d606c:	4d10      	ldr	r5, [pc, #64]	; (d60b0 <module_user_init_hook+0x48>)
   d606e:	6823      	ldr	r3, [r4, #0]
   d6070:	42ab      	cmp	r3, r5
   d6072:	4b10      	ldr	r3, [pc, #64]	; (d60b4 <module_user_init_hook+0x4c>)
   d6074:	bf0c      	ite	eq
   d6076:	2201      	moveq	r2, #1
   d6078:	2200      	movne	r2, #0
   d607a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d607c:	d002      	beq.n	d6084 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d607e:	f7ff ffbf 	bl	d6000 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d6082:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6084:	f7ff fa92 	bl	d55ac <HAL_RNG_GetRandomNumber>
   d6088:	4604      	mov	r4, r0
    srand(seed);
   d608a:	f003 fa03 	bl	d9494 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d608e:	4b0a      	ldr	r3, [pc, #40]	; (d60b8 <module_user_init_hook+0x50>)
   d6090:	b113      	cbz	r3, d6098 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d6092:	4620      	mov	r0, r4
   d6094:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6098:	2100      	movs	r1, #0
   d609a:	4807      	ldr	r0, [pc, #28]	; (d60b8 <module_user_init_hook+0x50>)
   d609c:	f7ff fc6a 	bl	d5974 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d60a0:	2100      	movs	r1, #0
   d60a2:	4806      	ldr	r0, [pc, #24]	; (d60bc <module_user_init_hook+0x54>)
}
   d60a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d60a8:	f7ff bc00 	b.w	d58ac <system_ctrl_set_app_request_handler>
   d60ac:	2003f400 	.word	0x2003f400
   d60b0:	9a271c1e 	.word	0x9a271c1e
   d60b4:	2003e410 	.word	0x2003e410
   d60b8:	00000000 	.word	0x00000000
   d60bc:	000d6031 	.word	0x000d6031

000d60c0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d60c0:	4770      	bx	lr

000d60c2 <_ZN9IPAddressD0Ev>:
   d60c2:	b510      	push	{r4, lr}
   d60c4:	2118      	movs	r1, #24
   d60c6:	4604      	mov	r4, r0
   d60c8:	f000 ff40 	bl	d6f4c <_ZdlPvj>
   d60cc:	4620      	mov	r0, r4
   d60ce:	bd10      	pop	{r4, pc}

000d60d0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d60d0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d60d2:	7d03      	ldrb	r3, [r0, #20]
   d60d4:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d60d6:	b08d      	sub	sp, #52	; 0x34
   d60d8:	460e      	mov	r6, r1
   d60da:	f100 0704 	add.w	r7, r0, #4
   d60de:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d60e2:	d002      	beq.n	d60ea <_ZNK9IPAddress7printToER5Print+0x1a>
   d60e4:	f100 0508 	add.w	r5, r0, #8
   d60e8:	e018      	b.n	d611c <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d60ea:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d60ec:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d60ee:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d60f2:	232f      	movs	r3, #47	; 0x2f
   d60f4:	462a      	mov	r2, r5
   d60f6:	200a      	movs	r0, #10
   d60f8:	f7ff fa98 	bl	d562c <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d60fc:	4628      	mov	r0, r5
   d60fe:	f003 f9f9 	bl	d94f4 <strlen>
   d6102:	6833      	ldr	r3, [r6, #0]
   d6104:	4602      	mov	r2, r0
   d6106:	68db      	ldr	r3, [r3, #12]
   d6108:	4629      	mov	r1, r5
   d610a:	4630      	mov	r0, r6
   d610c:	4798      	blx	r3
   d610e:	e00f      	b.n	d6130 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d6110:	b124      	cbz	r4, d611c <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d6112:	212e      	movs	r1, #46	; 0x2e
   d6114:	4630      	mov	r0, r6
   d6116:	f7ff fdbd 	bl	d5c94 <_ZN5Print5printEc>
   d611a:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d611c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6120:	220a      	movs	r2, #10
   d6122:	4630      	mov	r0, r6
   d6124:	f7ff fdcf 	bl	d5cc6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6128:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d612a:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d612c:	d1f0      	bne.n	d6110 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d612e:	4620      	mov	r0, r4
    }
    return n;
}
   d6130:	b00d      	add	sp, #52	; 0x34
   d6132:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6134 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d6134:	b510      	push	{r4, lr}
   d6136:	4b05      	ldr	r3, [pc, #20]	; (d614c <_ZN9IPAddressC1Ev+0x18>)
   d6138:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d613a:	2211      	movs	r2, #17
   d613c:	f840 3b04 	str.w	r3, [r0], #4
   d6140:	2100      	movs	r1, #0
   d6142:	f003 f99f 	bl	d9484 <memset>
{
    clear();
}
   d6146:	4620      	mov	r0, r4
   d6148:	bd10      	pop	{r4, pc}
   d614a:	bf00      	nop
   d614c:	000d9c1c 	.word	0x000d9c1c

000d6150 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d6150:	4603      	mov	r3, r0
   d6152:	4a07      	ldr	r2, [pc, #28]	; (d6170 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6154:	b510      	push	{r4, lr}
   d6156:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d615a:	f101 0210 	add.w	r2, r1, #16
   d615e:	f851 4b04 	ldr.w	r4, [r1], #4
   d6162:	f843 4b04 	str.w	r4, [r3], #4
   d6166:	4291      	cmp	r1, r2
   d6168:	d1f9      	bne.n	d615e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d616a:	780a      	ldrb	r2, [r1, #0]
   d616c:	701a      	strb	r2, [r3, #0]
}
   d616e:	bd10      	pop	{r4, pc}
   d6170:	000d9c1c 	.word	0x000d9c1c

000d6174 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d6174:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d6176:	2b04      	cmp	r3, #4
   d6178:	d101      	bne.n	d617e <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d617a:	6840      	ldr	r0, [r0, #4]
   d617c:	e008      	b.n	d6190 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d617e:	2b06      	cmp	r3, #6
   d6180:	d10a      	bne.n	d6198 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d6182:	6843      	ldr	r3, [r0, #4]
   d6184:	b953      	cbnz	r3, d619c <_ZNK9IPAddresscvbEv+0x28>
   d6186:	6883      	ldr	r3, [r0, #8]
   d6188:	b943      	cbnz	r3, d619c <_ZNK9IPAddresscvbEv+0x28>
   d618a:	68c3      	ldr	r3, [r0, #12]
   d618c:	b933      	cbnz	r3, d619c <_ZNK9IPAddresscvbEv+0x28>
   d618e:	6900      	ldr	r0, [r0, #16]
   d6190:	3000      	adds	r0, #0
   d6192:	bf18      	it	ne
   d6194:	2001      	movne	r0, #1
   d6196:	4770      	bx	lr
    } else {
        return false;
   d6198:	2000      	movs	r0, #0
   d619a:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d619c:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d619e:	4770      	bx	lr

000d61a0 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d61a0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d61a2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d61a6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d61aa:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d61ae:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d61b2:	2304      	movs	r3, #4
   d61b4:	6041      	str	r1, [r0, #4]
   d61b6:	7503      	strb	r3, [r0, #20]
   d61b8:	bd10      	pop	{r4, pc}

000d61ba <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d61ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d61bc:	780d      	ldrb	r5, [r1, #0]
   d61be:	788b      	ldrb	r3, [r1, #2]
   d61c0:	784a      	ldrb	r2, [r1, #1]
   d61c2:	78c9      	ldrb	r1, [r1, #3]
   d61c4:	9100      	str	r1, [sp, #0]
   d61c6:	4629      	mov	r1, r5
   d61c8:	f7ff ffea 	bl	d61a0 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d61cc:	b003      	add	sp, #12
   d61ce:	bd30      	pop	{r4, r5, pc}

000d61d0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d61d0:	7441      	strb	r1, [r0, #17]
   d61d2:	4770      	bx	lr

000d61d4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d61d4:	4770      	bx	lr

000d61d6 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d61d6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d61d8:	2100      	movs	r1, #0
   d61da:	7c00      	ldrb	r0, [r0, #16]
   d61dc:	f7ff fb26 	bl	d582c <HAL_USB_USART_Receive_Data>
}
   d61e0:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d61e4:	bf28      	it	cs
   d61e6:	f04f 30ff 	movcs.w	r0, #4294967295
   d61ea:	bd08      	pop	{r3, pc}

000d61ec <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d61ec:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d61ee:	2101      	movs	r1, #1
   d61f0:	7c00      	ldrb	r0, [r0, #16]
   d61f2:	f7ff fb1b 	bl	d582c <HAL_USB_USART_Receive_Data>
}
   d61f6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d61fa:	bf28      	it	cs
   d61fc:	f04f 30ff 	movcs.w	r0, #4294967295
   d6200:	bd08      	pop	{r3, pc}

000d6202 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d6202:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6204:	7c00      	ldrb	r0, [r0, #16]
   d6206:	f7ff fb09 	bl	d581c <HAL_USB_USART_Available_Data_For_Write>
}
   d620a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d620e:	bd08      	pop	{r3, pc}

000d6210 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d6210:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6212:	7c00      	ldrb	r0, [r0, #16]
   d6214:	f7ff fafa 	bl	d580c <HAL_USB_USART_Available_Data>
}
   d6218:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d621c:	bd08      	pop	{r3, pc}

000d621e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d621e:	7c00      	ldrb	r0, [r0, #16]
   d6220:	f7ff bb14 	b.w	d584c <HAL_USB_USART_Flush_Data>

000d6224 <_ZN9USBSerialD0Ev>:
   d6224:	b510      	push	{r4, lr}
   d6226:	2114      	movs	r1, #20
   d6228:	4604      	mov	r4, r0
   d622a:	f000 fe8f 	bl	d6f4c <_ZdlPvj>
   d622e:	4620      	mov	r0, r4
   d6230:	bd10      	pop	{r4, pc}

000d6232 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6232:	b538      	push	{r3, r4, r5, lr}
   d6234:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6236:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6238:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d623a:	f7ff faef 	bl	d581c <HAL_USB_USART_Available_Data_For_Write>
   d623e:	2800      	cmp	r0, #0
   d6240:	dc01      	bgt.n	d6246 <_ZN9USBSerial5writeEh+0x14>
   d6242:	7c60      	ldrb	r0, [r4, #17]
   d6244:	b128      	cbz	r0, d6252 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6246:	4629      	mov	r1, r5
   d6248:	7c20      	ldrb	r0, [r4, #16]
   d624a:	f7ff faf7 	bl	d583c <HAL_USB_USART_Send_Data>
   d624e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d6252:	bd38      	pop	{r3, r4, r5, pc}

000d6254 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6254:	b510      	push	{r4, lr}
   d6256:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6258:	2300      	movs	r3, #0
   d625a:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d625c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6260:	60a3      	str	r3, [r4, #8]
   d6262:	4b05      	ldr	r3, [pc, #20]	; (d6278 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6264:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d6266:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6268:	4608      	mov	r0, r1
{
  _serial = serial;
   d626a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d626c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d626e:	4611      	mov	r1, r2
   d6270:	f7ff fabc 	bl	d57ec <HAL_USB_USART_Init>
}
   d6274:	4620      	mov	r0, r4
   d6276:	bd10      	pop	{r4, pc}
   d6278:	000d9c30 	.word	0x000d9c30

000d627c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d627c:	2200      	movs	r2, #0
   d627e:	7c00      	ldrb	r0, [r0, #16]
   d6280:	f7ff babc 	b.w	d57fc <HAL_USB_USART_Begin>

000d6284 <_ZN9USBSerial9isEnabledEv>:
USBSerial::operator bool() {
  return isEnabled();
}

bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
   d6284:	7c00      	ldrb	r0, [r0, #16]
   d6286:	f7ff bae9 	b.w	d585c <HAL_USB_USART_Is_Enabled>

000d628a <_ZN9USBSerialcvbEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
}

USBSerial::operator bool() {
  return isEnabled();
   d628a:	f7ff bffb 	b.w	d6284 <_ZN9USBSerial9isEnabledEv>

000d628e <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d628e:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6290:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6292:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6294:	2100      	movs	r1, #0
   d6296:	f003 f8f5 	bl	d9484 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d629a:	4620      	mov	r0, r4
   d629c:	bd10      	pop	{r4, pc}
	...

000d62a0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d62a0:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d62a2:	4d0e      	ldr	r5, [pc, #56]	; (d62dc <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d62a4:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d62a6:	a801      	add	r0, sp, #4
   d62a8:	f7ff fff1 	bl	d628e <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d62ac:	6829      	ldr	r1, [r5, #0]
   d62ae:	f011 0401 	ands.w	r4, r1, #1
   d62b2:	d110      	bne.n	d62d6 <_Z16_fetch_usbserialv+0x36>
   d62b4:	4628      	mov	r0, r5
   d62b6:	f7fd ff01 	bl	d40bc <__cxa_guard_acquire>
   d62ba:	b160      	cbz	r0, d62d6 <_Z16_fetch_usbserialv+0x36>
   d62bc:	aa01      	add	r2, sp, #4
   d62be:	4621      	mov	r1, r4
   d62c0:	4807      	ldr	r0, [pc, #28]	; (d62e0 <_Z16_fetch_usbserialv+0x40>)
   d62c2:	f7ff ffc7 	bl	d6254 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d62c6:	4628      	mov	r0, r5
   d62c8:	f7fd fefd 	bl	d40c6 <__cxa_guard_release>
   d62cc:	4a05      	ldr	r2, [pc, #20]	; (d62e4 <_Z16_fetch_usbserialv+0x44>)
   d62ce:	4906      	ldr	r1, [pc, #24]	; (d62e8 <_Z16_fetch_usbserialv+0x48>)
   d62d0:	4803      	ldr	r0, [pc, #12]	; (d62e0 <_Z16_fetch_usbserialv+0x40>)
   d62d2:	f000 fe2d 	bl	d6f30 <__aeabi_atexit>
	return _usbserial;
}
   d62d6:	4802      	ldr	r0, [pc, #8]	; (d62e0 <_Z16_fetch_usbserialv+0x40>)
   d62d8:	b007      	add	sp, #28
   d62da:	bd30      	pop	{r4, r5, pc}
   d62dc:	2003e414 	.word	0x2003e414
   d62e0:	2003e418 	.word	0x2003e418
   d62e4:	2003e264 	.word	0x2003e264
   d62e8:	000d61d5 	.word	0x000d61d5

000d62ec <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d62ec:	4770      	bx	lr

000d62ee <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d62ee:	7441      	strb	r1, [r0, #17]
   d62f0:	4770      	bx	lr

000d62f2 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d62f2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d62f4:	7c00      	ldrb	r0, [r0, #16]
   d62f6:	f7ff f9e9 	bl	d56cc <HAL_USART_Available_Data_For_Write>
}
   d62fa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d62fe:	bd08      	pop	{r3, pc}

000d6300 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d6300:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d6302:	7c00      	ldrb	r0, [r0, #16]
   d6304:	f7ff f9ba 	bl	d567c <HAL_USART_Available_Data>
}
   d6308:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d630c:	bd08      	pop	{r3, pc}

000d630e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d630e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d6310:	7c00      	ldrb	r0, [r0, #16]
   d6312:	f7ff f9c3 	bl	d569c <HAL_USART_Peek_Data>
}
   d6316:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d631a:	bf28      	it	cs
   d631c:	f04f 30ff 	movcs.w	r0, #4294967295
   d6320:	bd08      	pop	{r3, pc}

000d6322 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d6322:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d6324:	7c00      	ldrb	r0, [r0, #16]
   d6326:	f7ff f9b1 	bl	d568c <HAL_USART_Read_Data>
}
   d632a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d632e:	bf28      	it	cs
   d6330:	f04f 30ff 	movcs.w	r0, #4294967295
   d6334:	bd08      	pop	{r3, pc}

000d6336 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d6336:	7c00      	ldrb	r0, [r0, #16]
   d6338:	f7ff b9b8 	b.w	d56ac <HAL_USART_Flush_Data>

000d633c <_ZN11USARTSerialD0Ev>:
   d633c:	b510      	push	{r4, lr}
   d633e:	2114      	movs	r1, #20
   d6340:	4604      	mov	r4, r0
   d6342:	f000 fe03 	bl	d6f4c <_ZdlPvj>
   d6346:	4620      	mov	r0, r4
   d6348:	bd10      	pop	{r4, pc}

000d634a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d634a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d634c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d634e:	4604      	mov	r4, r0
   d6350:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6352:	b925      	cbnz	r5, d635e <_ZN11USARTSerial5writeEh+0x14>
   d6354:	7c00      	ldrb	r0, [r0, #16]
   d6356:	f7ff f9b9 	bl	d56cc <HAL_USART_Available_Data_For_Write>
   d635a:	2800      	cmp	r0, #0
   d635c:	dd05      	ble.n	d636a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d635e:	4631      	mov	r1, r6
   d6360:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d6362:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6366:	f7ff b981 	b.w	d566c <HAL_USART_Write_Data>
  }
  return 0;
}
   d636a:	4628      	mov	r0, r5
   d636c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6370 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d6370:	b510      	push	{r4, lr}
   d6372:	4604      	mov	r4, r0
   d6374:	4608      	mov	r0, r1
   d6376:	4611      	mov	r1, r2
   d6378:	2200      	movs	r2, #0
   d637a:	6062      	str	r2, [r4, #4]
   d637c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6380:	60a2      	str	r2, [r4, #8]
   d6382:	4a05      	ldr	r2, [pc, #20]	; (d6398 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d6384:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d6386:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d6388:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d638a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d638c:	461a      	mov	r2, r3
   d638e:	f7ff f965 	bl	d565c <HAL_USART_Init>
}
   d6392:	4620      	mov	r0, r4
   d6394:	bd10      	pop	{r4, pc}
   d6396:	bf00      	nop
   d6398:	000d9c60 	.word	0x000d9c60

000d639c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d639c:	7c00      	ldrb	r0, [r0, #16]
   d639e:	f7ff b98d 	b.w	d56bc <HAL_USART_Is_Enabled>
	...

000d63a4 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d63a4:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d63a6:	4d0c      	ldr	r5, [pc, #48]	; (d63d8 <_Z22__fetch_global_Serial1v+0x34>)
   d63a8:	6829      	ldr	r1, [r5, #0]
   d63aa:	f011 0401 	ands.w	r4, r1, #1
   d63ae:	d111      	bne.n	d63d4 <_Z22__fetch_global_Serial1v+0x30>
   d63b0:	4628      	mov	r0, r5
   d63b2:	f7fd fe83 	bl	d40bc <__cxa_guard_acquire>
   d63b6:	b168      	cbz	r0, d63d4 <_Z22__fetch_global_Serial1v+0x30>
   d63b8:	4a08      	ldr	r2, [pc, #32]	; (d63dc <_Z22__fetch_global_Serial1v+0x38>)
   d63ba:	4b09      	ldr	r3, [pc, #36]	; (d63e0 <_Z22__fetch_global_Serial1v+0x3c>)
   d63bc:	4809      	ldr	r0, [pc, #36]	; (d63e4 <_Z22__fetch_global_Serial1v+0x40>)
   d63be:	4621      	mov	r1, r4
   d63c0:	f7ff ffd6 	bl	d6370 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d63c4:	4628      	mov	r0, r5
   d63c6:	f7fd fe7e 	bl	d40c6 <__cxa_guard_release>
   d63ca:	4a07      	ldr	r2, [pc, #28]	; (d63e8 <_Z22__fetch_global_Serial1v+0x44>)
   d63cc:	4907      	ldr	r1, [pc, #28]	; (d63ec <_Z22__fetch_global_Serial1v+0x48>)
   d63ce:	4805      	ldr	r0, [pc, #20]	; (d63e4 <_Z22__fetch_global_Serial1v+0x40>)
   d63d0:	f000 fdae 	bl	d6f30 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d63d4:	4803      	ldr	r0, [pc, #12]	; (d63e4 <_Z22__fetch_global_Serial1v+0x40>)
   d63d6:	bd38      	pop	{r3, r4, r5, pc}
   d63d8:	2003e4c4 	.word	0x2003e4c4
   d63dc:	2003e4c8 	.word	0x2003e4c8
   d63e0:	2003e440 	.word	0x2003e440
   d63e4:	2003e42c 	.word	0x2003e42c
   d63e8:	2003e264 	.word	0x2003e264
   d63ec:	000d62ed 	.word	0x000d62ed

000d63f0 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d63f0:	4770      	bx	lr

000d63f2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d63f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d63f4:	4606      	mov	r6, r0
   d63f6:	4615      	mov	r5, r2
   d63f8:	460c      	mov	r4, r1
   d63fa:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d63fc:	42bc      	cmp	r4, r7
   d63fe:	d006      	beq.n	d640e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6400:	6833      	ldr	r3, [r6, #0]
   d6402:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6406:	689b      	ldr	r3, [r3, #8]
   d6408:	4630      	mov	r0, r6
   d640a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d640c:	e7f6      	b.n	d63fc <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d640e:	4628      	mov	r0, r5
   d6410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6412 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d6412:	2200      	movs	r2, #0
   d6414:	7c00      	ldrb	r0, [r0, #16]
   d6416:	f7ff b979 	b.w	d570c <HAL_I2C_Write_Data>

000d641a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d641a:	2100      	movs	r1, #0
   d641c:	7c00      	ldrb	r0, [r0, #16]
   d641e:	f7ff b97d 	b.w	d571c <HAL_I2C_Available_Data>

000d6422 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d6422:	2100      	movs	r1, #0
   d6424:	7c00      	ldrb	r0, [r0, #16]
   d6426:	f7ff b981 	b.w	d572c <HAL_I2C_Read_Data>

000d642a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d642a:	2100      	movs	r1, #0
   d642c:	7c00      	ldrb	r0, [r0, #16]
   d642e:	f7ff b985 	b.w	d573c <HAL_I2C_Peek_Data>

000d6432 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d6432:	2100      	movs	r1, #0
   d6434:	7c00      	ldrb	r0, [r0, #16]
   d6436:	f7ff b989 	b.w	d574c <HAL_I2C_Flush_Data>

000d643a <_ZN7TwoWireD0Ev>:
   d643a:	b510      	push	{r4, lr}
   d643c:	2114      	movs	r1, #20
   d643e:	4604      	mov	r4, r0
   d6440:	f000 fd84 	bl	d6f4c <_ZdlPvj>
   d6444:	4620      	mov	r0, r4
   d6446:	bd10      	pop	{r4, pc}

000d6448 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d6448:	b510      	push	{r4, lr}
   d644a:	4604      	mov	r4, r0
   d644c:	2300      	movs	r3, #0
   d644e:	6063      	str	r3, [r4, #4]
   d6450:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6454:	60a3      	str	r3, [r4, #8]
   d6456:	4b04      	ldr	r3, [pc, #16]	; (d6468 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d6458:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d645a:	4608      	mov	r0, r1
   d645c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d645e:	4611      	mov	r1, r2
   d6460:	f7ff f984 	bl	d576c <HAL_I2C_Init>
}
   d6464:	4620      	mov	r0, r4
   d6466:	bd10      	pop	{r4, pc}
   d6468:	000d9c90 	.word	0x000d9c90

000d646c <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d646c:	2300      	movs	r3, #0
   d646e:	461a      	mov	r2, r3
   d6470:	4619      	mov	r1, r3
   d6472:	7c00      	ldrb	r0, [r0, #16]
   d6474:	f7ff b932 	b.w	d56dc <HAL_I2C_Begin>

000d6478 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d6478:	b570      	push	{r4, r5, r6, lr}
   d647a:	460c      	mov	r4, r1
   d647c:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d647e:	2514      	movs	r5, #20
   d6480:	4606      	mov	r6, r0
   d6482:	462a      	mov	r2, r5
   d6484:	2100      	movs	r1, #0
   d6486:	a801      	add	r0, sp, #4
   d6488:	f002 fffc 	bl	d9484 <memset>
   d648c:	7823      	ldrb	r3, [r4, #0]
   d648e:	f88d 3008 	strb.w	r3, [sp, #8]
   d6492:	6863      	ldr	r3, [r4, #4]
   d6494:	9303      	str	r3, [sp, #12]
   d6496:	68e3      	ldr	r3, [r4, #12]
   d6498:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d649a:	2200      	movs	r2, #0
   d649c:	7a23      	ldrb	r3, [r4, #8]
   d649e:	7c30      	ldrb	r0, [r6, #16]
   d64a0:	f8ad 5004 	strh.w	r5, [sp, #4]
   d64a4:	a901      	add	r1, sp, #4
   d64a6:	9305      	str	r3, [sp, #20]
   d64a8:	f7ff f968 	bl	d577c <HAL_I2C_Request_Data_Ex>
}
   d64ac:	b006      	add	sp, #24
   d64ae:	bd70      	pop	{r4, r5, r6, pc}

000d64b0 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d64b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d64b2:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d64b4:	f88d 1000 	strb.w	r1, [sp]
   d64b8:	f04f 0164 	mov.w	r1, #100	; 0x64
   d64bc:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d64be:	bf18      	it	ne
   d64c0:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d64c2:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d64c4:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d64c6:	f88d 3008 	strb.w	r3, [sp, #8]
   d64ca:	f7ff ffd5 	bl	d6478 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d64ce:	b005      	add	sp, #20
   d64d0:	f85d fb04 	ldr.w	pc, [sp], #4

000d64d4 <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   d64d4:	2301      	movs	r3, #1
   d64d6:	f7ff bfeb 	b.w	d64b0 <_ZN7TwoWire11requestFromEhjh>

000d64da <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d64da:	2200      	movs	r2, #0
   d64dc:	7c00      	ldrb	r0, [r0, #16]
   d64de:	f7ff b905 	b.w	d56ec <HAL_I2C_Begin_Transmission>

000d64e2 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d64e2:	2200      	movs	r2, #0
   d64e4:	7c00      	ldrb	r0, [r0, #16]
   d64e6:	f7ff b909 	b.w	d56fc <HAL_I2C_End_Transmission>

000d64ea <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d64ea:	2101      	movs	r1, #1
   d64ec:	f7ff bff9 	b.w	d64e2 <_ZN7TwoWire15endTransmissionEh>

000d64f0 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d64f0:	2100      	movs	r1, #0
   d64f2:	7c00      	ldrb	r0, [r0, #16]
   d64f4:	f7ff b932 	b.w	d575c <HAL_I2C_Is_Enabled>

000d64f8 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d64f8:	2200      	movs	r2, #0
   d64fa:	4611      	mov	r1, r2
   d64fc:	6840      	ldr	r0, [r0, #4]
   d64fe:	f7ff ba21 	b.w	d5944 <network_listening>

000d6502 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6502:	2200      	movs	r2, #0
   d6504:	4611      	mov	r1, r2
   d6506:	6840      	ldr	r0, [r0, #4]
   d6508:	f7ff ba2c 	b.w	d5964 <network_get_listen_timeout>

000d650c <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d650c:	2200      	movs	r2, #0
   d650e:	6840      	ldr	r0, [r0, #4]
   d6510:	f7ff ba20 	b.w	d5954 <network_set_listen_timeout>

000d6514 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6514:	2200      	movs	r2, #0
   d6516:	f081 0101 	eor.w	r1, r1, #1
   d651a:	6840      	ldr	r0, [r0, #4]
   d651c:	f7ff ba0a 	b.w	d5934 <network_listen>

000d6520 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d6520:	2300      	movs	r3, #0
   d6522:	461a      	mov	r2, r3
   d6524:	2101      	movs	r1, #1
   d6526:	6840      	ldr	r0, [r0, #4]
   d6528:	f7ff b9fc 	b.w	d5924 <network_off>

000d652c <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d652c:	2300      	movs	r3, #0
   d652e:	461a      	mov	r2, r3
   d6530:	4619      	mov	r1, r3
   d6532:	6840      	ldr	r0, [r0, #4]
   d6534:	f7ff b9ee 	b.w	d5914 <network_on>

000d6538 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6538:	2200      	movs	r2, #0
   d653a:	4611      	mov	r1, r2
   d653c:	6840      	ldr	r0, [r0, #4]
   d653e:	f7ff b9e1 	b.w	d5904 <network_ready>

000d6542 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6542:	2200      	movs	r2, #0
   d6544:	4611      	mov	r1, r2
   d6546:	6840      	ldr	r0, [r0, #4]
   d6548:	f7ff b9cc 	b.w	d58e4 <network_connecting>

000d654c <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d654c:	2200      	movs	r2, #0
   d654e:	2102      	movs	r1, #2
   d6550:	6840      	ldr	r0, [r0, #4]
   d6552:	f7ff b9cf 	b.w	d58f4 <network_disconnect>

000d6556 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6556:	2300      	movs	r3, #0
   d6558:	461a      	mov	r2, r3
   d655a:	6840      	ldr	r0, [r0, #4]
   d655c:	f7ff b9ba 	b.w	d58d4 <network_connect>

000d6560 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d6560:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6562:	4605      	mov	r5, r0
   d6564:	b188      	cbz	r0, d658a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6566:	6804      	ldr	r4, [r0, #0]
   d6568:	b14c      	cbz	r4, d657e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d656a:	68a3      	ldr	r3, [r4, #8]
   d656c:	b11b      	cbz	r3, d6576 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d656e:	2203      	movs	r2, #3
   d6570:	4621      	mov	r1, r4
   d6572:	4620      	mov	r0, r4
   d6574:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6576:	2110      	movs	r1, #16
   d6578:	4620      	mov	r0, r4
   d657a:	f000 fce7 	bl	d6f4c <_ZdlPvj>
   d657e:	4628      	mov	r0, r5
   d6580:	2114      	movs	r1, #20
      }
   d6582:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6586:	f000 bce1 	b.w	d6f4c <_ZdlPvj>
   d658a:	bd38      	pop	{r3, r4, r5, pc}

000d658c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d658c:	b110      	cbz	r0, d6594 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d658e:	6803      	ldr	r3, [r0, #0]
   d6590:	685b      	ldr	r3, [r3, #4]
   d6592:	4718      	bx	r3
   d6594:	4770      	bx	lr

000d6596 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d6596:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6598:	6803      	ldr	r3, [r0, #0]
   d659a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d659c:	b1bb      	cbz	r3, d65ce <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d659e:	6858      	ldr	r0, [r3, #4]
   d65a0:	f7ff f81c 	bl	d55dc <os_thread_is_current>
   d65a4:	b978      	cbnz	r0, d65c6 <_ZN6ThreadD1Ev+0x30>
   d65a6:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d65a8:	7c5a      	ldrb	r2, [r3, #17]
   d65aa:	b912      	cbnz	r2, d65b2 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d65ac:	6858      	ldr	r0, [r3, #4]
   d65ae:	f7ff f81d 	bl	d55ec <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d65b2:	6823      	ldr	r3, [r4, #0]
   d65b4:	6858      	ldr	r0, [r3, #4]
   d65b6:	f7ff f821 	bl	d55fc <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d65ba:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d65bc:	2300      	movs	r3, #0
   d65be:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d65c0:	b128      	cbz	r0, d65ce <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d65c2:	f7ff ffcd 	bl	d6560 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d65c6:	6820      	ldr	r0, [r4, #0]
   d65c8:	b108      	cbz	r0, d65ce <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d65ca:	f7ff ffc9 	bl	d6560 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d65ce:	4620      	mov	r0, r4
   d65d0:	bd10      	pop	{r4, pc}

000d65d2 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d65d2:	b538      	push	{r3, r4, r5, lr}
   d65d4:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d65d6:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d65da:	b108      	cbz	r0, d65e0 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d65dc:	f7fd fd61 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d65e0:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d65e4:	b108      	cbz	r0, d65ea <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d65e6:	f7ff f819 	bl	d561c <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d65ea:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d65ee:	b135      	cbz	r5, d65fe <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d65f0:	4628      	mov	r0, r5
   d65f2:	f7ff ffd0 	bl	d6596 <_ZN6ThreadD1Ev>
   d65f6:	2104      	movs	r1, #4
   d65f8:	4628      	mov	r0, r5
   d65fa:	f000 fca7 	bl	d6f4c <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d65fe:	6820      	ldr	r0, [r4, #0]
   d6600:	b108      	cbz	r0, d6606 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d6602:	f7ff ffc3 	bl	d658c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d6606:	4620      	mov	r0, r4
   d6608:	bd38      	pop	{r3, r4, r5, pc}
	...

000d660c <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d660c:	b510      	push	{r4, lr}
   d660e:	4b04      	ldr	r3, [pc, #16]	; (d6620 <_ZN5spark9MeshClassD1Ev+0x14>)
   d6610:	4604      	mov	r4, r0
   d6612:	f840 3b08 	str.w	r3, [r0], #8
   d6616:	f7ff ffdc 	bl	d65d2 <_ZN5spark11MeshPublishD1Ev>
   d661a:	4620      	mov	r0, r4
   d661c:	bd10      	pop	{r4, pc}
   d661e:	bf00      	nop
   d6620:	000d9cb8 	.word	0x000d9cb8

000d6624 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d6624:	b538      	push	{r3, r4, r5, lr}
   d6626:	4c0e      	ldr	r4, [pc, #56]	; (d6660 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d6628:	4b0e      	ldr	r3, [pc, #56]	; (d6664 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d662a:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d662c:	2500      	movs	r5, #0
   d662e:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d6630:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d6634:	6063      	str	r3, [r4, #4]
   d6636:	60a5      	str	r5, [r4, #8]
   d6638:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d663c:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d6640:	f7fe ffe4 	bl	d560c <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d6644:	4b08      	ldr	r3, [pc, #32]	; (d6668 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d6646:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d664a:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d664e:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d6650:	4620      	mov	r0, r4
   d6652:	4a06      	ldr	r2, [pc, #24]	; (d666c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d6654:	4906      	ldr	r1, [pc, #24]	; (d6670 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d6656:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d665a:	f000 bc69 	b.w	d6f30 <__aeabi_atexit>
   d665e:	bf00      	nop
   d6660:	2003e54c 	.word	0x2003e54c
   d6664:	000d9da0 	.word	0x000d9da0
   d6668:	000d9cb8 	.word	0x000d9cb8
   d666c:	2003e264 	.word	0x2003e264
   d6670:	000d660d 	.word	0x000d660d

000d6674 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d6674:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6676:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d6678:	6803      	ldr	r3, [r0, #0]
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d667a:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d667e:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d6680:	2201      	movs	r2, #1
   d6682:	f04f 33ff 	mov.w	r3, #4294967295
   d6686:	4621      	mov	r1, r4
   d6688:	47a8      	blx	r5
}
   d668a:	b003      	add	sp, #12
   d668c:	bd30      	pop	{r4, r5, pc}

000d668e <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d668e:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d6690:	6803      	ldr	r3, [r0, #0]
   d6692:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d6694:	f04f 33ff 	mov.w	r3, #4294967295
   d6698:	46a4      	mov	ip, r4
}
   d669a:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d669e:	4760      	bx	ip

000d66a0 <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d66a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d66a2:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   d66a4:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d66a6:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   d66aa:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d66ac:	4621      	mov	r1, r4
   d66ae:	4613      	mov	r3, r2
   d66b0:	2201      	movs	r2, #1
   d66b2:	47a8      	blx	r5
}
   d66b4:	b003      	add	sp, #12
   d66b6:	bd30      	pop	{r4, r5, pc}

000d66b8 <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   d66b8:	4770      	bx	lr

000d66ba <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d66ba:	b538      	push	{r3, r4, r5, lr}
   d66bc:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d66be:	681a      	ldr	r2, [r3, #0]
   d66c0:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d66c2:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   d66c4:	da05      	bge.n	d66d2 <_ZN9TCPClient9connectedEv+0x18>
   d66c6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d66ca:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d66ce:	429a      	cmp	r2, r3
   d66d0:	d001      	beq.n	d66d6 <_ZN9TCPClient9connectedEv+0x1c>
   d66d2:	2501      	movs	r5, #1
   d66d4:	e00b      	b.n	d66ee <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   d66d6:	6803      	ldr	r3, [r0, #0]
   d66d8:	691b      	ldr	r3, [r3, #16]
   d66da:	4798      	blx	r3
   d66dc:	2800      	cmp	r0, #0
   d66de:	bf14      	ite	ne
   d66e0:	2501      	movne	r5, #1
   d66e2:	2500      	moveq	r5, #0
        if (!rv) {
   d66e4:	d103      	bne.n	d66ee <_ZN9TCPClient9connectedEv+0x34>
            stop();
   d66e6:	6823      	ldr	r3, [r4, #0]
   d66e8:	4620      	mov	r0, r4
   d66ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d66ec:	4798      	blx	r3
        }
    }
    return rv;
}
   d66ee:	4628      	mov	r0, r5
   d66f0:	bd38      	pop	{r3, r4, r5, pc}

000d66f2 <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d66f2:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   d66f4:	6818      	ldr	r0, [r3, #0]
}
   d66f6:	43c0      	mvns	r0, r0
   d66f8:	0fc0      	lsrs	r0, r0, #31
   d66fa:	4770      	bx	lr

000d66fc <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d66fc:	4770      	bx	lr

000d66fe <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d66fe:	2000      	movs	r0, #0
   d6700:	4770      	bx	lr

000d6702 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d6702:	b510      	push	{r4, lr}
   d6704:	2114      	movs	r1, #20
   d6706:	4604      	mov	r4, r0
   d6708:	f000 fc20 	bl	d6f4c <_ZdlPvj>
   d670c:	4620      	mov	r0, r4
   d670e:	bd10      	pop	{r4, pc}

000d6710 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d6710:	f7fd bcc5 	b.w	d409e <_ZdlPv>

000d6714 <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d6714:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d6716:	4616      	mov	r6, r2

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   d6718:	2200      	movs	r2, #0
   d671a:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   d671c:	9202      	str	r2, [sp, #8]
   d671e:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   d6720:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d6722:	4604      	mov	r4, r0
   d6724:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   d6726:	d008      	beq.n	d673a <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   d6728:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d672c:	fbb3 f1f2 	udiv	r1, r3, r2
   d6730:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d6732:	fb02 3111 	mls	r1, r2, r1, r3
   d6736:	434a      	muls	r2, r1
   d6738:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d673a:	6960      	ldr	r0, [r4, #20]
   d673c:	2308      	movs	r3, #8
   d673e:	9300      	str	r3, [sp, #0]
   d6740:	f241 0205 	movw	r2, #4101	; 0x1005
   d6744:	446b      	add	r3, sp
   d6746:	f640 71ff 	movw	r1, #4095	; 0xfff
   d674a:	6800      	ldr	r0, [r0, #0]
   d674c:	f7ff f81e 	bl	d578c <sock_setsockopt>
    if (ret < 0) {
   d6750:	2800      	cmp	r0, #0
   d6752:	db08      	blt.n	d6766 <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   d6754:	6960      	ldr	r0, [r4, #20]
   d6756:	2300      	movs	r3, #0
   d6758:	4632      	mov	r2, r6
   d675a:	4629      	mov	r1, r5
   d675c:	6800      	ldr	r0, [r0, #0]
   d675e:	f7ff f835 	bl	d57cc <sock_send>
    if (ret < 0) {
   d6762:	2800      	cmp	r0, #0
   d6764:	da04      	bge.n	d6770 <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   d6766:	f7ff f92d 	bl	d59c4 <__errno>
   d676a:	6803      	ldr	r3, [r0, #0]
   d676c:	6063      	str	r3, [r4, #4]
   d676e:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   d6770:	b004      	add	sp, #16
   d6772:	bd70      	pop	{r4, r5, r6, pc}

000d6774 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6774:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d6776:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6778:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d677a:	689b      	ldr	r3, [r3, #8]
   d677c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d677e:	68a3      	ldr	r3, [r4, #8]
   d6780:	3b01      	subs	r3, #1
   d6782:	60a3      	str	r3, [r4, #8]
   d6784:	b92b      	cbnz	r3, d6792 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   d6786:	6823      	ldr	r3, [r4, #0]
   d6788:	4620      	mov	r0, r4
   d678a:	68db      	ldr	r3, [r3, #12]
        }
    }
   d678c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d6790:	4718      	bx	r3
   d6792:	bd10      	pop	{r4, pc}

000d6794 <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   d6794:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6796:	4604      	mov	r4, r0
   d6798:	694d      	ldr	r5, [r1, #20]
   d679a:	4b05      	ldr	r3, [pc, #20]	; (d67b0 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d679c:	f844 3b04 	str.w	r3, [r4], #4
   d67a0:	358c      	adds	r5, #140	; 0x8c
   d67a2:	4606      	mov	r6, r0
   d67a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d67a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d67a8:	682b      	ldr	r3, [r5, #0]
   d67aa:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d67ac:	4630      	mov	r0, r6
   d67ae:	bd70      	pop	{r4, r5, r6, pc}
   d67b0:	000d9c1c 	.word	0x000d9c1c

000d67b4 <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d67b4:	b510      	push	{r4, lr}
   d67b6:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d67b8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d67bc:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d67c0:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d67c2:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d67c4:	d005      	beq.n	d67d2 <_ZN9TCPClient4peekEv+0x1e>
   d67c6:	6962      	ldr	r2, [r4, #20]
   d67c8:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d67cc:	4413      	add	r3, r2
   d67ce:	7918      	ldrb	r0, [r3, #4]
   d67d0:	bd10      	pop	{r4, pc}
   d67d2:	6803      	ldr	r3, [r0, #0]
   d67d4:	691b      	ldr	r3, [r3, #16]
   d67d6:	4798      	blx	r3
   d67d8:	2800      	cmp	r0, #0
   d67da:	d1f4      	bne.n	d67c6 <_ZN9TCPClient4peekEv+0x12>
   d67dc:	f04f 30ff 	mov.w	r0, #4294967295
}
   d67e0:	bd10      	pop	{r4, pc}

000d67e2 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d67e2:	b510      	push	{r4, lr}
   d67e4:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d67e6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d67ea:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d67ee:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d67f0:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d67f2:	d008      	beq.n	d6806 <_ZN9TCPClient4readEv+0x24>
   d67f4:	6962      	ldr	r2, [r4, #20]
   d67f6:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d67fa:	1c59      	adds	r1, r3, #1
   d67fc:	4413      	add	r3, r2
   d67fe:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   d6802:	7918      	ldrb	r0, [r3, #4]
   d6804:	bd10      	pop	{r4, pc}
   d6806:	6803      	ldr	r3, [r0, #0]
   d6808:	691b      	ldr	r3, [r3, #16]
   d680a:	4798      	blx	r3
   d680c:	2800      	cmp	r0, #0
   d680e:	d1f1      	bne.n	d67f4 <_ZN9TCPClient4readEv+0x12>
   d6810:	f04f 30ff 	mov.w	r0, #4294967295
}
   d6814:	bd10      	pop	{r4, pc}

000d6816 <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   d6816:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6818:	6943      	ldr	r3, [r0, #20]
   d681a:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   d681c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6820:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6824:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   d6826:	4605      	mov	r5, r0
   d6828:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   d682a:	d106      	bne.n	d683a <_ZN9TCPClient4readEPhj+0x24>
   d682c:	6803      	ldr	r3, [r0, #0]
   d682e:	691b      	ldr	r3, [r3, #16]
   d6830:	4798      	blx	r3
   d6832:	b910      	cbnz	r0, d683a <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   d6834:	f04f 34ff 	mov.w	r4, #4294967295
   d6838:	e014      	b.n	d6864 <_ZN9TCPClient4readEPhj+0x4e>
   d683a:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   d683c:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d6840:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d6844:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d6846:	42bc      	cmp	r4, r7
   d6848:	bf28      	it	cs
   d684a:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d684c:	4419      	add	r1, r3
   d684e:	4622      	mov	r2, r4
   d6850:	3104      	adds	r1, #4
   d6852:	4630      	mov	r0, r6
   d6854:	f002 fdf0 	bl	d9438 <memcpy>
   d6858:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d685a:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d685e:	4423      	add	r3, r4
   d6860:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   d6864:	4620      	mov	r0, r4
   d6866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6868 <_ZN9TCPClient7connectEPKctm>:
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d6868:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d686c:	4698      	mov	r8, r3
    stop();
   d686e:	6803      	ldr	r3, [r0, #0]
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d6870:	b093      	sub	sp, #76	; 0x4c
    stop();
   d6872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d6874:	460d      	mov	r5, r1
   d6876:	4606      	mov	r6, r0
   d6878:	4617      	mov	r7, r2
    stop();
   d687a:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   d687c:	ab12      	add	r3, sp, #72	; 0x48
   d687e:	2400      	movs	r4, #0
   d6880:	f843 4d48 	str.w	r4, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d6884:	4622      	mov	r2, r4
   d6886:	4621      	mov	r1, r4
   d6888:	4628      	mov	r0, r5
   d688a:	f7fe fe17 	bl	d54bc <netdb_getaddrinfo>
   d688e:	4681      	mov	r9, r0
   d6890:	2800      	cmp	r0, #0
   d6892:	d13d      	bne.n	d6910 <_ZN9TCPClient7connectEPKctm+0xa8>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d6894:	9b00      	ldr	r3, [sp, #0]
   d6896:	2b00      	cmp	r3, #0
   d6898:	d056      	beq.n	d6948 <_ZN9TCPClient7connectEPKctm+0xe0>
   d689a:	695b      	ldr	r3, [r3, #20]
   d689c:	2b00      	cmp	r3, #0
   d689e:	d053      	beq.n	d6948 <_ZN9TCPClient7connectEPKctm+0xe0>
        IPAddress addr;
   d68a0:	a806      	add	r0, sp, #24
   d68a2:	f7ff fc47 	bl	d6134 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d68a6:	9b00      	ldr	r3, [sp, #0]
   d68a8:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d68aa:	7863      	ldrb	r3, [r4, #1]
   d68ac:	2b02      	cmp	r3, #2
   d68ae:	d101      	bne.n	d68b4 <_ZN9TCPClient7connectEPKctm+0x4c>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d68b0:	1d21      	adds	r1, r4, #4
   d68b2:	e013      	b.n	d68dc <_ZN9TCPClient7connectEPKctm+0x74>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d68b4:	2b0a      	cmp	r3, #10
   d68b6:	d114      	bne.n	d68e2 <_ZN9TCPClient7connectEPKctm+0x7a>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d68b8:	2211      	movs	r2, #17
   d68ba:	4649      	mov	r1, r9
   d68bc:	a801      	add	r0, sp, #4
   d68be:	f002 fde1 	bl	d9484 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d68c2:	68a3      	ldr	r3, [r4, #8]
   d68c4:	bb33      	cbnz	r3, d6914 <_ZN9TCPClient7connectEPKctm+0xac>
   d68c6:	68e3      	ldr	r3, [r4, #12]
   d68c8:	bb23      	cbnz	r3, d6914 <_ZN9TCPClient7connectEPKctm+0xac>
   d68ca:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d68ce:	6925      	ldr	r5, [r4, #16]
   d68d0:	f7fe feb4 	bl	d563c <inet_htonl>
   d68d4:	4285      	cmp	r5, r0
   d68d6:	d11d      	bne.n	d6914 <_ZN9TCPClient7connectEPKctm+0xac>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d68d8:	f104 0114 	add.w	r1, r4, #20
   d68dc:	a806      	add	r0, sp, #24
   d68de:	f7ff fc6c 	bl	d61ba <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d68e2:	a806      	add	r0, sp, #24
   d68e4:	f7ff fc46 	bl	d6174 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d68e8:	2800      	cmp	r0, #0
   d68ea:	d02d      	beq.n	d6948 <_ZN9TCPClient7connectEPKctm+0xe0>
            return connect(addr, port, nif);
   d68ec:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d68ee:	ad07      	add	r5, sp, #28
   d68f0:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d68f4:	4b18      	ldr	r3, [pc, #96]	; (d6958 <_ZN9TCPClient7connectEPKctm+0xf0>)
   d68f6:	930c      	str	r3, [sp, #48]	; 0x30
   d68f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d68fa:	ac0d      	add	r4, sp, #52	; 0x34
   d68fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d68fe:	682b      	ldr	r3, [r5, #0]
   d6900:	7023      	strb	r3, [r4, #0]
   d6902:	463a      	mov	r2, r7
   d6904:	4643      	mov	r3, r8
   d6906:	a90c      	add	r1, sp, #48	; 0x30
   d6908:	4630      	mov	r0, r6
   d690a:	47c8      	blx	r9
   d690c:	4681      	mov	r9, r0
   d690e:	e01b      	b.n	d6948 <_ZN9TCPClient7connectEPKctm+0xe0>

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d6910:	46a1      	mov	r9, r4
   d6912:	e019      	b.n	d6948 <_ZN9TCPClient7connectEPKctm+0xe0>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6914:	f104 0308 	add.w	r3, r4, #8
   d6918:	ad01      	add	r5, sp, #4
   d691a:	3418      	adds	r4, #24
   d691c:	6818      	ldr	r0, [r3, #0]
   d691e:	6859      	ldr	r1, [r3, #4]
   d6920:	462a      	mov	r2, r5
   d6922:	c203      	stmia	r2!, {r0, r1}
   d6924:	3308      	adds	r3, #8
   d6926:	42a3      	cmp	r3, r4
   d6928:	4615      	mov	r5, r2
   d692a:	d1f7      	bne.n	d691c <_ZN9TCPClient7connectEPKctm+0xb4>
            a.v = 6;
   d692c:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d692e:	a901      	add	r1, sp, #4
   d6930:	a80c      	add	r0, sp, #48	; 0x30
   d6932:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d6934:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d6938:	f7ff fc0a 	bl	d6150 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d693c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d693e:	ac07      	add	r4, sp, #28
   d6940:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6942:	682b      	ldr	r3, [r5, #0]
   d6944:	7023      	strb	r3, [r4, #0]
   d6946:	e7cc      	b.n	d68e2 <_ZN9TCPClient7connectEPKctm+0x7a>
// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d6948:	9800      	ldr	r0, [sp, #0]
   d694a:	f7fe fdaf 	bl	d54ac <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return 0; // error, could not connect
}
   d694e:	4648      	mov	r0, r9
   d6950:	b013      	add	sp, #76	; 0x4c
   d6952:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d6956:	bf00      	nop
   d6958:	000d9c1c 	.word	0x000d9c1c

000d695c <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   d695c:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d695e:	2300      	movs	r3, #0
   d6960:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d6964:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d6966:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   d696a:	4770      	bx	lr

000d696c <_ZN9TCPClient7connectE9IPAddresstm>:

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d696c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6970:	461e      	mov	r6, r3
    stop();
   d6972:	6803      	ldr	r3, [r0, #0]

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d6974:	460c      	mov	r4, r1
   d6976:	b08a      	sub	sp, #40	; 0x28
    stop();
   d6978:	6adb      	ldr	r3, [r3, #44]	; 0x2c

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d697a:	4605      	mov	r5, r0
   d697c:	4617      	mov	r7, r2
    stop();
   d697e:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d6980:	7d23      	ldrb	r3, [r4, #20]
   d6982:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d6986:	2b04      	cmp	r3, #4
   d6988:	bf0c      	ite	eq
   d698a:	2002      	moveq	r0, #2
   d698c:	200a      	movne	r0, #10
   d698e:	2206      	movs	r2, #6
   d6990:	2101      	movs	r1, #1
   d6992:	f7fe ff23 	bl	d57dc <sock_socket>
   d6996:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d699a:	696b      	ldr	r3, [r5, #20]
   d699c:	681b      	ldr	r3, [r3, #0]
   d699e:	2b00      	cmp	r3, #0
   d69a0:	db18      	blt.n	d69d4 <_ZN9TCPClient7connectE9IPAddresstm+0x68>

    flush_buffer();
   d69a2:	4628      	mov	r0, r5
   d69a4:	f7ff ffda 	bl	d695c <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d69a8:	b1d6      	cbz	r6, d69e0 <_ZN9TCPClient7connectE9IPAddresstm+0x74>
        struct ifreq ifr = {};
   d69aa:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d69ac:	a903      	add	r1, sp, #12
   d69ae:	b2f0      	uxtb	r0, r6
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   d69b0:	9303      	str	r3, [sp, #12]
   d69b2:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d69b6:	f7fe fdf1 	bl	d559c <if_index_to_name>
   d69ba:	b958      	cbnz	r0, d69d4 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d69bc:	6968      	ldr	r0, [r5, #20]
   d69be:	2306      	movs	r3, #6
   d69c0:	9300      	str	r3, [sp, #0]
   d69c2:	f241 020b 	movw	r2, #4107	; 0x100b
   d69c6:	ab03      	add	r3, sp, #12
   d69c8:	f640 71ff 	movw	r1, #4095	; 0xfff
   d69cc:	6800      	ldr	r0, [r0, #0]
   d69ce:	f7fe fedd 	bl	d578c <sock_setsockopt>
   d69d2:	b128      	cbz	r0, d69e0 <_ZN9TCPClient7connectE9IPAddresstm+0x74>

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d69d4:	682b      	ldr	r3, [r5, #0]
   d69d6:	4628      	mov	r0, r5
   d69d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d69da:	2400      	movs	r4, #0

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d69dc:	4798      	blx	r3
   d69de:	e03b      	b.n	d6a58 <_ZN9TCPClient7connectE9IPAddresstm+0xec>
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   d69e0:	261c      	movs	r6, #28
   d69e2:	4632      	mov	r2, r6
   d69e4:	2100      	movs	r1, #0
   d69e6:	a803      	add	r0, sp, #12
   d69e8:	f002 fd4c 	bl	d9484 <memset>
    if (ip.version() == 4) {
   d69ec:	7d23      	ldrb	r3, [r4, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   d69ee:	f88d 600c 	strb.w	r6, [sp, #12]
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   d69f2:	2b04      	cmp	r3, #4
   d69f4:	d10c      	bne.n	d6a10 <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d69f6:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   d69f8:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d69fa:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   d69fe:	f7fe fe25 	bl	d564c <inet_htons>
   d6a02:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d6a06:	6860      	ldr	r0, [r4, #4]
   d6a08:	f7fe fe18 	bl	d563c <inet_htonl>
   d6a0c:	9004      	str	r0, [sp, #16]
   d6a0e:	e013      	b.n	d6a38 <_ZN9TCPClient7connectE9IPAddresstm+0xcc>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d6a10:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   d6a12:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d6a14:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   d6a18:	f7fe fe18 	bl	d564c <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d6a1c:	ae05      	add	r6, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   d6a1e:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d6a22:	1d23      	adds	r3, r4, #4
   d6a24:	f104 0714 	add.w	r7, r4, #20
   d6a28:	6818      	ldr	r0, [r3, #0]
   d6a2a:	6859      	ldr	r1, [r3, #4]
   d6a2c:	4632      	mov	r2, r6
   d6a2e:	c203      	stmia	r2!, {r0, r1}
   d6a30:	3308      	adds	r3, #8
   d6a32:	42bb      	cmp	r3, r7
   d6a34:	4616      	mov	r6, r2
   d6a36:	d1f7      	bne.n	d6a28 <_ZN9TCPClient7connectE9IPAddresstm+0xbc>
    }

    // FIXME: timeout?
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d6a38:	696b      	ldr	r3, [r5, #20]
   d6a3a:	221c      	movs	r2, #28
   d6a3c:	a903      	add	r1, sp, #12
   d6a3e:	6818      	ldr	r0, [r3, #0]
   d6a40:	f7fe feb4 	bl	d57ac <sock_connect>
   d6a44:	2800      	cmp	r0, #0
   d6a46:	d1c5      	bne.n	d69d4 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
   d6a48:	3404      	adds	r4, #4
   d6a4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d6a4c:	696d      	ldr	r5, [r5, #20]
   d6a4e:	358c      	adds	r5, #140	; 0x8c
   d6a50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d6a52:	6823      	ldr	r3, [r4, #0]
   d6a54:	702b      	strb	r3, [r5, #0]

    d_->remoteIP = ip;

    done.dismiss();

    return 1; // success
   d6a56:	2401      	movs	r4, #1
}
   d6a58:	4620      	mov	r0, r4
   d6a5a:	b00a      	add	sp, #40	; 0x28
   d6a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6a60 <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d6a60:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d6a62:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d6a64:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d6a66:	6818      	ldr	r0, [r3, #0]
   d6a68:	2800      	cmp	r0, #0
   d6a6a:	db01      	blt.n	d6a70 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d6a6c:	f7fe fe96 	bl	d579c <sock_close>
   d6a70:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   d6a72:	f04f 32ff 	mov.w	r2, #4294967295
   d6a76:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6a78:	6960      	ldr	r0, [r4, #20]
   d6a7a:	2211      	movs	r2, #17
   d6a7c:	2100      	movs	r1, #0
   d6a7e:	308c      	adds	r0, #140	; 0x8c
   d6a80:	f002 fd00 	bl	d9484 <memset>
    d_->remoteIP.clear();
    flush_buffer();
   d6a84:	4620      	mov	r0, r4
}
   d6a86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   d6a8a:	f7ff bf67 	b.w	d695c <_ZN9TCPClient12flush_bufferEv>
	...

000d6a90 <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d6a90:	b530      	push	{r4, r5, lr}
   d6a92:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d6a94:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d6a98:	b08b      	sub	sp, #44	; 0x2c
   d6a9a:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d6a9c:	b11b      	cbz	r3, d6aa6 <_ZN9TCPClient9availableEv+0x16>
   d6a9e:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d6aa2:	429a      	cmp	r2, r3
   d6aa4:	d040      	beq.n	d6b28 <_ZN9TCPClient9availableEv+0x98>
   d6aa6:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   d6aa8:	6818      	ldr	r0, [r3, #0]
   d6aaa:	2800      	cmp	r0, #0
   d6aac:	db3f      	blt.n	d6b2e <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   d6aae:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   d6ab2:	2d7f      	cmp	r5, #127	; 0x7f
   d6ab4:	d83b      	bhi.n	d6b2e <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d6ab6:	1d19      	adds	r1, r3, #4
   d6ab8:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d6abc:	2308      	movs	r3, #8
   d6abe:	4429      	add	r1, r5
   d6ac0:	f7fe fe7c 	bl	d57bc <sock_recv>
            if (ret > 0) {
   d6ac4:	2800      	cmp	r0, #0
   d6ac6:	dd0c      	ble.n	d6ae2 <_ZN9TCPClient9availableEv+0x52>
   d6ac8:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d6aca:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6ace:	b90a      	cbnz	r2, d6ad4 <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   d6ad0:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d6ad4:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   d6ad6:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d6ada:	4418      	add	r0, r3
   d6adc:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   d6ae0:	e025      	b.n	d6b2e <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d6ae2:	f7fe ff6f 	bl	d59c4 <__errno>
   d6ae6:	6803      	ldr	r3, [r0, #0]
   d6ae8:	2b0b      	cmp	r3, #11
   d6aea:	d020      	beq.n	d6b2e <_ZN9TCPClient9availableEv+0x9e>
   d6aec:	f7fe ff6a 	bl	d59c4 <__errno>
   d6af0:	6803      	ldr	r3, [r0, #0]
   d6af2:	2b0b      	cmp	r3, #11
   d6af4:	d01b      	beq.n	d6b2e <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   d6af6:	2320      	movs	r3, #32
   d6af8:	2500      	movs	r5, #0
   d6afa:	9302      	str	r3, [sp, #8]
   d6afc:	9503      	str	r5, [sp, #12]
   d6afe:	f7fe ff61 	bl	d59c4 <__errno>
   d6b02:	6803      	ldr	r3, [r0, #0]
   d6b04:	9301      	str	r3, [sp, #4]
   d6b06:	4b0e      	ldr	r3, [pc, #56]	; (d6b40 <_ZN9TCPClient9availableEv+0xb0>)
   d6b08:	9300      	str	r3, [sp, #0]
   d6b0a:	aa02      	add	r2, sp, #8
   d6b0c:	462b      	mov	r3, r5
   d6b0e:	490d      	ldr	r1, [pc, #52]	; (d6b44 <_ZN9TCPClient9availableEv+0xb4>)
   d6b10:	2032      	movs	r0, #50	; 0x32
   d6b12:	f7fe feb3 	bl	d587c <log_message>
                    sock_close(d_->sock);
   d6b16:	6963      	ldr	r3, [r4, #20]
   d6b18:	6818      	ldr	r0, [r3, #0]
   d6b1a:	f7fe fe3f 	bl	d579c <sock_close>
   d6b1e:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d6b20:	f04f 32ff 	mov.w	r2, #4294967295
   d6b24:	601a      	str	r2, [r3, #0]
   d6b26:	e002      	b.n	d6b2e <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   d6b28:	f7ff ff18 	bl	d695c <_ZN9TCPClient12flush_bufferEv>
   d6b2c:	e7bb      	b.n	d6aa6 <_ZN9TCPClient9availableEv+0x16>
   d6b2e:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   d6b30:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d6b34:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   d6b38:	1a18      	subs	r0, r3, r0
}
   d6b3a:	b00b      	add	sp, #44	; 0x2c
   d6b3c:	bd30      	pop	{r4, r5, pc}
   d6b3e:	bf00      	nop
   d6b40:	000d9d53 	.word	0x000d9d53
   d6b44:	000d9d4c 	.word	0x000d9d4c

000d6b48 <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d6b48:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d6b4a:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d6b4c:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   d6b4e:	6001      	str	r1, [r0, #0]
   d6b50:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   d6b54:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   d6b58:	3088      	adds	r0, #136	; 0x88
   d6b5a:	f7ff faeb 	bl	d6134 <_ZN9IPAddressC1Ev>
}
   d6b5e:	4620      	mov	r0, r4
   d6b60:	bd10      	pop	{r4, pc}
	...

000d6b64 <_ZN9TCPClientC1Ei>:
   d6b64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d6b68:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6b6a:	2300      	movs	r3, #0
   d6b6c:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   d6b6e:	4a14      	ldr	r2, [pc, #80]	; (d6bc0 <_ZN9TCPClientC1Ei+0x5c>)
   d6b70:	6043      	str	r3, [r0, #4]
   d6b72:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d6b74:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d6b76:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d6b78:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6b7a:	20a0      	movs	r0, #160	; 0xa0
   d6b7c:	460e      	mov	r6, r1
   d6b7e:	f7fd fa8c 	bl	d409a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d6b82:	4605      	mov	r5, r0
   d6b84:	b110      	cbz	r0, d6b8c <_ZN9TCPClientC1Ei+0x28>
   d6b86:	4631      	mov	r1, r6
   d6b88:	f7ff ffde 	bl	d6b48 <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6b8c:	2014      	movs	r0, #20
   d6b8e:	f7fd fa84 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d6b92:	4603      	mov	r3, r0
   d6b94:	b128      	cbz	r0, d6ba2 <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d6b96:	2201      	movs	r2, #1
   d6b98:	6042      	str	r2, [r0, #4]
   d6b9a:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d6b9c:	4a09      	ldr	r2, [pc, #36]	; (d6bc4 <_ZN9TCPClientC1Ei+0x60>)
   d6b9e:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d6ba0:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d6ba2:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d6ba4:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d6ba6:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d6ba8:	b128      	cbz	r0, d6bb6 <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d6baa:	6843      	ldr	r3, [r0, #4]
   d6bac:	3b01      	subs	r3, #1
   d6bae:	6043      	str	r3, [r0, #4]
   d6bb0:	b90b      	cbnz	r3, d6bb6 <_ZN9TCPClientC1Ei+0x52>
   d6bb2:	f7ff fddf 	bl	d6774 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   d6bb6:	4620      	mov	r0, r4
   d6bb8:	f7ff fed0 	bl	d695c <_ZN9TCPClient12flush_bufferEv>
}
   d6bbc:	4620      	mov	r0, r4
   d6bbe:	bd70      	pop	{r4, r5, r6, pc}
   d6bc0:	000d9d08 	.word	0x000d9d08
   d6bc4:	000d9cec 	.word	0x000d9cec

000d6bc8 <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d6bc8:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d6bca:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d6bce:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d6bd0:	f7ff ffc8 	bl	d6b64 <_ZN9TCPClientC1Ei>
}
   d6bd4:	4620      	mov	r0, r4
   d6bd6:	bd10      	pop	{r4, pc}

000d6bd8 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   d6bd8:	b510      	push	{r4, lr}
   d6bda:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d6bdc:	6800      	ldr	r0, [r0, #0]
   d6bde:	2800      	cmp	r0, #0
   d6be0:	db01      	blt.n	d6be6 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d6be2:	f7fe fddb 	bl	d579c <sock_close>
    }
}
   d6be6:	4620      	mov	r0, r4
   d6be8:	bd10      	pop	{r4, pc}

000d6bea <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d6bea:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d6bec:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   d6bee:	4620      	mov	r0, r4
   d6bf0:	f7ff fff2 	bl	d6bd8 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   d6bf4:	b124      	cbz	r4, d6c00 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d6bf6:	4620      	mov	r0, r4
   d6bf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d6bfc:	f7fd ba4f 	b.w	d409e <_ZdlPv>
   d6c00:	bd10      	pop	{r4, pc}

000d6c02 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d6c02:	2200      	movs	r2, #0
   d6c04:	4611      	mov	r1, r2
   d6c06:	6840      	ldr	r0, [r0, #4]
   d6c08:	f7fe be7c 	b.w	d5904 <network_ready>

000d6c0c <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6c0c:	2200      	movs	r2, #0
   d6c0e:	4611      	mov	r1, r2
   d6c10:	6840      	ldr	r0, [r0, #4]
   d6c12:	f7fe be97 	b.w	d5944 <network_listening>

000d6c16 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6c16:	2200      	movs	r2, #0
   d6c18:	4611      	mov	r1, r2
   d6c1a:	6840      	ldr	r0, [r0, #4]
   d6c1c:	f7fe bea2 	b.w	d5964 <network_get_listen_timeout>

000d6c20 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6c20:	2200      	movs	r2, #0
   d6c22:	6840      	ldr	r0, [r0, #4]
   d6c24:	f7fe be96 	b.w	d5954 <network_set_listen_timeout>

000d6c28 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6c28:	2200      	movs	r2, #0
   d6c2a:	f081 0101 	eor.w	r1, r1, #1
   d6c2e:	6840      	ldr	r0, [r0, #4]
   d6c30:	f7fe be80 	b.w	d5934 <network_listen>

000d6c34 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d6c34:	2300      	movs	r3, #0
   d6c36:	461a      	mov	r2, r3
   d6c38:	4619      	mov	r1, r3
   d6c3a:	6840      	ldr	r0, [r0, #4]
   d6c3c:	f7fe be72 	b.w	d5924 <network_off>

000d6c40 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d6c40:	2300      	movs	r3, #0
   d6c42:	461a      	mov	r2, r3
   d6c44:	4619      	mov	r1, r3
   d6c46:	6840      	ldr	r0, [r0, #4]
   d6c48:	f7fe be64 	b.w	d5914 <network_on>

000d6c4c <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6c4c:	2200      	movs	r2, #0
   d6c4e:	4611      	mov	r1, r2
   d6c50:	6840      	ldr	r0, [r0, #4]
   d6c52:	f7fe be47 	b.w	d58e4 <network_connecting>

000d6c56 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6c56:	2200      	movs	r2, #0
   d6c58:	2102      	movs	r1, #2
   d6c5a:	6840      	ldr	r0, [r0, #4]
   d6c5c:	f7fe be4a 	b.w	d58f4 <network_disconnect>

000d6c60 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6c60:	2300      	movs	r3, #0
   d6c62:	461a      	mov	r2, r3
   d6c64:	6840      	ldr	r0, [r0, #4]
   d6c66:	f7fe be35 	b.w	d58d4 <network_connect>
	...

000d6c6c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d6c6c:	4b02      	ldr	r3, [pc, #8]	; (d6c78 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d6c6e:	2204      	movs	r2, #4
   d6c70:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d6c72:	4a02      	ldr	r2, [pc, #8]	; (d6c7c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d6c74:	601a      	str	r2, [r3, #0]
   d6c76:	4770      	bx	lr
   d6c78:	2003e720 	.word	0x2003e720
   d6c7c:	000d9d6c 	.word	0x000d9d6c

000d6c80 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6c80:	2300      	movs	r3, #0
   d6c82:	461a      	mov	r2, r3
   d6c84:	6840      	ldr	r0, [r0, #4]
   d6c86:	f7fe be25 	b.w	d58d4 <network_connect>

000d6c8a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d6c8a:	2200      	movs	r2, #0
   d6c8c:	2102      	movs	r1, #2
   d6c8e:	6840      	ldr	r0, [r0, #4]
   d6c90:	f7fe be30 	b.w	d58f4 <network_disconnect>

000d6c94 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6c94:	2200      	movs	r2, #0
   d6c96:	4611      	mov	r1, r2
   d6c98:	6840      	ldr	r0, [r0, #4]
   d6c9a:	f7fe be23 	b.w	d58e4 <network_connecting>

000d6c9e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d6c9e:	2200      	movs	r2, #0
   d6ca0:	4611      	mov	r1, r2
   d6ca2:	6840      	ldr	r0, [r0, #4]
   d6ca4:	f7fe be2e 	b.w	d5904 <network_ready>

000d6ca8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6ca8:	2300      	movs	r3, #0
   d6caa:	461a      	mov	r2, r3
   d6cac:	4619      	mov	r1, r3
   d6cae:	6840      	ldr	r0, [r0, #4]
   d6cb0:	f7fe be30 	b.w	d5914 <network_on>

000d6cb4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6cb4:	2300      	movs	r3, #0
   d6cb6:	461a      	mov	r2, r3
   d6cb8:	4619      	mov	r1, r3
   d6cba:	6840      	ldr	r0, [r0, #4]
   d6cbc:	f7fe be32 	b.w	d5924 <network_off>

000d6cc0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6cc0:	2200      	movs	r2, #0
   d6cc2:	f081 0101 	eor.w	r1, r1, #1
   d6cc6:	6840      	ldr	r0, [r0, #4]
   d6cc8:	f7fe be34 	b.w	d5934 <network_listen>

000d6ccc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6ccc:	2200      	movs	r2, #0
   d6cce:	6840      	ldr	r0, [r0, #4]
   d6cd0:	f7fe be40 	b.w	d5954 <network_set_listen_timeout>

000d6cd4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6cd4:	2200      	movs	r2, #0
   d6cd6:	4611      	mov	r1, r2
   d6cd8:	6840      	ldr	r0, [r0, #4]
   d6cda:	f7fe be43 	b.w	d5964 <network_get_listen_timeout>

000d6cde <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6cde:	2200      	movs	r2, #0
   d6ce0:	4611      	mov	r1, r2
   d6ce2:	6840      	ldr	r0, [r0, #4]
   d6ce4:	f7fe be2e 	b.w	d5944 <network_listening>

000d6ce8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6ce8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6cec:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d6cee:	b095      	sub	sp, #84	; 0x54
   d6cf0:	4616      	mov	r6, r2
   d6cf2:	460d      	mov	r5, r1
   d6cf4:	4607      	mov	r7, r0
    IPAddress addr;
   d6cf6:	f7ff fa1d 	bl	d6134 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d6cfa:	4621      	mov	r1, r4
   d6cfc:	2220      	movs	r2, #32
   d6cfe:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6d00:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6d02:	f002 fbbf 	bl	d9484 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d6d06:	2340      	movs	r3, #64	; 0x40
   d6d08:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6d0a:	4621      	mov	r1, r4
   d6d0c:	466b      	mov	r3, sp
   d6d0e:	aa0c      	add	r2, sp, #48	; 0x30
   d6d10:	4630      	mov	r0, r6
   d6d12:	f7fe fbd3 	bl	d54bc <netdb_getaddrinfo>
    if (!r) {
   d6d16:	4604      	mov	r4, r0
   d6d18:	2800      	cmp	r0, #0
   d6d1a:	d144      	bne.n	d6da6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6d1c:	4602      	mov	r2, r0
   d6d1e:	2101      	movs	r1, #1
   d6d20:	6868      	ldr	r0, [r5, #4]
   d6d22:	f7fe fdef 	bl	d5904 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6d26:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6d28:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6d2a:	4622      	mov	r2, r4
   d6d2c:	6868      	ldr	r0, [r5, #4]
   d6d2e:	f7fe fde9 	bl	d5904 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6d32:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6d34:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d6d36:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6d38:	2e00      	cmp	r6, #0
   d6d3a:	d034      	beq.n	d6da6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d6d3c:	2900      	cmp	r1, #0
   d6d3e:	d132      	bne.n	d6da6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6d40:	6873      	ldr	r3, [r6, #4]
   d6d42:	2b02      	cmp	r3, #2
   d6d44:	d002      	beq.n	d6d4c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d6d46:	2b0a      	cmp	r3, #10
   d6d48:	d009      	beq.n	d6d5e <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d6d4a:	e02a      	b.n	d6da2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d6d4c:	f1b8 0f00 	cmp.w	r8, #0
   d6d50:	d027      	beq.n	d6da2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6d52:	6971      	ldr	r1, [r6, #20]
   d6d54:	4638      	mov	r0, r7
   d6d56:	3104      	adds	r1, #4
   d6d58:	f7ff fa2f 	bl	d61ba <_ZN9IPAddressaSEPKh>
   d6d5c:	e020      	b.n	d6da0 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6d5e:	f1b9 0f00 	cmp.w	r9, #0
   d6d62:	d01e      	beq.n	d6da2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d6d64:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d6d66:	2211      	movs	r2, #17
   d6d68:	a801      	add	r0, sp, #4
   d6d6a:	f002 fb8b 	bl	d9484 <memset>
                    a.v = 6;
   d6d6e:	2306      	movs	r3, #6
   d6d70:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6d74:	ad01      	add	r5, sp, #4
   d6d76:	f104 0308 	add.w	r3, r4, #8
   d6d7a:	3418      	adds	r4, #24
   d6d7c:	6818      	ldr	r0, [r3, #0]
   d6d7e:	6859      	ldr	r1, [r3, #4]
   d6d80:	462a      	mov	r2, r5
   d6d82:	c203      	stmia	r2!, {r0, r1}
   d6d84:	3308      	adds	r3, #8
   d6d86:	42a3      	cmp	r3, r4
   d6d88:	4615      	mov	r5, r2
   d6d8a:	d1f7      	bne.n	d6d7c <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d6d8c:	a901      	add	r1, sp, #4
   d6d8e:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6d90:	ad07      	add	r5, sp, #28
   d6d92:	f7ff f9dd 	bl	d6150 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6d96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6d98:	1d3c      	adds	r4, r7, #4
   d6d9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6d9c:	682b      	ldr	r3, [r5, #0]
   d6d9e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d6da0:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6da2:	69f6      	ldr	r6, [r6, #28]
   d6da4:	e7c8      	b.n	d6d38 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6da6:	9800      	ldr	r0, [sp, #0]
   d6da8:	f7fe fb80 	bl	d54ac <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6dac:	4638      	mov	r0, r7
   d6dae:	b015      	add	sp, #84	; 0x54
   d6db0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6db4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6db4:	4b02      	ldr	r3, [pc, #8]	; (d6dc0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6db6:	4a03      	ldr	r2, [pc, #12]	; (d6dc4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6db8:	601a      	str	r2, [r3, #0]
   d6dba:	2200      	movs	r2, #0
   d6dbc:	605a      	str	r2, [r3, #4]
   d6dbe:	4770      	bx	lr
   d6dc0:	2003e728 	.word	0x2003e728
   d6dc4:	000d9da0 	.word	0x000d9da0

000d6dc8 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d6dc8:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d6dca:	4e18      	ldr	r6, [pc, #96]	; (d6e2c <pinAvailable+0x64>)
   d6dcc:	6831      	ldr	r1, [r6, #0]
   d6dce:	f011 0501 	ands.w	r5, r1, #1
   d6dd2:	4604      	mov	r4, r0
   d6dd4:	d10a      	bne.n	d6dec <pinAvailable+0x24>
   d6dd6:	4630      	mov	r0, r6
   d6dd8:	f7fd f970 	bl	d40bc <__cxa_guard_acquire>
   d6ddc:	b130      	cbz	r0, d6dec <pinAvailable+0x24>
   d6dde:	4629      	mov	r1, r5
   d6de0:	4813      	ldr	r0, [pc, #76]	; (d6e30 <pinAvailable+0x68>)
   d6de2:	f7fe fe3b 	bl	d5a5c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d6de6:	4630      	mov	r0, r6
   d6de8:	f7fd f96d 	bl	d40c6 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d6dec:	4810      	ldr	r0, [pc, #64]	; (d6e30 <pinAvailable+0x68>)
   d6dee:	f7fe fedf 	bl	d5bb0 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d6df2:	b128      	cbz	r0, d6e00 <pinAvailable+0x38>
   d6df4:	f1a4 030b 	sub.w	r3, r4, #11
   d6df8:	2b02      	cmp	r3, #2
   d6dfa:	d801      	bhi.n	d6e00 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d6dfc:	2000      	movs	r0, #0
   d6dfe:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d6e00:	f000 f870 	bl	d6ee4 <_Z19__fetch_global_Wirev>
   d6e04:	f7ff fb74 	bl	d64f0 <_ZN7TwoWire9isEnabledEv>
   d6e08:	b108      	cbz	r0, d6e0e <pinAvailable+0x46>
   d6e0a:	2c01      	cmp	r4, #1
   d6e0c:	d9f6      	bls.n	d6dfc <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d6e0e:	f7ff fac9 	bl	d63a4 <_Z22__fetch_global_Serial1v>
   d6e12:	f7ff fac3 	bl	d639c <_ZN11USARTSerial9isEnabledEv>
   d6e16:	b118      	cbz	r0, d6e20 <pinAvailable+0x58>
   d6e18:	f1a4 0309 	sub.w	r3, r4, #9
   d6e1c:	2b01      	cmp	r3, #1
   d6e1e:	d9ed      	bls.n	d6dfc <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d6e20:	2c23      	cmp	r4, #35	; 0x23
   d6e22:	bf8c      	ite	hi
   d6e24:	2000      	movhi	r0, #0
   d6e26:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d6e28:	bd70      	pop	{r4, r5, r6, pc}
   d6e2a:	bf00      	nop
   d6e2c:	2003e3d0 	.word	0x2003e3d0
   d6e30:	2003e3d4 	.word	0x2003e3d4

000d6e34 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6e34:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d6e36:	b538      	push	{r3, r4, r5, lr}
   d6e38:	4604      	mov	r4, r0
   d6e3a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6e3c:	d80a      	bhi.n	d6e54 <pinMode+0x20>
   d6e3e:	29ff      	cmp	r1, #255	; 0xff
   d6e40:	d008      	beq.n	d6e54 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6e42:	f7ff ffc1 	bl	d6dc8 <pinAvailable>
   d6e46:	b128      	cbz	r0, d6e54 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6e48:	4629      	mov	r1, r5
   d6e4a:	4620      	mov	r0, r4
}
   d6e4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6e50:	f7fe bb44 	b.w	d54dc <HAL_Pin_Mode>
   d6e54:	bd38      	pop	{r3, r4, r5, pc}

000d6e56 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d6e56:	b538      	push	{r3, r4, r5, lr}
   d6e58:	4604      	mov	r4, r0
   d6e5a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6e5c:	f7fe fb46 	bl	d54ec <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6e60:	28ff      	cmp	r0, #255	; 0xff
   d6e62:	d010      	beq.n	d6e86 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d6e64:	2806      	cmp	r0, #6
   d6e66:	d804      	bhi.n	d6e72 <digitalWrite+0x1c>
   d6e68:	234d      	movs	r3, #77	; 0x4d
   d6e6a:	fa23 f000 	lsr.w	r0, r3, r0
   d6e6e:	07c3      	lsls	r3, r0, #31
   d6e70:	d409      	bmi.n	d6e86 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d6e72:	4620      	mov	r0, r4
   d6e74:	f7ff ffa8 	bl	d6dc8 <pinAvailable>
   d6e78:	b128      	cbz	r0, d6e86 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6e7a:	4629      	mov	r1, r5
   d6e7c:	4620      	mov	r0, r4
}
   d6e7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6e82:	f7fe bb3b 	b.w	d54fc <HAL_GPIO_Write>
   d6e86:	bd38      	pop	{r3, r4, r5, pc}

000d6e88 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d6e88:	b510      	push	{r4, lr}
   d6e8a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6e8c:	f7fe fb2e 	bl	d54ec <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d6e90:	3804      	subs	r0, #4
   d6e92:	b2c0      	uxtb	r0, r0
   d6e94:	2801      	cmp	r0, #1
   d6e96:	d908      	bls.n	d6eaa <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d6e98:	4620      	mov	r0, r4
   d6e9a:	f7ff ff95 	bl	d6dc8 <pinAvailable>
   d6e9e:	b120      	cbz	r0, d6eaa <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d6ea0:	4620      	mov	r0, r4
}
   d6ea2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d6ea6:	f7fe bb31 	b.w	d550c <HAL_GPIO_Read>
}
   d6eaa:	2000      	movs	r0, #0
   d6eac:	bd10      	pop	{r4, pc}
	...

000d6eb0 <_Z17acquireWireBufferv>:
   d6eb0:	b570      	push	{r4, r5, r6, lr}
   d6eb2:	4604      	mov	r4, r0
   d6eb4:	2514      	movs	r5, #20
   d6eb6:	462a      	mov	r2, r5
   d6eb8:	4e09      	ldr	r6, [pc, #36]	; (d6ee0 <_Z17acquireWireBufferv+0x30>)
   d6eba:	2100      	movs	r1, #0
   d6ebc:	f002 fae2 	bl	d9484 <memset>
   d6ec0:	8025      	strh	r5, [r4, #0]
   d6ec2:	2520      	movs	r5, #32
   d6ec4:	4631      	mov	r1, r6
   d6ec6:	60a5      	str	r5, [r4, #8]
   d6ec8:	6125      	str	r5, [r4, #16]
   d6eca:	4628      	mov	r0, r5
   d6ecc:	f000 f840 	bl	d6f50 <_ZnajRKSt9nothrow_t>
   d6ed0:	4631      	mov	r1, r6
   d6ed2:	6060      	str	r0, [r4, #4]
   d6ed4:	4628      	mov	r0, r5
   d6ed6:	f000 f83b 	bl	d6f50 <_ZnajRKSt9nothrow_t>
   d6eda:	60e0      	str	r0, [r4, #12]
   d6edc:	4620      	mov	r0, r4
   d6ede:	bd70      	pop	{r4, r5, r6, pc}
   d6ee0:	000d9dcc 	.word	0x000d9dcc

000d6ee4 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d6ee4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6ee6:	4d0e      	ldr	r5, [pc, #56]	; (d6f20 <_Z19__fetch_global_Wirev+0x3c>)
   d6ee8:	6829      	ldr	r1, [r5, #0]
   d6eea:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d6eee:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6ef0:	d113      	bne.n	d6f1a <_Z19__fetch_global_Wirev+0x36>
   d6ef2:	4628      	mov	r0, r5
   d6ef4:	f7fd f8e2 	bl	d40bc <__cxa_guard_acquire>
   d6ef8:	b178      	cbz	r0, d6f1a <_Z19__fetch_global_Wirev+0x36>
   d6efa:	a801      	add	r0, sp, #4
   d6efc:	f7ff ffd8 	bl	d6eb0 <_Z17acquireWireBufferv>
   d6f00:	aa01      	add	r2, sp, #4
   d6f02:	4621      	mov	r1, r4
   d6f04:	4807      	ldr	r0, [pc, #28]	; (d6f24 <_Z19__fetch_global_Wirev+0x40>)
   d6f06:	f7ff fa9f 	bl	d6448 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d6f0a:	4628      	mov	r0, r5
   d6f0c:	f7fd f8db 	bl	d40c6 <__cxa_guard_release>
   d6f10:	4a05      	ldr	r2, [pc, #20]	; (d6f28 <_Z19__fetch_global_Wirev+0x44>)
   d6f12:	4906      	ldr	r1, [pc, #24]	; (d6f2c <_Z19__fetch_global_Wirev+0x48>)
   d6f14:	4803      	ldr	r0, [pc, #12]	; (d6f24 <_Z19__fetch_global_Wirev+0x40>)
   d6f16:	f000 f80b 	bl	d6f30 <__aeabi_atexit>
	return wire;
}
   d6f1a:	4802      	ldr	r0, [pc, #8]	; (d6f24 <_Z19__fetch_global_Wirev+0x40>)
   d6f1c:	b007      	add	sp, #28
   d6f1e:	bd30      	pop	{r4, r5, pc}
   d6f20:	2003e734 	.word	0x2003e734
   d6f24:	2003e738 	.word	0x2003e738
   d6f28:	2003e264 	.word	0x2003e264
   d6f2c:	000d63f1 	.word	0x000d63f1

000d6f30 <__aeabi_atexit>:
   d6f30:	460b      	mov	r3, r1
   d6f32:	4601      	mov	r1, r0
   d6f34:	4618      	mov	r0, r3
   d6f36:	f002 ba71 	b.w	d941c <__cxa_atexit>
	...

000d6f3c <_ZSt15get_new_handlerv>:
   d6f3c:	4b02      	ldr	r3, [pc, #8]	; (d6f48 <_ZSt15get_new_handlerv+0xc>)
   d6f3e:	6818      	ldr	r0, [r3, #0]
   d6f40:	f3bf 8f5f 	dmb	sy
   d6f44:	4770      	bx	lr
   d6f46:	bf00      	nop
   d6f48:	2003e74c 	.word	0x2003e74c

000d6f4c <_ZdlPvj>:
   d6f4c:	f7fd b8a7 	b.w	d409e <_ZdlPv>

000d6f50 <_ZnajRKSt9nothrow_t>:
   d6f50:	f000 b800 	b.w	d6f54 <_ZnwjRKSt9nothrow_t>

000d6f54 <_ZnwjRKSt9nothrow_t>:
   d6f54:	b510      	push	{r4, lr}
   d6f56:	2800      	cmp	r0, #0
   d6f58:	bf14      	ite	ne
   d6f5a:	4604      	movne	r4, r0
   d6f5c:	2401      	moveq	r4, #1
   d6f5e:	4620      	mov	r0, r4
   d6f60:	f7fe fd10 	bl	d5984 <malloc>
   d6f64:	b920      	cbnz	r0, d6f70 <_ZnwjRKSt9nothrow_t+0x1c>
   d6f66:	f7ff ffe9 	bl	d6f3c <_ZSt15get_new_handlerv>
   d6f6a:	b108      	cbz	r0, d6f70 <_ZnwjRKSt9nothrow_t+0x1c>
   d6f6c:	4780      	blx	r0
   d6f6e:	e7f6      	b.n	d6f5e <_ZnwjRKSt9nothrow_t+0xa>
   d6f70:	bd10      	pop	{r4, pc}
	...

000d6f74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6f74:	4b18      	ldr	r3, [pc, #96]	; (d6fd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6f76:	681a      	ldr	r2, [r3, #0]
   d6f78:	07d1      	lsls	r1, r2, #31
   d6f7a:	bf5c      	itt	pl
   d6f7c:	2201      	movpl	r2, #1
   d6f7e:	601a      	strpl	r2, [r3, #0]
   d6f80:	4b16      	ldr	r3, [pc, #88]	; (d6fdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6f82:	681a      	ldr	r2, [r3, #0]
   d6f84:	07d2      	lsls	r2, r2, #31
   d6f86:	bf5c      	itt	pl
   d6f88:	2201      	movpl	r2, #1
   d6f8a:	601a      	strpl	r2, [r3, #0]
   d6f8c:	4b14      	ldr	r3, [pc, #80]	; (d6fe0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6f8e:	681a      	ldr	r2, [r3, #0]
   d6f90:	07d0      	lsls	r0, r2, #31
   d6f92:	bf5c      	itt	pl
   d6f94:	2201      	movpl	r2, #1
   d6f96:	601a      	strpl	r2, [r3, #0]
   d6f98:	4b12      	ldr	r3, [pc, #72]	; (d6fe4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6f9a:	681a      	ldr	r2, [r3, #0]
   d6f9c:	07d1      	lsls	r1, r2, #31
   d6f9e:	bf5c      	itt	pl
   d6fa0:	2201      	movpl	r2, #1
   d6fa2:	601a      	strpl	r2, [r3, #0]
   d6fa4:	4b10      	ldr	r3, [pc, #64]	; (d6fe8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6fa6:	681a      	ldr	r2, [r3, #0]
   d6fa8:	07d2      	lsls	r2, r2, #31
   d6faa:	bf5c      	itt	pl
   d6fac:	2201      	movpl	r2, #1
   d6fae:	601a      	strpl	r2, [r3, #0]
   d6fb0:	4b0e      	ldr	r3, [pc, #56]	; (d6fec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6fb2:	681a      	ldr	r2, [r3, #0]
   d6fb4:	07d0      	lsls	r0, r2, #31
   d6fb6:	bf5c      	itt	pl
   d6fb8:	2201      	movpl	r2, #1
   d6fba:	601a      	strpl	r2, [r3, #0]
   d6fbc:	4b0c      	ldr	r3, [pc, #48]	; (d6ff0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6fbe:	681a      	ldr	r2, [r3, #0]
   d6fc0:	07d1      	lsls	r1, r2, #31
   d6fc2:	bf5c      	itt	pl
   d6fc4:	2201      	movpl	r2, #1
   d6fc6:	601a      	strpl	r2, [r3, #0]
   d6fc8:	4b0a      	ldr	r3, [pc, #40]	; (d6ff4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6fca:	681a      	ldr	r2, [r3, #0]
   d6fcc:	07d2      	lsls	r2, r2, #31
   d6fce:	bf5c      	itt	pl
   d6fd0:	2201      	movpl	r2, #1
   d6fd2:	601a      	strpl	r2, [r3, #0]
   d6fd4:	4770      	bx	lr
   d6fd6:	bf00      	nop
   d6fd8:	2003e76c 	.word	0x2003e76c
   d6fdc:	2003e768 	.word	0x2003e768
   d6fe0:	2003e764 	.word	0x2003e764
   d6fe4:	2003e760 	.word	0x2003e760
   d6fe8:	2003e75c 	.word	0x2003e75c
   d6fec:	2003e758 	.word	0x2003e758
   d6ff0:	2003e754 	.word	0x2003e754
   d6ff4:	2003e750 	.word	0x2003e750

000d6ff8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d6ff8:	4b24      	ldr	r3, [pc, #144]	; (d708c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d6ffa:	681a      	ldr	r2, [r3, #0]
   d6ffc:	07d0      	lsls	r0, r2, #31
   d6ffe:	bf5c      	itt	pl
   d7000:	2201      	movpl	r2, #1
   d7002:	601a      	strpl	r2, [r3, #0]
   d7004:	4b22      	ldr	r3, [pc, #136]	; (d7090 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d7006:	681a      	ldr	r2, [r3, #0]
   d7008:	07d1      	lsls	r1, r2, #31
   d700a:	bf5c      	itt	pl
   d700c:	2201      	movpl	r2, #1
   d700e:	601a      	strpl	r2, [r3, #0]
   d7010:	4b20      	ldr	r3, [pc, #128]	; (d7094 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d7012:	681a      	ldr	r2, [r3, #0]
   d7014:	07d2      	lsls	r2, r2, #31
   d7016:	bf5c      	itt	pl
   d7018:	2201      	movpl	r2, #1
   d701a:	601a      	strpl	r2, [r3, #0]
   d701c:	4b1e      	ldr	r3, [pc, #120]	; (d7098 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d701e:	681a      	ldr	r2, [r3, #0]
   d7020:	07d0      	lsls	r0, r2, #31
   d7022:	bf5c      	itt	pl
   d7024:	2201      	movpl	r2, #1
   d7026:	601a      	strpl	r2, [r3, #0]
   d7028:	4b1c      	ldr	r3, [pc, #112]	; (d709c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d702a:	681a      	ldr	r2, [r3, #0]
   d702c:	07d1      	lsls	r1, r2, #31
   d702e:	bf5c      	itt	pl
   d7030:	2201      	movpl	r2, #1
   d7032:	601a      	strpl	r2, [r3, #0]
   d7034:	4b1a      	ldr	r3, [pc, #104]	; (d70a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d7036:	681a      	ldr	r2, [r3, #0]
   d7038:	07d2      	lsls	r2, r2, #31
   d703a:	bf5c      	itt	pl
   d703c:	2201      	movpl	r2, #1
   d703e:	601a      	strpl	r2, [r3, #0]
   d7040:	4b18      	ldr	r3, [pc, #96]	; (d70a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d7042:	681a      	ldr	r2, [r3, #0]
   d7044:	07d0      	lsls	r0, r2, #31
   d7046:	bf5c      	itt	pl
   d7048:	2201      	movpl	r2, #1
   d704a:	601a      	strpl	r2, [r3, #0]
   d704c:	4b16      	ldr	r3, [pc, #88]	; (d70a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d704e:	681a      	ldr	r2, [r3, #0]
   d7050:	07d1      	lsls	r1, r2, #31
   d7052:	bf5c      	itt	pl
   d7054:	2201      	movpl	r2, #1
   d7056:	601a      	strpl	r2, [r3, #0]
   d7058:	4b14      	ldr	r3, [pc, #80]	; (d70ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d705a:	681a      	ldr	r2, [r3, #0]
   d705c:	07d2      	lsls	r2, r2, #31
   d705e:	bf5c      	itt	pl
   d7060:	2201      	movpl	r2, #1
   d7062:	601a      	strpl	r2, [r3, #0]
   d7064:	4b12      	ldr	r3, [pc, #72]	; (d70b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d7066:	681a      	ldr	r2, [r3, #0]
   d7068:	07d0      	lsls	r0, r2, #31
   d706a:	bf5c      	itt	pl
   d706c:	2201      	movpl	r2, #1
   d706e:	601a      	strpl	r2, [r3, #0]
   d7070:	4b10      	ldr	r3, [pc, #64]	; (d70b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d7072:	681a      	ldr	r2, [r3, #0]
   d7074:	07d1      	lsls	r1, r2, #31
   d7076:	bf5c      	itt	pl
   d7078:	2201      	movpl	r2, #1
   d707a:	601a      	strpl	r2, [r3, #0]
   d707c:	4b0e      	ldr	r3, [pc, #56]	; (d70b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d707e:	681a      	ldr	r2, [r3, #0]
   d7080:	07d2      	lsls	r2, r2, #31
   d7082:	bf5c      	itt	pl
   d7084:	2201      	movpl	r2, #1
   d7086:	601a      	strpl	r2, [r3, #0]
   d7088:	4770      	bx	lr
   d708a:	bf00      	nop
   d708c:	2003e79c 	.word	0x2003e79c
   d7090:	2003e798 	.word	0x2003e798
   d7094:	2003e794 	.word	0x2003e794
   d7098:	2003e790 	.word	0x2003e790
   d709c:	2003e78c 	.word	0x2003e78c
   d70a0:	2003e788 	.word	0x2003e788
   d70a4:	2003e784 	.word	0x2003e784
   d70a8:	2003e780 	.word	0x2003e780
   d70ac:	2003e77c 	.word	0x2003e77c
   d70b0:	2003e778 	.word	0x2003e778
   d70b4:	2003e774 	.word	0x2003e774
   d70b8:	2003e770 	.word	0x2003e770

000d70bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d70bc:	4b24      	ldr	r3, [pc, #144]	; (d7150 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d70be:	681a      	ldr	r2, [r3, #0]
   d70c0:	07d0      	lsls	r0, r2, #31
   d70c2:	bf5c      	itt	pl
   d70c4:	2201      	movpl	r2, #1
   d70c6:	601a      	strpl	r2, [r3, #0]
   d70c8:	4b22      	ldr	r3, [pc, #136]	; (d7154 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d70ca:	681a      	ldr	r2, [r3, #0]
   d70cc:	07d1      	lsls	r1, r2, #31
   d70ce:	bf5c      	itt	pl
   d70d0:	2201      	movpl	r2, #1
   d70d2:	601a      	strpl	r2, [r3, #0]
   d70d4:	4b20      	ldr	r3, [pc, #128]	; (d7158 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d70d6:	681a      	ldr	r2, [r3, #0]
   d70d8:	07d2      	lsls	r2, r2, #31
   d70da:	bf5c      	itt	pl
   d70dc:	2201      	movpl	r2, #1
   d70de:	601a      	strpl	r2, [r3, #0]
   d70e0:	4b1e      	ldr	r3, [pc, #120]	; (d715c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d70e2:	681a      	ldr	r2, [r3, #0]
   d70e4:	07d0      	lsls	r0, r2, #31
   d70e6:	bf5c      	itt	pl
   d70e8:	2201      	movpl	r2, #1
   d70ea:	601a      	strpl	r2, [r3, #0]
   d70ec:	4b1c      	ldr	r3, [pc, #112]	; (d7160 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d70ee:	681a      	ldr	r2, [r3, #0]
   d70f0:	07d1      	lsls	r1, r2, #31
   d70f2:	bf5c      	itt	pl
   d70f4:	2201      	movpl	r2, #1
   d70f6:	601a      	strpl	r2, [r3, #0]
   d70f8:	4b1a      	ldr	r3, [pc, #104]	; (d7164 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d70fa:	681a      	ldr	r2, [r3, #0]
   d70fc:	07d2      	lsls	r2, r2, #31
   d70fe:	bf5c      	itt	pl
   d7100:	2201      	movpl	r2, #1
   d7102:	601a      	strpl	r2, [r3, #0]
   d7104:	4b18      	ldr	r3, [pc, #96]	; (d7168 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d7106:	681a      	ldr	r2, [r3, #0]
   d7108:	07d0      	lsls	r0, r2, #31
   d710a:	bf5c      	itt	pl
   d710c:	2201      	movpl	r2, #1
   d710e:	601a      	strpl	r2, [r3, #0]
   d7110:	4b16      	ldr	r3, [pc, #88]	; (d716c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d7112:	681a      	ldr	r2, [r3, #0]
   d7114:	07d1      	lsls	r1, r2, #31
   d7116:	bf5c      	itt	pl
   d7118:	2201      	movpl	r2, #1
   d711a:	601a      	strpl	r2, [r3, #0]
   d711c:	4b14      	ldr	r3, [pc, #80]	; (d7170 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d711e:	681a      	ldr	r2, [r3, #0]
   d7120:	07d2      	lsls	r2, r2, #31
   d7122:	bf5c      	itt	pl
   d7124:	2201      	movpl	r2, #1
   d7126:	601a      	strpl	r2, [r3, #0]
   d7128:	4b12      	ldr	r3, [pc, #72]	; (d7174 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d712a:	681a      	ldr	r2, [r3, #0]
   d712c:	07d0      	lsls	r0, r2, #31
   d712e:	bf5c      	itt	pl
   d7130:	2201      	movpl	r2, #1
   d7132:	601a      	strpl	r2, [r3, #0]
   d7134:	4b10      	ldr	r3, [pc, #64]	; (d7178 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d7136:	681a      	ldr	r2, [r3, #0]
   d7138:	07d1      	lsls	r1, r2, #31
   d713a:	bf5c      	itt	pl
   d713c:	2201      	movpl	r2, #1
   d713e:	601a      	strpl	r2, [r3, #0]
   d7140:	4b0e      	ldr	r3, [pc, #56]	; (d717c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d7142:	681a      	ldr	r2, [r3, #0]
   d7144:	07d2      	lsls	r2, r2, #31
   d7146:	bf5c      	itt	pl
   d7148:	2201      	movpl	r2, #1
   d714a:	601a      	strpl	r2, [r3, #0]
   d714c:	4770      	bx	lr
   d714e:	bf00      	nop
   d7150:	2003e7cc 	.word	0x2003e7cc
   d7154:	2003e7c8 	.word	0x2003e7c8
   d7158:	2003e7c4 	.word	0x2003e7c4
   d715c:	2003e7c0 	.word	0x2003e7c0
   d7160:	2003e7bc 	.word	0x2003e7bc
   d7164:	2003e7b8 	.word	0x2003e7b8
   d7168:	2003e7b4 	.word	0x2003e7b4
   d716c:	2003e7b0 	.word	0x2003e7b0
   d7170:	2003e7ac 	.word	0x2003e7ac
   d7174:	2003e7a8 	.word	0x2003e7a8
   d7178:	2003e7a4 	.word	0x2003e7a4
   d717c:	2003e7a0 	.word	0x2003e7a0

000d7180 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7180:	4b18      	ldr	r3, [pc, #96]	; (d71e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d7182:	681a      	ldr	r2, [r3, #0]
   d7184:	07d1      	lsls	r1, r2, #31
   d7186:	bf5c      	itt	pl
   d7188:	2201      	movpl	r2, #1
   d718a:	601a      	strpl	r2, [r3, #0]
   d718c:	4b16      	ldr	r3, [pc, #88]	; (d71e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d718e:	681a      	ldr	r2, [r3, #0]
   d7190:	07d2      	lsls	r2, r2, #31
   d7192:	bf5c      	itt	pl
   d7194:	2201      	movpl	r2, #1
   d7196:	601a      	strpl	r2, [r3, #0]
   d7198:	4b14      	ldr	r3, [pc, #80]	; (d71ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d719a:	681a      	ldr	r2, [r3, #0]
   d719c:	07d0      	lsls	r0, r2, #31
   d719e:	bf5c      	itt	pl
   d71a0:	2201      	movpl	r2, #1
   d71a2:	601a      	strpl	r2, [r3, #0]
   d71a4:	4b12      	ldr	r3, [pc, #72]	; (d71f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d71a6:	681a      	ldr	r2, [r3, #0]
   d71a8:	07d1      	lsls	r1, r2, #31
   d71aa:	bf5c      	itt	pl
   d71ac:	2201      	movpl	r2, #1
   d71ae:	601a      	strpl	r2, [r3, #0]
   d71b0:	4b10      	ldr	r3, [pc, #64]	; (d71f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d71b2:	681a      	ldr	r2, [r3, #0]
   d71b4:	07d2      	lsls	r2, r2, #31
   d71b6:	bf5c      	itt	pl
   d71b8:	2201      	movpl	r2, #1
   d71ba:	601a      	strpl	r2, [r3, #0]
   d71bc:	4b0e      	ldr	r3, [pc, #56]	; (d71f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d71be:	681a      	ldr	r2, [r3, #0]
   d71c0:	07d0      	lsls	r0, r2, #31
   d71c2:	bf5c      	itt	pl
   d71c4:	2201      	movpl	r2, #1
   d71c6:	601a      	strpl	r2, [r3, #0]
   d71c8:	4b0c      	ldr	r3, [pc, #48]	; (d71fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d71ca:	681a      	ldr	r2, [r3, #0]
   d71cc:	07d1      	lsls	r1, r2, #31
   d71ce:	bf5c      	itt	pl
   d71d0:	2201      	movpl	r2, #1
   d71d2:	601a      	strpl	r2, [r3, #0]
   d71d4:	4b0a      	ldr	r3, [pc, #40]	; (d7200 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d71d6:	681a      	ldr	r2, [r3, #0]
   d71d8:	07d2      	lsls	r2, r2, #31
   d71da:	bf5c      	itt	pl
   d71dc:	2201      	movpl	r2, #1
   d71de:	601a      	strpl	r2, [r3, #0]
   d71e0:	4770      	bx	lr
   d71e2:	bf00      	nop
   d71e4:	2003e7ec 	.word	0x2003e7ec
   d71e8:	2003e7e8 	.word	0x2003e7e8
   d71ec:	2003e7e4 	.word	0x2003e7e4
   d71f0:	2003e7e0 	.word	0x2003e7e0
   d71f4:	2003e7dc 	.word	0x2003e7dc
   d71f8:	2003e7d8 	.word	0x2003e7d8
   d71fc:	2003e7d4 	.word	0x2003e7d4
   d7200:	2003e7d0 	.word	0x2003e7d0
   d7204:	00000000 	.word	0x00000000

000d7208 <pow>:
   d7208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d720c:	ed2d 8b02 	vpush	{d8}
   d7210:	f8df a324 	ldr.w	sl, [pc, #804]	; d7538 <pow+0x330>
   d7214:	b08b      	sub	sp, #44	; 0x2c
   d7216:	ec57 6b10 	vmov	r6, r7, d0
   d721a:	ec55 4b11 	vmov	r4, r5, d1
   d721e:	f000 f98f 	bl	d7540 <__ieee754_pow>
   d7222:	f99a 8000 	ldrsb.w	r8, [sl]
   d7226:	eeb0 8a40 	vmov.f32	s16, s0
   d722a:	eef0 8a60 	vmov.f32	s17, s1
   d722e:	f1b8 3fff 	cmp.w	r8, #4294967295
   d7232:	d048      	beq.n	d72c6 <pow+0xbe>
   d7234:	4622      	mov	r2, r4
   d7236:	462b      	mov	r3, r5
   d7238:	4620      	mov	r0, r4
   d723a:	4629      	mov	r1, r5
   d723c:	f001 fd6e 	bl	d8d1c <__aeabi_dcmpun>
   d7240:	4683      	mov	fp, r0
   d7242:	2800      	cmp	r0, #0
   d7244:	d13f      	bne.n	d72c6 <pow+0xbe>
   d7246:	4632      	mov	r2, r6
   d7248:	463b      	mov	r3, r7
   d724a:	4630      	mov	r0, r6
   d724c:	4639      	mov	r1, r7
   d724e:	f001 fd65 	bl	d8d1c <__aeabi_dcmpun>
   d7252:	4681      	mov	r9, r0
   d7254:	2800      	cmp	r0, #0
   d7256:	f040 8090 	bne.w	d737a <pow+0x172>
   d725a:	4630      	mov	r0, r6
   d725c:	4639      	mov	r1, r7
   d725e:	2200      	movs	r2, #0
   d7260:	2300      	movs	r3, #0
   d7262:	f001 fd29 	bl	d8cb8 <__aeabi_dcmpeq>
   d7266:	2800      	cmp	r0, #0
   d7268:	d036      	beq.n	d72d8 <pow+0xd0>
   d726a:	2200      	movs	r2, #0
   d726c:	2300      	movs	r3, #0
   d726e:	4620      	mov	r0, r4
   d7270:	4629      	mov	r1, r5
   d7272:	f001 fd21 	bl	d8cb8 <__aeabi_dcmpeq>
   d7276:	4683      	mov	fp, r0
   d7278:	b1b8      	cbz	r0, d72aa <pow+0xa2>
   d727a:	ed9f 7ba5 	vldr	d7, [pc, #660]	; d7510 <pow+0x308>
   d727e:	2201      	movs	r2, #1
   d7280:	4ba9      	ldr	r3, [pc, #676]	; (d7528 <pow+0x320>)
   d7282:	f8cd 9020 	str.w	r9, [sp, #32]
   d7286:	9200      	str	r2, [sp, #0]
   d7288:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d728c:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d7290:	ed8d 7b06 	vstr	d7, [sp, #24]
   d7294:	9301      	str	r3, [sp, #4]
   d7296:	f1b8 0f00 	cmp.w	r8, #0
   d729a:	d05b      	beq.n	d7354 <pow+0x14c>
   d729c:	ed9f 0b9e 	vldr	d0, [pc, #632]	; d7518 <pow+0x310>
   d72a0:	b00b      	add	sp, #44	; 0x2c
   d72a2:	ecbd 8b02 	vpop	{d8}
   d72a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d72aa:	ec45 4b10 	vmov	d0, r4, r5
   d72ae:	f000 ffa7 	bl	d8200 <finite>
   d72b2:	b140      	cbz	r0, d72c6 <pow+0xbe>
   d72b4:	2200      	movs	r2, #0
   d72b6:	2300      	movs	r3, #0
   d72b8:	4620      	mov	r0, r4
   d72ba:	4629      	mov	r1, r5
   d72bc:	f001 fd06 	bl	d8ccc <__aeabi_dcmplt>
   d72c0:	2800      	cmp	r0, #0
   d72c2:	f040 80c5 	bne.w	d7450 <pow+0x248>
   d72c6:	eeb0 0a48 	vmov.f32	s0, s16
   d72ca:	eef0 0a68 	vmov.f32	s1, s17
   d72ce:	b00b      	add	sp, #44	; 0x2c
   d72d0:	ecbd 8b02 	vpop	{d8}
   d72d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d72d8:	eeb0 0a48 	vmov.f32	s0, s16
   d72dc:	eef0 0a68 	vmov.f32	s1, s17
   d72e0:	f000 ff8e 	bl	d8200 <finite>
   d72e4:	4680      	mov	r8, r0
   d72e6:	2800      	cmp	r0, #0
   d72e8:	d061      	beq.n	d73ae <pow+0x1a6>
   d72ea:	f04f 0800 	mov.w	r8, #0
   d72ee:	f04f 0900 	mov.w	r9, #0
   d72f2:	ec51 0b18 	vmov	r0, r1, d8
   d72f6:	4642      	mov	r2, r8
   d72f8:	464b      	mov	r3, r9
   d72fa:	f001 fcdd 	bl	d8cb8 <__aeabi_dcmpeq>
   d72fe:	2800      	cmp	r0, #0
   d7300:	d0e1      	beq.n	d72c6 <pow+0xbe>
   d7302:	ec47 6b10 	vmov	d0, r6, r7
   d7306:	f000 ff7b 	bl	d8200 <finite>
   d730a:	2800      	cmp	r0, #0
   d730c:	d0db      	beq.n	d72c6 <pow+0xbe>
   d730e:	ec45 4b10 	vmov	d0, r4, r5
   d7312:	f000 ff75 	bl	d8200 <finite>
   d7316:	2800      	cmp	r0, #0
   d7318:	d0d5      	beq.n	d72c6 <pow+0xbe>
   d731a:	f99a 3000 	ldrsb.w	r3, [sl]
   d731e:	4a82      	ldr	r2, [pc, #520]	; (d7528 <pow+0x320>)
   d7320:	9201      	str	r2, [sp, #4]
   d7322:	2104      	movs	r1, #4
   d7324:	2200      	movs	r2, #0
   d7326:	2b02      	cmp	r3, #2
   d7328:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d732c:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d7330:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d7334:	9100      	str	r1, [sp, #0]
   d7336:	9208      	str	r2, [sp, #32]
   d7338:	d003      	beq.n	d7342 <pow+0x13a>
   d733a:	4668      	mov	r0, sp
   d733c:	f000 ff68 	bl	d8210 <matherr>
   d7340:	b970      	cbnz	r0, d7360 <pow+0x158>
   d7342:	f7fe fb3f 	bl	d59c4 <__errno>
   d7346:	2322      	movs	r3, #34	; 0x22
   d7348:	6003      	str	r3, [r0, #0]
   d734a:	e009      	b.n	d7360 <pow+0x158>
   d734c:	ed9f 7b70 	vldr	d7, [pc, #448]	; d7510 <pow+0x308>
   d7350:	ed8d 7b06 	vstr	d7, [sp, #24]
   d7354:	4668      	mov	r0, sp
   d7356:	f000 ff5b 	bl	d8210 <matherr>
   d735a:	2800      	cmp	r0, #0
   d735c:	f000 808e 	beq.w	d747c <pow+0x274>
   d7360:	9b08      	ldr	r3, [sp, #32]
   d7362:	b11b      	cbz	r3, d736c <pow+0x164>
   d7364:	f7fe fb2e 	bl	d59c4 <__errno>
   d7368:	9b08      	ldr	r3, [sp, #32]
   d736a:	6003      	str	r3, [r0, #0]
   d736c:	ed9d 0b06 	vldr	d0, [sp, #24]
   d7370:	b00b      	add	sp, #44	; 0x2c
   d7372:	ecbd 8b02 	vpop	{d8}
   d7376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d737a:	2200      	movs	r2, #0
   d737c:	2300      	movs	r3, #0
   d737e:	4620      	mov	r0, r4
   d7380:	4629      	mov	r1, r5
   d7382:	f001 fc99 	bl	d8cb8 <__aeabi_dcmpeq>
   d7386:	2800      	cmp	r0, #0
   d7388:	d09d      	beq.n	d72c6 <pow+0xbe>
   d738a:	ed9f 0b63 	vldr	d0, [pc, #396]	; d7518 <pow+0x310>
   d738e:	4b66      	ldr	r3, [pc, #408]	; (d7528 <pow+0x320>)
   d7390:	f8cd b020 	str.w	fp, [sp, #32]
   d7394:	2201      	movs	r2, #1
   d7396:	f1b8 0f02 	cmp.w	r8, #2
   d739a:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d739e:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d73a2:	ed8d 0b06 	vstr	d0, [sp, #24]
   d73a6:	e88d 000c 	stmia.w	sp, {r2, r3}
   d73aa:	d1d3      	bne.n	d7354 <pow+0x14c>
   d73ac:	e78f      	b.n	d72ce <pow+0xc6>
   d73ae:	ec47 6b10 	vmov	d0, r6, r7
   d73b2:	f000 ff25 	bl	d8200 <finite>
   d73b6:	2800      	cmp	r0, #0
   d73b8:	d097      	beq.n	d72ea <pow+0xe2>
   d73ba:	ec45 4b10 	vmov	d0, r4, r5
   d73be:	f000 ff1f 	bl	d8200 <finite>
   d73c2:	2800      	cmp	r0, #0
   d73c4:	d091      	beq.n	d72ea <pow+0xe2>
   d73c6:	ec53 2b18 	vmov	r2, r3, d8
   d73ca:	ee18 0a10 	vmov	r0, s16
   d73ce:	4619      	mov	r1, r3
   d73d0:	f001 fca4 	bl	d8d1c <__aeabi_dcmpun>
   d73d4:	2800      	cmp	r0, #0
   d73d6:	d17c      	bne.n	d74d2 <pow+0x2ca>
   d73d8:	2303      	movs	r3, #3
   d73da:	f99a 8000 	ldrsb.w	r8, [sl]
   d73de:	9300      	str	r3, [sp, #0]
   d73e0:	4b51      	ldr	r3, [pc, #324]	; (d7528 <pow+0x320>)
   d73e2:	9008      	str	r0, [sp, #32]
   d73e4:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d73e8:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d73ec:	9301      	str	r3, [sp, #4]
   d73ee:	f1b8 0f00 	cmp.w	r8, #0
   d73f2:	d148      	bne.n	d7486 <pow+0x27e>
   d73f4:	f8df 9144 	ldr.w	r9, [pc, #324]	; d753c <pow+0x334>
   d73f8:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
   d73fc:	2200      	movs	r2, #0
   d73fe:	2300      	movs	r3, #0
   d7400:	4630      	mov	r0, r6
   d7402:	4639      	mov	r1, r7
   d7404:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d7408:	f001 fc60 	bl	d8ccc <__aeabi_dcmplt>
   d740c:	2800      	cmp	r0, #0
   d740e:	d094      	beq.n	d733a <pow+0x132>
   d7410:	2200      	movs	r2, #0
   d7412:	4b46      	ldr	r3, [pc, #280]	; (d752c <pow+0x324>)
   d7414:	4620      	mov	r0, r4
   d7416:	4629      	mov	r1, r5
   d7418:	f001 f9e6 	bl	d87e8 <__aeabi_dmul>
   d741c:	4604      	mov	r4, r0
   d741e:	460d      	mov	r5, r1
   d7420:	ec45 4b10 	vmov	d0, r4, r5
   d7424:	f000 ff00 	bl	d8228 <rint>
   d7428:	4620      	mov	r0, r4
   d742a:	ec53 2b10 	vmov	r2, r3, d0
   d742e:	4629      	mov	r1, r5
   d7430:	f001 fc42 	bl	d8cb8 <__aeabi_dcmpeq>
   d7434:	2800      	cmp	r0, #0
   d7436:	d149      	bne.n	d74cc <pow+0x2c4>
   d7438:	4b3d      	ldr	r3, [pc, #244]	; (d7530 <pow+0x328>)
   d743a:	f99a 8000 	ldrsb.w	r8, [sl]
   d743e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d7442:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d7446:	f1b8 0f02 	cmp.w	r8, #2
   d744a:	f47f af76 	bne.w	d733a <pow+0x132>
   d744e:	e778      	b.n	d7342 <pow+0x13a>
   d7450:	4a35      	ldr	r2, [pc, #212]	; (d7528 <pow+0x320>)
   d7452:	f99a 3000 	ldrsb.w	r3, [sl]
   d7456:	f8cd b020 	str.w	fp, [sp, #32]
   d745a:	2101      	movs	r1, #1
   d745c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d7460:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d7464:	e88d 0006 	stmia.w	sp, {r1, r2}
   d7468:	2b00      	cmp	r3, #0
   d746a:	f43f af6f 	beq.w	d734c <pow+0x144>
   d746e:	4931      	ldr	r1, [pc, #196]	; (d7534 <pow+0x32c>)
   d7470:	2000      	movs	r0, #0
   d7472:	2b02      	cmp	r3, #2
   d7474:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d7478:	f47f af6c 	bne.w	d7354 <pow+0x14c>
   d747c:	f7fe faa2 	bl	d59c4 <__errno>
   d7480:	2321      	movs	r3, #33	; 0x21
   d7482:	6003      	str	r3, [r0, #0]
   d7484:	e76c      	b.n	d7360 <pow+0x158>
   d7486:	ed9f 7b26 	vldr	d7, [pc, #152]	; d7520 <pow+0x318>
   d748a:	2200      	movs	r2, #0
   d748c:	2300      	movs	r3, #0
   d748e:	4630      	mov	r0, r6
   d7490:	4639      	mov	r1, r7
   d7492:	ed8d 7b06 	vstr	d7, [sp, #24]
   d7496:	f001 fc19 	bl	d8ccc <__aeabi_dcmplt>
   d749a:	2800      	cmp	r0, #0
   d749c:	d0d3      	beq.n	d7446 <pow+0x23e>
   d749e:	2200      	movs	r2, #0
   d74a0:	4b22      	ldr	r3, [pc, #136]	; (d752c <pow+0x324>)
   d74a2:	4620      	mov	r0, r4
   d74a4:	4629      	mov	r1, r5
   d74a6:	f001 f99f 	bl	d87e8 <__aeabi_dmul>
   d74aa:	4604      	mov	r4, r0
   d74ac:	460d      	mov	r5, r1
   d74ae:	ec45 4b10 	vmov	d0, r4, r5
   d74b2:	f000 feb9 	bl	d8228 <rint>
   d74b6:	4620      	mov	r0, r4
   d74b8:	ec53 2b10 	vmov	r2, r3, d0
   d74bc:	4629      	mov	r1, r5
   d74be:	f001 fbfb 	bl	d8cb8 <__aeabi_dcmpeq>
   d74c2:	b918      	cbnz	r0, d74cc <pow+0x2c4>
   d74c4:	4b1b      	ldr	r3, [pc, #108]	; (d7534 <pow+0x32c>)
   d74c6:	2200      	movs	r2, #0
   d74c8:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d74cc:	f99a 8000 	ldrsb.w	r8, [sl]
   d74d0:	e7b9      	b.n	d7446 <pow+0x23e>
   d74d2:	4b15      	ldr	r3, [pc, #84]	; (d7528 <pow+0x320>)
   d74d4:	f99a 9000 	ldrsb.w	r9, [sl]
   d74d8:	f8cd 8020 	str.w	r8, [sp, #32]
   d74dc:	2201      	movs	r2, #1
   d74de:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d74e2:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d74e6:	e88d 000c 	stmia.w	sp, {r2, r3}
   d74ea:	f1b9 0f00 	cmp.w	r9, #0
   d74ee:	f43f af2d 	beq.w	d734c <pow+0x144>
   d74f2:	2200      	movs	r2, #0
   d74f4:	2300      	movs	r3, #0
   d74f6:	4610      	mov	r0, r2
   d74f8:	4619      	mov	r1, r3
   d74fa:	f001 fa9f 	bl	d8a3c <__aeabi_ddiv>
   d74fe:	f1b9 0f02 	cmp.w	r9, #2
   d7502:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d7506:	d0b9      	beq.n	d747c <pow+0x274>
   d7508:	e724      	b.n	d7354 <pow+0x14c>
   d750a:	bf00      	nop
   d750c:	f3af 8000 	nop.w
	...
   d751c:	3ff00000 	.word	0x3ff00000
   d7520:	00000000 	.word	0x00000000
   d7524:	7ff00000 	.word	0x7ff00000
   d7528:	000d9dd0 	.word	0x000d9dd0
   d752c:	3fe00000 	.word	0x3fe00000
   d7530:	c7efffff 	.word	0xc7efffff
   d7534:	fff00000 	.word	0xfff00000
   d7538:	2003e1fc 	.word	0x2003e1fc
   d753c:	47efffff 	.word	0x47efffff

000d7540 <__ieee754_pow>:
   d7540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7544:	ec51 0b11 	vmov	r0, r1, d1
   d7548:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   d754c:	ea58 0400 	orrs.w	r4, r8, r0
   d7550:	b093      	sub	sp, #76	; 0x4c
   d7552:	d03c      	beq.n	d75ce <__ieee754_pow+0x8e>
   d7554:	ec53 2b10 	vmov	r2, r3, d0
   d7558:	4e6d      	ldr	r6, [pc, #436]	; (d7710 <__ieee754_pow+0x1d0>)
   d755a:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   d755e:	42b4      	cmp	r4, r6
   d7560:	ee10 aa10 	vmov	sl, s0
   d7564:	461d      	mov	r5, r3
   d7566:	dc2b      	bgt.n	d75c0 <__ieee754_pow+0x80>
   d7568:	4689      	mov	r9, r1
   d756a:	ee11 ea10 	vmov	lr, s2
   d756e:	d026      	beq.n	d75be <__ieee754_pow+0x7e>
   d7570:	45b0      	cmp	r8, r6
   d7572:	dc25      	bgt.n	d75c0 <__ieee754_pow+0x80>
   d7574:	4e66      	ldr	r6, [pc, #408]	; (d7710 <__ieee754_pow+0x1d0>)
   d7576:	45b0      	cmp	r8, r6
   d7578:	d077      	beq.n	d766a <__ieee754_pow+0x12a>
   d757a:	2d00      	cmp	r5, #0
   d757c:	4616      	mov	r6, r2
   d757e:	461f      	mov	r7, r3
   d7580:	e9cd 0100 	strd	r0, r1, [sp]
   d7584:	db75      	blt.n	d7672 <__ieee754_pow+0x132>
   d7586:	f04f 0b00 	mov.w	fp, #0
   d758a:	f1be 0f00 	cmp.w	lr, #0
   d758e:	d12d      	bne.n	d75ec <__ieee754_pow+0xac>
   d7590:	4b5f      	ldr	r3, [pc, #380]	; (d7710 <__ieee754_pow+0x1d0>)
   d7592:	4598      	cmp	r8, r3
   d7594:	f000 8089 	beq.w	d76aa <__ieee754_pow+0x16a>
   d7598:	4b5e      	ldr	r3, [pc, #376]	; (d7714 <__ieee754_pow+0x1d4>)
   d759a:	4598      	cmp	r8, r3
   d759c:	d05e      	beq.n	d765c <__ieee754_pow+0x11c>
   d759e:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
   d75a2:	f000 83de 	beq.w	d7d62 <__ieee754_pow+0x822>
   d75a6:	4b5c      	ldr	r3, [pc, #368]	; (d7718 <__ieee754_pow+0x1d8>)
   d75a8:	4599      	cmp	r9, r3
   d75aa:	d11f      	bne.n	d75ec <__ieee754_pow+0xac>
   d75ac:	2d00      	cmp	r5, #0
   d75ae:	db1d      	blt.n	d75ec <__ieee754_pow+0xac>
   d75b0:	ec47 6b10 	vmov	d0, r6, r7
   d75b4:	b013      	add	sp, #76	; 0x4c
   d75b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d75ba:	f000 bd49 	b.w	d8050 <__ieee754_sqrt>
   d75be:	b15a      	cbz	r2, d75d8 <__ieee754_pow+0x98>
   d75c0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
   d75c4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
   d75c8:	ea54 030a 	orrs.w	r3, r4, sl
   d75cc:	d106      	bne.n	d75dc <__ieee754_pow+0x9c>
   d75ce:	ed9f 0b4a 	vldr	d0, [pc, #296]	; d76f8 <__ieee754_pow+0x1b8>
   d75d2:	b013      	add	sp, #76	; 0x4c
   d75d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d75d8:	45a0      	cmp	r8, r4
   d75da:	ddcb      	ble.n	d7574 <__ieee754_pow+0x34>
   d75dc:	484f      	ldr	r0, [pc, #316]	; (d771c <__ieee754_pow+0x1dc>)
   d75de:	b013      	add	sp, #76	; 0x4c
   d75e0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d75e4:	f000 be18 	b.w	d8218 <nan>
   d75e8:	f04f 0b00 	mov.w	fp, #0
   d75ec:	ec47 6b10 	vmov	d0, r6, r7
   d75f0:	f000 fdfe 	bl	d81f0 <fabs>
   d75f4:	ec51 0b10 	vmov	r0, r1, d0
   d75f8:	f1ba 0f00 	cmp.w	sl, #0
   d75fc:	d01e      	beq.n	d763c <__ieee754_pow+0xfc>
   d75fe:	0fed      	lsrs	r5, r5, #31
   d7600:	f105 3aff 	add.w	sl, r5, #4294967295
   d7604:	ea5b 030a 	orrs.w	r3, fp, sl
   d7608:	d063      	beq.n	d76d2 <__ieee754_pow+0x192>
   d760a:	4b45      	ldr	r3, [pc, #276]	; (d7720 <__ieee754_pow+0x1e0>)
   d760c:	4598      	cmp	r8, r3
   d760e:	f340 808d 	ble.w	d772c <__ieee754_pow+0x1ec>
   d7612:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   d7616:	4598      	cmp	r8, r3
   d7618:	f340 8438 	ble.w	d7e8c <__ieee754_pow+0x94c>
   d761c:	4b41      	ldr	r3, [pc, #260]	; (d7724 <__ieee754_pow+0x1e4>)
   d761e:	429c      	cmp	r4, r3
   d7620:	dd62      	ble.n	d76e8 <__ieee754_pow+0x1a8>
   d7622:	f1b9 0f00 	cmp.w	r9, #0
   d7626:	dd62      	ble.n	d76ee <__ieee754_pow+0x1ae>
   d7628:	a335      	add	r3, pc, #212	; (adr r3, d7700 <__ieee754_pow+0x1c0>)
   d762a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d762e:	4610      	mov	r0, r2
   d7630:	4619      	mov	r1, r3
   d7632:	f001 f8d9 	bl	d87e8 <__aeabi_dmul>
   d7636:	ec41 0b10 	vmov	d0, r0, r1
   d763a:	e7ca      	b.n	d75d2 <__ieee754_pow+0x92>
   d763c:	b124      	cbz	r4, d7648 <__ieee754_pow+0x108>
   d763e:	4b35      	ldr	r3, [pc, #212]	; (d7714 <__ieee754_pow+0x1d4>)
   d7640:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
   d7644:	429a      	cmp	r2, r3
   d7646:	d1da      	bne.n	d75fe <__ieee754_pow+0xbe>
   d7648:	f1b9 0f00 	cmp.w	r9, #0
   d764c:	f2c0 83cb 	blt.w	d7de6 <__ieee754_pow+0x8a6>
   d7650:	2d00      	cmp	r5, #0
   d7652:	f2c0 8374 	blt.w	d7d3e <__ieee754_pow+0x7fe>
   d7656:	ec41 0b10 	vmov	d0, r0, r1
   d765a:	e7ba      	b.n	d75d2 <__ieee754_pow+0x92>
   d765c:	f1b9 0f00 	cmp.w	r9, #0
   d7660:	f2c0 847a 	blt.w	d7f58 <__ieee754_pow+0xa18>
   d7664:	ec47 6b10 	vmov	d0, r6, r7
   d7668:	e7b3      	b.n	d75d2 <__ieee754_pow+0x92>
   d766a:	f1be 0f00 	cmp.w	lr, #0
   d766e:	d084      	beq.n	d757a <__ieee754_pow+0x3a>
   d7670:	e7a6      	b.n	d75c0 <__ieee754_pow+0x80>
   d7672:	4b2d      	ldr	r3, [pc, #180]	; (d7728 <__ieee754_pow+0x1e8>)
   d7674:	4598      	cmp	r8, r3
   d7676:	dc29      	bgt.n	d76cc <__ieee754_pow+0x18c>
   d7678:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
   d767c:	4598      	cmp	r8, r3
   d767e:	dd82      	ble.n	d7586 <__ieee754_pow+0x46>
   d7680:	ea4f 5328 	mov.w	r3, r8, asr #20
   d7684:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   d7688:	2b14      	cmp	r3, #20
   d768a:	f340 847f 	ble.w	d7f8c <__ieee754_pow+0xa4c>
   d768e:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
   d7692:	fa2e f203 	lsr.w	r2, lr, r3
   d7696:	fa02 f303 	lsl.w	r3, r2, r3
   d769a:	459e      	cmp	lr, r3
   d769c:	f47f af73 	bne.w	d7586 <__ieee754_pow+0x46>
   d76a0:	f002 0201 	and.w	r2, r2, #1
   d76a4:	f1c2 0b02 	rsb	fp, r2, #2
   d76a8:	e76f      	b.n	d758a <__ieee754_pow+0x4a>
   d76aa:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
   d76ae:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   d76b2:	ea53 030a 	orrs.w	r3, r3, sl
   d76b6:	d08a      	beq.n	d75ce <__ieee754_pow+0x8e>
   d76b8:	4b1a      	ldr	r3, [pc, #104]	; (d7724 <__ieee754_pow+0x1e4>)
   d76ba:	429c      	cmp	r4, r3
   d76bc:	f340 8385 	ble.w	d7dca <__ieee754_pow+0x88a>
   d76c0:	f1b9 0f00 	cmp.w	r9, #0
   d76c4:	db13      	blt.n	d76ee <__ieee754_pow+0x1ae>
   d76c6:	ed9d 0b00 	vldr	d0, [sp]
   d76ca:	e782      	b.n	d75d2 <__ieee754_pow+0x92>
   d76cc:	f04f 0b02 	mov.w	fp, #2
   d76d0:	e75b      	b.n	d758a <__ieee754_pow+0x4a>
   d76d2:	4632      	mov	r2, r6
   d76d4:	463b      	mov	r3, r7
   d76d6:	4610      	mov	r0, r2
   d76d8:	4619      	mov	r1, r3
   d76da:	f000 fed1 	bl	d8480 <__aeabi_dsub>
   d76de:	4602      	mov	r2, r0
   d76e0:	460b      	mov	r3, r1
   d76e2:	f001 f9ab 	bl	d8a3c <__aeabi_ddiv>
   d76e6:	e7b6      	b.n	d7656 <__ieee754_pow+0x116>
   d76e8:	f1b9 0f00 	cmp.w	r9, #0
   d76ec:	db9c      	blt.n	d7628 <__ieee754_pow+0xe8>
   d76ee:	ed9f 0b06 	vldr	d0, [pc, #24]	; d7708 <__ieee754_pow+0x1c8>
   d76f2:	e76e      	b.n	d75d2 <__ieee754_pow+0x92>
   d76f4:	f3af 8000 	nop.w
   d76f8:	00000000 	.word	0x00000000
   d76fc:	3ff00000 	.word	0x3ff00000
   d7700:	8800759c 	.word	0x8800759c
   d7704:	7e37e43c 	.word	0x7e37e43c
	...
   d7710:	7ff00000 	.word	0x7ff00000
   d7714:	3ff00000 	.word	0x3ff00000
   d7718:	3fe00000 	.word	0x3fe00000
   d771c:	000d9dd4 	.word	0x000d9dd4
   d7720:	41e00000 	.word	0x41e00000
   d7724:	3fefffff 	.word	0x3fefffff
   d7728:	433fffff 	.word	0x433fffff
   d772c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
   d7730:	f04f 0200 	mov.w	r2, #0
   d7734:	da05      	bge.n	d7742 <__ieee754_pow+0x202>
   d7736:	4bd6      	ldr	r3, [pc, #856]	; (d7a90 <__ieee754_pow+0x550>)
   d7738:	f001 f856 	bl	d87e8 <__aeabi_dmul>
   d773c:	f06f 0234 	mvn.w	r2, #52	; 0x34
   d7740:	460c      	mov	r4, r1
   d7742:	1523      	asrs	r3, r4, #20
   d7744:	4ed3      	ldr	r6, [pc, #844]	; (d7a94 <__ieee754_pow+0x554>)
   d7746:	f3c4 0413 	ubfx	r4, r4, #0, #20
   d774a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   d774e:	4413      	add	r3, r2
   d7750:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
   d7754:	42b4      	cmp	r4, r6
   d7756:	461a      	mov	r2, r3
   d7758:	930d      	str	r3, [sp, #52]	; 0x34
   d775a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
   d775e:	f340 8349 	ble.w	d7df4 <__ieee754_pow+0x8b4>
   d7762:	4bcd      	ldr	r3, [pc, #820]	; (d7a98 <__ieee754_pow+0x558>)
   d7764:	429c      	cmp	r4, r3
   d7766:	f340 842d 	ble.w	d7fc4 <__ieee754_pow+0xa84>
   d776a:	ed9f 7bb3 	vldr	d7, [pc, #716]	; d7a38 <__ieee754_pow+0x4f8>
   d776e:	ed8d 7b08 	vstr	d7, [sp, #32]
   d7772:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d7776:	ed9f 7bb2 	vldr	d7, [pc, #712]	; d7a40 <__ieee754_pow+0x500>
   d777a:	4613      	mov	r3, r2
   d777c:	ed8d 7b06 	vstr	d7, [sp, #24]
   d7780:	3301      	adds	r3, #1
   d7782:	930d      	str	r3, [sp, #52]	; 0x34
   d7784:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
   d7788:	f04f 0800 	mov.w	r8, #0
   d778c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d7790:	4629      	mov	r1, r5
   d7792:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d7796:	f000 fe73 	bl	d8480 <__aeabi_dsub>
   d779a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d779e:	4606      	mov	r6, r0
   d77a0:	460f      	mov	r7, r1
   d77a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d77a6:	f000 fe6d 	bl	d8484 <__adddf3>
   d77aa:	4602      	mov	r2, r0
   d77ac:	460b      	mov	r3, r1
   d77ae:	2000      	movs	r0, #0
   d77b0:	49ba      	ldr	r1, [pc, #744]	; (d7a9c <__ieee754_pow+0x55c>)
   d77b2:	f001 f943 	bl	d8a3c <__aeabi_ddiv>
   d77b6:	4603      	mov	r3, r0
   d77b8:	460c      	mov	r4, r1
   d77ba:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
   d77be:	4602      	mov	r2, r0
   d77c0:	460b      	mov	r3, r1
   d77c2:	4630      	mov	r0, r6
   d77c4:	4639      	mov	r1, r7
   d77c6:	f001 f80f 	bl	d87e8 <__aeabi_dmul>
   d77ca:	106b      	asrs	r3, r5, #1
   d77cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   d77d0:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
   d77d4:	eb03 0508 	add.w	r5, r3, r8
   d77d8:	460a      	mov	r2, r1
   d77da:	2300      	movs	r3, #0
   d77dc:	4601      	mov	r1, r0
   d77de:	e9cd 1202 	strd	r1, r2, [sp, #8]
   d77e2:	9302      	str	r3, [sp, #8]
   d77e4:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
   d77e8:	2400      	movs	r4, #0
   d77ea:	e9cd 1204 	strd	r1, r2, [sp, #16]
   d77ee:	462b      	mov	r3, r5
   d77f0:	4622      	mov	r2, r4
   d77f2:	4640      	mov	r0, r8
   d77f4:	4649      	mov	r1, r9
   d77f6:	f000 fff7 	bl	d87e8 <__aeabi_dmul>
   d77fa:	4602      	mov	r2, r0
   d77fc:	460b      	mov	r3, r1
   d77fe:	4630      	mov	r0, r6
   d7800:	4639      	mov	r1, r7
   d7802:	f000 fe3d 	bl	d8480 <__aeabi_dsub>
   d7806:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d780a:	4606      	mov	r6, r0
   d780c:	460f      	mov	r7, r1
   d780e:	4620      	mov	r0, r4
   d7810:	4629      	mov	r1, r5
   d7812:	f000 fe35 	bl	d8480 <__aeabi_dsub>
   d7816:	4602      	mov	r2, r0
   d7818:	460b      	mov	r3, r1
   d781a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d781e:	f000 fe2f 	bl	d8480 <__aeabi_dsub>
   d7822:	4642      	mov	r2, r8
   d7824:	464b      	mov	r3, r9
   d7826:	f000 ffdf 	bl	d87e8 <__aeabi_dmul>
   d782a:	4602      	mov	r2, r0
   d782c:	460b      	mov	r3, r1
   d782e:	4630      	mov	r0, r6
   d7830:	4639      	mov	r1, r7
   d7832:	f000 fe25 	bl	d8480 <__aeabi_dsub>
   d7836:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   d783a:	f000 ffd5 	bl	d87e8 <__aeabi_dmul>
   d783e:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
   d7842:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d7846:	4622      	mov	r2, r4
   d7848:	462b      	mov	r3, r5
   d784a:	4620      	mov	r0, r4
   d784c:	4629      	mov	r1, r5
   d784e:	f000 ffcb 	bl	d87e8 <__aeabi_dmul>
   d7852:	a37d      	add	r3, pc, #500	; (adr r3, d7a48 <__ieee754_pow+0x508>)
   d7854:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7858:	4604      	mov	r4, r0
   d785a:	460d      	mov	r5, r1
   d785c:	f000 ffc4 	bl	d87e8 <__aeabi_dmul>
   d7860:	a37b      	add	r3, pc, #492	; (adr r3, d7a50 <__ieee754_pow+0x510>)
   d7862:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7866:	f000 fe0d 	bl	d8484 <__adddf3>
   d786a:	4622      	mov	r2, r4
   d786c:	462b      	mov	r3, r5
   d786e:	f000 ffbb 	bl	d87e8 <__aeabi_dmul>
   d7872:	a379      	add	r3, pc, #484	; (adr r3, d7a58 <__ieee754_pow+0x518>)
   d7874:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7878:	f000 fe04 	bl	d8484 <__adddf3>
   d787c:	4622      	mov	r2, r4
   d787e:	462b      	mov	r3, r5
   d7880:	f000 ffb2 	bl	d87e8 <__aeabi_dmul>
   d7884:	a376      	add	r3, pc, #472	; (adr r3, d7a60 <__ieee754_pow+0x520>)
   d7886:	e9d3 2300 	ldrd	r2, r3, [r3]
   d788a:	f000 fdfb 	bl	d8484 <__adddf3>
   d788e:	4622      	mov	r2, r4
   d7890:	462b      	mov	r3, r5
   d7892:	f000 ffa9 	bl	d87e8 <__aeabi_dmul>
   d7896:	a374      	add	r3, pc, #464	; (adr r3, d7a68 <__ieee754_pow+0x528>)
   d7898:	e9d3 2300 	ldrd	r2, r3, [r3]
   d789c:	f000 fdf2 	bl	d8484 <__adddf3>
   d78a0:	4622      	mov	r2, r4
   d78a2:	462b      	mov	r3, r5
   d78a4:	f000 ffa0 	bl	d87e8 <__aeabi_dmul>
   d78a8:	a371      	add	r3, pc, #452	; (adr r3, d7a70 <__ieee754_pow+0x530>)
   d78aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   d78ae:	f000 fde9 	bl	d8484 <__adddf3>
   d78b2:	4622      	mov	r2, r4
   d78b4:	4606      	mov	r6, r0
   d78b6:	460f      	mov	r7, r1
   d78b8:	462b      	mov	r3, r5
   d78ba:	4620      	mov	r0, r4
   d78bc:	4629      	mov	r1, r5
   d78be:	f000 ff93 	bl	d87e8 <__aeabi_dmul>
   d78c2:	4602      	mov	r2, r0
   d78c4:	460b      	mov	r3, r1
   d78c6:	4630      	mov	r0, r6
   d78c8:	4639      	mov	r1, r7
   d78ca:	f000 ff8d 	bl	d87e8 <__aeabi_dmul>
   d78ce:	4642      	mov	r2, r8
   d78d0:	4604      	mov	r4, r0
   d78d2:	460d      	mov	r5, r1
   d78d4:	464b      	mov	r3, r9
   d78d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d78da:	f000 fdd3 	bl	d8484 <__adddf3>
   d78de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d78e2:	f000 ff81 	bl	d87e8 <__aeabi_dmul>
   d78e6:	4622      	mov	r2, r4
   d78e8:	462b      	mov	r3, r5
   d78ea:	f000 fdcb 	bl	d8484 <__adddf3>
   d78ee:	4642      	mov	r2, r8
   d78f0:	4606      	mov	r6, r0
   d78f2:	460f      	mov	r7, r1
   d78f4:	464b      	mov	r3, r9
   d78f6:	4640      	mov	r0, r8
   d78f8:	4649      	mov	r1, r9
   d78fa:	f000 ff75 	bl	d87e8 <__aeabi_dmul>
   d78fe:	2200      	movs	r2, #0
   d7900:	4b67      	ldr	r3, [pc, #412]	; (d7aa0 <__ieee754_pow+0x560>)
   d7902:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d7906:	f000 fdbd 	bl	d8484 <__adddf3>
   d790a:	4632      	mov	r2, r6
   d790c:	463b      	mov	r3, r7
   d790e:	f000 fdb9 	bl	d8484 <__adddf3>
   d7912:	9802      	ldr	r0, [sp, #8]
   d7914:	460d      	mov	r5, r1
   d7916:	4604      	mov	r4, r0
   d7918:	4622      	mov	r2, r4
   d791a:	462b      	mov	r3, r5
   d791c:	4640      	mov	r0, r8
   d791e:	4649      	mov	r1, r9
   d7920:	f000 ff62 	bl	d87e8 <__aeabi_dmul>
   d7924:	2200      	movs	r2, #0
   d7926:	4680      	mov	r8, r0
   d7928:	4689      	mov	r9, r1
   d792a:	4b5d      	ldr	r3, [pc, #372]	; (d7aa0 <__ieee754_pow+0x560>)
   d792c:	4620      	mov	r0, r4
   d792e:	4629      	mov	r1, r5
   d7930:	f000 fda6 	bl	d8480 <__aeabi_dsub>
   d7934:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d7938:	f000 fda2 	bl	d8480 <__aeabi_dsub>
   d793c:	4602      	mov	r2, r0
   d793e:	460b      	mov	r3, r1
   d7940:	4630      	mov	r0, r6
   d7942:	4639      	mov	r1, r7
   d7944:	f000 fd9c 	bl	d8480 <__aeabi_dsub>
   d7948:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d794c:	f000 ff4c 	bl	d87e8 <__aeabi_dmul>
   d7950:	4622      	mov	r2, r4
   d7952:	4606      	mov	r6, r0
   d7954:	460f      	mov	r7, r1
   d7956:	462b      	mov	r3, r5
   d7958:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d795c:	f000 ff44 	bl	d87e8 <__aeabi_dmul>
   d7960:	4602      	mov	r2, r0
   d7962:	460b      	mov	r3, r1
   d7964:	4630      	mov	r0, r6
   d7966:	4639      	mov	r1, r7
   d7968:	f000 fd8c 	bl	d8484 <__adddf3>
   d796c:	4606      	mov	r6, r0
   d796e:	460f      	mov	r7, r1
   d7970:	4602      	mov	r2, r0
   d7972:	460b      	mov	r3, r1
   d7974:	4640      	mov	r0, r8
   d7976:	4649      	mov	r1, r9
   d7978:	e9cd 8904 	strd	r8, r9, [sp, #16]
   d797c:	f000 fd82 	bl	d8484 <__adddf3>
   d7980:	9802      	ldr	r0, [sp, #8]
   d7982:	a33d      	add	r3, pc, #244	; (adr r3, d7a78 <__ieee754_pow+0x538>)
   d7984:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7988:	4604      	mov	r4, r0
   d798a:	460d      	mov	r5, r1
   d798c:	f000 ff2c 	bl	d87e8 <__aeabi_dmul>
   d7990:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d7994:	4680      	mov	r8, r0
   d7996:	4689      	mov	r9, r1
   d7998:	4620      	mov	r0, r4
   d799a:	4629      	mov	r1, r5
   d799c:	f000 fd70 	bl	d8480 <__aeabi_dsub>
   d79a0:	4602      	mov	r2, r0
   d79a2:	460b      	mov	r3, r1
   d79a4:	4630      	mov	r0, r6
   d79a6:	4639      	mov	r1, r7
   d79a8:	f000 fd6a 	bl	d8480 <__aeabi_dsub>
   d79ac:	a334      	add	r3, pc, #208	; (adr r3, d7a80 <__ieee754_pow+0x540>)
   d79ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   d79b2:	f000 ff19 	bl	d87e8 <__aeabi_dmul>
   d79b6:	a334      	add	r3, pc, #208	; (adr r3, d7a88 <__ieee754_pow+0x548>)
   d79b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d79bc:	4606      	mov	r6, r0
   d79be:	460f      	mov	r7, r1
   d79c0:	4620      	mov	r0, r4
   d79c2:	4629      	mov	r1, r5
   d79c4:	f000 ff10 	bl	d87e8 <__aeabi_dmul>
   d79c8:	4602      	mov	r2, r0
   d79ca:	460b      	mov	r3, r1
   d79cc:	4630      	mov	r0, r6
   d79ce:	4639      	mov	r1, r7
   d79d0:	f000 fd58 	bl	d8484 <__adddf3>
   d79d4:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   d79d8:	f000 fd54 	bl	d8484 <__adddf3>
   d79dc:	4606      	mov	r6, r0
   d79de:	980d      	ldr	r0, [sp, #52]	; 0x34
   d79e0:	460f      	mov	r7, r1
   d79e2:	f000 fe9b 	bl	d871c <__aeabi_i2d>
   d79e6:	4632      	mov	r2, r6
   d79e8:	4604      	mov	r4, r0
   d79ea:	460d      	mov	r5, r1
   d79ec:	463b      	mov	r3, r7
   d79ee:	4640      	mov	r0, r8
   d79f0:	4649      	mov	r1, r9
   d79f2:	f000 fd47 	bl	d8484 <__adddf3>
   d79f6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d79fa:	f000 fd43 	bl	d8484 <__adddf3>
   d79fe:	4622      	mov	r2, r4
   d7a00:	462b      	mov	r3, r5
   d7a02:	f000 fd3f 	bl	d8484 <__adddf3>
   d7a06:	9802      	ldr	r0, [sp, #8]
   d7a08:	4622      	mov	r2, r4
   d7a0a:	462b      	mov	r3, r5
   d7a0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d7a10:	f000 fd36 	bl	d8480 <__aeabi_dsub>
   d7a14:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d7a18:	f000 fd32 	bl	d8480 <__aeabi_dsub>
   d7a1c:	4642      	mov	r2, r8
   d7a1e:	464b      	mov	r3, r9
   d7a20:	f000 fd2e 	bl	d8480 <__aeabi_dsub>
   d7a24:	4602      	mov	r2, r0
   d7a26:	460b      	mov	r3, r1
   d7a28:	4630      	mov	r0, r6
   d7a2a:	4639      	mov	r1, r7
   d7a2c:	f000 fd28 	bl	d8480 <__aeabi_dsub>
   d7a30:	4680      	mov	r8, r0
   d7a32:	4689      	mov	r9, r1
   d7a34:	e036      	b.n	d7aa4 <__ieee754_pow+0x564>
   d7a36:	bf00      	nop
	...
   d7a44:	3ff00000 	.word	0x3ff00000
   d7a48:	4a454eef 	.word	0x4a454eef
   d7a4c:	3fca7e28 	.word	0x3fca7e28
   d7a50:	93c9db65 	.word	0x93c9db65
   d7a54:	3fcd864a 	.word	0x3fcd864a
   d7a58:	a91d4101 	.word	0xa91d4101
   d7a5c:	3fd17460 	.word	0x3fd17460
   d7a60:	518f264d 	.word	0x518f264d
   d7a64:	3fd55555 	.word	0x3fd55555
   d7a68:	db6fabff 	.word	0xdb6fabff
   d7a6c:	3fdb6db6 	.word	0x3fdb6db6
   d7a70:	33333303 	.word	0x33333303
   d7a74:	3fe33333 	.word	0x3fe33333
   d7a78:	e0000000 	.word	0xe0000000
   d7a7c:	3feec709 	.word	0x3feec709
   d7a80:	dc3a03fd 	.word	0xdc3a03fd
   d7a84:	3feec709 	.word	0x3feec709
   d7a88:	145b01f5 	.word	0x145b01f5
   d7a8c:	be3e2fe0 	.word	0xbe3e2fe0
   d7a90:	43400000 	.word	0x43400000
   d7a94:	0003988e 	.word	0x0003988e
   d7a98:	000bb679 	.word	0x000bb679
   d7a9c:	3ff00000 	.word	0x3ff00000
   d7aa0:	40080000 	.word	0x40080000
   d7aa4:	f10b 33ff 	add.w	r3, fp, #4294967295
   d7aa8:	ea53 030a 	orrs.w	r3, r3, sl
   d7aac:	f000 8188 	beq.w	d7dc0 <__ieee754_pow+0x880>
   d7ab0:	ed9f 7bd7 	vldr	d7, [pc, #860]	; d7e10 <__ieee754_pow+0x8d0>
   d7ab4:	ed8d 7b06 	vstr	d7, [sp, #24]
   d7ab8:	e9dd ab00 	ldrd	sl, fp, [sp]
   d7abc:	4653      	mov	r3, sl
   d7abe:	465c      	mov	r4, fp
   d7ac0:	e9cd 3400 	strd	r3, r4, [sp]
   d7ac4:	2300      	movs	r3, #0
   d7ac6:	9300      	str	r3, [sp, #0]
   d7ac8:	e9dd 4500 	ldrd	r4, r5, [sp]
   d7acc:	4650      	mov	r0, sl
   d7ace:	4622      	mov	r2, r4
   d7ad0:	462b      	mov	r3, r5
   d7ad2:	4659      	mov	r1, fp
   d7ad4:	f000 fcd4 	bl	d8480 <__aeabi_dsub>
   d7ad8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d7adc:	f000 fe84 	bl	d87e8 <__aeabi_dmul>
   d7ae0:	4652      	mov	r2, sl
   d7ae2:	4606      	mov	r6, r0
   d7ae4:	460f      	mov	r7, r1
   d7ae6:	465b      	mov	r3, fp
   d7ae8:	4640      	mov	r0, r8
   d7aea:	4649      	mov	r1, r9
   d7aec:	f000 fe7c 	bl	d87e8 <__aeabi_dmul>
   d7af0:	4602      	mov	r2, r0
   d7af2:	460b      	mov	r3, r1
   d7af4:	4630      	mov	r0, r6
   d7af6:	4639      	mov	r1, r7
   d7af8:	f000 fcc4 	bl	d8484 <__adddf3>
   d7afc:	4622      	mov	r2, r4
   d7afe:	4680      	mov	r8, r0
   d7b00:	4689      	mov	r9, r1
   d7b02:	462b      	mov	r3, r5
   d7b04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d7b08:	e9cd 8904 	strd	r8, r9, [sp, #16]
   d7b0c:	f000 fe6c 	bl	d87e8 <__aeabi_dmul>
   d7b10:	460b      	mov	r3, r1
   d7b12:	4602      	mov	r2, r0
   d7b14:	4606      	mov	r6, r0
   d7b16:	460f      	mov	r7, r1
   d7b18:	4640      	mov	r0, r8
   d7b1a:	4649      	mov	r1, r9
   d7b1c:	f000 fcb2 	bl	d8484 <__adddf3>
   d7b20:	4bd5      	ldr	r3, [pc, #852]	; (d7e78 <__ieee754_pow+0x938>)
   d7b22:	4299      	cmp	r1, r3
   d7b24:	4604      	mov	r4, r0
   d7b26:	460d      	mov	r5, r1
   d7b28:	468a      	mov	sl, r1
   d7b2a:	f340 8123 	ble.w	d7d74 <__ieee754_pow+0x834>
   d7b2e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   d7b32:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   d7b36:	4303      	orrs	r3, r0
   d7b38:	f040 8218 	bne.w	d7f6c <__ieee754_pow+0xa2c>
   d7b3c:	a3b6      	add	r3, pc, #728	; (adr r3, d7e18 <__ieee754_pow+0x8d8>)
   d7b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7b42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d7b46:	f000 fc9d 	bl	d8484 <__adddf3>
   d7b4a:	4632      	mov	r2, r6
   d7b4c:	4680      	mov	r8, r0
   d7b4e:	4689      	mov	r9, r1
   d7b50:	463b      	mov	r3, r7
   d7b52:	4620      	mov	r0, r4
   d7b54:	4629      	mov	r1, r5
   d7b56:	f000 fc93 	bl	d8480 <__aeabi_dsub>
   d7b5a:	4602      	mov	r2, r0
   d7b5c:	460b      	mov	r3, r1
   d7b5e:	4640      	mov	r0, r8
   d7b60:	4649      	mov	r1, r9
   d7b62:	f001 f8d1 	bl	d8d08 <__aeabi_dcmpgt>
   d7b66:	2800      	cmp	r0, #0
   d7b68:	f040 8200 	bne.w	d7f6c <__ieee754_pow+0xa2c>
   d7b6c:	46a8      	mov	r8, r5
   d7b6e:	ea4f 5328 	mov.w	r3, r8, asr #20
   d7b72:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   d7b76:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   d7b7a:	fa42 f303 	asr.w	r3, r2, r3
   d7b7e:	4453      	add	r3, sl
   d7b80:	f3c3 520a 	ubfx	r2, r3, #20, #11
   d7b84:	4dbd      	ldr	r5, [pc, #756]	; (d7e7c <__ieee754_pow+0x93c>)
   d7b86:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   d7b8a:	4115      	asrs	r5, r2
   d7b8c:	f3c3 0b13 	ubfx	fp, r3, #0, #20
   d7b90:	2000      	movs	r0, #0
   d7b92:	f1c2 0414 	rsb	r4, r2, #20
   d7b96:	ea23 0105 	bic.w	r1, r3, r5
   d7b9a:	f44b 1b80 	orr.w	fp, fp, #1048576	; 0x100000
   d7b9e:	f1ba 0f00 	cmp.w	sl, #0
   d7ba2:	4602      	mov	r2, r0
   d7ba4:	460b      	mov	r3, r1
   d7ba6:	fa4b fb04 	asr.w	fp, fp, r4
   d7baa:	4630      	mov	r0, r6
   d7bac:	4639      	mov	r1, r7
   d7bae:	bfb8      	it	lt
   d7bb0:	f1cb 0b00 	rsblt	fp, fp, #0
   d7bb4:	f000 fc64 	bl	d8480 <__aeabi_dsub>
   d7bb8:	4602      	mov	r2, r0
   d7bba:	460b      	mov	r3, r1
   d7bbc:	4606      	mov	r6, r0
   d7bbe:	460f      	mov	r7, r1
   d7bc0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d7bc4:	f000 fc5e 	bl	d8484 <__adddf3>
   d7bc8:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
   d7bcc:	2400      	movs	r4, #0
   d7bce:	a394      	add	r3, pc, #592	; (adr r3, d7e20 <__ieee754_pow+0x8e0>)
   d7bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7bd4:	4620      	mov	r0, r4
   d7bd6:	460d      	mov	r5, r1
   d7bd8:	f000 fe06 	bl	d87e8 <__aeabi_dmul>
   d7bdc:	4632      	mov	r2, r6
   d7bde:	4680      	mov	r8, r0
   d7be0:	4689      	mov	r9, r1
   d7be2:	463b      	mov	r3, r7
   d7be4:	4620      	mov	r0, r4
   d7be6:	4629      	mov	r1, r5
   d7be8:	f000 fc4a 	bl	d8480 <__aeabi_dsub>
   d7bec:	4602      	mov	r2, r0
   d7bee:	460b      	mov	r3, r1
   d7bf0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d7bf4:	f000 fc44 	bl	d8480 <__aeabi_dsub>
   d7bf8:	a38b      	add	r3, pc, #556	; (adr r3, d7e28 <__ieee754_pow+0x8e8>)
   d7bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7bfe:	f000 fdf3 	bl	d87e8 <__aeabi_dmul>
   d7c02:	a38b      	add	r3, pc, #556	; (adr r3, d7e30 <__ieee754_pow+0x8f0>)
   d7c04:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7c08:	4606      	mov	r6, r0
   d7c0a:	460f      	mov	r7, r1
   d7c0c:	4620      	mov	r0, r4
   d7c0e:	4629      	mov	r1, r5
   d7c10:	f000 fdea 	bl	d87e8 <__aeabi_dmul>
   d7c14:	4602      	mov	r2, r0
   d7c16:	460b      	mov	r3, r1
   d7c18:	4630      	mov	r0, r6
   d7c1a:	4639      	mov	r1, r7
   d7c1c:	f000 fc32 	bl	d8484 <__adddf3>
   d7c20:	4606      	mov	r6, r0
   d7c22:	460f      	mov	r7, r1
   d7c24:	4602      	mov	r2, r0
   d7c26:	460b      	mov	r3, r1
   d7c28:	4640      	mov	r0, r8
   d7c2a:	4649      	mov	r1, r9
   d7c2c:	f000 fc2a 	bl	d8484 <__adddf3>
   d7c30:	4642      	mov	r2, r8
   d7c32:	464b      	mov	r3, r9
   d7c34:	4604      	mov	r4, r0
   d7c36:	460d      	mov	r5, r1
   d7c38:	f000 fc22 	bl	d8480 <__aeabi_dsub>
   d7c3c:	4602      	mov	r2, r0
   d7c3e:	460b      	mov	r3, r1
   d7c40:	4630      	mov	r0, r6
   d7c42:	4639      	mov	r1, r7
   d7c44:	f000 fc1c 	bl	d8480 <__aeabi_dsub>
   d7c48:	4622      	mov	r2, r4
   d7c4a:	4680      	mov	r8, r0
   d7c4c:	4689      	mov	r9, r1
   d7c4e:	462b      	mov	r3, r5
   d7c50:	4620      	mov	r0, r4
   d7c52:	4629      	mov	r1, r5
   d7c54:	f000 fdc8 	bl	d87e8 <__aeabi_dmul>
   d7c58:	a377      	add	r3, pc, #476	; (adr r3, d7e38 <__ieee754_pow+0x8f8>)
   d7c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7c5e:	4606      	mov	r6, r0
   d7c60:	460f      	mov	r7, r1
   d7c62:	f000 fdc1 	bl	d87e8 <__aeabi_dmul>
   d7c66:	a376      	add	r3, pc, #472	; (adr r3, d7e40 <__ieee754_pow+0x900>)
   d7c68:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7c6c:	f000 fc08 	bl	d8480 <__aeabi_dsub>
   d7c70:	4632      	mov	r2, r6
   d7c72:	463b      	mov	r3, r7
   d7c74:	f000 fdb8 	bl	d87e8 <__aeabi_dmul>
   d7c78:	a373      	add	r3, pc, #460	; (adr r3, d7e48 <__ieee754_pow+0x908>)
   d7c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7c7e:	f000 fc01 	bl	d8484 <__adddf3>
   d7c82:	4632      	mov	r2, r6
   d7c84:	463b      	mov	r3, r7
   d7c86:	f000 fdaf 	bl	d87e8 <__aeabi_dmul>
   d7c8a:	a371      	add	r3, pc, #452	; (adr r3, d7e50 <__ieee754_pow+0x910>)
   d7c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7c90:	f000 fbf6 	bl	d8480 <__aeabi_dsub>
   d7c94:	4632      	mov	r2, r6
   d7c96:	463b      	mov	r3, r7
   d7c98:	f000 fda6 	bl	d87e8 <__aeabi_dmul>
   d7c9c:	a36e      	add	r3, pc, #440	; (adr r3, d7e58 <__ieee754_pow+0x918>)
   d7c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7ca2:	f000 fbef 	bl	d8484 <__adddf3>
   d7ca6:	4632      	mov	r2, r6
   d7ca8:	463b      	mov	r3, r7
   d7caa:	f000 fd9d 	bl	d87e8 <__aeabi_dmul>
   d7cae:	4602      	mov	r2, r0
   d7cb0:	460b      	mov	r3, r1
   d7cb2:	4620      	mov	r0, r4
   d7cb4:	4629      	mov	r1, r5
   d7cb6:	f000 fbe3 	bl	d8480 <__aeabi_dsub>
   d7cba:	4606      	mov	r6, r0
   d7cbc:	460f      	mov	r7, r1
   d7cbe:	4602      	mov	r2, r0
   d7cc0:	460b      	mov	r3, r1
   d7cc2:	4620      	mov	r0, r4
   d7cc4:	4629      	mov	r1, r5
   d7cc6:	f000 fd8f 	bl	d87e8 <__aeabi_dmul>
   d7cca:	2200      	movs	r2, #0
   d7ccc:	e9cd 0100 	strd	r0, r1, [sp]
   d7cd0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d7cd4:	4630      	mov	r0, r6
   d7cd6:	4639      	mov	r1, r7
   d7cd8:	f000 fbd2 	bl	d8480 <__aeabi_dsub>
   d7cdc:	4602      	mov	r2, r0
   d7cde:	460b      	mov	r3, r1
   d7ce0:	e9dd 0100 	ldrd	r0, r1, [sp]
   d7ce4:	f000 feaa 	bl	d8a3c <__aeabi_ddiv>
   d7ce8:	4642      	mov	r2, r8
   d7cea:	4606      	mov	r6, r0
   d7cec:	460f      	mov	r7, r1
   d7cee:	464b      	mov	r3, r9
   d7cf0:	4620      	mov	r0, r4
   d7cf2:	4629      	mov	r1, r5
   d7cf4:	f000 fd78 	bl	d87e8 <__aeabi_dmul>
   d7cf8:	4642      	mov	r2, r8
   d7cfa:	464b      	mov	r3, r9
   d7cfc:	f000 fbc2 	bl	d8484 <__adddf3>
   d7d00:	4602      	mov	r2, r0
   d7d02:	460b      	mov	r3, r1
   d7d04:	4630      	mov	r0, r6
   d7d06:	4639      	mov	r1, r7
   d7d08:	f000 fbba 	bl	d8480 <__aeabi_dsub>
   d7d0c:	4622      	mov	r2, r4
   d7d0e:	462b      	mov	r3, r5
   d7d10:	f000 fbb6 	bl	d8480 <__aeabi_dsub>
   d7d14:	4602      	mov	r2, r0
   d7d16:	460b      	mov	r3, r1
   d7d18:	2000      	movs	r0, #0
   d7d1a:	4959      	ldr	r1, [pc, #356]	; (d7e80 <__ieee754_pow+0x940>)
   d7d1c:	f000 fbb0 	bl	d8480 <__aeabi_dsub>
   d7d20:	448a      	add	sl, r1
   d7d22:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
   d7d26:	4602      	mov	r2, r0
   d7d28:	460b      	mov	r3, r1
   d7d2a:	f2c0 815b 	blt.w	d7fe4 <__ieee754_pow+0xaa4>
   d7d2e:	4651      	mov	r1, sl
   d7d30:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d7d34:	f000 fd58 	bl	d87e8 <__aeabi_dmul>
   d7d38:	ec41 0b10 	vmov	d0, r0, r1
   d7d3c:	e449      	b.n	d75d2 <__ieee754_pow+0x92>
   d7d3e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
   d7d42:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
   d7d46:	ea54 030b 	orrs.w	r3, r4, fp
   d7d4a:	f000 8137 	beq.w	d7fbc <__ieee754_pow+0xa7c>
   d7d4e:	f1bb 0f01 	cmp.w	fp, #1
   d7d52:	f47f ac80 	bne.w	d7656 <__ieee754_pow+0x116>
   d7d56:	4602      	mov	r2, r0
   d7d58:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d7d5c:	ec43 2b10 	vmov	d0, r2, r3
   d7d60:	e437      	b.n	d75d2 <__ieee754_pow+0x92>
   d7d62:	4632      	mov	r2, r6
   d7d64:	463b      	mov	r3, r7
   d7d66:	4630      	mov	r0, r6
   d7d68:	4639      	mov	r1, r7
   d7d6a:	f000 fd3d 	bl	d87e8 <__aeabi_dmul>
   d7d6e:	ec41 0b10 	vmov	d0, r0, r1
   d7d72:	e42e      	b.n	d75d2 <__ieee754_pow+0x92>
   d7d74:	4b43      	ldr	r3, [pc, #268]	; (d7e84 <__ieee754_pow+0x944>)
   d7d76:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   d7d7a:	4598      	cmp	r8, r3
   d7d7c:	f340 8115 	ble.w	d7faa <__ieee754_pow+0xa6a>
   d7d80:	4b41      	ldr	r3, [pc, #260]	; (d7e88 <__ieee754_pow+0x948>)
   d7d82:	440b      	add	r3, r1
   d7d84:	4303      	orrs	r3, r0
   d7d86:	d10c      	bne.n	d7da2 <__ieee754_pow+0x862>
   d7d88:	4632      	mov	r2, r6
   d7d8a:	463b      	mov	r3, r7
   d7d8c:	f000 fb78 	bl	d8480 <__aeabi_dsub>
   d7d90:	4602      	mov	r2, r0
   d7d92:	460b      	mov	r3, r1
   d7d94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d7d98:	f000 ffa2 	bl	d8ce0 <__aeabi_dcmple>
   d7d9c:	2800      	cmp	r0, #0
   d7d9e:	f43f aee6 	beq.w	d7b6e <__ieee754_pow+0x62e>
   d7da2:	a32f      	add	r3, pc, #188	; (adr r3, d7e60 <__ieee754_pow+0x920>)
   d7da4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7da8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d7dac:	f000 fd1c 	bl	d87e8 <__aeabi_dmul>
   d7db0:	a32b      	add	r3, pc, #172	; (adr r3, d7e60 <__ieee754_pow+0x920>)
   d7db2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7db6:	f000 fd17 	bl	d87e8 <__aeabi_dmul>
   d7dba:	ec41 0b10 	vmov	d0, r0, r1
   d7dbe:	e408      	b.n	d75d2 <__ieee754_pow+0x92>
   d7dc0:	ed9f 7b29 	vldr	d7, [pc, #164]	; d7e68 <__ieee754_pow+0x928>
   d7dc4:	ed8d 7b06 	vstr	d7, [sp, #24]
   d7dc8:	e676      	b.n	d7ab8 <__ieee754_pow+0x578>
   d7dca:	f1b9 0f00 	cmp.w	r9, #0
   d7dce:	f6bf ac8e 	bge.w	d76ee <__ieee754_pow+0x1ae>
   d7dd2:	e9dd 3400 	ldrd	r3, r4, [sp]
   d7dd6:	ee00 3a10 	vmov	s0, r3
   d7dda:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
   d7dde:	ee00 3a90 	vmov	s1, r3
   d7de2:	f7ff bbf6 	b.w	d75d2 <__ieee754_pow+0x92>
   d7de6:	4602      	mov	r2, r0
   d7de8:	460b      	mov	r3, r1
   d7dea:	2000      	movs	r0, #0
   d7dec:	4924      	ldr	r1, [pc, #144]	; (d7e80 <__ieee754_pow+0x940>)
   d7dee:	f000 fe25 	bl	d8a3c <__aeabi_ddiv>
   d7df2:	e42d      	b.n	d7650 <__ieee754_pow+0x110>
   d7df4:	ed9f 7b1e 	vldr	d7, [pc, #120]	; d7e70 <__ieee754_pow+0x930>
   d7df8:	ed8d 7b08 	vstr	d7, [sp, #32]
   d7dfc:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d7e00:	ed9f 7b03 	vldr	d7, [pc, #12]	; d7e10 <__ieee754_pow+0x8d0>
   d7e04:	f04f 0800 	mov.w	r8, #0
   d7e08:	ed8d 7b06 	vstr	d7, [sp, #24]
   d7e0c:	e4be      	b.n	d778c <__ieee754_pow+0x24c>
   d7e0e:	bf00      	nop
   d7e10:	00000000 	.word	0x00000000
   d7e14:	3ff00000 	.word	0x3ff00000
   d7e18:	652b82fe 	.word	0x652b82fe
   d7e1c:	3c971547 	.word	0x3c971547
   d7e20:	00000000 	.word	0x00000000
   d7e24:	3fe62e43 	.word	0x3fe62e43
   d7e28:	fefa39ef 	.word	0xfefa39ef
   d7e2c:	3fe62e42 	.word	0x3fe62e42
   d7e30:	0ca86c39 	.word	0x0ca86c39
   d7e34:	be205c61 	.word	0xbe205c61
   d7e38:	72bea4d0 	.word	0x72bea4d0
   d7e3c:	3e663769 	.word	0x3e663769
   d7e40:	c5d26bf1 	.word	0xc5d26bf1
   d7e44:	3ebbbd41 	.word	0x3ebbbd41
   d7e48:	af25de2c 	.word	0xaf25de2c
   d7e4c:	3f11566a 	.word	0x3f11566a
   d7e50:	16bebd93 	.word	0x16bebd93
   d7e54:	3f66c16c 	.word	0x3f66c16c
   d7e58:	5555553e 	.word	0x5555553e
   d7e5c:	3fc55555 	.word	0x3fc55555
   d7e60:	c2f8f359 	.word	0xc2f8f359
   d7e64:	01a56e1f 	.word	0x01a56e1f
   d7e68:	00000000 	.word	0x00000000
   d7e6c:	bff00000 	.word	0xbff00000
	...
   d7e78:	408fffff 	.word	0x408fffff
   d7e7c:	000fffff 	.word	0x000fffff
   d7e80:	3ff00000 	.word	0x3ff00000
   d7e84:	4090cbff 	.word	0x4090cbff
   d7e88:	3f6f3400 	.word	0x3f6f3400
   d7e8c:	4b6c      	ldr	r3, [pc, #432]	; (d8040 <__ieee754_pow+0xb00>)
   d7e8e:	429c      	cmp	r4, r3
   d7e90:	f77f ac2a 	ble.w	d76e8 <__ieee754_pow+0x1a8>
   d7e94:	4b6b      	ldr	r3, [pc, #428]	; (d8044 <__ieee754_pow+0xb04>)
   d7e96:	429c      	cmp	r4, r3
   d7e98:	f73f abc3 	bgt.w	d7622 <__ieee754_pow+0xe2>
   d7e9c:	2200      	movs	r2, #0
   d7e9e:	4b69      	ldr	r3, [pc, #420]	; (d8044 <__ieee754_pow+0xb04>)
   d7ea0:	f000 faee 	bl	d8480 <__aeabi_dsub>
   d7ea4:	a356      	add	r3, pc, #344	; (adr r3, d8000 <__ieee754_pow+0xac0>)
   d7ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7eaa:	4604      	mov	r4, r0
   d7eac:	460d      	mov	r5, r1
   d7eae:	f000 fc9b 	bl	d87e8 <__aeabi_dmul>
   d7eb2:	a355      	add	r3, pc, #340	; (adr r3, d8008 <__ieee754_pow+0xac8>)
   d7eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7eb8:	4680      	mov	r8, r0
   d7eba:	4689      	mov	r9, r1
   d7ebc:	4620      	mov	r0, r4
   d7ebe:	4629      	mov	r1, r5
   d7ec0:	f000 fc92 	bl	d87e8 <__aeabi_dmul>
   d7ec4:	2200      	movs	r2, #0
   d7ec6:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d7eca:	4b5f      	ldr	r3, [pc, #380]	; (d8048 <__ieee754_pow+0xb08>)
   d7ecc:	4620      	mov	r0, r4
   d7ece:	4629      	mov	r1, r5
   d7ed0:	f000 fc8a 	bl	d87e8 <__aeabi_dmul>
   d7ed4:	4602      	mov	r2, r0
   d7ed6:	460b      	mov	r3, r1
   d7ed8:	a14d      	add	r1, pc, #308	; (adr r1, d8010 <__ieee754_pow+0xad0>)
   d7eda:	e9d1 0100 	ldrd	r0, r1, [r1]
   d7ede:	f000 facf 	bl	d8480 <__aeabi_dsub>
   d7ee2:	4622      	mov	r2, r4
   d7ee4:	462b      	mov	r3, r5
   d7ee6:	f000 fc7f 	bl	d87e8 <__aeabi_dmul>
   d7eea:	4602      	mov	r2, r0
   d7eec:	460b      	mov	r3, r1
   d7eee:	2000      	movs	r0, #0
   d7ef0:	4956      	ldr	r1, [pc, #344]	; (d804c <__ieee754_pow+0xb0c>)
   d7ef2:	f000 fac5 	bl	d8480 <__aeabi_dsub>
   d7ef6:	4622      	mov	r2, r4
   d7ef8:	462b      	mov	r3, r5
   d7efa:	4606      	mov	r6, r0
   d7efc:	460f      	mov	r7, r1
   d7efe:	4620      	mov	r0, r4
   d7f00:	4629      	mov	r1, r5
   d7f02:	f000 fc71 	bl	d87e8 <__aeabi_dmul>
   d7f06:	4602      	mov	r2, r0
   d7f08:	460b      	mov	r3, r1
   d7f0a:	4630      	mov	r0, r6
   d7f0c:	4639      	mov	r1, r7
   d7f0e:	f000 fc6b 	bl	d87e8 <__aeabi_dmul>
   d7f12:	a341      	add	r3, pc, #260	; (adr r3, d8018 <__ieee754_pow+0xad8>)
   d7f14:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7f18:	f000 fc66 	bl	d87e8 <__aeabi_dmul>
   d7f1c:	4602      	mov	r2, r0
   d7f1e:	460b      	mov	r3, r1
   d7f20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d7f24:	f000 faac 	bl	d8480 <__aeabi_dsub>
   d7f28:	4602      	mov	r2, r0
   d7f2a:	460b      	mov	r3, r1
   d7f2c:	4604      	mov	r4, r0
   d7f2e:	460d      	mov	r5, r1
   d7f30:	4640      	mov	r0, r8
   d7f32:	4649      	mov	r1, r9
   d7f34:	f000 faa6 	bl	d8484 <__adddf3>
   d7f38:	4642      	mov	r2, r8
   d7f3a:	464b      	mov	r3, r9
   d7f3c:	2000      	movs	r0, #0
   d7f3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d7f42:	f000 fa9d 	bl	d8480 <__aeabi_dsub>
   d7f46:	4602      	mov	r2, r0
   d7f48:	460b      	mov	r3, r1
   d7f4a:	4620      	mov	r0, r4
   d7f4c:	4629      	mov	r1, r5
   d7f4e:	f000 fa97 	bl	d8480 <__aeabi_dsub>
   d7f52:	4680      	mov	r8, r0
   d7f54:	4689      	mov	r9, r1
   d7f56:	e5a5      	b.n	d7aa4 <__ieee754_pow+0x564>
   d7f58:	4632      	mov	r2, r6
   d7f5a:	463b      	mov	r3, r7
   d7f5c:	2000      	movs	r0, #0
   d7f5e:	4939      	ldr	r1, [pc, #228]	; (d8044 <__ieee754_pow+0xb04>)
   d7f60:	f000 fd6c 	bl	d8a3c <__aeabi_ddiv>
   d7f64:	ec41 0b10 	vmov	d0, r0, r1
   d7f68:	f7ff bb33 	b.w	d75d2 <__ieee754_pow+0x92>
   d7f6c:	a32c      	add	r3, pc, #176	; (adr r3, d8020 <__ieee754_pow+0xae0>)
   d7f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7f72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d7f76:	f000 fc37 	bl	d87e8 <__aeabi_dmul>
   d7f7a:	a329      	add	r3, pc, #164	; (adr r3, d8020 <__ieee754_pow+0xae0>)
   d7f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7f80:	f000 fc32 	bl	d87e8 <__aeabi_dmul>
   d7f84:	ec41 0b10 	vmov	d0, r0, r1
   d7f88:	f7ff bb23 	b.w	d75d2 <__ieee754_pow+0x92>
   d7f8c:	f1be 0f00 	cmp.w	lr, #0
   d7f90:	f47f ab2a 	bne.w	d75e8 <__ieee754_pow+0xa8>
   d7f94:	f1c3 0314 	rsb	r3, r3, #20
   d7f98:	fa48 f203 	asr.w	r2, r8, r3
   d7f9c:	fa02 f303 	lsl.w	r3, r2, r3
   d7fa0:	4598      	cmp	r8, r3
   d7fa2:	d027      	beq.n	d7ff4 <__ieee754_pow+0xab4>
   d7fa4:	46f3      	mov	fp, lr
   d7fa6:	f7ff baf7 	b.w	d7598 <__ieee754_pow+0x58>
   d7faa:	4b28      	ldr	r3, [pc, #160]	; (d804c <__ieee754_pow+0xb0c>)
   d7fac:	4598      	cmp	r8, r3
   d7fae:	f73f adde 	bgt.w	d7b6e <__ieee754_pow+0x62e>
   d7fb2:	e9dd 3400 	ldrd	r3, r4, [sp]
   d7fb6:	469a      	mov	sl, r3
   d7fb8:	469b      	mov	fp, r3
   d7fba:	e607      	b.n	d7bcc <__ieee754_pow+0x68c>
   d7fbc:	4602      	mov	r2, r0
   d7fbe:	460b      	mov	r3, r1
   d7fc0:	f7ff bb89 	b.w	d76d6 <__ieee754_pow+0x196>
   d7fc4:	ed9f 7b18 	vldr	d7, [pc, #96]	; d8028 <__ieee754_pow+0xae8>
   d7fc8:	ed8d 7b08 	vstr	d7, [sp, #32]
   d7fcc:	ed9f 7b18 	vldr	d7, [pc, #96]	; d8030 <__ieee754_pow+0xaf0>
   d7fd0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d7fd4:	ed9f 7b18 	vldr	d7, [pc, #96]	; d8038 <__ieee754_pow+0xaf8>
   d7fd8:	f44f 2880 	mov.w	r8, #262144	; 0x40000
   d7fdc:	ed8d 7b06 	vstr	d7, [sp, #24]
   d7fe0:	f7ff bbd4 	b.w	d778c <__ieee754_pow+0x24c>
   d7fe4:	4658      	mov	r0, fp
   d7fe6:	ec43 2b10 	vmov	d0, r2, r3
   d7fea:	f000 f9b1 	bl	d8350 <scalbn>
   d7fee:	ec51 0b10 	vmov	r0, r1, d0
   d7ff2:	e69d      	b.n	d7d30 <__ieee754_pow+0x7f0>
   d7ff4:	f002 0201 	and.w	r2, r2, #1
   d7ff8:	f1c2 0b02 	rsb	fp, r2, #2
   d7ffc:	f7ff bacc 	b.w	d7598 <__ieee754_pow+0x58>
   d8000:	60000000 	.word	0x60000000
   d8004:	3ff71547 	.word	0x3ff71547
   d8008:	f85ddf44 	.word	0xf85ddf44
   d800c:	3e54ae0b 	.word	0x3e54ae0b
   d8010:	55555555 	.word	0x55555555
   d8014:	3fd55555 	.word	0x3fd55555
   d8018:	652b82fe 	.word	0x652b82fe
   d801c:	3ff71547 	.word	0x3ff71547
   d8020:	8800759c 	.word	0x8800759c
   d8024:	7e37e43c 	.word	0x7e37e43c
   d8028:	40000000 	.word	0x40000000
   d802c:	3fe2b803 	.word	0x3fe2b803
   d8030:	43cfd006 	.word	0x43cfd006
   d8034:	3e4cfdeb 	.word	0x3e4cfdeb
   d8038:	00000000 	.word	0x00000000
   d803c:	3ff80000 	.word	0x3ff80000
   d8040:	3feffffe 	.word	0x3feffffe
   d8044:	3ff00000 	.word	0x3ff00000
   d8048:	3fd00000 	.word	0x3fd00000
   d804c:	3fe00000 	.word	0x3fe00000

000d8050 <__ieee754_sqrt>:
   d8050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8054:	4965      	ldr	r1, [pc, #404]	; (d81ec <__ieee754_sqrt+0x19c>)
   d8056:	ec55 4b10 	vmov	r4, r5, d0
   d805a:	460e      	mov	r6, r1
   d805c:	4029      	ands	r1, r5
   d805e:	42b1      	cmp	r1, r6
   d8060:	f000 8097 	beq.w	d8192 <__ieee754_sqrt+0x142>
   d8064:	2d00      	cmp	r5, #0
   d8066:	462b      	mov	r3, r5
   d8068:	ee10 2a10 	vmov	r2, s0
   d806c:	dd74      	ble.n	d8158 <__ieee754_sqrt+0x108>
   d806e:	152f      	asrs	r7, r5, #20
   d8070:	d07f      	beq.n	d8172 <__ieee754_sqrt+0x122>
   d8072:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   d8076:	f3c3 0313 	ubfx	r3, r3, #0, #20
   d807a:	07f9      	lsls	r1, r7, #31
   d807c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8080:	d465      	bmi.n	d814e <__ieee754_sqrt+0xfe>
   d8082:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
   d8086:	2600      	movs	r6, #0
   d8088:	440b      	add	r3, r1
   d808a:	107f      	asrs	r7, r7, #1
   d808c:	0052      	lsls	r2, r2, #1
   d808e:	46b6      	mov	lr, r6
   d8090:	2016      	movs	r0, #22
   d8092:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   d8096:	eb0e 0401 	add.w	r4, lr, r1
   d809a:	429c      	cmp	r4, r3
   d809c:	ea4f 75d2 	mov.w	r5, r2, lsr #31
   d80a0:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d80a4:	dc03      	bgt.n	d80ae <__ieee754_sqrt+0x5e>
   d80a6:	1b1b      	subs	r3, r3, r4
   d80a8:	eb04 0e01 	add.w	lr, r4, r1
   d80ac:	440e      	add	r6, r1
   d80ae:	3801      	subs	r0, #1
   d80b0:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   d80b4:	ea4f 0151 	mov.w	r1, r1, lsr #1
   d80b8:	d1ed      	bne.n	d8096 <__ieee754_sqrt+0x46>
   d80ba:	4684      	mov	ip, r0
   d80bc:	2420      	movs	r4, #32
   d80be:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   d80c2:	e009      	b.n	d80d8 <__ieee754_sqrt+0x88>
   d80c4:	d020      	beq.n	d8108 <__ieee754_sqrt+0xb8>
   d80c6:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
   d80ca:	3c01      	subs	r4, #1
   d80cc:	ea4f 0151 	mov.w	r1, r1, lsr #1
   d80d0:	442b      	add	r3, r5
   d80d2:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d80d6:	d020      	beq.n	d811a <__ieee754_sqrt+0xca>
   d80d8:	459e      	cmp	lr, r3
   d80da:	eb01 050c 	add.w	r5, r1, ip
   d80de:	daf1      	bge.n	d80c4 <__ieee754_sqrt+0x74>
   d80e0:	2d00      	cmp	r5, #0
   d80e2:	eb05 0c01 	add.w	ip, r5, r1
   d80e6:	db09      	blt.n	d80fc <__ieee754_sqrt+0xac>
   d80e8:	46f0      	mov	r8, lr
   d80ea:	4295      	cmp	r5, r2
   d80ec:	ebce 0303 	rsb	r3, lr, r3
   d80f0:	d900      	bls.n	d80f4 <__ieee754_sqrt+0xa4>
   d80f2:	3b01      	subs	r3, #1
   d80f4:	1b52      	subs	r2, r2, r5
   d80f6:	4408      	add	r0, r1
   d80f8:	46c6      	mov	lr, r8
   d80fa:	e7e4      	b.n	d80c6 <__ieee754_sqrt+0x76>
   d80fc:	f1bc 0f00 	cmp.w	ip, #0
   d8100:	dbf2      	blt.n	d80e8 <__ieee754_sqrt+0x98>
   d8102:	f10e 0801 	add.w	r8, lr, #1
   d8106:	e7f0      	b.n	d80ea <__ieee754_sqrt+0x9a>
   d8108:	4295      	cmp	r5, r2
   d810a:	d81e      	bhi.n	d814a <__ieee754_sqrt+0xfa>
   d810c:	2d00      	cmp	r5, #0
   d810e:	eb05 0c01 	add.w	ip, r5, r1
   d8112:	db50      	blt.n	d81b6 <__ieee754_sqrt+0x166>
   d8114:	4698      	mov	r8, r3
   d8116:	2300      	movs	r3, #0
   d8118:	e7ec      	b.n	d80f4 <__ieee754_sqrt+0xa4>
   d811a:	4313      	orrs	r3, r2
   d811c:	d004      	beq.n	d8128 <__ieee754_sqrt+0xd8>
   d811e:	1c42      	adds	r2, r0, #1
   d8120:	d04d      	beq.n	d81be <__ieee754_sqrt+0x16e>
   d8122:	f000 0301 	and.w	r3, r0, #1
   d8126:	4418      	add	r0, r3
   d8128:	0840      	lsrs	r0, r0, #1
   d812a:	1071      	asrs	r1, r6, #1
   d812c:	07f3      	lsls	r3, r6, #31
   d812e:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   d8132:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   d8136:	bf48      	it	mi
   d8138:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   d813c:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   d8140:	4602      	mov	r2, r0
   d8142:	ec43 2b10 	vmov	d0, r2, r3
   d8146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d814a:	4673      	mov	r3, lr
   d814c:	e7bb      	b.n	d80c6 <__ieee754_sqrt+0x76>
   d814e:	005b      	lsls	r3, r3, #1
   d8150:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
   d8154:	0052      	lsls	r2, r2, #1
   d8156:	e794      	b.n	d8082 <__ieee754_sqrt+0x32>
   d8158:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
   d815c:	4321      	orrs	r1, r4
   d815e:	d028      	beq.n	d81b2 <__ieee754_sqrt+0x162>
   d8160:	bbad      	cbnz	r5, d81ce <__ieee754_sqrt+0x17e>
   d8162:	462f      	mov	r7, r5
   d8164:	0ad3      	lsrs	r3, r2, #11
   d8166:	3f15      	subs	r7, #21
   d8168:	0552      	lsls	r2, r2, #21
   d816a:	2b00      	cmp	r3, #0
   d816c:	d0fa      	beq.n	d8164 <__ieee754_sqrt+0x114>
   d816e:	02dd      	lsls	r5, r3, #11
   d8170:	d428      	bmi.n	d81c4 <__ieee754_sqrt+0x174>
   d8172:	2100      	movs	r1, #0
   d8174:	e000      	b.n	d8178 <__ieee754_sqrt+0x128>
   d8176:	4601      	mov	r1, r0
   d8178:	005b      	lsls	r3, r3, #1
   d817a:	02dc      	lsls	r4, r3, #11
   d817c:	f101 0001 	add.w	r0, r1, #1
   d8180:	d5f9      	bpl.n	d8176 <__ieee754_sqrt+0x126>
   d8182:	f1c0 0420 	rsb	r4, r0, #32
   d8186:	fa22 f404 	lsr.w	r4, r2, r4
   d818a:	4323      	orrs	r3, r4
   d818c:	1a7f      	subs	r7, r7, r1
   d818e:	4082      	lsls	r2, r0
   d8190:	e76f      	b.n	d8072 <__ieee754_sqrt+0x22>
   d8192:	ee10 2a10 	vmov	r2, s0
   d8196:	462b      	mov	r3, r5
   d8198:	ee10 0a10 	vmov	r0, s0
   d819c:	4629      	mov	r1, r5
   d819e:	f000 fb23 	bl	d87e8 <__aeabi_dmul>
   d81a2:	4622      	mov	r2, r4
   d81a4:	462b      	mov	r3, r5
   d81a6:	f000 f96d 	bl	d8484 <__adddf3>
   d81aa:	ec41 0b10 	vmov	d0, r0, r1
   d81ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d81b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d81b6:	f1bc 0f00 	cmp.w	ip, #0
   d81ba:	daa2      	bge.n	d8102 <__ieee754_sqrt+0xb2>
   d81bc:	e7aa      	b.n	d8114 <__ieee754_sqrt+0xc4>
   d81be:	3601      	adds	r6, #1
   d81c0:	4620      	mov	r0, r4
   d81c2:	e7b2      	b.n	d812a <__ieee754_sqrt+0xda>
   d81c4:	2420      	movs	r4, #32
   d81c6:	f04f 31ff 	mov.w	r1, #4294967295
   d81ca:	2000      	movs	r0, #0
   d81cc:	e7db      	b.n	d8186 <__ieee754_sqrt+0x136>
   d81ce:	ee10 2a10 	vmov	r2, s0
   d81d2:	462b      	mov	r3, r5
   d81d4:	4620      	mov	r0, r4
   d81d6:	4629      	mov	r1, r5
   d81d8:	f000 f952 	bl	d8480 <__aeabi_dsub>
   d81dc:	4602      	mov	r2, r0
   d81de:	460b      	mov	r3, r1
   d81e0:	f000 fc2c 	bl	d8a3c <__aeabi_ddiv>
   d81e4:	ec41 0b10 	vmov	d0, r0, r1
   d81e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d81ec:	7ff00000 	.word	0x7ff00000

000d81f0 <fabs>:
   d81f0:	ec53 2b10 	vmov	r2, r3, d0
   d81f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   d81f8:	ec43 2b10 	vmov	d0, r2, r3
   d81fc:	4770      	bx	lr
   d81fe:	bf00      	nop

000d8200 <finite>:
   d8200:	ee10 3a90 	vmov	r3, s1
   d8204:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
   d8208:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   d820c:	0fc0      	lsrs	r0, r0, #31
   d820e:	4770      	bx	lr

000d8210 <matherr>:
   d8210:	2000      	movs	r0, #0
   d8212:	4770      	bx	lr
   d8214:	0000      	movs	r0, r0
	...

000d8218 <nan>:
   d8218:	ed9f 0b01 	vldr	d0, [pc, #4]	; d8220 <nan+0x8>
   d821c:	4770      	bx	lr
   d821e:	bf00      	nop
   d8220:	00000000 	.word	0x00000000
   d8224:	7ff80000 	.word	0x7ff80000

000d8228 <rint>:
   d8228:	b5f0      	push	{r4, r5, r6, r7, lr}
   d822a:	ec53 2b10 	vmov	r2, r3, d0
   d822e:	f3c3 560a 	ubfx	r6, r3, #20, #11
   d8232:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
   d8236:	2813      	cmp	r0, #19
   d8238:	b083      	sub	sp, #12
   d823a:	4619      	mov	r1, r3
   d823c:	ea4f 74d3 	mov.w	r4, r3, lsr #31
   d8240:	ee10 5a10 	vmov	r5, s0
   d8244:	dc2f      	bgt.n	d82a6 <rint+0x7e>
   d8246:	2800      	cmp	r0, #0
   d8248:	db49      	blt.n	d82de <rint+0xb6>
   d824a:	4e3f      	ldr	r6, [pc, #252]	; (d8348 <rint+0x120>)
   d824c:	4106      	asrs	r6, r0
   d824e:	ea03 0706 	and.w	r7, r3, r6
   d8252:	4317      	orrs	r7, r2
   d8254:	d02c      	beq.n	d82b0 <rint+0x88>
   d8256:	0876      	lsrs	r6, r6, #1
   d8258:	4033      	ands	r3, r6
   d825a:	431d      	orrs	r5, r3
   d825c:	d00c      	beq.n	d8278 <rint+0x50>
   d825e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   d8262:	2813      	cmp	r0, #19
   d8264:	ea21 0606 	bic.w	r6, r1, r6
   d8268:	fa43 f100 	asr.w	r1, r3, r0
   d826c:	ea41 0106 	orr.w	r1, r1, r6
   d8270:	bf0c      	ite	eq
   d8272:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
   d8276:	2500      	movne	r5, #0
   d8278:	4834      	ldr	r0, [pc, #208]	; (d834c <rint+0x124>)
   d827a:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
   d827e:	462a      	mov	r2, r5
   d8280:	e9d4 4500 	ldrd	r4, r5, [r4]
   d8284:	4610      	mov	r0, r2
   d8286:	462b      	mov	r3, r5
   d8288:	4622      	mov	r2, r4
   d828a:	f000 f8fb 	bl	d8484 <__adddf3>
   d828e:	e9cd 0100 	strd	r0, r1, [sp]
   d8292:	4622      	mov	r2, r4
   d8294:	462b      	mov	r3, r5
   d8296:	e9dd 0100 	ldrd	r0, r1, [sp]
   d829a:	f000 f8f1 	bl	d8480 <__aeabi_dsub>
   d829e:	ec41 0b10 	vmov	d0, r0, r1
   d82a2:	b003      	add	sp, #12
   d82a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d82a6:	2833      	cmp	r0, #51	; 0x33
   d82a8:	dd06      	ble.n	d82b8 <rint+0x90>
   d82aa:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   d82ae:	d042      	beq.n	d8336 <rint+0x10e>
   d82b0:	ec43 2b10 	vmov	d0, r2, r3
   d82b4:	b003      	add	sp, #12
   d82b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d82b8:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   d82bc:	f04f 30ff 	mov.w	r0, #4294967295
   d82c0:	40f0      	lsrs	r0, r6
   d82c2:	4202      	tst	r2, r0
   d82c4:	d0f4      	beq.n	d82b0 <rint+0x88>
   d82c6:	0840      	lsrs	r0, r0, #1
   d82c8:	4202      	tst	r2, r0
   d82ca:	d0d5      	beq.n	d8278 <rint+0x50>
   d82cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d82d0:	ea25 0000 	bic.w	r0, r5, r0
   d82d4:	fa43 f606 	asr.w	r6, r3, r6
   d82d8:	ea46 0500 	orr.w	r5, r6, r0
   d82dc:	e7cc      	b.n	d8278 <rint+0x50>
   d82de:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   d82e2:	4310      	orrs	r0, r2
   d82e4:	ee10 7a10 	vmov	r7, s0
   d82e8:	d0e2      	beq.n	d82b0 <rint+0x88>
   d82ea:	f3c3 0013 	ubfx	r0, r3, #0, #20
   d82ee:	4307      	orrs	r7, r0
   d82f0:	4278      	negs	r0, r7
   d82f2:	4307      	orrs	r7, r0
   d82f4:	4815      	ldr	r0, [pc, #84]	; (d834c <rint+0x124>)
   d82f6:	0c59      	lsrs	r1, r3, #17
   d82f8:	0b3f      	lsrs	r7, r7, #12
   d82fa:	0449      	lsls	r1, r1, #17
   d82fc:	f407 2700 	and.w	r7, r7, #524288	; 0x80000
   d8300:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   d8304:	ea47 0301 	orr.w	r3, r7, r1
   d8308:	e9d0 6700 	ldrd	r6, r7, [r0]
   d830c:	4619      	mov	r1, r3
   d830e:	4610      	mov	r0, r2
   d8310:	463b      	mov	r3, r7
   d8312:	4632      	mov	r2, r6
   d8314:	f000 f8b6 	bl	d8484 <__adddf3>
   d8318:	e9cd 0100 	strd	r0, r1, [sp]
   d831c:	463b      	mov	r3, r7
   d831e:	4632      	mov	r2, r6
   d8320:	e9dd 0100 	ldrd	r0, r1, [sp]
   d8324:	f000 f8ac 	bl	d8480 <__aeabi_dsub>
   d8328:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d832c:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
   d8330:	ec41 0b10 	vmov	d0, r0, r1
   d8334:	e7be      	b.n	d82b4 <rint+0x8c>
   d8336:	ee10 0a10 	vmov	r0, s0
   d833a:	4619      	mov	r1, r3
   d833c:	f000 f8a2 	bl	d8484 <__adddf3>
   d8340:	ec41 0b10 	vmov	d0, r0, r1
   d8344:	e7b6      	b.n	d82b4 <rint+0x8c>
   d8346:	bf00      	nop
   d8348:	000fffff 	.word	0x000fffff
   d834c:	000d9dd8 	.word	0x000d9dd8

000d8350 <scalbn>:
   d8350:	ec53 2b10 	vmov	r2, r3, d0
   d8354:	b570      	push	{r4, r5, r6, lr}
   d8356:	f3c3 540a 	ubfx	r4, r3, #20, #11
   d835a:	4619      	mov	r1, r3
   d835c:	4605      	mov	r5, r0
   d835e:	bb14      	cbnz	r4, d83a6 <scalbn+0x56>
   d8360:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   d8364:	4311      	orrs	r1, r2
   d8366:	d02a      	beq.n	d83be <scalbn+0x6e>
   d8368:	4619      	mov	r1, r3
   d836a:	2200      	movs	r2, #0
   d836c:	4b38      	ldr	r3, [pc, #224]	; (d8450 <scalbn+0x100>)
   d836e:	4e39      	ldr	r6, [pc, #228]	; (d8454 <scalbn+0x104>)
   d8370:	ee10 0a10 	vmov	r0, s0
   d8374:	f000 fa38 	bl	d87e8 <__aeabi_dmul>
   d8378:	42b5      	cmp	r5, r6
   d837a:	4602      	mov	r2, r0
   d837c:	460b      	mov	r3, r1
   d837e:	db1f      	blt.n	d83c0 <scalbn+0x70>
   d8380:	f3c1 540a 	ubfx	r4, r1, #20, #11
   d8384:	3c36      	subs	r4, #54	; 0x36
   d8386:	442c      	add	r4, r5
   d8388:	f240 70fe 	movw	r0, #2046	; 0x7fe
   d838c:	4284      	cmp	r4, r0
   d838e:	dc1f      	bgt.n	d83d0 <scalbn+0x80>
   d8390:	2c00      	cmp	r4, #0
   d8392:	dd2d      	ble.n	d83f0 <scalbn+0xa0>
   d8394:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   d8398:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   d839c:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
   d83a0:	ec43 2b10 	vmov	d0, r2, r3
   d83a4:	bd70      	pop	{r4, r5, r6, pc}
   d83a6:	f240 70ff 	movw	r0, #2047	; 0x7ff
   d83aa:	4284      	cmp	r4, r0
   d83ac:	d1eb      	bne.n	d8386 <scalbn+0x36>
   d83ae:	ee10 0a10 	vmov	r0, s0
   d83b2:	4619      	mov	r1, r3
   d83b4:	f000 f866 	bl	d8484 <__adddf3>
   d83b8:	ec41 0b10 	vmov	d0, r0, r1
   d83bc:	bd70      	pop	{r4, r5, r6, pc}
   d83be:	bd70      	pop	{r4, r5, r6, pc}
   d83c0:	a31f      	add	r3, pc, #124	; (adr r3, d8440 <scalbn+0xf0>)
   d83c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d83c6:	f000 fa0f 	bl	d87e8 <__aeabi_dmul>
   d83ca:	ec41 0b10 	vmov	d0, r0, r1
   d83ce:	bd70      	pop	{r4, r5, r6, pc}
   d83d0:	ec43 2b11 	vmov	d1, r2, r3
   d83d4:	ed9f 0b1c 	vldr	d0, [pc, #112]	; d8448 <scalbn+0xf8>
   d83d8:	f000 f840 	bl	d845c <copysign>
   d83dc:	a31a      	add	r3, pc, #104	; (adr r3, d8448 <scalbn+0xf8>)
   d83de:	e9d3 2300 	ldrd	r2, r3, [r3]
   d83e2:	ec51 0b10 	vmov	r0, r1, d0
   d83e6:	f000 f9ff 	bl	d87e8 <__aeabi_dmul>
   d83ea:	ec41 0b10 	vmov	d0, r0, r1
   d83ee:	bd70      	pop	{r4, r5, r6, pc}
   d83f0:	f114 0f35 	cmn.w	r4, #53	; 0x35
   d83f4:	da13      	bge.n	d841e <scalbn+0xce>
   d83f6:	f24c 3150 	movw	r1, #50000	; 0xc350
   d83fa:	428d      	cmp	r5, r1
   d83fc:	ec43 2b11 	vmov	d1, r2, r3
   d8400:	dce8      	bgt.n	d83d4 <scalbn+0x84>
   d8402:	ed9f 0b0f 	vldr	d0, [pc, #60]	; d8440 <scalbn+0xf0>
   d8406:	f000 f829 	bl	d845c <copysign>
   d840a:	a30d      	add	r3, pc, #52	; (adr r3, d8440 <scalbn+0xf0>)
   d840c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8410:	ec51 0b10 	vmov	r0, r1, d0
   d8414:	f000 f9e8 	bl	d87e8 <__aeabi_dmul>
   d8418:	ec41 0b10 	vmov	d0, r0, r1
   d841c:	bd70      	pop	{r4, r5, r6, pc}
   d841e:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   d8422:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   d8426:	3436      	adds	r4, #54	; 0x36
   d8428:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
   d842c:	4610      	mov	r0, r2
   d842e:	4619      	mov	r1, r3
   d8430:	2200      	movs	r2, #0
   d8432:	4b09      	ldr	r3, [pc, #36]	; (d8458 <scalbn+0x108>)
   d8434:	f000 f9d8 	bl	d87e8 <__aeabi_dmul>
   d8438:	ec41 0b10 	vmov	d0, r0, r1
   d843c:	bd70      	pop	{r4, r5, r6, pc}
   d843e:	bf00      	nop
   d8440:	c2f8f359 	.word	0xc2f8f359
   d8444:	01a56e1f 	.word	0x01a56e1f
   d8448:	8800759c 	.word	0x8800759c
   d844c:	7e37e43c 	.word	0x7e37e43c
   d8450:	43500000 	.word	0x43500000
   d8454:	ffff3cb0 	.word	0xffff3cb0
   d8458:	3c900000 	.word	0x3c900000

000d845c <copysign>:
   d845c:	ec53 2b10 	vmov	r2, r3, d0
   d8460:	ee11 0a90 	vmov	r0, s3
   d8464:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   d8468:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   d846c:	ea41 0300 	orr.w	r3, r1, r0
   d8470:	ec43 2b10 	vmov	d0, r2, r3
   d8474:	4770      	bx	lr
   d8476:	bf00      	nop

000d8478 <__aeabi_drsub>:
   d8478:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d847c:	e002      	b.n	d8484 <__adddf3>
   d847e:	bf00      	nop

000d8480 <__aeabi_dsub>:
   d8480:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d8484 <__adddf3>:
   d8484:	b530      	push	{r4, r5, lr}
   d8486:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d848a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d848e:	ea94 0f05 	teq	r4, r5
   d8492:	bf08      	it	eq
   d8494:	ea90 0f02 	teqeq	r0, r2
   d8498:	bf1f      	itttt	ne
   d849a:	ea54 0c00 	orrsne.w	ip, r4, r0
   d849e:	ea55 0c02 	orrsne.w	ip, r5, r2
   d84a2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d84a6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d84aa:	f000 80e2 	beq.w	d8672 <__adddf3+0x1ee>
   d84ae:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d84b2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d84b6:	bfb8      	it	lt
   d84b8:	426d      	neglt	r5, r5
   d84ba:	dd0c      	ble.n	d84d6 <__adddf3+0x52>
   d84bc:	442c      	add	r4, r5
   d84be:	ea80 0202 	eor.w	r2, r0, r2
   d84c2:	ea81 0303 	eor.w	r3, r1, r3
   d84c6:	ea82 0000 	eor.w	r0, r2, r0
   d84ca:	ea83 0101 	eor.w	r1, r3, r1
   d84ce:	ea80 0202 	eor.w	r2, r0, r2
   d84d2:	ea81 0303 	eor.w	r3, r1, r3
   d84d6:	2d36      	cmp	r5, #54	; 0x36
   d84d8:	bf88      	it	hi
   d84da:	bd30      	pophi	{r4, r5, pc}
   d84dc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d84e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d84e4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d84e8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d84ec:	d002      	beq.n	d84f4 <__adddf3+0x70>
   d84ee:	4240      	negs	r0, r0
   d84f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d84f4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d84f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d84fc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d8500:	d002      	beq.n	d8508 <__adddf3+0x84>
   d8502:	4252      	negs	r2, r2
   d8504:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d8508:	ea94 0f05 	teq	r4, r5
   d850c:	f000 80a7 	beq.w	d865e <__adddf3+0x1da>
   d8510:	f1a4 0401 	sub.w	r4, r4, #1
   d8514:	f1d5 0e20 	rsbs	lr, r5, #32
   d8518:	db0d      	blt.n	d8536 <__adddf3+0xb2>
   d851a:	fa02 fc0e 	lsl.w	ip, r2, lr
   d851e:	fa22 f205 	lsr.w	r2, r2, r5
   d8522:	1880      	adds	r0, r0, r2
   d8524:	f141 0100 	adc.w	r1, r1, #0
   d8528:	fa03 f20e 	lsl.w	r2, r3, lr
   d852c:	1880      	adds	r0, r0, r2
   d852e:	fa43 f305 	asr.w	r3, r3, r5
   d8532:	4159      	adcs	r1, r3
   d8534:	e00e      	b.n	d8554 <__adddf3+0xd0>
   d8536:	f1a5 0520 	sub.w	r5, r5, #32
   d853a:	f10e 0e20 	add.w	lr, lr, #32
   d853e:	2a01      	cmp	r2, #1
   d8540:	fa03 fc0e 	lsl.w	ip, r3, lr
   d8544:	bf28      	it	cs
   d8546:	f04c 0c02 	orrcs.w	ip, ip, #2
   d854a:	fa43 f305 	asr.w	r3, r3, r5
   d854e:	18c0      	adds	r0, r0, r3
   d8550:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d8554:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8558:	d507      	bpl.n	d856a <__adddf3+0xe6>
   d855a:	f04f 0e00 	mov.w	lr, #0
   d855e:	f1dc 0c00 	rsbs	ip, ip, #0
   d8562:	eb7e 0000 	sbcs.w	r0, lr, r0
   d8566:	eb6e 0101 	sbc.w	r1, lr, r1
   d856a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d856e:	d31b      	bcc.n	d85a8 <__adddf3+0x124>
   d8570:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d8574:	d30c      	bcc.n	d8590 <__adddf3+0x10c>
   d8576:	0849      	lsrs	r1, r1, #1
   d8578:	ea5f 0030 	movs.w	r0, r0, rrx
   d857c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d8580:	f104 0401 	add.w	r4, r4, #1
   d8584:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d8588:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d858c:	f080 809a 	bcs.w	d86c4 <__adddf3+0x240>
   d8590:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d8594:	bf08      	it	eq
   d8596:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d859a:	f150 0000 	adcs.w	r0, r0, #0
   d859e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d85a2:	ea41 0105 	orr.w	r1, r1, r5
   d85a6:	bd30      	pop	{r4, r5, pc}
   d85a8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d85ac:	4140      	adcs	r0, r0
   d85ae:	eb41 0101 	adc.w	r1, r1, r1
   d85b2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d85b6:	f1a4 0401 	sub.w	r4, r4, #1
   d85ba:	d1e9      	bne.n	d8590 <__adddf3+0x10c>
   d85bc:	f091 0f00 	teq	r1, #0
   d85c0:	bf04      	itt	eq
   d85c2:	4601      	moveq	r1, r0
   d85c4:	2000      	moveq	r0, #0
   d85c6:	fab1 f381 	clz	r3, r1
   d85ca:	bf08      	it	eq
   d85cc:	3320      	addeq	r3, #32
   d85ce:	f1a3 030b 	sub.w	r3, r3, #11
   d85d2:	f1b3 0220 	subs.w	r2, r3, #32
   d85d6:	da0c      	bge.n	d85f2 <__adddf3+0x16e>
   d85d8:	320c      	adds	r2, #12
   d85da:	dd08      	ble.n	d85ee <__adddf3+0x16a>
   d85dc:	f102 0c14 	add.w	ip, r2, #20
   d85e0:	f1c2 020c 	rsb	r2, r2, #12
   d85e4:	fa01 f00c 	lsl.w	r0, r1, ip
   d85e8:	fa21 f102 	lsr.w	r1, r1, r2
   d85ec:	e00c      	b.n	d8608 <__adddf3+0x184>
   d85ee:	f102 0214 	add.w	r2, r2, #20
   d85f2:	bfd8      	it	le
   d85f4:	f1c2 0c20 	rsble	ip, r2, #32
   d85f8:	fa01 f102 	lsl.w	r1, r1, r2
   d85fc:	fa20 fc0c 	lsr.w	ip, r0, ip
   d8600:	bfdc      	itt	le
   d8602:	ea41 010c 	orrle.w	r1, r1, ip
   d8606:	4090      	lslle	r0, r2
   d8608:	1ae4      	subs	r4, r4, r3
   d860a:	bfa2      	ittt	ge
   d860c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d8610:	4329      	orrge	r1, r5
   d8612:	bd30      	popge	{r4, r5, pc}
   d8614:	ea6f 0404 	mvn.w	r4, r4
   d8618:	3c1f      	subs	r4, #31
   d861a:	da1c      	bge.n	d8656 <__adddf3+0x1d2>
   d861c:	340c      	adds	r4, #12
   d861e:	dc0e      	bgt.n	d863e <__adddf3+0x1ba>
   d8620:	f104 0414 	add.w	r4, r4, #20
   d8624:	f1c4 0220 	rsb	r2, r4, #32
   d8628:	fa20 f004 	lsr.w	r0, r0, r4
   d862c:	fa01 f302 	lsl.w	r3, r1, r2
   d8630:	ea40 0003 	orr.w	r0, r0, r3
   d8634:	fa21 f304 	lsr.w	r3, r1, r4
   d8638:	ea45 0103 	orr.w	r1, r5, r3
   d863c:	bd30      	pop	{r4, r5, pc}
   d863e:	f1c4 040c 	rsb	r4, r4, #12
   d8642:	f1c4 0220 	rsb	r2, r4, #32
   d8646:	fa20 f002 	lsr.w	r0, r0, r2
   d864a:	fa01 f304 	lsl.w	r3, r1, r4
   d864e:	ea40 0003 	orr.w	r0, r0, r3
   d8652:	4629      	mov	r1, r5
   d8654:	bd30      	pop	{r4, r5, pc}
   d8656:	fa21 f004 	lsr.w	r0, r1, r4
   d865a:	4629      	mov	r1, r5
   d865c:	bd30      	pop	{r4, r5, pc}
   d865e:	f094 0f00 	teq	r4, #0
   d8662:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d8666:	bf06      	itte	eq
   d8668:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d866c:	3401      	addeq	r4, #1
   d866e:	3d01      	subne	r5, #1
   d8670:	e74e      	b.n	d8510 <__adddf3+0x8c>
   d8672:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8676:	bf18      	it	ne
   d8678:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d867c:	d029      	beq.n	d86d2 <__adddf3+0x24e>
   d867e:	ea94 0f05 	teq	r4, r5
   d8682:	bf08      	it	eq
   d8684:	ea90 0f02 	teqeq	r0, r2
   d8688:	d005      	beq.n	d8696 <__adddf3+0x212>
   d868a:	ea54 0c00 	orrs.w	ip, r4, r0
   d868e:	bf04      	itt	eq
   d8690:	4619      	moveq	r1, r3
   d8692:	4610      	moveq	r0, r2
   d8694:	bd30      	pop	{r4, r5, pc}
   d8696:	ea91 0f03 	teq	r1, r3
   d869a:	bf1e      	ittt	ne
   d869c:	2100      	movne	r1, #0
   d869e:	2000      	movne	r0, #0
   d86a0:	bd30      	popne	{r4, r5, pc}
   d86a2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d86a6:	d105      	bne.n	d86b4 <__adddf3+0x230>
   d86a8:	0040      	lsls	r0, r0, #1
   d86aa:	4149      	adcs	r1, r1
   d86ac:	bf28      	it	cs
   d86ae:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d86b2:	bd30      	pop	{r4, r5, pc}
   d86b4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d86b8:	bf3c      	itt	cc
   d86ba:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d86be:	bd30      	popcc	{r4, r5, pc}
   d86c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d86c4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d86c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d86cc:	f04f 0000 	mov.w	r0, #0
   d86d0:	bd30      	pop	{r4, r5, pc}
   d86d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d86d6:	bf1a      	itte	ne
   d86d8:	4619      	movne	r1, r3
   d86da:	4610      	movne	r0, r2
   d86dc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d86e0:	bf1c      	itt	ne
   d86e2:	460b      	movne	r3, r1
   d86e4:	4602      	movne	r2, r0
   d86e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d86ea:	bf06      	itte	eq
   d86ec:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d86f0:	ea91 0f03 	teqeq	r1, r3
   d86f4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d86f8:	bd30      	pop	{r4, r5, pc}
   d86fa:	bf00      	nop

000d86fc <__aeabi_ui2d>:
   d86fc:	f090 0f00 	teq	r0, #0
   d8700:	bf04      	itt	eq
   d8702:	2100      	moveq	r1, #0
   d8704:	4770      	bxeq	lr
   d8706:	b530      	push	{r4, r5, lr}
   d8708:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d870c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8710:	f04f 0500 	mov.w	r5, #0
   d8714:	f04f 0100 	mov.w	r1, #0
   d8718:	e750      	b.n	d85bc <__adddf3+0x138>
   d871a:	bf00      	nop

000d871c <__aeabi_i2d>:
   d871c:	f090 0f00 	teq	r0, #0
   d8720:	bf04      	itt	eq
   d8722:	2100      	moveq	r1, #0
   d8724:	4770      	bxeq	lr
   d8726:	b530      	push	{r4, r5, lr}
   d8728:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d872c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8730:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d8734:	bf48      	it	mi
   d8736:	4240      	negmi	r0, r0
   d8738:	f04f 0100 	mov.w	r1, #0
   d873c:	e73e      	b.n	d85bc <__adddf3+0x138>
   d873e:	bf00      	nop

000d8740 <__aeabi_f2d>:
   d8740:	0042      	lsls	r2, r0, #1
   d8742:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d8746:	ea4f 0131 	mov.w	r1, r1, rrx
   d874a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d874e:	bf1f      	itttt	ne
   d8750:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d8754:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8758:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d875c:	4770      	bxne	lr
   d875e:	f092 0f00 	teq	r2, #0
   d8762:	bf14      	ite	ne
   d8764:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8768:	4770      	bxeq	lr
   d876a:	b530      	push	{r4, r5, lr}
   d876c:	f44f 7460 	mov.w	r4, #896	; 0x380
   d8770:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8774:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8778:	e720      	b.n	d85bc <__adddf3+0x138>
   d877a:	bf00      	nop

000d877c <__aeabi_ul2d>:
   d877c:	ea50 0201 	orrs.w	r2, r0, r1
   d8780:	bf08      	it	eq
   d8782:	4770      	bxeq	lr
   d8784:	b530      	push	{r4, r5, lr}
   d8786:	f04f 0500 	mov.w	r5, #0
   d878a:	e00a      	b.n	d87a2 <__aeabi_l2d+0x16>

000d878c <__aeabi_l2d>:
   d878c:	ea50 0201 	orrs.w	r2, r0, r1
   d8790:	bf08      	it	eq
   d8792:	4770      	bxeq	lr
   d8794:	b530      	push	{r4, r5, lr}
   d8796:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d879a:	d502      	bpl.n	d87a2 <__aeabi_l2d+0x16>
   d879c:	4240      	negs	r0, r0
   d879e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d87a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d87a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d87aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d87ae:	f43f aedc 	beq.w	d856a <__adddf3+0xe6>
   d87b2:	f04f 0203 	mov.w	r2, #3
   d87b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d87ba:	bf18      	it	ne
   d87bc:	3203      	addne	r2, #3
   d87be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d87c2:	bf18      	it	ne
   d87c4:	3203      	addne	r2, #3
   d87c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d87ca:	f1c2 0320 	rsb	r3, r2, #32
   d87ce:	fa00 fc03 	lsl.w	ip, r0, r3
   d87d2:	fa20 f002 	lsr.w	r0, r0, r2
   d87d6:	fa01 fe03 	lsl.w	lr, r1, r3
   d87da:	ea40 000e 	orr.w	r0, r0, lr
   d87de:	fa21 f102 	lsr.w	r1, r1, r2
   d87e2:	4414      	add	r4, r2
   d87e4:	e6c1      	b.n	d856a <__adddf3+0xe6>
   d87e6:	bf00      	nop

000d87e8 <__aeabi_dmul>:
   d87e8:	b570      	push	{r4, r5, r6, lr}
   d87ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d87ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d87f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d87f6:	bf1d      	ittte	ne
   d87f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d87fc:	ea94 0f0c 	teqne	r4, ip
   d8800:	ea95 0f0c 	teqne	r5, ip
   d8804:	f000 f8de 	bleq	d89c4 <__aeabi_dmul+0x1dc>
   d8808:	442c      	add	r4, r5
   d880a:	ea81 0603 	eor.w	r6, r1, r3
   d880e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d8812:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d8816:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d881a:	bf18      	it	ne
   d881c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d8820:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8824:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8828:	d038      	beq.n	d889c <__aeabi_dmul+0xb4>
   d882a:	fba0 ce02 	umull	ip, lr, r0, r2
   d882e:	f04f 0500 	mov.w	r5, #0
   d8832:	fbe1 e502 	umlal	lr, r5, r1, r2
   d8836:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d883a:	fbe0 e503 	umlal	lr, r5, r0, r3
   d883e:	f04f 0600 	mov.w	r6, #0
   d8842:	fbe1 5603 	umlal	r5, r6, r1, r3
   d8846:	f09c 0f00 	teq	ip, #0
   d884a:	bf18      	it	ne
   d884c:	f04e 0e01 	orrne.w	lr, lr, #1
   d8850:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d8854:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d8858:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d885c:	d204      	bcs.n	d8868 <__aeabi_dmul+0x80>
   d885e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d8862:	416d      	adcs	r5, r5
   d8864:	eb46 0606 	adc.w	r6, r6, r6
   d8868:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d886c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d8870:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d8874:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d8878:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d887c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8880:	bf88      	it	hi
   d8882:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8886:	d81e      	bhi.n	d88c6 <__aeabi_dmul+0xde>
   d8888:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d888c:	bf08      	it	eq
   d888e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d8892:	f150 0000 	adcs.w	r0, r0, #0
   d8896:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d889a:	bd70      	pop	{r4, r5, r6, pc}
   d889c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d88a0:	ea46 0101 	orr.w	r1, r6, r1
   d88a4:	ea40 0002 	orr.w	r0, r0, r2
   d88a8:	ea81 0103 	eor.w	r1, r1, r3
   d88ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d88b0:	bfc2      	ittt	gt
   d88b2:	ebd4 050c 	rsbsgt	r5, r4, ip
   d88b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d88ba:	bd70      	popgt	{r4, r5, r6, pc}
   d88bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d88c0:	f04f 0e00 	mov.w	lr, #0
   d88c4:	3c01      	subs	r4, #1
   d88c6:	f300 80ab 	bgt.w	d8a20 <__aeabi_dmul+0x238>
   d88ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d88ce:	bfde      	ittt	le
   d88d0:	2000      	movle	r0, #0
   d88d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d88d6:	bd70      	pople	{r4, r5, r6, pc}
   d88d8:	f1c4 0400 	rsb	r4, r4, #0
   d88dc:	3c20      	subs	r4, #32
   d88de:	da35      	bge.n	d894c <__aeabi_dmul+0x164>
   d88e0:	340c      	adds	r4, #12
   d88e2:	dc1b      	bgt.n	d891c <__aeabi_dmul+0x134>
   d88e4:	f104 0414 	add.w	r4, r4, #20
   d88e8:	f1c4 0520 	rsb	r5, r4, #32
   d88ec:	fa00 f305 	lsl.w	r3, r0, r5
   d88f0:	fa20 f004 	lsr.w	r0, r0, r4
   d88f4:	fa01 f205 	lsl.w	r2, r1, r5
   d88f8:	ea40 0002 	orr.w	r0, r0, r2
   d88fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d8900:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8904:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8908:	fa21 f604 	lsr.w	r6, r1, r4
   d890c:	eb42 0106 	adc.w	r1, r2, r6
   d8910:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8914:	bf08      	it	eq
   d8916:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d891a:	bd70      	pop	{r4, r5, r6, pc}
   d891c:	f1c4 040c 	rsb	r4, r4, #12
   d8920:	f1c4 0520 	rsb	r5, r4, #32
   d8924:	fa00 f304 	lsl.w	r3, r0, r4
   d8928:	fa20 f005 	lsr.w	r0, r0, r5
   d892c:	fa01 f204 	lsl.w	r2, r1, r4
   d8930:	ea40 0002 	orr.w	r0, r0, r2
   d8934:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8938:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d893c:	f141 0100 	adc.w	r1, r1, #0
   d8940:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8944:	bf08      	it	eq
   d8946:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d894a:	bd70      	pop	{r4, r5, r6, pc}
   d894c:	f1c4 0520 	rsb	r5, r4, #32
   d8950:	fa00 f205 	lsl.w	r2, r0, r5
   d8954:	ea4e 0e02 	orr.w	lr, lr, r2
   d8958:	fa20 f304 	lsr.w	r3, r0, r4
   d895c:	fa01 f205 	lsl.w	r2, r1, r5
   d8960:	ea43 0302 	orr.w	r3, r3, r2
   d8964:	fa21 f004 	lsr.w	r0, r1, r4
   d8968:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d896c:	fa21 f204 	lsr.w	r2, r1, r4
   d8970:	ea20 0002 	bic.w	r0, r0, r2
   d8974:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d8978:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d897c:	bf08      	it	eq
   d897e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8982:	bd70      	pop	{r4, r5, r6, pc}
   d8984:	f094 0f00 	teq	r4, #0
   d8988:	d10f      	bne.n	d89aa <__aeabi_dmul+0x1c2>
   d898a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d898e:	0040      	lsls	r0, r0, #1
   d8990:	eb41 0101 	adc.w	r1, r1, r1
   d8994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8998:	bf08      	it	eq
   d899a:	3c01      	subeq	r4, #1
   d899c:	d0f7      	beq.n	d898e <__aeabi_dmul+0x1a6>
   d899e:	ea41 0106 	orr.w	r1, r1, r6
   d89a2:	f095 0f00 	teq	r5, #0
   d89a6:	bf18      	it	ne
   d89a8:	4770      	bxne	lr
   d89aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d89ae:	0052      	lsls	r2, r2, #1
   d89b0:	eb43 0303 	adc.w	r3, r3, r3
   d89b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d89b8:	bf08      	it	eq
   d89ba:	3d01      	subeq	r5, #1
   d89bc:	d0f7      	beq.n	d89ae <__aeabi_dmul+0x1c6>
   d89be:	ea43 0306 	orr.w	r3, r3, r6
   d89c2:	4770      	bx	lr
   d89c4:	ea94 0f0c 	teq	r4, ip
   d89c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d89cc:	bf18      	it	ne
   d89ce:	ea95 0f0c 	teqne	r5, ip
   d89d2:	d00c      	beq.n	d89ee <__aeabi_dmul+0x206>
   d89d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d89d8:	bf18      	it	ne
   d89da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d89de:	d1d1      	bne.n	d8984 <__aeabi_dmul+0x19c>
   d89e0:	ea81 0103 	eor.w	r1, r1, r3
   d89e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d89e8:	f04f 0000 	mov.w	r0, #0
   d89ec:	bd70      	pop	{r4, r5, r6, pc}
   d89ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d89f2:	bf06      	itte	eq
   d89f4:	4610      	moveq	r0, r2
   d89f6:	4619      	moveq	r1, r3
   d89f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d89fc:	d019      	beq.n	d8a32 <__aeabi_dmul+0x24a>
   d89fe:	ea94 0f0c 	teq	r4, ip
   d8a02:	d102      	bne.n	d8a0a <__aeabi_dmul+0x222>
   d8a04:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d8a08:	d113      	bne.n	d8a32 <__aeabi_dmul+0x24a>
   d8a0a:	ea95 0f0c 	teq	r5, ip
   d8a0e:	d105      	bne.n	d8a1c <__aeabi_dmul+0x234>
   d8a10:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d8a14:	bf1c      	itt	ne
   d8a16:	4610      	movne	r0, r2
   d8a18:	4619      	movne	r1, r3
   d8a1a:	d10a      	bne.n	d8a32 <__aeabi_dmul+0x24a>
   d8a1c:	ea81 0103 	eor.w	r1, r1, r3
   d8a20:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8a24:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8a28:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8a2c:	f04f 0000 	mov.w	r0, #0
   d8a30:	bd70      	pop	{r4, r5, r6, pc}
   d8a32:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8a36:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d8a3a:	bd70      	pop	{r4, r5, r6, pc}

000d8a3c <__aeabi_ddiv>:
   d8a3c:	b570      	push	{r4, r5, r6, lr}
   d8a3e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8a42:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8a46:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8a4a:	bf1d      	ittte	ne
   d8a4c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8a50:	ea94 0f0c 	teqne	r4, ip
   d8a54:	ea95 0f0c 	teqne	r5, ip
   d8a58:	f000 f8a7 	bleq	d8baa <__aeabi_ddiv+0x16e>
   d8a5c:	eba4 0405 	sub.w	r4, r4, r5
   d8a60:	ea81 0e03 	eor.w	lr, r1, r3
   d8a64:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8a68:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8a6c:	f000 8088 	beq.w	d8b80 <__aeabi_ddiv+0x144>
   d8a70:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8a74:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d8a78:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d8a7c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d8a80:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d8a84:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d8a88:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d8a8c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d8a90:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d8a94:	429d      	cmp	r5, r3
   d8a96:	bf08      	it	eq
   d8a98:	4296      	cmpeq	r6, r2
   d8a9a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d8a9e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d8aa2:	d202      	bcs.n	d8aaa <__aeabi_ddiv+0x6e>
   d8aa4:	085b      	lsrs	r3, r3, #1
   d8aa6:	ea4f 0232 	mov.w	r2, r2, rrx
   d8aaa:	1ab6      	subs	r6, r6, r2
   d8aac:	eb65 0503 	sbc.w	r5, r5, r3
   d8ab0:	085b      	lsrs	r3, r3, #1
   d8ab2:	ea4f 0232 	mov.w	r2, r2, rrx
   d8ab6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d8aba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d8abe:	ebb6 0e02 	subs.w	lr, r6, r2
   d8ac2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8ac6:	bf22      	ittt	cs
   d8ac8:	1ab6      	subcs	r6, r6, r2
   d8aca:	4675      	movcs	r5, lr
   d8acc:	ea40 000c 	orrcs.w	r0, r0, ip
   d8ad0:	085b      	lsrs	r3, r3, #1
   d8ad2:	ea4f 0232 	mov.w	r2, r2, rrx
   d8ad6:	ebb6 0e02 	subs.w	lr, r6, r2
   d8ada:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8ade:	bf22      	ittt	cs
   d8ae0:	1ab6      	subcs	r6, r6, r2
   d8ae2:	4675      	movcs	r5, lr
   d8ae4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d8ae8:	085b      	lsrs	r3, r3, #1
   d8aea:	ea4f 0232 	mov.w	r2, r2, rrx
   d8aee:	ebb6 0e02 	subs.w	lr, r6, r2
   d8af2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8af6:	bf22      	ittt	cs
   d8af8:	1ab6      	subcs	r6, r6, r2
   d8afa:	4675      	movcs	r5, lr
   d8afc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d8b00:	085b      	lsrs	r3, r3, #1
   d8b02:	ea4f 0232 	mov.w	r2, r2, rrx
   d8b06:	ebb6 0e02 	subs.w	lr, r6, r2
   d8b0a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8b0e:	bf22      	ittt	cs
   d8b10:	1ab6      	subcs	r6, r6, r2
   d8b12:	4675      	movcs	r5, lr
   d8b14:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d8b18:	ea55 0e06 	orrs.w	lr, r5, r6
   d8b1c:	d018      	beq.n	d8b50 <__aeabi_ddiv+0x114>
   d8b1e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d8b22:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d8b26:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d8b2a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d8b2e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d8b32:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d8b36:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d8b3a:	d1c0      	bne.n	d8abe <__aeabi_ddiv+0x82>
   d8b3c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8b40:	d10b      	bne.n	d8b5a <__aeabi_ddiv+0x11e>
   d8b42:	ea41 0100 	orr.w	r1, r1, r0
   d8b46:	f04f 0000 	mov.w	r0, #0
   d8b4a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d8b4e:	e7b6      	b.n	d8abe <__aeabi_ddiv+0x82>
   d8b50:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8b54:	bf04      	itt	eq
   d8b56:	4301      	orreq	r1, r0
   d8b58:	2000      	moveq	r0, #0
   d8b5a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8b5e:	bf88      	it	hi
   d8b60:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8b64:	f63f aeaf 	bhi.w	d88c6 <__aeabi_dmul+0xde>
   d8b68:	ebb5 0c03 	subs.w	ip, r5, r3
   d8b6c:	bf04      	itt	eq
   d8b6e:	ebb6 0c02 	subseq.w	ip, r6, r2
   d8b72:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8b76:	f150 0000 	adcs.w	r0, r0, #0
   d8b7a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8b7e:	bd70      	pop	{r4, r5, r6, pc}
   d8b80:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d8b84:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d8b88:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d8b8c:	bfc2      	ittt	gt
   d8b8e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8b92:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8b96:	bd70      	popgt	{r4, r5, r6, pc}
   d8b98:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8b9c:	f04f 0e00 	mov.w	lr, #0
   d8ba0:	3c01      	subs	r4, #1
   d8ba2:	e690      	b.n	d88c6 <__aeabi_dmul+0xde>
   d8ba4:	ea45 0e06 	orr.w	lr, r5, r6
   d8ba8:	e68d      	b.n	d88c6 <__aeabi_dmul+0xde>
   d8baa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8bae:	ea94 0f0c 	teq	r4, ip
   d8bb2:	bf08      	it	eq
   d8bb4:	ea95 0f0c 	teqeq	r5, ip
   d8bb8:	f43f af3b 	beq.w	d8a32 <__aeabi_dmul+0x24a>
   d8bbc:	ea94 0f0c 	teq	r4, ip
   d8bc0:	d10a      	bne.n	d8bd8 <__aeabi_ddiv+0x19c>
   d8bc2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8bc6:	f47f af34 	bne.w	d8a32 <__aeabi_dmul+0x24a>
   d8bca:	ea95 0f0c 	teq	r5, ip
   d8bce:	f47f af25 	bne.w	d8a1c <__aeabi_dmul+0x234>
   d8bd2:	4610      	mov	r0, r2
   d8bd4:	4619      	mov	r1, r3
   d8bd6:	e72c      	b.n	d8a32 <__aeabi_dmul+0x24a>
   d8bd8:	ea95 0f0c 	teq	r5, ip
   d8bdc:	d106      	bne.n	d8bec <__aeabi_ddiv+0x1b0>
   d8bde:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8be2:	f43f aefd 	beq.w	d89e0 <__aeabi_dmul+0x1f8>
   d8be6:	4610      	mov	r0, r2
   d8be8:	4619      	mov	r1, r3
   d8bea:	e722      	b.n	d8a32 <__aeabi_dmul+0x24a>
   d8bec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8bf0:	bf18      	it	ne
   d8bf2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8bf6:	f47f aec5 	bne.w	d8984 <__aeabi_dmul+0x19c>
   d8bfa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d8bfe:	f47f af0d 	bne.w	d8a1c <__aeabi_dmul+0x234>
   d8c02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d8c06:	f47f aeeb 	bne.w	d89e0 <__aeabi_dmul+0x1f8>
   d8c0a:	e712      	b.n	d8a32 <__aeabi_dmul+0x24a>

000d8c0c <__gedf2>:
   d8c0c:	f04f 3cff 	mov.w	ip, #4294967295
   d8c10:	e006      	b.n	d8c20 <__cmpdf2+0x4>
   d8c12:	bf00      	nop

000d8c14 <__ledf2>:
   d8c14:	f04f 0c01 	mov.w	ip, #1
   d8c18:	e002      	b.n	d8c20 <__cmpdf2+0x4>
   d8c1a:	bf00      	nop

000d8c1c <__cmpdf2>:
   d8c1c:	f04f 0c01 	mov.w	ip, #1
   d8c20:	f84d cd04 	str.w	ip, [sp, #-4]!
   d8c24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8c28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8c2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8c30:	bf18      	it	ne
   d8c32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d8c36:	d01b      	beq.n	d8c70 <__cmpdf2+0x54>
   d8c38:	b001      	add	sp, #4
   d8c3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d8c3e:	bf0c      	ite	eq
   d8c40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d8c44:	ea91 0f03 	teqne	r1, r3
   d8c48:	bf02      	ittt	eq
   d8c4a:	ea90 0f02 	teqeq	r0, r2
   d8c4e:	2000      	moveq	r0, #0
   d8c50:	4770      	bxeq	lr
   d8c52:	f110 0f00 	cmn.w	r0, #0
   d8c56:	ea91 0f03 	teq	r1, r3
   d8c5a:	bf58      	it	pl
   d8c5c:	4299      	cmppl	r1, r3
   d8c5e:	bf08      	it	eq
   d8c60:	4290      	cmpeq	r0, r2
   d8c62:	bf2c      	ite	cs
   d8c64:	17d8      	asrcs	r0, r3, #31
   d8c66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d8c6a:	f040 0001 	orr.w	r0, r0, #1
   d8c6e:	4770      	bx	lr
   d8c70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8c74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8c78:	d102      	bne.n	d8c80 <__cmpdf2+0x64>
   d8c7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d8c7e:	d107      	bne.n	d8c90 <__cmpdf2+0x74>
   d8c80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8c84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8c88:	d1d6      	bne.n	d8c38 <__cmpdf2+0x1c>
   d8c8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d8c8e:	d0d3      	beq.n	d8c38 <__cmpdf2+0x1c>
   d8c90:	f85d 0b04 	ldr.w	r0, [sp], #4
   d8c94:	4770      	bx	lr
   d8c96:	bf00      	nop

000d8c98 <__aeabi_cdrcmple>:
   d8c98:	4684      	mov	ip, r0
   d8c9a:	4610      	mov	r0, r2
   d8c9c:	4662      	mov	r2, ip
   d8c9e:	468c      	mov	ip, r1
   d8ca0:	4619      	mov	r1, r3
   d8ca2:	4663      	mov	r3, ip
   d8ca4:	e000      	b.n	d8ca8 <__aeabi_cdcmpeq>
   d8ca6:	bf00      	nop

000d8ca8 <__aeabi_cdcmpeq>:
   d8ca8:	b501      	push	{r0, lr}
   d8caa:	f7ff ffb7 	bl	d8c1c <__cmpdf2>
   d8cae:	2800      	cmp	r0, #0
   d8cb0:	bf48      	it	mi
   d8cb2:	f110 0f00 	cmnmi.w	r0, #0
   d8cb6:	bd01      	pop	{r0, pc}

000d8cb8 <__aeabi_dcmpeq>:
   d8cb8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8cbc:	f7ff fff4 	bl	d8ca8 <__aeabi_cdcmpeq>
   d8cc0:	bf0c      	ite	eq
   d8cc2:	2001      	moveq	r0, #1
   d8cc4:	2000      	movne	r0, #0
   d8cc6:	f85d fb08 	ldr.w	pc, [sp], #8
   d8cca:	bf00      	nop

000d8ccc <__aeabi_dcmplt>:
   d8ccc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8cd0:	f7ff ffea 	bl	d8ca8 <__aeabi_cdcmpeq>
   d8cd4:	bf34      	ite	cc
   d8cd6:	2001      	movcc	r0, #1
   d8cd8:	2000      	movcs	r0, #0
   d8cda:	f85d fb08 	ldr.w	pc, [sp], #8
   d8cde:	bf00      	nop

000d8ce0 <__aeabi_dcmple>:
   d8ce0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8ce4:	f7ff ffe0 	bl	d8ca8 <__aeabi_cdcmpeq>
   d8ce8:	bf94      	ite	ls
   d8cea:	2001      	movls	r0, #1
   d8cec:	2000      	movhi	r0, #0
   d8cee:	f85d fb08 	ldr.w	pc, [sp], #8
   d8cf2:	bf00      	nop

000d8cf4 <__aeabi_dcmpge>:
   d8cf4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8cf8:	f7ff ffce 	bl	d8c98 <__aeabi_cdrcmple>
   d8cfc:	bf94      	ite	ls
   d8cfe:	2001      	movls	r0, #1
   d8d00:	2000      	movhi	r0, #0
   d8d02:	f85d fb08 	ldr.w	pc, [sp], #8
   d8d06:	bf00      	nop

000d8d08 <__aeabi_dcmpgt>:
   d8d08:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8d0c:	f7ff ffc4 	bl	d8c98 <__aeabi_cdrcmple>
   d8d10:	bf34      	ite	cc
   d8d12:	2001      	movcc	r0, #1
   d8d14:	2000      	movcs	r0, #0
   d8d16:	f85d fb08 	ldr.w	pc, [sp], #8
   d8d1a:	bf00      	nop

000d8d1c <__aeabi_dcmpun>:
   d8d1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8d20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8d24:	d102      	bne.n	d8d2c <__aeabi_dcmpun+0x10>
   d8d26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d8d2a:	d10a      	bne.n	d8d42 <__aeabi_dcmpun+0x26>
   d8d2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8d30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8d34:	d102      	bne.n	d8d3c <__aeabi_dcmpun+0x20>
   d8d36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d8d3a:	d102      	bne.n	d8d42 <__aeabi_dcmpun+0x26>
   d8d3c:	f04f 0000 	mov.w	r0, #0
   d8d40:	4770      	bx	lr
   d8d42:	f04f 0001 	mov.w	r0, #1
   d8d46:	4770      	bx	lr

000d8d48 <__aeabi_d2iz>:
   d8d48:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d8d4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d8d50:	d215      	bcs.n	d8d7e <__aeabi_d2iz+0x36>
   d8d52:	d511      	bpl.n	d8d78 <__aeabi_d2iz+0x30>
   d8d54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d8d58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d8d5c:	d912      	bls.n	d8d84 <__aeabi_d2iz+0x3c>
   d8d5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8d62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d8d66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d8d6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8d6e:	fa23 f002 	lsr.w	r0, r3, r2
   d8d72:	bf18      	it	ne
   d8d74:	4240      	negne	r0, r0
   d8d76:	4770      	bx	lr
   d8d78:	f04f 0000 	mov.w	r0, #0
   d8d7c:	4770      	bx	lr
   d8d7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d8d82:	d105      	bne.n	d8d90 <__aeabi_d2iz+0x48>
   d8d84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d8d88:	bf08      	it	eq
   d8d8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d8d8e:	4770      	bx	lr
   d8d90:	f04f 0000 	mov.w	r0, #0
   d8d94:	4770      	bx	lr
   d8d96:	bf00      	nop

000d8d98 <__aeabi_d2uiz>:
   d8d98:	004a      	lsls	r2, r1, #1
   d8d9a:	d211      	bcs.n	d8dc0 <__aeabi_d2uiz+0x28>
   d8d9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d8da0:	d211      	bcs.n	d8dc6 <__aeabi_d2uiz+0x2e>
   d8da2:	d50d      	bpl.n	d8dc0 <__aeabi_d2uiz+0x28>
   d8da4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d8da8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d8dac:	d40e      	bmi.n	d8dcc <__aeabi_d2uiz+0x34>
   d8dae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8db2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d8db6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d8dba:	fa23 f002 	lsr.w	r0, r3, r2
   d8dbe:	4770      	bx	lr
   d8dc0:	f04f 0000 	mov.w	r0, #0
   d8dc4:	4770      	bx	lr
   d8dc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d8dca:	d102      	bne.n	d8dd2 <__aeabi_d2uiz+0x3a>
   d8dcc:	f04f 30ff 	mov.w	r0, #4294967295
   d8dd0:	4770      	bx	lr
   d8dd2:	f04f 0000 	mov.w	r0, #0
   d8dd6:	4770      	bx	lr

000d8dd8 <__aeabi_d2f>:
   d8dd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d8ddc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d8de0:	bf24      	itt	cs
   d8de2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d8de6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d8dea:	d90d      	bls.n	d8e08 <__aeabi_d2f+0x30>
   d8dec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d8df0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d8df4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d8df8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d8dfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d8e00:	bf08      	it	eq
   d8e02:	f020 0001 	biceq.w	r0, r0, #1
   d8e06:	4770      	bx	lr
   d8e08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d8e0c:	d121      	bne.n	d8e52 <__aeabi_d2f+0x7a>
   d8e0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d8e12:	bfbc      	itt	lt
   d8e14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d8e18:	4770      	bxlt	lr
   d8e1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8e1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d8e22:	f1c2 0218 	rsb	r2, r2, #24
   d8e26:	f1c2 0c20 	rsb	ip, r2, #32
   d8e2a:	fa10 f30c 	lsls.w	r3, r0, ip
   d8e2e:	fa20 f002 	lsr.w	r0, r0, r2
   d8e32:	bf18      	it	ne
   d8e34:	f040 0001 	orrne.w	r0, r0, #1
   d8e38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8e3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d8e40:	fa03 fc0c 	lsl.w	ip, r3, ip
   d8e44:	ea40 000c 	orr.w	r0, r0, ip
   d8e48:	fa23 f302 	lsr.w	r3, r3, r2
   d8e4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d8e50:	e7cc      	b.n	d8dec <__aeabi_d2f+0x14>
   d8e52:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d8e56:	d107      	bne.n	d8e68 <__aeabi_d2f+0x90>
   d8e58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d8e5c:	bf1e      	ittt	ne
   d8e5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d8e62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d8e66:	4770      	bxne	lr
   d8e68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d8e6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d8e70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d8e74:	4770      	bx	lr
   d8e76:	bf00      	nop

000d8e78 <__aeabi_frsub>:
   d8e78:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   d8e7c:	e002      	b.n	d8e84 <__addsf3>
   d8e7e:	bf00      	nop

000d8e80 <__aeabi_fsub>:
   d8e80:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000d8e84 <__addsf3>:
   d8e84:	0042      	lsls	r2, r0, #1
   d8e86:	bf1f      	itttt	ne
   d8e88:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   d8e8c:	ea92 0f03 	teqne	r2, r3
   d8e90:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   d8e94:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   d8e98:	d06a      	beq.n	d8f70 <__addsf3+0xec>
   d8e9a:	ea4f 6212 	mov.w	r2, r2, lsr #24
   d8e9e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   d8ea2:	bfc1      	itttt	gt
   d8ea4:	18d2      	addgt	r2, r2, r3
   d8ea6:	4041      	eorgt	r1, r0
   d8ea8:	4048      	eorgt	r0, r1
   d8eaa:	4041      	eorgt	r1, r0
   d8eac:	bfb8      	it	lt
   d8eae:	425b      	neglt	r3, r3
   d8eb0:	2b19      	cmp	r3, #25
   d8eb2:	bf88      	it	hi
   d8eb4:	4770      	bxhi	lr
   d8eb6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   d8eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d8ebe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   d8ec2:	bf18      	it	ne
   d8ec4:	4240      	negne	r0, r0
   d8ec6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8eca:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   d8ece:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   d8ed2:	bf18      	it	ne
   d8ed4:	4249      	negne	r1, r1
   d8ed6:	ea92 0f03 	teq	r2, r3
   d8eda:	d03f      	beq.n	d8f5c <__addsf3+0xd8>
   d8edc:	f1a2 0201 	sub.w	r2, r2, #1
   d8ee0:	fa41 fc03 	asr.w	ip, r1, r3
   d8ee4:	eb10 000c 	adds.w	r0, r0, ip
   d8ee8:	f1c3 0320 	rsb	r3, r3, #32
   d8eec:	fa01 f103 	lsl.w	r1, r1, r3
   d8ef0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   d8ef4:	d502      	bpl.n	d8efc <__addsf3+0x78>
   d8ef6:	4249      	negs	r1, r1
   d8ef8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   d8efc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   d8f00:	d313      	bcc.n	d8f2a <__addsf3+0xa6>
   d8f02:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   d8f06:	d306      	bcc.n	d8f16 <__addsf3+0x92>
   d8f08:	0840      	lsrs	r0, r0, #1
   d8f0a:	ea4f 0131 	mov.w	r1, r1, rrx
   d8f0e:	f102 0201 	add.w	r2, r2, #1
   d8f12:	2afe      	cmp	r2, #254	; 0xfe
   d8f14:	d251      	bcs.n	d8fba <__addsf3+0x136>
   d8f16:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   d8f1a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   d8f1e:	bf08      	it	eq
   d8f20:	f020 0001 	biceq.w	r0, r0, #1
   d8f24:	ea40 0003 	orr.w	r0, r0, r3
   d8f28:	4770      	bx	lr
   d8f2a:	0049      	lsls	r1, r1, #1
   d8f2c:	eb40 0000 	adc.w	r0, r0, r0
   d8f30:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   d8f34:	f1a2 0201 	sub.w	r2, r2, #1
   d8f38:	d1ed      	bne.n	d8f16 <__addsf3+0x92>
   d8f3a:	fab0 fc80 	clz	ip, r0
   d8f3e:	f1ac 0c08 	sub.w	ip, ip, #8
   d8f42:	ebb2 020c 	subs.w	r2, r2, ip
   d8f46:	fa00 f00c 	lsl.w	r0, r0, ip
   d8f4a:	bfaa      	itet	ge
   d8f4c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   d8f50:	4252      	neglt	r2, r2
   d8f52:	4318      	orrge	r0, r3
   d8f54:	bfbc      	itt	lt
   d8f56:	40d0      	lsrlt	r0, r2
   d8f58:	4318      	orrlt	r0, r3
   d8f5a:	4770      	bx	lr
   d8f5c:	f092 0f00 	teq	r2, #0
   d8f60:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   d8f64:	bf06      	itte	eq
   d8f66:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   d8f6a:	3201      	addeq	r2, #1
   d8f6c:	3b01      	subne	r3, #1
   d8f6e:	e7b5      	b.n	d8edc <__addsf3+0x58>
   d8f70:	ea4f 0341 	mov.w	r3, r1, lsl #1
   d8f74:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   d8f78:	bf18      	it	ne
   d8f7a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   d8f7e:	d021      	beq.n	d8fc4 <__addsf3+0x140>
   d8f80:	ea92 0f03 	teq	r2, r3
   d8f84:	d004      	beq.n	d8f90 <__addsf3+0x10c>
   d8f86:	f092 0f00 	teq	r2, #0
   d8f8a:	bf08      	it	eq
   d8f8c:	4608      	moveq	r0, r1
   d8f8e:	4770      	bx	lr
   d8f90:	ea90 0f01 	teq	r0, r1
   d8f94:	bf1c      	itt	ne
   d8f96:	2000      	movne	r0, #0
   d8f98:	4770      	bxne	lr
   d8f9a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   d8f9e:	d104      	bne.n	d8faa <__addsf3+0x126>
   d8fa0:	0040      	lsls	r0, r0, #1
   d8fa2:	bf28      	it	cs
   d8fa4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   d8fa8:	4770      	bx	lr
   d8faa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   d8fae:	bf3c      	itt	cc
   d8fb0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   d8fb4:	4770      	bxcc	lr
   d8fb6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   d8fba:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   d8fbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d8fc2:	4770      	bx	lr
   d8fc4:	ea7f 6222 	mvns.w	r2, r2, asr #24
   d8fc8:	bf16      	itet	ne
   d8fca:	4608      	movne	r0, r1
   d8fcc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   d8fd0:	4601      	movne	r1, r0
   d8fd2:	0242      	lsls	r2, r0, #9
   d8fd4:	bf06      	itte	eq
   d8fd6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   d8fda:	ea90 0f01 	teqeq	r0, r1
   d8fde:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   d8fe2:	4770      	bx	lr

000d8fe4 <__aeabi_ui2f>:
   d8fe4:	f04f 0300 	mov.w	r3, #0
   d8fe8:	e004      	b.n	d8ff4 <__aeabi_i2f+0x8>
   d8fea:	bf00      	nop

000d8fec <__aeabi_i2f>:
   d8fec:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   d8ff0:	bf48      	it	mi
   d8ff2:	4240      	negmi	r0, r0
   d8ff4:	ea5f 0c00 	movs.w	ip, r0
   d8ff8:	bf08      	it	eq
   d8ffa:	4770      	bxeq	lr
   d8ffc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   d9000:	4601      	mov	r1, r0
   d9002:	f04f 0000 	mov.w	r0, #0
   d9006:	e01c      	b.n	d9042 <__aeabi_l2f+0x2a>

000d9008 <__aeabi_ul2f>:
   d9008:	ea50 0201 	orrs.w	r2, r0, r1
   d900c:	bf08      	it	eq
   d900e:	4770      	bxeq	lr
   d9010:	f04f 0300 	mov.w	r3, #0
   d9014:	e00a      	b.n	d902c <__aeabi_l2f+0x14>
   d9016:	bf00      	nop

000d9018 <__aeabi_l2f>:
   d9018:	ea50 0201 	orrs.w	r2, r0, r1
   d901c:	bf08      	it	eq
   d901e:	4770      	bxeq	lr
   d9020:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   d9024:	d502      	bpl.n	d902c <__aeabi_l2f+0x14>
   d9026:	4240      	negs	r0, r0
   d9028:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d902c:	ea5f 0c01 	movs.w	ip, r1
   d9030:	bf02      	ittt	eq
   d9032:	4684      	moveq	ip, r0
   d9034:	4601      	moveq	r1, r0
   d9036:	2000      	moveq	r0, #0
   d9038:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   d903c:	bf08      	it	eq
   d903e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   d9042:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   d9046:	fabc f28c 	clz	r2, ip
   d904a:	3a08      	subs	r2, #8
   d904c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   d9050:	db10      	blt.n	d9074 <__aeabi_l2f+0x5c>
   d9052:	fa01 fc02 	lsl.w	ip, r1, r2
   d9056:	4463      	add	r3, ip
   d9058:	fa00 fc02 	lsl.w	ip, r0, r2
   d905c:	f1c2 0220 	rsb	r2, r2, #32
   d9060:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d9064:	fa20 f202 	lsr.w	r2, r0, r2
   d9068:	eb43 0002 	adc.w	r0, r3, r2
   d906c:	bf08      	it	eq
   d906e:	f020 0001 	biceq.w	r0, r0, #1
   d9072:	4770      	bx	lr
   d9074:	f102 0220 	add.w	r2, r2, #32
   d9078:	fa01 fc02 	lsl.w	ip, r1, r2
   d907c:	f1c2 0220 	rsb	r2, r2, #32
   d9080:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   d9084:	fa21 f202 	lsr.w	r2, r1, r2
   d9088:	eb43 0002 	adc.w	r0, r3, r2
   d908c:	bf08      	it	eq
   d908e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   d9092:	4770      	bx	lr

000d9094 <__aeabi_ldivmod>:
   d9094:	b97b      	cbnz	r3, d90b6 <__aeabi_ldivmod+0x22>
   d9096:	b972      	cbnz	r2, d90b6 <__aeabi_ldivmod+0x22>
   d9098:	2900      	cmp	r1, #0
   d909a:	bfbe      	ittt	lt
   d909c:	2000      	movlt	r0, #0
   d909e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   d90a2:	e006      	blt.n	d90b2 <__aeabi_ldivmod+0x1e>
   d90a4:	bf08      	it	eq
   d90a6:	2800      	cmpeq	r0, #0
   d90a8:	bf1c      	itt	ne
   d90aa:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   d90ae:	f04f 30ff 	movne.w	r0, #4294967295
   d90b2:	f000 b9b1 	b.w	d9418 <__aeabi_idiv0>
   d90b6:	f1ad 0c08 	sub.w	ip, sp, #8
   d90ba:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d90be:	2900      	cmp	r1, #0
   d90c0:	db09      	blt.n	d90d6 <__aeabi_ldivmod+0x42>
   d90c2:	2b00      	cmp	r3, #0
   d90c4:	db1a      	blt.n	d90fc <__aeabi_ldivmod+0x68>
   d90c6:	f000 f835 	bl	d9134 <__udivmoddi4>
   d90ca:	f8dd e004 	ldr.w	lr, [sp, #4]
   d90ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d90d2:	b004      	add	sp, #16
   d90d4:	4770      	bx	lr
   d90d6:	4240      	negs	r0, r0
   d90d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d90dc:	2b00      	cmp	r3, #0
   d90de:	db1b      	blt.n	d9118 <__aeabi_ldivmod+0x84>
   d90e0:	f000 f828 	bl	d9134 <__udivmoddi4>
   d90e4:	f8dd e004 	ldr.w	lr, [sp, #4]
   d90e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d90ec:	b004      	add	sp, #16
   d90ee:	4240      	negs	r0, r0
   d90f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d90f4:	4252      	negs	r2, r2
   d90f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d90fa:	4770      	bx	lr
   d90fc:	4252      	negs	r2, r2
   d90fe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d9102:	f000 f817 	bl	d9134 <__udivmoddi4>
   d9106:	f8dd e004 	ldr.w	lr, [sp, #4]
   d910a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d910e:	b004      	add	sp, #16
   d9110:	4240      	negs	r0, r0
   d9112:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9116:	4770      	bx	lr
   d9118:	4252      	negs	r2, r2
   d911a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d911e:	f000 f809 	bl	d9134 <__udivmoddi4>
   d9122:	f8dd e004 	ldr.w	lr, [sp, #4]
   d9126:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d912a:	b004      	add	sp, #16
   d912c:	4252      	negs	r2, r2
   d912e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d9132:	4770      	bx	lr

000d9134 <__udivmoddi4>:
   d9134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9138:	468c      	mov	ip, r1
   d913a:	460e      	mov	r6, r1
   d913c:	4604      	mov	r4, r0
   d913e:	9d08      	ldr	r5, [sp, #32]
   d9140:	2b00      	cmp	r3, #0
   d9142:	d150      	bne.n	d91e6 <__udivmoddi4+0xb2>
   d9144:	428a      	cmp	r2, r1
   d9146:	4617      	mov	r7, r2
   d9148:	d96c      	bls.n	d9224 <__udivmoddi4+0xf0>
   d914a:	fab2 fe82 	clz	lr, r2
   d914e:	f1be 0f00 	cmp.w	lr, #0
   d9152:	d00b      	beq.n	d916c <__udivmoddi4+0x38>
   d9154:	f1ce 0420 	rsb	r4, lr, #32
   d9158:	fa20 f404 	lsr.w	r4, r0, r4
   d915c:	fa01 f60e 	lsl.w	r6, r1, lr
   d9160:	ea44 0c06 	orr.w	ip, r4, r6
   d9164:	fa02 f70e 	lsl.w	r7, r2, lr
   d9168:	fa00 f40e 	lsl.w	r4, r0, lr
   d916c:	ea4f 4917 	mov.w	r9, r7, lsr #16
   d9170:	0c22      	lsrs	r2, r4, #16
   d9172:	fbbc f0f9 	udiv	r0, ip, r9
   d9176:	fa1f f887 	uxth.w	r8, r7
   d917a:	fb09 c610 	mls	r6, r9, r0, ip
   d917e:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d9182:	fb00 f308 	mul.w	r3, r0, r8
   d9186:	42b3      	cmp	r3, r6
   d9188:	d909      	bls.n	d919e <__udivmoddi4+0x6a>
   d918a:	19f6      	adds	r6, r6, r7
   d918c:	f100 32ff 	add.w	r2, r0, #4294967295
   d9190:	f080 8122 	bcs.w	d93d8 <__udivmoddi4+0x2a4>
   d9194:	42b3      	cmp	r3, r6
   d9196:	f240 811f 	bls.w	d93d8 <__udivmoddi4+0x2a4>
   d919a:	3802      	subs	r0, #2
   d919c:	443e      	add	r6, r7
   d919e:	1af6      	subs	r6, r6, r3
   d91a0:	b2a2      	uxth	r2, r4
   d91a2:	fbb6 f3f9 	udiv	r3, r6, r9
   d91a6:	fb09 6613 	mls	r6, r9, r3, r6
   d91aa:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d91ae:	fb03 f808 	mul.w	r8, r3, r8
   d91b2:	45a0      	cmp	r8, r4
   d91b4:	d909      	bls.n	d91ca <__udivmoddi4+0x96>
   d91b6:	19e4      	adds	r4, r4, r7
   d91b8:	f103 32ff 	add.w	r2, r3, #4294967295
   d91bc:	f080 810a 	bcs.w	d93d4 <__udivmoddi4+0x2a0>
   d91c0:	45a0      	cmp	r8, r4
   d91c2:	f240 8107 	bls.w	d93d4 <__udivmoddi4+0x2a0>
   d91c6:	3b02      	subs	r3, #2
   d91c8:	443c      	add	r4, r7
   d91ca:	ebc8 0404 	rsb	r4, r8, r4
   d91ce:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d91d2:	2100      	movs	r1, #0
   d91d4:	2d00      	cmp	r5, #0
   d91d6:	d062      	beq.n	d929e <__udivmoddi4+0x16a>
   d91d8:	fa24 f40e 	lsr.w	r4, r4, lr
   d91dc:	2300      	movs	r3, #0
   d91de:	602c      	str	r4, [r5, #0]
   d91e0:	606b      	str	r3, [r5, #4]
   d91e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d91e6:	428b      	cmp	r3, r1
   d91e8:	d907      	bls.n	d91fa <__udivmoddi4+0xc6>
   d91ea:	2d00      	cmp	r5, #0
   d91ec:	d055      	beq.n	d929a <__udivmoddi4+0x166>
   d91ee:	2100      	movs	r1, #0
   d91f0:	e885 0041 	stmia.w	r5, {r0, r6}
   d91f4:	4608      	mov	r0, r1
   d91f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d91fa:	fab3 f183 	clz	r1, r3
   d91fe:	2900      	cmp	r1, #0
   d9200:	f040 8090 	bne.w	d9324 <__udivmoddi4+0x1f0>
   d9204:	42b3      	cmp	r3, r6
   d9206:	d302      	bcc.n	d920e <__udivmoddi4+0xda>
   d9208:	4282      	cmp	r2, r0
   d920a:	f200 80f8 	bhi.w	d93fe <__udivmoddi4+0x2ca>
   d920e:	1a84      	subs	r4, r0, r2
   d9210:	eb66 0603 	sbc.w	r6, r6, r3
   d9214:	2001      	movs	r0, #1
   d9216:	46b4      	mov	ip, r6
   d9218:	2d00      	cmp	r5, #0
   d921a:	d040      	beq.n	d929e <__udivmoddi4+0x16a>
   d921c:	e885 1010 	stmia.w	r5, {r4, ip}
   d9220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9224:	b912      	cbnz	r2, d922c <__udivmoddi4+0xf8>
   d9226:	2701      	movs	r7, #1
   d9228:	fbb7 f7f2 	udiv	r7, r7, r2
   d922c:	fab7 fe87 	clz	lr, r7
   d9230:	f1be 0f00 	cmp.w	lr, #0
   d9234:	d135      	bne.n	d92a2 <__udivmoddi4+0x16e>
   d9236:	1bf3      	subs	r3, r6, r7
   d9238:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d923c:	fa1f fc87 	uxth.w	ip, r7
   d9240:	2101      	movs	r1, #1
   d9242:	fbb3 f0f8 	udiv	r0, r3, r8
   d9246:	0c22      	lsrs	r2, r4, #16
   d9248:	fb08 3610 	mls	r6, r8, r0, r3
   d924c:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d9250:	fb0c f300 	mul.w	r3, ip, r0
   d9254:	42b3      	cmp	r3, r6
   d9256:	d907      	bls.n	d9268 <__udivmoddi4+0x134>
   d9258:	19f6      	adds	r6, r6, r7
   d925a:	f100 32ff 	add.w	r2, r0, #4294967295
   d925e:	d202      	bcs.n	d9266 <__udivmoddi4+0x132>
   d9260:	42b3      	cmp	r3, r6
   d9262:	f200 80ce 	bhi.w	d9402 <__udivmoddi4+0x2ce>
   d9266:	4610      	mov	r0, r2
   d9268:	1af6      	subs	r6, r6, r3
   d926a:	b2a2      	uxth	r2, r4
   d926c:	fbb6 f3f8 	udiv	r3, r6, r8
   d9270:	fb08 6613 	mls	r6, r8, r3, r6
   d9274:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d9278:	fb0c fc03 	mul.w	ip, ip, r3
   d927c:	45a4      	cmp	ip, r4
   d927e:	d907      	bls.n	d9290 <__udivmoddi4+0x15c>
   d9280:	19e4      	adds	r4, r4, r7
   d9282:	f103 32ff 	add.w	r2, r3, #4294967295
   d9286:	d202      	bcs.n	d928e <__udivmoddi4+0x15a>
   d9288:	45a4      	cmp	ip, r4
   d928a:	f200 80b5 	bhi.w	d93f8 <__udivmoddi4+0x2c4>
   d928e:	4613      	mov	r3, r2
   d9290:	ebcc 0404 	rsb	r4, ip, r4
   d9294:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d9298:	e79c      	b.n	d91d4 <__udivmoddi4+0xa0>
   d929a:	4629      	mov	r1, r5
   d929c:	4628      	mov	r0, r5
   d929e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d92a2:	f1ce 0120 	rsb	r1, lr, #32
   d92a6:	fa06 f30e 	lsl.w	r3, r6, lr
   d92aa:	fa07 f70e 	lsl.w	r7, r7, lr
   d92ae:	fa20 f901 	lsr.w	r9, r0, r1
   d92b2:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d92b6:	40ce      	lsrs	r6, r1
   d92b8:	ea49 0903 	orr.w	r9, r9, r3
   d92bc:	fbb6 faf8 	udiv	sl, r6, r8
   d92c0:	ea4f 4419 	mov.w	r4, r9, lsr #16
   d92c4:	fb08 661a 	mls	r6, r8, sl, r6
   d92c8:	fa1f fc87 	uxth.w	ip, r7
   d92cc:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
   d92d0:	fb0a f20c 	mul.w	r2, sl, ip
   d92d4:	429a      	cmp	r2, r3
   d92d6:	fa00 f40e 	lsl.w	r4, r0, lr
   d92da:	d90a      	bls.n	d92f2 <__udivmoddi4+0x1be>
   d92dc:	19db      	adds	r3, r3, r7
   d92de:	f10a 31ff 	add.w	r1, sl, #4294967295
   d92e2:	f080 8087 	bcs.w	d93f4 <__udivmoddi4+0x2c0>
   d92e6:	429a      	cmp	r2, r3
   d92e8:	f240 8084 	bls.w	d93f4 <__udivmoddi4+0x2c0>
   d92ec:	f1aa 0a02 	sub.w	sl, sl, #2
   d92f0:	443b      	add	r3, r7
   d92f2:	1a9b      	subs	r3, r3, r2
   d92f4:	fa1f f989 	uxth.w	r9, r9
   d92f8:	fbb3 f1f8 	udiv	r1, r3, r8
   d92fc:	fb08 3311 	mls	r3, r8, r1, r3
   d9300:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
   d9304:	fb01 f60c 	mul.w	r6, r1, ip
   d9308:	429e      	cmp	r6, r3
   d930a:	d907      	bls.n	d931c <__udivmoddi4+0x1e8>
   d930c:	19db      	adds	r3, r3, r7
   d930e:	f101 32ff 	add.w	r2, r1, #4294967295
   d9312:	d26b      	bcs.n	d93ec <__udivmoddi4+0x2b8>
   d9314:	429e      	cmp	r6, r3
   d9316:	d969      	bls.n	d93ec <__udivmoddi4+0x2b8>
   d9318:	3902      	subs	r1, #2
   d931a:	443b      	add	r3, r7
   d931c:	1b9b      	subs	r3, r3, r6
   d931e:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   d9322:	e78e      	b.n	d9242 <__udivmoddi4+0x10e>
   d9324:	f1c1 0e20 	rsb	lr, r1, #32
   d9328:	fa22 f40e 	lsr.w	r4, r2, lr
   d932c:	408b      	lsls	r3, r1
   d932e:	4323      	orrs	r3, r4
   d9330:	fa20 f70e 	lsr.w	r7, r0, lr
   d9334:	fa06 f401 	lsl.w	r4, r6, r1
   d9338:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   d933c:	fa26 f60e 	lsr.w	r6, r6, lr
   d9340:	433c      	orrs	r4, r7
   d9342:	fbb6 f9fc 	udiv	r9, r6, ip
   d9346:	0c27      	lsrs	r7, r4, #16
   d9348:	fb0c 6619 	mls	r6, ip, r9, r6
   d934c:	fa1f f883 	uxth.w	r8, r3
   d9350:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   d9354:	fb09 f708 	mul.w	r7, r9, r8
   d9358:	42b7      	cmp	r7, r6
   d935a:	fa02 f201 	lsl.w	r2, r2, r1
   d935e:	fa00 fa01 	lsl.w	sl, r0, r1
   d9362:	d908      	bls.n	d9376 <__udivmoddi4+0x242>
   d9364:	18f6      	adds	r6, r6, r3
   d9366:	f109 30ff 	add.w	r0, r9, #4294967295
   d936a:	d241      	bcs.n	d93f0 <__udivmoddi4+0x2bc>
   d936c:	42b7      	cmp	r7, r6
   d936e:	d93f      	bls.n	d93f0 <__udivmoddi4+0x2bc>
   d9370:	f1a9 0902 	sub.w	r9, r9, #2
   d9374:	441e      	add	r6, r3
   d9376:	1bf6      	subs	r6, r6, r7
   d9378:	b2a0      	uxth	r0, r4
   d937a:	fbb6 f4fc 	udiv	r4, r6, ip
   d937e:	fb0c 6614 	mls	r6, ip, r4, r6
   d9382:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
   d9386:	fb04 f808 	mul.w	r8, r4, r8
   d938a:	45b8      	cmp	r8, r7
   d938c:	d907      	bls.n	d939e <__udivmoddi4+0x26a>
   d938e:	18ff      	adds	r7, r7, r3
   d9390:	f104 30ff 	add.w	r0, r4, #4294967295
   d9394:	d228      	bcs.n	d93e8 <__udivmoddi4+0x2b4>
   d9396:	45b8      	cmp	r8, r7
   d9398:	d926      	bls.n	d93e8 <__udivmoddi4+0x2b4>
   d939a:	3c02      	subs	r4, #2
   d939c:	441f      	add	r7, r3
   d939e:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
   d93a2:	ebc8 0707 	rsb	r7, r8, r7
   d93a6:	fba0 8902 	umull	r8, r9, r0, r2
   d93aa:	454f      	cmp	r7, r9
   d93ac:	4644      	mov	r4, r8
   d93ae:	464e      	mov	r6, r9
   d93b0:	d314      	bcc.n	d93dc <__udivmoddi4+0x2a8>
   d93b2:	d029      	beq.n	d9408 <__udivmoddi4+0x2d4>
   d93b4:	b365      	cbz	r5, d9410 <__udivmoddi4+0x2dc>
   d93b6:	ebba 0304 	subs.w	r3, sl, r4
   d93ba:	eb67 0706 	sbc.w	r7, r7, r6
   d93be:	fa07 fe0e 	lsl.w	lr, r7, lr
   d93c2:	40cb      	lsrs	r3, r1
   d93c4:	40cf      	lsrs	r7, r1
   d93c6:	ea4e 0303 	orr.w	r3, lr, r3
   d93ca:	e885 0088 	stmia.w	r5, {r3, r7}
   d93ce:	2100      	movs	r1, #0
   d93d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d93d4:	4613      	mov	r3, r2
   d93d6:	e6f8      	b.n	d91ca <__udivmoddi4+0x96>
   d93d8:	4610      	mov	r0, r2
   d93da:	e6e0      	b.n	d919e <__udivmoddi4+0x6a>
   d93dc:	ebb8 0402 	subs.w	r4, r8, r2
   d93e0:	eb69 0603 	sbc.w	r6, r9, r3
   d93e4:	3801      	subs	r0, #1
   d93e6:	e7e5      	b.n	d93b4 <__udivmoddi4+0x280>
   d93e8:	4604      	mov	r4, r0
   d93ea:	e7d8      	b.n	d939e <__udivmoddi4+0x26a>
   d93ec:	4611      	mov	r1, r2
   d93ee:	e795      	b.n	d931c <__udivmoddi4+0x1e8>
   d93f0:	4681      	mov	r9, r0
   d93f2:	e7c0      	b.n	d9376 <__udivmoddi4+0x242>
   d93f4:	468a      	mov	sl, r1
   d93f6:	e77c      	b.n	d92f2 <__udivmoddi4+0x1be>
   d93f8:	3b02      	subs	r3, #2
   d93fa:	443c      	add	r4, r7
   d93fc:	e748      	b.n	d9290 <__udivmoddi4+0x15c>
   d93fe:	4608      	mov	r0, r1
   d9400:	e70a      	b.n	d9218 <__udivmoddi4+0xe4>
   d9402:	3802      	subs	r0, #2
   d9404:	443e      	add	r6, r7
   d9406:	e72f      	b.n	d9268 <__udivmoddi4+0x134>
   d9408:	45c2      	cmp	sl, r8
   d940a:	d3e7      	bcc.n	d93dc <__udivmoddi4+0x2a8>
   d940c:	463e      	mov	r6, r7
   d940e:	e7d1      	b.n	d93b4 <__udivmoddi4+0x280>
   d9410:	4629      	mov	r1, r5
   d9412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9416:	bf00      	nop

000d9418 <__aeabi_idiv0>:
   d9418:	4770      	bx	lr
   d941a:	bf00      	nop

000d941c <__cxa_atexit>:
   d941c:	b510      	push	{r4, lr}
   d941e:	4c05      	ldr	r4, [pc, #20]	; (d9434 <__cxa_atexit+0x18>)
   d9420:	4613      	mov	r3, r2
   d9422:	b12c      	cbz	r4, d9430 <__cxa_atexit+0x14>
   d9424:	460a      	mov	r2, r1
   d9426:	4601      	mov	r1, r0
   d9428:	2002      	movs	r0, #2
   d942a:	f3af 8000 	nop.w
   d942e:	bd10      	pop	{r4, pc}
   d9430:	4620      	mov	r0, r4
   d9432:	bd10      	pop	{r4, pc}
   d9434:	00000000 	.word	0x00000000

000d9438 <memcpy>:
   d9438:	b510      	push	{r4, lr}
   d943a:	1e43      	subs	r3, r0, #1
   d943c:	440a      	add	r2, r1
   d943e:	4291      	cmp	r1, r2
   d9440:	d004      	beq.n	d944c <memcpy+0x14>
   d9442:	f811 4b01 	ldrb.w	r4, [r1], #1
   d9446:	f803 4f01 	strb.w	r4, [r3, #1]!
   d944a:	e7f8      	b.n	d943e <memcpy+0x6>
   d944c:	bd10      	pop	{r4, pc}

000d944e <memmove>:
   d944e:	4288      	cmp	r0, r1
   d9450:	b510      	push	{r4, lr}
   d9452:	eb01 0302 	add.w	r3, r1, r2
   d9456:	d801      	bhi.n	d945c <memmove+0xe>
   d9458:	1e42      	subs	r2, r0, #1
   d945a:	e00b      	b.n	d9474 <memmove+0x26>
   d945c:	4298      	cmp	r0, r3
   d945e:	d2fb      	bcs.n	d9458 <memmove+0xa>
   d9460:	1881      	adds	r1, r0, r2
   d9462:	1ad2      	subs	r2, r2, r3
   d9464:	42d3      	cmn	r3, r2
   d9466:	d004      	beq.n	d9472 <memmove+0x24>
   d9468:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d946c:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d9470:	e7f8      	b.n	d9464 <memmove+0x16>
   d9472:	bd10      	pop	{r4, pc}
   d9474:	4299      	cmp	r1, r3
   d9476:	d004      	beq.n	d9482 <memmove+0x34>
   d9478:	f811 4b01 	ldrb.w	r4, [r1], #1
   d947c:	f802 4f01 	strb.w	r4, [r2, #1]!
   d9480:	e7f8      	b.n	d9474 <memmove+0x26>
   d9482:	bd10      	pop	{r4, pc}

000d9484 <memset>:
   d9484:	4402      	add	r2, r0
   d9486:	4603      	mov	r3, r0
   d9488:	4293      	cmp	r3, r2
   d948a:	d002      	beq.n	d9492 <memset+0xe>
   d948c:	f803 1b01 	strb.w	r1, [r3], #1
   d9490:	e7fa      	b.n	d9488 <memset+0x4>
   d9492:	4770      	bx	lr

000d9494 <srand>:
   d9494:	b538      	push	{r3, r4, r5, lr}
   d9496:	4b12      	ldr	r3, [pc, #72]	; (d94e0 <srand+0x4c>)
   d9498:	681c      	ldr	r4, [r3, #0]
   d949a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d949c:	4605      	mov	r5, r0
   d949e:	b9d3      	cbnz	r3, d94d6 <srand+0x42>
   d94a0:	2018      	movs	r0, #24
   d94a2:	f7fc fa6f 	bl	d5984 <malloc>
   d94a6:	f243 330e 	movw	r3, #13070	; 0x330e
   d94aa:	63a0      	str	r0, [r4, #56]	; 0x38
   d94ac:	8003      	strh	r3, [r0, #0]
   d94ae:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d94b2:	8043      	strh	r3, [r0, #2]
   d94b4:	f241 2334 	movw	r3, #4660	; 0x1234
   d94b8:	8083      	strh	r3, [r0, #4]
   d94ba:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d94be:	80c3      	strh	r3, [r0, #6]
   d94c0:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d94c4:	8103      	strh	r3, [r0, #8]
   d94c6:	2305      	movs	r3, #5
   d94c8:	8143      	strh	r3, [r0, #10]
   d94ca:	230b      	movs	r3, #11
   d94cc:	8183      	strh	r3, [r0, #12]
   d94ce:	2201      	movs	r2, #1
   d94d0:	2300      	movs	r3, #0
   d94d2:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d94d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d94d8:	2200      	movs	r2, #0
   d94da:	611d      	str	r5, [r3, #16]
   d94dc:	615a      	str	r2, [r3, #20]
   d94de:	bd38      	pop	{r3, r4, r5, pc}
   d94e0:	2003e260 	.word	0x2003e260

000d94e4 <strcpy>:
   d94e4:	4603      	mov	r3, r0
   d94e6:	f811 2b01 	ldrb.w	r2, [r1], #1
   d94ea:	f803 2b01 	strb.w	r2, [r3], #1
   d94ee:	2a00      	cmp	r2, #0
   d94f0:	d1f9      	bne.n	d94e6 <strcpy+0x2>
   d94f2:	4770      	bx	lr

000d94f4 <strlen>:
   d94f4:	4603      	mov	r3, r0
   d94f6:	f813 2b01 	ldrb.w	r2, [r3], #1
   d94fa:	2a00      	cmp	r2, #0
   d94fc:	d1fb      	bne.n	d94f6 <strlen+0x2>
   d94fe:	1a18      	subs	r0, r3, r0
   d9500:	3801      	subs	r0, #1
   d9502:	4770      	bx	lr

000d9504 <strncpy>:
   d9504:	b510      	push	{r4, lr}
   d9506:	4603      	mov	r3, r0
   d9508:	b142      	cbz	r2, d951c <strncpy+0x18>
   d950a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d950e:	f803 4b01 	strb.w	r4, [r3], #1
   d9512:	3a01      	subs	r2, #1
   d9514:	2c00      	cmp	r4, #0
   d9516:	d1f7      	bne.n	d9508 <strncpy+0x4>
   d9518:	441a      	add	r2, r3
   d951a:	e000      	b.n	d951e <strncpy+0x1a>
   d951c:	bd10      	pop	{r4, pc}
   d951e:	4293      	cmp	r3, r2
   d9520:	d002      	beq.n	d9528 <strncpy+0x24>
   d9522:	f803 4b01 	strb.w	r4, [r3], #1
   d9526:	e7fa      	b.n	d951e <strncpy+0x1a>
   d9528:	bd10      	pop	{r4, pc}

000d952a <link_code_end>:
	...

000d952c <dynalib_user>:
   d952c:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d953c:	0000 0000 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ....------------
   d954c:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 002d     ---------------.
   d955c:	6353 6e61 696e 676e 6620 726f 4920 4332     Scanning for I2C
   d956c:	4420 7665 6369 7365 2e2e 002e 3249 2043      Devices....I2C 
   d957c:	6564 6976 6563 6620 756f 646e 6120 2074     device found at 
   d958c:	6461 7264 7365 2073 7830 3000 2000 2120     address 0x.0.  !
   d959c:	5500 6b6e 6f6e 2077 7265 6f72 2072 7461     .Unknow error at
   d95ac:	6120 6464 6572 7373 3020 0078 6f4e 4920      address 0x.No I
   d95bc:	4332 6420 7665 6369 7365 6620 756f 646e     2C devices found
   d95cc:	000a 6f64 656e 000a 490a 4332 5320 6163     ..done...I2C Sca
   d95dc:	6e6e 7265 4300 756f 646c 6e20 746f 6620     nner.Could not f
   d95ec:	6e69 2064 2061 6176 696c 2064 4d42 3245     ind a valid BME2
   d95fc:	3038 7320 6e65 6f73 2c72 6320 6568 6b63     80 sensor, check
   d960c:	7720 7269 6e69 2c67 6120 6464 6572 7373      wiring, address
   d961c:	202c 6573 736e 726f 4920 2144 5300 6e65     , sensor ID!.Sen
   d962c:	6f73 4972 2044 6177 3a73 3020 0078 2020     sorID was: 0x.  
   d963c:	2020 2020 2020 4449 6f20 2066 7830 4646           ID of 0xFF
   d964c:	7020 6f72 6162 6c62 2079 656d 6e61 2073      probably means 
   d965c:	2061 6162 2064 6461 7264 7365 2c73 6120     a bad address, a
   d966c:	4220 504d 3120 3038 6f20 2072 4d42 2050      BMP 180 or BMP 
   d967c:	3830 0a35 2000 2020 4449 6f20 2066 7830     085..   ID of 0x
   d968c:	3635 302d 3578 2038 6572 7270 7365 6e65     56-0x58 represen
   d969c:	7374 6120 4220 504d 3220 3038 0a2c 2000     ts a BMP 280,.. 
   d96ac:	2020 2020 2020 4920 2044 666f 3020 3678            ID of 0x6
   d96bc:	2030 6572 7270 7365 6e65 7374 6120 4220     0 represents a B
   d96cc:	454d 3220 3038 0a2e 2000 2020 2020 2020     ME 280...       
   d96dc:	4920 2044 666f 3020 3678 2031 6572 7270      ID of 0x61 repr
   d96ec:	7365 6e65 7374 6120 4220 454d 3620 3038     esents a BME 680
   d96fc:	0a2e 2d00 202d 6544 6166 6c75 2074 6554     ...-- Default Te
   d970c:	7473 2d20 002d 6554 706d 7265 7461 7275     st --.Temperatur
   d971c:	2065 203d 2000 432a 5000 6572 7373 7275     e = . *C.Pressur
   d972c:	2065 203d 2000 5068 0061 7041 7270 786f     e = . hPa.Approx
   d973c:	202e 6c41 6974 7574 6564 3d20 0020 6d20     . Altitude = . m
   d974c:	4800 6d75 6469 7469 2079 203d 2000 0025     .Humidity = . %.
   d975c:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 442d 7461     -------------Dat
   d976c:	2061 6f74 5020 6275 696c 6873 2d2d 2d2d     a to Publish----
   d977c:	2d2d 2d2d 2d2d 2d2d 2d2d 002d 2d2d 2d2d     -----------.----
   d978c:	2d2d 2d2d 2d2d 2d2d 2d2d 452d 646e 5020     -----------End P
   d979c:	6275 696c 6873 2d2d 2d2d 2d2d 2d2d 2d2d     ublish----------
   d97ac:	2d2d 2d2d 2d2d 002d 6172 6873 7061 6900     -------.rashap.i
   d97bc:	2e6f 6461 6661 7572 7469 632e 6d6f 3500     o.adafruit.com.5
   d97cc:	3839 3631 6639 3361 6162 3439 3336 3936     98169fa3ba946369
   d97dc:	3134 3361 3033 3739 6536 3234 3265 0063     41a330976e42e2c.
   d97ec:	6172 6873 7061 662f 6565 7364 482f 6d6f     rashap/feeds/Hom
   d97fc:	5f65 6554 706d 7265 7461 7275 0065 6172     e_Temperature.ra
   d980c:	6873 7061 662f 6565 7364 502f 6572 7373     shap/feeds/Press
   d981c:	7275 0065 6172 6873 7061 662f 6565 7364     ure.rashap/feeds
   d982c:	522f 6c65 7461 7669 5f65 7548 696d 6964     /Relative_Humidi
   d983c:	7974 0000                                   ty..

000d9840 <_ZTVN8particle13__SPISettingsE>:
	...
   d9848:	4589 000d 6564 6166 6c75 2074 4d00 4253     .E..default .MSB
   d9858:	4c00 4253 3c00 5053 5349 7465 6974 676e     .LSB.<SPISetting
   d9868:	2073 6564 6166 6c75 3e74 3c00 5053 5349     s default>.<SPIS
   d9878:	7465 6974 676e 2073 7325 6c25 2075 7325     ettings %s%lu %s
   d9888:	4d20 444f 2545 3e64 0000 0000                MODE%d>....

000d9894 <_ZTV19Adafruit_MQTT_SPARK>:
	...
   d989c:	40cd 000d 44c9 000d 4f17 000d 4fc3 000d     .@...D...O...O..
   d98ac:	4ff5 000d 4f2b 000d 4f6b 000d               .O..+O..kO..

000d98b8 <_ZTV13Adafruit_MQTT>:
	...
   d98c8:	40a9 000d 40a9 000d 40a9 000d 40a9 000d     .@...@...@...@..
   d98d8:	40a9 000d 5b20 7830 5d00 202c 0a00 0009     .@.. [0x.], ....
   d98e8:	7244 706f 6570 2064 2061 6170 6b63 7465     Dropped a packet
   d98f8:	5500 6b6e 6f6e 6e77 6520 7272 726f 4d00     .Unknown error.M
   d9908:	5451 0054 2525 6425 252e 6664 4600 6961     QTT.%%%d.%df.Fai
   d9918:	656c 2064 6f74 7320 6275 6373 6972 6562     led to subscribe
   d9928:	4300 6e6f 656e 7463 6f69 206e 6166 6c69     .Connection fail
   d9938:	6465 5400 6568 5320 7265 6576 2072 6f64     ed.The Server do
   d9948:	7365 6e20 746f 7320 7075 6f70 7472 7420     es not support t
   d9958:	6568 6c20 7665 6c65 6f20 2066 6874 2065     he level of the 
   d9968:	514d 5454 7020 6f72 6f74 6f63 206c 6572     MQTT protocol re
   d9978:	7571 7365 6574 0064 6854 2065 6c43 6569     quested.The Clie
   d9988:	746e 6920 6564 746e 6669 6569 2072 7369     nt identifier is
   d9998:	6320 726f 6572 7463 5520 4654 382d 6220      correct UTF-8 b
   d99a8:	7475 6e20 746f 6120 6c6c 776f 6465 6220     ut not allowed b
   d99b8:	2079 6874 2065 6553 7672 7265 5400 6568     y the Server.The
   d99c8:	4d20 5451 2054 6573 7672 6369 2065 7369      MQTT service is
   d99d8:	7520 616e 6176 6c69 6261 656c 5400 6568      unavailable.The
   d99e8:	6420 7461 2061 6e69 7420 6568 7520 6573      data in the use
   d99f8:	2072 616e 656d 6f20 2072 6170 7373 6f77     r name or passwo
   d9a08:	6472 6920 2073 616d 666c 726f 656d 0064     rd is malformed.
   d9a18:	6f4e 2074 7561 6874 726f 7a69 6465 7420     Not authorized t
   d9a28:	206f 6f63 6e6e 6365 0074 7845 6563 6465     o connect.Exceed
   d9a38:	6465 7220 6365 6e6f 656e 7463 7220 7461     ed reconnect rat
   d9a48:	2065 696c 696d 2e74 5020 656c 7361 2065     e limit. Please 
   d9a58:	7274 2079 6761 6961 206e 616c 6574 2e72     try again later.
   d9a68:	5900 756f 6820 7661 2065 6562 6e65 6220     .You have been b
   d9a78:	6e61 656e 2064 7266 6d6f 6320 6e6f 656e     anned from conne
   d9a88:	7463 6e69 2e67 5020 656c 7361 2065 6f63     cting. Please co
   d9a98:	746e 6361 2074 6874 2065 514d 5454 7320     ntact the MQTT s
   d9aa8:	7265 6576 2072 6461 696d 696e 7473 6172     erver administra
   d9ab8:	6f74 2072 6f66 2072 6f6d 6572 6420 7465     tor for more det
   d9ac8:	6961 736c 002e 0000                         ails....

000d9ad0 <_ZTVN5spark13EthernetClassE>:
	...
   d9ad8:	5a33 000d 5a29 000d 5a1f 000d 5a15 000d     3Z..)Z...Z...Z..
   d9ae8:	5a09 000d 59fd 000d 59f1 000d 59e9 000d     .Z...Y...Y...Y..
   d9af8:	59df 000d 59d5 000d 6ce9 000d               .Y...Y...l..

000d9b04 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d9b04:	0800 1810 2820 3830 616e 006e 766f 0066     .... (08nan.ovf.
   d9b14:	6e69 0066 6162 6475 5300 7265 6169 006c     inf.baud.Serial.
   d9b24:	6553 6972 6c61 0031 7974 6570 7000 7261     Serial1.type.par
   d9b34:	6d61 6300 646d 6900 0064 6e68 0064 7473     am.cmd.id.hnd.st
   d9b44:	6d72 6600 6c69 0074 766c 006c 6461 4864     rm.filt.lvl.addH
   d9b54:	6e61 6c64 7265 7200 6d65 766f 4865 6e61     andler.removeHan
   d9b64:	6c64 7265 6500 756e 486d 6e61 6c64 7265     dler.enumHandler
   d9b74:	0073 534a 4e4f 7453 6572 6d61 6f4c 4867     s.JSONStreamLogH
   d9b84:	6e61 6c64 7265 6100 7070 2500 3130 7530     andler.app.%010u
   d9b94:	0020 205d 2800 3a29 0020 5b20 6300 646f      .] .(): . [.cod
   d9ba4:	2065 203d 2500 0069 6564 6174 6c69 2073     e = .%i.details 
   d9bb4:	203d 0d00 000a 6e6c 6600 006e 6f63 6564     = ....ln.fn.code
   d9bc4:	6400 7465 6961 006c 6f6e 656e 7400 6172     .detail.none.tra
   d9bd4:	6563 6900 666e 006f 6177 6e72 7000 6e61     ce.info.warn.pan
   d9be4:	6369 6100 6c6c 5a00 2500 302b 6433 253a     ic.all.Z.%+03d:%
   d9bf4:	3230 0075 5925 252d 2d6d 6425 2554 3a48     02u.%Y-%m-%dT%H:
   d9c04:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000d9c14 <_ZTV9IPAddress>:
	...
   d9c1c:	60d1 000d 60c1 000d 60c3 000d               .`...`...`..

000d9c28 <_ZTV9USBSerial>:
	...
   d9c30:	61d5 000d 6225 000d 6233 000d 5c41 000d     .a..%b..3b..A\..
   d9c40:	6211 000d 61d7 000d 61ed 000d 621f 000d     .b...a...a...b..
   d9c50:	6203 000d 61d1 000d                         .b...a..

000d9c58 <_ZTV11USARTSerial>:
	...
   d9c60:	62ed 000d 633d 000d 634b 000d 5c41 000d     .b..=c..Kc..A\..
   d9c70:	6301 000d 6323 000d 630f 000d 6337 000d     .c..#c...c..7c..
   d9c80:	62ef 000d 62f3 000d                         .b...b..

000d9c88 <_ZTV7TwoWire>:
	...
   d9c90:	63f1 000d 643b 000d 6413 000d 63f3 000d     .c..;d...d...c..
   d9ca0:	641b 000d 6423 000d 642b 000d 6433 000d     .d..#d..+d..3d..

000d9cb0 <_ZTVN5spark9MeshClassE>:
	...
   d9cb8:	6557 000d 654d 000d 6543 000d 6539 000d     We..Me..Ce..9e..
   d9cc8:	652d 000d 6521 000d 6515 000d 650d 000d     -e..!e...e...e..
   d9cd8:	6503 000d 64f9 000d 6ce9 000d               .e...d...l..

000d9ce4 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d9cec:	66fd 000d 6703 000d 6beb 000d 6711 000d     .f...g...k...g..
   d9cfc:	66ff 000d                                   .f..

000d9d00 <_ZTV9TCPClient>:
	...
   d9d08:	40d1 000d 4105 000d 6675 000d 668f 000d     .@...A..uf...f..
   d9d18:	6a91 000d 67e3 000d 67b5 000d 66b9 000d     .j...g...g...f..
   d9d28:	696d 000d 6869 000d 6817 000d 6a61 000d     mi..ih...h..aj..
   d9d38:	66bb 000d 66f3 000d 66a1 000d 6715 000d     .f...f...f...g..
   d9d48:	6795 000d 6977 6972 676e 7200 6365 2076     .g..wiring.recv 
   d9d58:	7265 6f72 2072 203d 6425 0000               error = %d..

000d9d64 <_ZTVN5spark9WiFiClassE>:
	...
   d9d6c:	6c61 000d 6c57 000d 6c4d 000d 6c03 000d     al..Wl..Ml...l..
   d9d7c:	6c41 000d 6c35 000d 6c29 000d 6c21 000d     Al..5l..)l..!l..
   d9d8c:	6c17 000d 6c0d 000d 6ce9 000d               .l...l...l..

000d9d98 <_ZTVN5spark12NetworkClassE>:
	...
   d9da0:	6c81 000d 6c8b 000d 6c95 000d 6c9f 000d     .l...l...l...l..
   d9db0:	6ca9 000d 6cb5 000d 6cc1 000d 6ccd 000d     .l...l...l...l..
   d9dc0:	6cd5 000d 6cdf 000d 6ce9 000d               .l...l...l..

000d9dcc <_ZSt7nothrow>:
   d9dcc:	0000 0000 6f70 0077 0000 0000               ....pow.....

000d9dd8 <TWO52>:
   d9dd8:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

000d9de8 <__sf_fake_stdin>:
	...

000d9e08 <__sf_fake_stdout>:
	...

000d9e28 <__sf_fake_stderr>:
	...

000d9e48 <link_const_variable_data_end>:
   d9e48:	000d44d9 	.word	0x000d44d9
   d9e4c:	000d4f13 	.word	0x000d4f13
   d9e50:	000d5055 	.word	0x000d5055
   d9e54:	000d54a9 	.word	0x000d54a9
   d9e58:	000d5a3d 	.word	0x000d5a3d
   d9e5c:	000d5bd5 	.word	0x000d5bd5
   d9e60:	000d5c19 	.word	0x000d5c19
   d9e64:	000d5f4d 	.word	0x000d5f4d
   d9e68:	000d5f5d 	.word	0x000d5f5d
   d9e6c:	000d5f95 	.word	0x000d5f95
   d9e70:	000d6625 	.word	0x000d6625
   d9e74:	000d6c6d 	.word	0x000d6c6d
   d9e78:	000d6db5 	.word	0x000d6db5
   d9e7c:	000d6f75 	.word	0x000d6f75
   d9e80:	000d6ff9 	.word	0x000d6ff9
   d9e84:	000d70bd 	.word	0x000d70bd
   d9e88:	000d7181 	.word	0x000d7181

000d9e8c <link_constructors_end>:
   d9e8c:	00000000 	.word	0x00000000
